
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007988  08007988  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007988  08007988  00008988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007990  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000064  080079f4  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080079f4  0000954c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b96  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3e  00000000  00000000  0001cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0001fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f93  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d96  00000000  00000000  00021dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018242  00000000  00000000  0003bb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44ff  00000000  00000000  00053d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f829a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  000f82e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fdb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b04 	.word	0x08006b04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006b04 	.word	0x08006b04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <__NVIC_SystemReset+0x24>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000582:	4904      	ldr	r1, [pc, #16]	@ (8000594 <__NVIC_SystemReset+0x24>)
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <__NVIC_SystemReset+0x28>)
 8000586:	4313      	orrs	r3, r2
 8000588:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800058a:	f3bf 8f4f 	dsb	sy
}
 800058e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <__NVIC_SystemReset+0x20>
 8000594:	e000ed00 	.word	0xe000ed00
 8000598:	05fa0004 	.word	0x05fa0004

0800059c <HAL_GPIO_EXTI_Callback>:
uint8_t capreadbuffer[10] = {};
uint8_t pwm_vibro_start = 0;

extern uint16_t tim_var;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d102      	bne.n	80005b2 <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
	}
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200003bc 	.word	0x200003bc

080005c4 <ADC_Select_Channel>:



void ADC_Select_Channel(uint32_t ch) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef conf = {
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	2301      	movs	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	2304      	movs	r3, #4
 80005e4:	613b      	str	r3, [r7, #16]
        .Channel = ch,
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_84CYCLES,
    };
    if (HAL_ADC_ConfigChannel(&hadc1, &conf) != HAL_OK) {
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <ADC_Select_Channel+0x40>)
 80005ee:	f001 fdd1 	bl	8002194 <HAL_ADC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <ADC_Select_Channel+0x38>
        Error_Handler();
 80005f8:	f000 ffc6 	bl	8001588 <Error_Handler>
    }
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000080 	.word	0x20000080

08000608 <button_state_determ>:
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
	ST7735_DrawImage(x, y, w, h, img_buffer);
}

void button_state_determ()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

		  uint32_t ms = HAL_GetTick();
 800060e:	f001 fbcd 	bl	8001dac <HAL_GetTick>
 8000612:	6078      	str	r0, [r7, #4]
		  uint8_t key_state_l = HAL_GPIO_ReadPin(BUT_0_GPIO_Port, BUT_0_Pin);
 8000614:	2108      	movs	r1, #8
 8000616:	4850      	ldr	r0, [pc, #320]	@ (8000758 <button_state_determ+0x150>)
 8000618:	f002 fd5a 	bl	80030d0 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	70fb      	strb	r3, [r7, #3]

		  if(key_state_l == 1 && !short_state_l && (ms - time_key_l) > 50)
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d113      	bne.n	800064e <button_state_determ+0x46>
 8000626:	4b4d      	ldr	r3, [pc, #308]	@ (800075c <button_state_determ+0x154>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10f      	bne.n	800064e <button_state_determ+0x46>
 800062e:	4b4c      	ldr	r3, [pc, #304]	@ (8000760 <button_state_determ+0x158>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2b32      	cmp	r3, #50	@ 0x32
 8000638:	d909      	bls.n	800064e <button_state_determ+0x46>
		  {
		    short_state_l = 1;
 800063a:	4b48      	ldr	r3, [pc, #288]	@ (800075c <button_state_determ+0x154>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
		    long_state_l = 0;
 8000640:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <button_state_determ+0x15c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 8000646:	4a46      	ldr	r2, [pc, #280]	@ (8000760 <button_state_determ+0x158>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	e02e      	b.n	80006ac <button_state_determ+0xa4>
		  }
		  else if(key_state_l == 1 && !long_state_l && (ms - time_key_l) > 700)
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d111      	bne.n	8000678 <button_state_determ+0x70>
 8000654:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <button_state_determ+0x15c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10d      	bne.n	8000678 <button_state_determ+0x70>
 800065c:	4b40      	ldr	r3, [pc, #256]	@ (8000760 <button_state_determ+0x158>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000668:	d906      	bls.n	8000678 <button_state_determ+0x70>
		  {

		    long_state_l = 1;
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <button_state_determ+0x15c>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
		    but_state_left = BUT_LONG;
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <button_state_determ+0x160>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e019      	b.n	80006ac <button_state_determ+0xa4>
		   // sleep_counter = 0;
		  }
		  else if(key_state_l == 0 && short_state_l && (ms - time_key_l) > 50)
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d116      	bne.n	80006ac <button_state_determ+0xa4>
 800067e:	4b37      	ldr	r3, [pc, #220]	@ (800075c <button_state_determ+0x154>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d012      	beq.n	80006ac <button_state_determ+0xa4>
 8000686:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <button_state_determ+0x158>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	2b32      	cmp	r3, #50	@ 0x32
 8000690:	d90c      	bls.n	80006ac <button_state_determ+0xa4>
		  {
		    short_state_l = 0;
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <button_state_determ+0x154>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 8000698:	4a31      	ldr	r2, [pc, #196]	@ (8000760 <button_state_determ+0x158>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]

		    if(!long_state_l)
 800069e:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <button_state_determ+0x15c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <button_state_determ+0xa4>
		    {
		      // левая кнопка , действие на короткое нажатие
		    	but_state_left = BUT_SHORT;
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <button_state_determ+0x160>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	701a      	strb	r2, [r3, #0]
		    	//sleep_counter = 0;
		    }
		  }
	          ms = HAL_GetTick();
 80006ac:	f001 fb7e 	bl	8001dac <HAL_GetTick>
 80006b0:	6078      	str	r0, [r7, #4]
		  	  uint8_t key_state_r = HAL_GPIO_ReadPin(BUT_1_GPIO_Port, BUT_1_Pin);
 80006b2:	2104      	movs	r1, #4
 80006b4:	4828      	ldr	r0, [pc, #160]	@ (8000758 <button_state_determ+0x150>)
 80006b6:	f002 fd0b 	bl	80030d0 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	70bb      	strb	r3, [r7, #2]

		  	  if(key_state_r == 1 && !short_state_r && (ms - time_key_r) > 50)
 80006be:	78bb      	ldrb	r3, [r7, #2]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d113      	bne.n	80006ec <button_state_determ+0xe4>
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <button_state_determ+0x164>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10f      	bne.n	80006ec <button_state_determ+0xe4>
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <button_state_determ+0x168>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	2b32      	cmp	r3, #50	@ 0x32
 80006d6:	d909      	bls.n	80006ec <button_state_determ+0xe4>
		  	  {
		  	    short_state_r = 1;
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <button_state_determ+0x164>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
		  	    long_state_r = 0;
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <button_state_determ+0x16c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <button_state_determ+0x168>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	e02e      	b.n	800074a <button_state_determ+0x142>
		  	  }
		  	  else if(key_state_r == 1 && !long_state_r && (ms - time_key_r) > 700)
 80006ec:	78bb      	ldrb	r3, [r7, #2]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d111      	bne.n	8000716 <button_state_determ+0x10e>
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <button_state_determ+0x16c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10d      	bne.n	8000716 <button_state_determ+0x10e>
 80006fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <button_state_determ+0x168>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000706:	d906      	bls.n	8000716 <button_state_determ+0x10e>
		  	  {
		  		// левая кнопка , действие на длительное нажатие
		  		but_state_right = BUT_LONG;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <button_state_determ+0x170>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
		  		long_state_r = 1;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <button_state_determ+0x16c>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e019      	b.n	800074a <button_state_determ+0x142>
		  		//sleep_counter = 0;
		  	  }
		  	  else if(key_state_r == 0 && short_state_r && (ms - time_key_r) > 50)
 8000716:	78bb      	ldrb	r3, [r7, #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d116      	bne.n	800074a <button_state_determ+0x142>
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <button_state_determ+0x164>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d012      	beq.n	800074a <button_state_determ+0x142>
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <button_state_determ+0x168>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	2b32      	cmp	r3, #50	@ 0x32
 800072e:	d90c      	bls.n	800074a <button_state_determ+0x142>
		  	  {
		  	    short_state_r = 0;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <button_state_determ+0x164>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <button_state_determ+0x168>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6013      	str	r3, [r2, #0]

		  	 if(!long_state_r)
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <button_state_determ+0x16c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <button_state_determ+0x142>
		  	    {
		  		 	 but_state_right = BUT_SHORT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <button_state_determ+0x170>)
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
		  		 	 //sleep_counter = 0;
		  	    }
		  	  }
		  	 but_flag_ext = 0;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <button_state_determ+0x174>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020800 	.word	0x40020800
 800075c:	200003bf 	.word	0x200003bf
 8000760:	200003c4 	.word	0x200003c4
 8000764:	200003c0 	.word	0x200003c0
 8000768:	200003bd 	.word	0x200003bd
 800076c:	200003c8 	.word	0x200003c8
 8000770:	200003cc 	.word	0x200003cc
 8000774:	200003c9 	.word	0x200003c9
 8000778:	200003be 	.word	0x200003be
 800077c:	200003d0 	.word	0x200003d0

08000780 <but_state_reset>:

void but_state_reset()
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	    but_state_left = BUT_RESET;
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <but_state_reset+0x1c>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	    but_state_right = BUT_RESET;
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <but_state_reset+0x20>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200003bd 	.word	0x200003bd
 80007a0:	200003be 	.word	0x200003be

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09a      	sub	sp, #104	@ 0x68
 80007a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f001 fa99 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 fa63 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 fdfb 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 80007b6:	f000 fdd1 	bl	800135c <MX_DMA_Init>
  MX_I2C1_Init();
 80007ba:	f000 fb1d 	bl	8000df8 <MX_I2C1_Init>
  MX_RTC_Init();
 80007be:	f000 fb49 	bl	8000e54 <MX_RTC_Init>
  MX_SPI1_Init();
 80007c2:	f000 fb6d 	bl	8000ea0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80007c6:	f000 fac5 	bl	8000d54 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007ca:	f000 fcb5 	bl	8001138 <MX_TIM3_Init>
  MX_TIM2_Init();
 80007ce:	f000 fc3d 	bl	800104c <MX_TIM2_Init>
  MX_TIM4_Init();
 80007d2:	f000 fd27 	bl	8001224 <MX_TIM4_Init>
  MX_TIM1_Init();
 80007d6:	f000 fb99 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM5_Init();
 80007da:	f000 fd71 	bl	80012c0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  int32_t CH1_DC = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
//  uint8_t current_led = 0;
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007e2:	2108      	movs	r1, #8
 80007e4:	48a6      	ldr	r0, [pc, #664]	@ (8000a80 <main+0x2dc>)
 80007e6:	f004 f9d1 	bl	8004b8c <HAL_TIM_PWM_Start>
 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 // TIM1->CCR1 = 50;

  HAL_TIM_Base_Start_IT(&htim4);
 80007ea:	48a6      	ldr	r0, [pc, #664]	@ (8000a84 <main+0x2e0>)
 80007ec:	f004 f912 	bl	8004a14 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f6:	48a4      	ldr	r0, [pc, #656]	@ (8000a88 <main+0x2e4>)
 80007f8:	f002 fc82 	bl	8003100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000802:	48a1      	ldr	r0, [pc, #644]	@ (8000a88 <main+0x2e4>)
 8000804:	f002 fc7c 	bl	8003100 <HAL_GPIO_WritePin>

  ST7735_Init();
 8000808:	f005 f9b8 	bl	8005b7c <ST7735_Init>
  ST7735_InvertColors(0);
 800080c:	2000      	movs	r0, #0
 800080e:	f005 fb22 	bl	8005e56 <ST7735_InvertColors>
  W25qxx_Init();
 8000812:	f005 fc05 	bl	8006020 <W25qxx_Init>
 // MX_I2C1_Init();
  //touch_init();

  ST7735_FillScreen(ST7735_BG_DEF);
 8000816:	f641 1025 	movw	r0, #6437	@ 0x1925
 800081a:	f005 fb0b 	bl	8005e34 <ST7735_FillScreen>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000824:	4899      	ldr	r0, [pc, #612]	@ (8000a8c <main+0x2e8>)
 8000826:	f002 fc6b 	bl	8003100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000830:	4896      	ldr	r0, [pc, #600]	@ (8000a8c <main+0x2e8>)
 8000832:	f002 fc65 	bl	8003100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083c:	4893      	ldr	r0, [pc, #588]	@ (8000a8c <main+0x2e8>)
 800083e:	f002 fc5f 	bl	8003100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DFU_FORCE_GPIO_Port, DFU_FORCE_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000848:	4890      	ldr	r0, [pc, #576]	@ (8000a8c <main+0x2e8>)
 800084a:	f002 fc59 	bl	8003100 <HAL_GPIO_WritePin>


 // HAL_GPIO_WritePin(DFU_FORCE_GPIO_Port, DFU_FORCE_Pin, GPIO_PIN_SET);

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800084e:	4b90      	ldr	r3, [pc, #576]	@ (8000a90 <main+0x2ec>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	2b02      	cmp	r3, #2
 8000858:	d109      	bne.n	800086e <main+0xca>
    {
  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800085a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a90 <main+0x2ec>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a8c      	ldr	r2, [pc, #560]	@ (8000a90 <main+0x2ec>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6013      	str	r3, [r2, #0]
  	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000866:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800086a:	f002 fdd1 	bl	8003410 <HAL_PWR_DisableWakeUpPin>
    }

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800086e:	4b88      	ldr	r3, [pc, #544]	@ (8000a90 <main+0x2ec>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a87      	ldr	r2, [pc, #540]	@ (8000a90 <main+0x2ec>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6013      	str	r3, [r2, #0]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800087a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800087e:	f002 fdb5 	bl	80033ec <HAL_PWR_EnableWakeUpPin>



 // HAL_I2C_Master_Transmit(&hi2c1, 0x5B, &comand, 1, 0);

  uint16_t chipid = 0x5B;
 8000882:	235b      	movs	r3, #91	@ 0x5b
 8000884:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  uint16_t regmemadd = 0x2B;
 8000888:	232b      	movs	r3, #43	@ 0x2b
 800088a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint16_t regmemadd_size = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  uint8_t buf[1] = {0x0};
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t bufbyte = 0x13;
 800089a:	2313      	movs	r3, #19
 800089c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  uint8_t bufr[1] = {0,0};
 80008a0:	2300      	movs	r3, #0
 80008a2:	773b      	strb	r3, [r7, #28]
  uint8_t test1 = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40



  uint8_t touch_set = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint8_t touch_end_flag = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint8_t ON_status = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  int8_t first_touch = -1;
 80008bc:	23ff      	movs	r3, #255	@ 0xff
 80008be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  int8_t second_touch = -1;
 80008c2:	23ff      	movs	r3, #255	@ 0xff
 80008c4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint8_t touch_direction = 0; //1 -up ,2-down
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  uint8_t false_click_scrolling = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  uint8_t touch_thrsh[5] = {THRESH_EL0-3, THRESH_EL1-3, THRESH_EL2-3, THRESH_EL3-3, THRESH_EL4-3};
 80008d4:	4a6f      	ldr	r2, [pc, #444]	@ (8000a94 <main+0x2f0>)
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008de:	6018      	str	r0, [r3, #0]
 80008e0:	3304      	adds	r3, #4
 80008e2:	7019      	strb	r1, [r3, #0]
  uint8_t left_treshold = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  uint8_t right_treshold = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint8_t xt = 50;
 80008f0:	2332      	movs	r3, #50	@ 0x32
 80008f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t test_inc = 1000;
 80008f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
  uint8_t ipic = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TIM3->CCR3 = 50;
 8000902:	4b65      	ldr	r3, [pc, #404]	@ (8000a98 <main+0x2f4>)
 8000904:	2232      	movs	r2, #50	@ 0x32
 8000906:	63da      	str	r2, [r3, #60]	@ 0x3c

  uint16_t conduct0 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint16_t conduct1 = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t conduct2 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t conduct_avg = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint16_t adc_values[3];
  uint32_t channels[] = {
 8000918:	4a60      	ldr	r2, [pc, #384]	@ (8000a9c <main+0x2f8>)
 800091a:	463b      	mov	r3, r7
 800091c:	ca07      	ldmia	r2, {r0, r1, r2}
 800091e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  button_state_determ();
 8000922:	f7ff fe71 	bl	8000608 <button_state_determ>
	  if(but_state_right == BUT_LONG)
 8000926:	4b5e      	ldr	r3, [pc, #376]	@ (8000aa0 <main+0x2fc>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d107      	bne.n	800093e <main+0x19a>
	  	  {
		  but_state_reset();
 800092e:	f7ff ff27 	bl	8000780 <but_state_reset>
		  HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000936:	f001 fa45 	bl	8001dc4 <HAL_Delay>
		  //HAL_PWR_EnterSTANDBYMode();
		  NVIC_SystemReset();
 800093a:	f7ff fe19 	bl	8000570 <__NVIC_SystemReset>
//
//	  ST7735_FillScreen(ST7735_YELLOW);
//	   HAL_Delay(1000);
//	   ST7735_FillScreen(ST7735_GREEN);

	 	  ST7735_WriteString(5, 3,  "CH0:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 800093e:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <main+0x300>)
 8000940:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000944:	9202      	str	r2, [sp, #8]
 8000946:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800094a:	9201      	str	r2, [sp, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a55      	ldr	r2, [pc, #340]	@ (8000aa8 <main+0x304>)
 8000954:	2103      	movs	r1, #3
 8000956:	2005      	movs	r0, #5
 8000958:	f005 f9af 	bl	8005cba <ST7735_WriteString>
	 	  ST7735_WriteString(5, 23, "CH1:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 800095c:	4b51      	ldr	r3, [pc, #324]	@ (8000aa4 <main+0x300>)
 800095e:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000962:	9202      	str	r2, [sp, #8]
 8000964:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	9200      	str	r2, [sp, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a4e      	ldr	r2, [pc, #312]	@ (8000aac <main+0x308>)
 8000972:	2117      	movs	r1, #23
 8000974:	2005      	movs	r0, #5
 8000976:	f005 f9a0 	bl	8005cba <ST7735_WriteString>
	 	  ST7735_WriteString(5, 43, "CH2:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 800097a:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa4 <main+0x300>)
 800097c:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000980:	9202      	str	r2, [sp, #8]
 8000982:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a48      	ldr	r2, [pc, #288]	@ (8000ab0 <main+0x30c>)
 8000990:	212b      	movs	r1, #43	@ 0x2b
 8000992:	2005      	movs	r0, #5
 8000994:	f005 f991 	bl	8005cba <ST7735_WriteString>
	 	  ST7735_WriteString(5, 63, "TMP:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 8000998:	4b42      	ldr	r3, [pc, #264]	@ (8000aa4 <main+0x300>)
 800099a:	f641 1225 	movw	r2, #6437	@ 0x1925
 800099e:	9202      	str	r2, [sp, #8]
 80009a0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	9200      	str	r2, [sp, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a41      	ldr	r2, [pc, #260]	@ (8000ab4 <main+0x310>)
 80009ae:	213f      	movs	r1, #63	@ 0x3f
 80009b0:	2005      	movs	r0, #5
 80009b2:	f005 f982 	bl	8005cba <ST7735_WriteString>


	 	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009bc:	4833      	ldr	r0, [pc, #204]	@ (8000a8c <main+0x2e8>)
 80009be:	f002 fb9f 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	4830      	ldr	r0, [pc, #192]	@ (8000a8c <main+0x2e8>)
 80009ca:	f002 fb99 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f001 f9f7 	bl	8001dc4 <HAL_Delay>

	 	  for(int i = 0; i < 3; i++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80009da:	e021      	b.n	8000a20 <main+0x27c>
	 		  ADC_Select_Channel(channels[i]);
 80009dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	3358      	adds	r3, #88	@ 0x58
 80009e2:	443b      	add	r3, r7
 80009e4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fdeb 	bl	80005c4 <ADC_Select_Channel>
	 		  HAL_ADC_Start(&hadc1);
 80009ee:	4832      	ldr	r0, [pc, #200]	@ (8000ab8 <main+0x314>)
 80009f0:	f001 fa50 	bl	8001e94 <HAL_ADC_Start>
	 		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	482f      	ldr	r0, [pc, #188]	@ (8000ab8 <main+0x314>)
 80009fa:	f001 fb32 	bl	8002062 <HAL_ADC_PollForConversion>
	 		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 80009fe:	482e      	ldr	r0, [pc, #184]	@ (8000ab8 <main+0x314>)
 8000a00:	f001 fbba 	bl	8002178 <HAL_ADC_GetValue>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	3358      	adds	r3, #88	@ 0x58
 8000a0e:	443b      	add	r3, r7
 8000a10:	f823 2c4c 	strh.w	r2, [r3, #-76]
	 		  HAL_ADC_Stop(&hadc1);
 8000a14:	4828      	ldr	r0, [pc, #160]	@ (8000ab8 <main+0x314>)
 8000a16:	f001 faf1 	bl	8001ffc <HAL_ADC_Stop>
	 	  for(int i = 0; i < 3; i++) {
 8000a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	ddda      	ble.n	80009dc <main+0x238>
	 	  }

	 	  conduct0 = adc_values[1];
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	863b      	strh	r3, [r7, #48]	@ 0x30
	 	  sprintf(char_buffer, "%04d", conduct0);
 8000a2a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4922      	ldr	r1, [pc, #136]	@ (8000abc <main+0x318>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fbc6 	bl	80061c4 <siprintf>
	 	  ST7735_WriteString(55, 3, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <main+0x300>)
 8000a3a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000a3e:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000a48:	9201      	str	r2, [sp, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	460a      	mov	r2, r1
 8000a52:	2103      	movs	r1, #3
 8000a54:	2037      	movs	r0, #55	@ 0x37
 8000a56:	f005 f930 	bl	8005cba <ST7735_WriteString>


	 	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <main+0x2e8>)
 8000a62:	f002 fb4d 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6c:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <main+0x2e8>)
 8000a6e:	f002 fb47 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_Delay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a76:	f001 f9a5 	bl	8001dc4 <HAL_Delay>
	 	  for(int i = 0; i < 3; i++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8000a7e:	e041      	b.n	8000b04 <main+0x360>
 8000a80:	2000029c 	.word	0x2000029c
 8000a84:	2000032c 	.word	0x2000032c
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40007000 	.word	0x40007000
 8000a94:	08006b44 	.word	0x08006b44
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	08006b4c 	.word	0x08006b4c
 8000aa0:	200003be 	.word	0x200003be
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	08006b1c 	.word	0x08006b1c
 8000aac:	08006b24 	.word	0x08006b24
 8000ab0:	08006b2c 	.word	0x08006b2c
 8000ab4:	08006b34 	.word	0x08006b34
 8000ab8:	20000080 	.word	0x20000080
 8000abc:	08006b3c 	.word	0x08006b3c
	 	  		  ADC_Select_Channel(channels[i]);
 8000ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	3358      	adds	r3, #88	@ 0x58
 8000ac6:	443b      	add	r3, r7
 8000ac8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd79 	bl	80005c4 <ADC_Select_Channel>
	 	  		  HAL_ADC_Start(&hadc1);
 8000ad2:	4864      	ldr	r0, [pc, #400]	@ (8000c64 <main+0x4c0>)
 8000ad4:	f001 f9de 	bl	8001e94 <HAL_ADC_Start>
	 	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	4861      	ldr	r0, [pc, #388]	@ (8000c64 <main+0x4c0>)
 8000ade:	f001 fac0 	bl	8002062 <HAL_ADC_PollForConversion>
	 	  		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 8000ae2:	4860      	ldr	r0, [pc, #384]	@ (8000c64 <main+0x4c0>)
 8000ae4:	f001 fb48 	bl	8002178 <HAL_ADC_GetValue>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	3358      	adds	r3, #88	@ 0x58
 8000af2:	443b      	add	r3, r7
 8000af4:	f823 2c4c 	strh.w	r2, [r3, #-76]
	 	  		  HAL_ADC_Stop(&hadc1);
 8000af8:	485a      	ldr	r0, [pc, #360]	@ (8000c64 <main+0x4c0>)
 8000afa:	f001 fa7f 	bl	8001ffc <HAL_ADC_Stop>
	 	  for(int i = 0; i < 3; i++) {
 8000afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b00:	3301      	adds	r3, #1
 8000b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddda      	ble.n	8000ac0 <main+0x31c>
	 	  }
	 	  conduct1 = adc_values[1];
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 	  sprintf(char_buffer, "%04d", conduct1);
 8000b0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4954      	ldr	r1, [pc, #336]	@ (8000c68 <main+0x4c4>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fb54 	bl	80061c4 <siprintf>
	 	  ST7735_WriteString(55, 23, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000b1c:	4b53      	ldr	r3, [pc, #332]	@ (8000c6c <main+0x4c8>)
 8000b1e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b22:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000b26:	9202      	str	r2, [sp, #8]
 8000b28:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	9200      	str	r2, [sp, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	460a      	mov	r2, r1
 8000b36:	2117      	movs	r1, #23
 8000b38:	2037      	movs	r0, #55	@ 0x37
 8000b3a:	f005 f8be 	bl	8005cba <ST7735_WriteString>


	 	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b44:	484a      	ldr	r0, [pc, #296]	@ (8000c70 <main+0x4cc>)
 8000b46:	f002 fadb 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b50:	4847      	ldr	r0, [pc, #284]	@ (8000c70 <main+0x4cc>)
 8000b52:	f002 fad5 	bl	8003100 <HAL_GPIO_WritePin>
	 	  HAL_Delay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f001 f933 	bl	8001dc4 <HAL_Delay>

	 	  for(int i = 0; i < 3; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b62:	e021      	b.n	8000ba8 <main+0x404>
	 	  		  ADC_Select_Channel(channels[i]);
 8000b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3358      	adds	r3, #88	@ 0x58
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd27 	bl	80005c4 <ADC_Select_Channel>
	 	  		  HAL_ADC_Start(&hadc1);
 8000b76:	483b      	ldr	r0, [pc, #236]	@ (8000c64 <main+0x4c0>)
 8000b78:	f001 f98c 	bl	8001e94 <HAL_ADC_Start>
	 	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	4838      	ldr	r0, [pc, #224]	@ (8000c64 <main+0x4c0>)
 8000b82:	f001 fa6e 	bl	8002062 <HAL_ADC_PollForConversion>
	 	  		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 8000b86:	4837      	ldr	r0, [pc, #220]	@ (8000c64 <main+0x4c0>)
 8000b88:	f001 faf6 	bl	8002178 <HAL_ADC_GetValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	3358      	adds	r3, #88	@ 0x58
 8000b96:	443b      	add	r3, r7
 8000b98:	f823 2c4c 	strh.w	r2, [r3, #-76]
	 	  		  HAL_ADC_Stop(&hadc1);
 8000b9c:	4831      	ldr	r0, [pc, #196]	@ (8000c64 <main+0x4c0>)
 8000b9e:	f001 fa2d 	bl	8001ffc <HAL_ADC_Stop>
	 	  for(int i = 0; i < 3; i++) {
 8000ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	ddda      	ble.n	8000b64 <main+0x3c0>
	 	  }
	 	  conduct2 = adc_values[1];
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	 	  sprintf(char_buffer, "%04d", conduct2);
 8000bb2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	492b      	ldr	r1, [pc, #172]	@ (8000c68 <main+0x4c4>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fb02 	bl	80061c4 <siprintf>
	 	  ST7735_WriteString(55, 43, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <main+0x4c8>)
 8000bc2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000bc6:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000bca:	9202      	str	r2, [sp, #8]
 8000bcc:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000bd0:	9201      	str	r2, [sp, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	9200      	str	r2, [sp, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	460a      	mov	r2, r1
 8000bda:	212b      	movs	r1, #43	@ 0x2b
 8000bdc:	2037      	movs	r0, #55	@ 0x37
 8000bde:	f005 f86c 	bl	8005cba <ST7735_WriteString>

	 	  conduct_avg = (conduct0+conduct1+conduct2)/3;
 8000be2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000be4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000be6:	441a      	add	r2, r3
 8000be8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000bea:	4413      	add	r3, r2
 8000bec:	4a21      	ldr	r2, [pc, #132]	@ (8000c74 <main+0x4d0>)
 8000bee:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf2:	17db      	asrs	r3, r3, #31
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	857b      	strh	r3, [r7, #42]	@ 0x2a

	 	  conduct_avg = adc_values[2];
 8000bf8:	8a3b      	ldrh	r3, [r7, #16]
 8000bfa:	857b      	strh	r3, [r7, #42]	@ 0x2a
	 	 sprintf(char_buffer, "%04d", conduct_avg);
 8000bfc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	4919      	ldr	r1, [pc, #100]	@ (8000c68 <main+0x4c4>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fadd 	bl	80061c4 <siprintf>
	 	 ST7735_WriteString(55, 63, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <main+0x4c8>)
 8000c0c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000c10:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000c14:	9202      	str	r2, [sp, #8]
 8000c16:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000c1a:	9201      	str	r2, [sp, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	460a      	mov	r2, r1
 8000c24:	213f      	movs	r1, #63	@ 0x3f
 8000c26:	2037      	movs	r0, #55	@ 0x37
 8000c28:	f005 f847 	bl	8005cba <ST7735_WriteString>

	 	 conduct_avg = adc_values[2];
 8000c2c:	8a3b      	ldrh	r3, [r7, #16]
 8000c2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	 	 sprintf(char_buffer, "%04d", conduct_avg);
 8000c30:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <main+0x4c4>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fac3 	bl	80061c4 <siprintf>
	 	 ST7735_WriteString(55, 63, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <main+0x4c8>)
 8000c40:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000c44:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000c4e:	9201      	str	r2, [sp, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	460a      	mov	r2, r1
 8000c58:	213f      	movs	r1, #63	@ 0x3f
 8000c5a:	2037      	movs	r0, #55	@ 0x37
 8000c5c:	f005 f82d 	bl	8005cba <ST7735_WriteString>
	  button_state_determ();
 8000c60:	e65f      	b.n	8000922 <main+0x17e>
 8000c62:	bf00      	nop
 8000c64:	20000080 	.word	0x20000080
 8000c68:	08006b3c 	.word	0x08006b3c
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	40020400 	.word	0x40020400
 8000c74:	55555556 	.word	0x55555556

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f005 fabc 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a29      	ldr	r2, [pc, #164]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <SystemClock_Config+0xd8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cc4:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <SystemClock_Config+0xd8>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <SystemClock_Config+0xd8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cf4:	23a8      	movs	r3, #168	@ 0xa8
 8000cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb97 	bl	8003438 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d10:	f000 fc3a 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fdf8 	bl	8003928 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d3e:	f000 fc23 	bl	8001588 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	@ 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <MX_ADC1_Init+0x9c>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d94:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <MX_ADC1_Init+0xa0>)
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000db4:	f001 f82a 	bl	8001e0c <HAL_ADC_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fbe3 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_ADC1_Init+0x98>)
 8000dd4:	f001 f9de 	bl	8002194 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dde:	f000 fbd3 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000080 	.word	0x20000080
 8000df0:	40012000 	.word	0x40012000
 8000df4:	0f000001 	.word	0x0f000001

08000df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000dfe:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <MX_I2C1_Init+0x54>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <MX_I2C1_Init+0x58>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e36:	f002 f995 	bl	8003164 <HAL_I2C_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e40:	f000 fba2 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000c8 	.word	0x200000c8
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	000186a0 	.word	0x000186a0

08000e54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <MX_RTC_Init+0x48>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e66:	227f      	movs	r2, #127	@ 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e6c:	22ff      	movs	r2, #255	@ 0xff
 8000e6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_RTC_Init+0x44>)
 8000e84:	f003 f84a 	bl	8003f1c <HAL_RTC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000e8e:	f000 fb7b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000011c 	.word	0x2000011c
 8000e9c:	40002800 	.word	0x40002800

08000ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ea6:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <MX_SPI1_Init+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000eec:	220a      	movs	r2, #10
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_SPI1_Init+0x64>)
 8000ef2:	f003 f90d 	bl	8004110 <HAL_SPI_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000efc:	f000 fb44 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000013c 	.word	0x2000013c
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b096      	sub	sp, #88	@ 0x58
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2220      	movs	r2, #32
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 f95d 	bl	8006204 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001048 <MX_TIM1_Init+0x13c>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f52:	f240 3233 	movw	r2, #819	@ 0x333
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f60:	2263      	movs	r2, #99	@ 0x63
 8000f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f76:	4833      	ldr	r0, [pc, #204]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f78:	f003 fcfc 	bl	8004974 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f82:	f000 fb01 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f90:	4619      	mov	r1, r3
 8000f92:	482c      	ldr	r0, [pc, #176]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000f94:	f004 f874 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f9e:	f000 faf3 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa2:	4828      	ldr	r0, [pc, #160]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000fa4:	f003 fd98 	bl	8004ad8 <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fae:	f000 faeb 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4820      	ldr	r0, [pc, #128]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000fc2:	f004 fc23 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fcc:	f000 fadc 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	@ 0x60
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4813      	ldr	r0, [pc, #76]	@ (8001044 <MX_TIM1_Init+0x138>)
 8000ff6:	f003 ff81 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001000:	f000 fac2 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MX_TIM1_Init+0x138>)
 8001028:	f004 fc5e 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001032:	f000 faa9 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001036:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MX_TIM1_Init+0x138>)
 8001038:	f000 fcce 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 800103c:	bf00      	nop
 800103e:	3758      	adds	r7, #88	@ 0x58
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000254 	.word	0x20000254
 8001048:	40010000 	.word	0x40010000

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <MX_TIM2_Init+0xe8>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <MX_TIM2_Init+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <MX_TIM2_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <MX_TIM2_Init+0xe8>)
 8001092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_TIM2_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <MX_TIM2_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4823      	ldr	r0, [pc, #140]	@ (8001134 <MX_TIM2_Init+0xe8>)
 80010a6:	f003 fc65 	bl	8004974 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010b0:	f000 fa6a 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010be:	4619      	mov	r1, r3
 80010c0:	481c      	ldr	r0, [pc, #112]	@ (8001134 <MX_TIM2_Init+0xe8>)
 80010c2:	f003 ffdd 	bl	8005080 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010cc:	f000 fa5c 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010d0:	4818      	ldr	r0, [pc, #96]	@ (8001134 <MX_TIM2_Init+0xe8>)
 80010d2:	f003 fd01 	bl	8004ad8 <HAL_TIM_PWM_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010dc:	f000 fa54 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4619      	mov	r1, r3
 80010ee:	4811      	ldr	r0, [pc, #68]	@ (8001134 <MX_TIM2_Init+0xe8>)
 80010f0:	f004 fb8c 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010fa:	f000 fa45 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fe:	2360      	movs	r3, #96	@ 0x60
 8001100:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2208      	movs	r2, #8
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <MX_TIM2_Init+0xe8>)
 8001116:	f003 fef1 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001120:	f000 fa32 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001124:	4803      	ldr	r0, [pc, #12]	@ (8001134 <MX_TIM2_Init+0xe8>)
 8001126:	f000 fc57 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	@ 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000029c 	.word	0x2000029c

08001138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	@ 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001168:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <MX_TIM3_Init+0xe4>)
 800116a:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <MX_TIM3_Init+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 800116e:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <MX_TIM3_Init+0xe4>)
 8001170:	2229      	movs	r2, #41	@ 0x29
 8001172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <MX_TIM3_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <MX_TIM3_Init+0xe4>)
 800117c:	2263      	movs	r2, #99	@ 0x63
 800117e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <MX_TIM3_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <MX_TIM3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118c:	4823      	ldr	r0, [pc, #140]	@ (800121c <MX_TIM3_Init+0xe4>)
 800118e:	f003 fbf1 	bl	8004974 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001198:	f000 f9f6 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a6:	4619      	mov	r1, r3
 80011a8:	481c      	ldr	r0, [pc, #112]	@ (800121c <MX_TIM3_Init+0xe4>)
 80011aa:	f003 ff69 	bl	8005080 <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80011b4:	f000 f9e8 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <MX_TIM3_Init+0xe4>)
 80011ba:	f003 fc8d 	bl	8004ad8 <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80011c4:	f000 f9e0 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	@ (800121c <MX_TIM3_Init+0xe4>)
 80011d8:	f004 fb18 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011e2:	f000 f9d1 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	@ 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2208      	movs	r2, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4807      	ldr	r0, [pc, #28]	@ (800121c <MX_TIM3_Init+0xe4>)
 80011fe:	f003 fe7d 	bl	8004efc <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001208:	f000 f9be 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <MX_TIM3_Init+0xe4>)
 800120e:	f000 fbe3 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 8001212:	bf00      	nop
 8001214:	3738      	adds	r7, #56	@ 0x38
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002e4 	.word	0x200002e4
 8001220:	40000400 	.word	0x40000400

08001224 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <MX_TIM4_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001248:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800124c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001256:	2209      	movs	r2, #9
 8001258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_TIM4_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001268:	f003 fb84 	bl	8004974 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 f989 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_TIM4_Init+0x94>)
 8001284:	f003 fefc 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f97b 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_TIM4_Init+0x94>)
 80012a0:	f004 fab4 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80012aa:	f000 f96d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000032c 	.word	0x2000032c
 80012bc:	40000800 	.word	0x40000800

080012c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <MX_TIM5_Init+0x94>)
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <MX_TIM5_Init+0x98>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000-1;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_TIM5_Init+0x94>)
 80012e4:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80012e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM5_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 350-1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <MX_TIM5_Init+0x94>)
 80012f2:	f240 125d 	movw	r2, #349	@ 0x15d
 80012f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_TIM5_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <MX_TIM5_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	@ (8001354 <MX_TIM5_Init+0x94>)
 8001306:	f003 fb35 	bl	8004974 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001310:	f000 f93a 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MX_TIM5_Init+0x94>)
 8001322:	f003 fead 	bl	8005080 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 f92c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_TIM5_Init+0x94>)
 800133e:	f004 fa65 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f91e 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000374 	.word	0x20000374
 8001358:	40000c00 	.word	0x40000c00

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_DMA_Init+0x4c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <MX_DMA_Init+0x4c>)
 800136c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <MX_DMA_Init+0x4c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2038      	movs	r0, #56	@ 0x38
 8001384:	f001 f9ff 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001388:	2038      	movs	r0, #56	@ 0x38
 800138a:	f001 fa18 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	203b      	movs	r0, #59	@ 0x3b
 8001394:	f001 f9f7 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001398:	203b      	movs	r0, #59	@ 0x3b
 800139a:	f001 fa10 	bl	80027be <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b68      	ldr	r3, [pc, #416]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b64      	ldr	r3, [pc, #400]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a63      	ldr	r2, [pc, #396]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a5c      	ldr	r2, [pc, #368]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b5a      	ldr	r3, [pc, #360]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b56      	ldr	r3, [pc, #344]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a55      	ldr	r2, [pc, #340]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b53      	ldr	r3, [pc, #332]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b4f      	ldr	r3, [pc, #316]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a4e      	ldr	r2, [pc, #312]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b4c      	ldr	r3, [pc, #304]	@ (8001574 <MX_GPIO_Init+0x1c8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8001454:	4848      	ldr	r0, [pc, #288]	@ (8001578 <MX_GPIO_Init+0x1cc>)
 8001456:	f001 fe53 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 800145a:	2201      	movs	r2, #1
 800145c:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8001460:	4845      	ldr	r0, [pc, #276]	@ (8001578 <MX_GPIO_Init+0x1cc>)
 8001462:	f001 fe4d 	bl	8003100 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800146c:	4843      	ldr	r0, [pc, #268]	@ (800157c <MX_GPIO_Init+0x1d0>)
 800146e:	f001 fe47 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8001478:	4841      	ldr	r0, [pc, #260]	@ (8001580 <MX_GPIO_Init+0x1d4>)
 800147a:	f001 fe41 	bl	8003100 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_Pin|OE_Pin|DFU_FORCE_Pin|S0_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 4152 	mov.w	r1, #53760	@ 0xd200
 8001484:	483e      	ldr	r0, [pc, #248]	@ (8001580 <MX_GPIO_Init+0x1d4>)
 8001486:	f001 fe3b 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 800148a:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 800148e:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4835      	ldr	r0, [pc, #212]	@ (8001578 <MX_GPIO_Init+0x1cc>)
 80014a4:	f001 fc90 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 80014a8:	230c      	movs	r3, #12
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	482f      	ldr	r0, [pc, #188]	@ (8001578 <MX_GPIO_Init+0x1cc>)
 80014bc:	f001 fc84 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 80014c0:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <MX_GPIO_Init+0x1d0>)
 80014da:	f001 fc75 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin OE_Pin
                           DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin LED_BLUE_1_Pin
                           LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin|OE_Pin
 80014de:	f24d 333e 	movw	r3, #54078	@ 0xd33e
 80014e2:	617b      	str	r3, [r7, #20]
                          |DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin|LED_BLUE_1_Pin
                          |LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4822      	ldr	r0, [pc, #136]	@ (8001580 <MX_GPIO_Init+0x1d4>)
 80014f8:	f001 fc66 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 80014fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	481b      	ldr	r0, [pc, #108]	@ (8001580 <MX_GPIO_Init+0x1d4>)
 8001512:	f001 fc59 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8001516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4813      	ldr	r0, [pc, #76]	@ (800157c <MX_GPIO_Init+0x1d0>)
 800152e:	f001 fc4b 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 8001532:	2304      	movs	r3, #4
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001536:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <MX_GPIO_Init+0x1d8>)
 8001548:	f001 fc3e 	bl	8002dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2008      	movs	r0, #8
 8001552:	f001 f918 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001556:	2008      	movs	r0, #8
 8001558:	f001 f931 	bl	80027be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2028      	movs	r0, #40	@ 0x28
 8001562:	f001 f910 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001566:	2028      	movs	r0, #40	@ 0x28
 8001568:	f001 f929 	bl	80027be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40020800 	.word	0x40020800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020c00 	.word	0x40020c00

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_ADC_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 800163e:	230e      	movs	r3, #14
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <HAL_ADC_MspInit+0x84>)
 8001652:	f001 fbb9 	bl	8002dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_I2C_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016aa:	23c0      	movs	r3, #192	@ 0xc0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ae:	2312      	movs	r3, #18
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ba:	2304      	movs	r3, #4
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <HAL_I2C_MspInit+0x8c>)
 80016c6:	f001 fb7f 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <HAL_RTC_MspInit+0x50>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d111      	bne.n	8001742 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800171e:	2302      	movs	r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001726:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fb07 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001738:	f7ff ff26 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <HAL_RTC_MspInit+0x54>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40002800 	.word	0x40002800
 8001750:	42470e3c 	.word	0x42470e3c

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a47      	ldr	r2, [pc, #284]	@ (8001890 <HAL_SPI_MspInit+0x13c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	f040 8088 	bne.w	8001888 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	4a44      	ldr	r2, [pc, #272]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 8001782:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001786:	6453      	str	r3, [r2, #68]	@ 0x44
 8001788:	4b42      	ldr	r3, [pc, #264]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	4a3d      	ldr	r2, [pc, #244]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <HAL_SPI_MspInit+0x140>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017b0:	23e0      	movs	r3, #224	@ 0xe0
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c0:	2305      	movs	r3, #5
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4833      	ldr	r0, [pc, #204]	@ (8001898 <HAL_SPI_MspInit+0x144>)
 80017cc:	f001 fafc 	bl	8002dc8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017d2:	4a33      	ldr	r2, [pc, #204]	@ (80018a0 <HAL_SPI_MspInit+0x14c>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80017d6:	4b31      	ldr	r3, [pc, #196]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <HAL_SPI_MspInit+0x148>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <HAL_SPI_MspInit+0x148>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <HAL_SPI_MspInit+0x148>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180a:	4b24      	ldr	r3, [pc, #144]	@ (800189c <HAL_SPI_MspInit+0x148>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001810:	4822      	ldr	r0, [pc, #136]	@ (800189c <HAL_SPI_MspInit+0x148>)
 8001812:	f000 ffef 	bl	80027f4 <HAL_DMA_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800181c:	f7ff feb4 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_SPI_MspInit+0x148>)
 8001824:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001826:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_SPI_MspInit+0x148>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 800182e:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <HAL_SPI_MspInit+0x154>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001834:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 800183c:	2240      	movs	r2, #64	@ 0x40
 800183e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800186c:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 800186e:	f000 ffc1 	bl	80027f4 <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001878:	f7ff fe86 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001880:	649a      	str	r2, [r3, #72]	@ 0x48
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_SPI_MspInit+0x150>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	@ 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40013000 	.word	0x40013000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	20000194 	.word	0x20000194
 80018a0:	40026410 	.word	0x40026410
 80018a4:	200001f4 	.word	0x200001f4
 80018a8:	40026458 	.word	0x40026458

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a42      	ldr	r2, [pc, #264]	@ (80019c4 <HAL_TIM_Base_MspInit+0x118>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11e      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2019      	movs	r0, #25
 80018e0:	f000 ff51 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018e4:	2019      	movs	r0, #25
 80018e6:	f000 ff6a 	bl	80027be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201a      	movs	r0, #26
 80018f0:	f000 ff49 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018f4:	201a      	movs	r0, #26
 80018f6:	f000 ff62 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018fa:	e05e      	b.n	80019ba <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d10e      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
}
 8001922:	e04a      	b.n	80019ba <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a28      	ldr	r2, [pc, #160]	@ (80019cc <HAL_TIM_Base_MspInit+0x120>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10e      	bne.n	800194c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6413      	str	r3, [r2, #64]	@ 0x40
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
}
 800194a:	e036      	b.n	80019ba <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <HAL_TIM_Base_MspInit+0x124>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d116      	bne.n	8001984 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4a1a      	ldr	r2, [pc, #104]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2101      	movs	r1, #1
 8001976:	201e      	movs	r0, #30
 8001978:	f000 ff05 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800197c:	201e      	movs	r0, #30
 800197e:	f000 ff1e 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 8001982:	e01a      	b.n	80019ba <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <HAL_TIM_Base_MspInit+0x128>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d115      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_TIM_Base_MspInit+0x11c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2032      	movs	r0, #50	@ 0x32
 80019b0:	f000 fee9 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019b4:	2032      	movs	r0, #50	@ 0x32
 80019b6:	f000 ff02 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40010000 	.word	0x40010000
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40000800 	.word	0x40000800
 80019d4:	40000c00 	.word	0x40000c00

080019d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a37      	ldr	r2, [pc, #220]	@ (8001ad4 <HAL_TIM_MspPostInit+0xfc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11f      	bne.n	8001a3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a35      	ldr	r2, [pc, #212]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	482a      	ldr	r0, [pc, #168]	@ (8001adc <HAL_TIM_MspPostInit+0x104>)
 8001a34:	f001 f9c8 	bl	8002dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a38:	e047      	b.n	8001aca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a42:	d11f      	bne.n	8001a84 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4818      	ldr	r0, [pc, #96]	@ (8001ae0 <HAL_TIM_MspPostInit+0x108>)
 8001a7e:	f001 f9a3 	bl	8002dc8 <HAL_GPIO_Init>
}
 8001a82:	e022      	b.n	8001aca <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <HAL_TIM_MspPostInit+0x10c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d11d      	bne.n	8001aca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <HAL_TIM_MspPostInit+0x100>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aba:	2302      	movs	r3, #2
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <HAL_TIM_MspPostInit+0x108>)
 8001ac6:	f001 f97f 	bl	8002dc8 <HAL_GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	@ 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f921 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 8001b4a:	2004      	movs	r0, #4
 8001b4c:	f001 faf2 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b5a:	f003 f8c7 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000254 	.word	0x20000254

08001b68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b6e:	f003 f8bd 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000254 	.word	0x20000254

08001b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(pwm_vibro_start == 3)
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <TIM4_IRQHandler+0x1c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d102      	bne.n	8001b8e <TIM4_IRQHandler+0x12>
	{
		pwm_vibro_start = 2;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <TIM4_IRQHandler+0x1c>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b8e:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <TIM4_IRQHandler+0x20>)
 8001b90:	f003 f8ac 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200003d1 	.word	0x200003d1
 8001b9c:	2000032c 	.word	0x2000032c

08001ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8001ba4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ba8:	f001 fac4 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	//if(tim_var<1000)
	tim_var++;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <TIM5_IRQHandler+0x1c>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <TIM5_IRQHandler+0x1c>)
 8001bbe:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <TIM5_IRQHandler+0x20>)
 8001bc2:	f003 f893 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003d2 	.word	0x200003d2
 8001bd0:	20000374 	.word	0x20000374

08001bd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <DMA2_Stream0_IRQHandler+0x10>)
 8001bda:	f000 feb9 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000194 	.word	0x20000194

08001be8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <DMA2_Stream3_IRQHandler+0x10>)
 8001bee:	f000 feaf 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001f4 	.word	0x200001f4

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f004 faf2 	bl	8006214 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20010000 	.word	0x20010000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	200003d4 	.word	0x200003d4
 8001c64:	20000550 	.word	0x20000550

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <SystemInit+0x20>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <SystemInit+0x20>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c90:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c92:	490e      	ldr	r1, [pc, #56]	@ (8001ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c94:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca8:	4c0b      	ldr	r4, [pc, #44]	@ (8001cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb6:	f7ff ffd7 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f004 fab1 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cbe:	f7fe fd71 	bl	80007a4 <main>
  bx  lr    
 8001cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001cd0:	08007990 	.word	0x08007990
  ldr r2, =_sbss
 8001cd4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001cd8:	2000054c 	.word	0x2000054c

08001cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_Init+0x40>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <HAL_Init+0x40>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	@ (8001d20 <HAL_Init+0x40>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 fd31 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fc3e 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fd49 	bl	80027da <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 fd11 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	200003d8 	.word	0x200003d8

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200003d8 	.word	0x200003d8

08001dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff ffee 	bl	8001dac <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffde 	bl	8001dac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e033      	b.n	8001e8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fbda 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e52:	f023 0302 	bic.w	r3, r3, #2
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 faba 	bl	80023d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e7a:	e001      	b.n	8001e80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Start+0x1a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e097      	b.n	8001fde <HAL_ADC_Start+0x14a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d018      	beq.n	8001ef6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed4:	4b45      	ldr	r3, [pc, #276]	@ (8001fec <HAL_ADC_Start+0x158>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a45      	ldr	r2, [pc, #276]	@ (8001ff0 <HAL_ADC_Start+0x15c>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9a      	lsrs	r2, r3, #18
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d15f      	bne.n	8001fc4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f42:	d106      	bne.n	8001f52 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	f023 0206 	bic.w	r2, r3, #6
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_ADC_Start+0x160>)
 8001f62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d129      	bne.n	8001fdc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	e020      	b.n	8001fdc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <HAL_ADC_Start+0x164>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d11b      	bne.n	8001fdc <HAL_ADC_Start+0x148>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d114      	bne.n	8001fdc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	e00b      	b.n	8001fdc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	40012000 	.word	0x40012000

08001ffc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Stop+0x16>
 800200e:	2302      	movs	r3, #2
 8002010:	e021      	b.n	8002056 <HAL_ADC_Stop+0x5a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207e:	d113      	bne.n	80020a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800208a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e063      	b.n	8002170 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020a8:	f7ff fe80 	bl	8001dac <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ae:	e021      	b.n	80020f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d01d      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_ADC_PollForConversion+0x6c>
 80020be:	f7ff fe75 	bl	8001dac <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d212      	bcs.n	80020f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d00b      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e03d      	b.n	8002170 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d1d6      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 0212 	mvn.w	r2, #18
 800210a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d123      	bne.n	800216e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11f      	bne.n	800216e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002146:	2b00      	cmp	r3, #0
 8002148:	d111      	bne.n	800216e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1c>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e105      	b.n	80023bc <HAL_ADC_ConfigChannel+0x228>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d925      	bls.n	800220c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	3b1e      	subs	r3, #30
 80021d6:	2207      	movs	r2, #7
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68d9      	ldr	r1, [r3, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4403      	add	r3, r0
 80021fe:	3b1e      	subs	r3, #30
 8002200:	409a      	lsls	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	e022      	b.n	8002252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	2207      	movs	r2, #7
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4403      	add	r3, r0
 8002248:	409a      	lsls	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d824      	bhi.n	80022a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b05      	subs	r3, #5
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b05      	subs	r3, #5
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022a2:	e04c      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	@ 0x23
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b23      	subs	r3, #35	@ 0x23
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022f4:	e023      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b41      	subs	r3, #65	@ 0x41
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b41      	subs	r3, #65	@ 0x41
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_ADC_ConfigChannel+0x234>)
 8002340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_ADC_ConfigChannel+0x238>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1cc>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d105      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_ADC_ConfigChannel+0x238>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d123      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d003      	beq.n	800237a <HAL_ADC_ConfigChannel+0x1e6>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b11      	cmp	r3, #17
 8002378:	d11b      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d111      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_ADC_ConfigChannel+0x240>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	0c9a      	lsrs	r2, r3, #18
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40012300 	.word	0x40012300
 80023cc:	40012000 	.word	0x40012000
 80023d0:	20000000 	.word	0x20000000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e0:	4b79      	ldr	r3, [pc, #484]	@ (80025c8 <ADC_Init+0x1f0>)
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <ADC_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <__NVIC_SetPriorityGrouping>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fad4 	bl	8001dac <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e099      	b.n	8002944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002830:	e00f      	b.n	8002852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002832:	f7ff fabb 	bl	8001dac <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b05      	cmp	r3, #5
 800283e:	d908      	bls.n	8002852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e078      	b.n	8002944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e8      	bne.n	8002832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4b38      	ldr	r3, [pc, #224]	@ (800294c <HAL_DMA_Init+0x158>)
 800286c:	4013      	ands	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d107      	bne.n	80028bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	4313      	orrs	r3, r2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d117      	bne.n	8002916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00e      	beq.n	8002916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9e9 	bl	8002cd0 <DMA_CheckFifoParam>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2240      	movs	r2, #64	@ 0x40
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002912:	2301      	movs	r3, #1
 8002914:	e016      	b.n	8002944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9a0 	bl	8002c64 <DMA_CalcBaseAndBitshift>
 8002924:	4603      	mov	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	223f      	movs	r2, #63	@ 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	f010803f 	.word	0xf010803f

08002950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800295c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b98 <HAL_DMA_IRQHandler+0x248>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8e      	ldr	r2, [pc, #568]	@ (8002b9c <HAL_DMA_IRQHandler+0x24c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	2208      	movs	r2, #8
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e01f      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808f 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8087 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d136      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x1da>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	223f      	movs	r2, #63	@ 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07e      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
        }
        return;
 8002b66:	e079      	b.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e02c      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e01e      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d032      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d307      	bcc.n	8002c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f2      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x2cc>
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
 8002c5a:	e000      	b.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c5c:	bf00      	nop
    }
  }
}
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3b10      	subs	r3, #16
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c7e:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <DMA_CalcBaseAndBitshift+0x68>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d909      	bls.n	8002ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ca4:	e007      	b.n	8002cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	aaaaaaab 	.word	0xaaaaaaab
 8002ccc:	08006b70 	.word	0x08006b70

08002cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11f      	bne.n	8002d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d856      	bhi.n	8002d9e <DMA_CheckFifoParam+0xce>
 8002cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <DMA_CheckFifoParam+0x28>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d1b 	.word	0x08002d1b
 8002d00:	08002d09 	.word	0x08002d09
 8002d04:	08002d9f 	.word	0x08002d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d046      	beq.n	8002da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e043      	b.n	8002da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d22:	d140      	bne.n	8002da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e03d      	b.n	8002da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d32:	d121      	bne.n	8002d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d837      	bhi.n	8002daa <DMA_CheckFifoParam+0xda>
 8002d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <DMA_CheckFifoParam+0x70>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d57 	.word	0x08002d57
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002d69 	.word	0x08002d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e030      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d025      	beq.n	8002dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d66:	e022      	b.n	8002dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d76:	e01c      	b.n	8002db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d903      	bls.n	8002d86 <DMA_CheckFifoParam+0xb6>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d003      	beq.n	8002d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d84:	e018      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8a:	e015      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e00b      	b.n	8002db6 <DMA_CheckFifoParam+0xe6>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e00a      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e008      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e006      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
    }
  } 
  
  return status; 
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e159      	b.n	8003098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8148 	bne.w	8003092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d005      	beq.n	8002e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d130      	bne.n	8002e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a2 	beq.w	8003092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a56      	ldr	r2, [pc, #344]	@ (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b54      	ldr	r3, [pc, #336]	@ (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6a:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a49      	ldr	r2, [pc, #292]	@ (80030b8 <HAL_GPIO_Init+0x2f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x202>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a48      	ldr	r2, [pc, #288]	@ (80030bc <HAL_GPIO_Init+0x2f4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x1fe>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_GPIO_Init+0x2f8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x1fa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a46      	ldr	r2, [pc, #280]	@ (80030c4 <HAL_GPIO_Init+0x2fc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x1f6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a45      	ldr	r2, [pc, #276]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x1f2>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	@ (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fea:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300e:	4a2f      	ldr	r2, [pc, #188]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003014:	4b2d      	ldr	r3, [pc, #180]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <HAL_GPIO_Init+0x304>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303e:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003062:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003068:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_GPIO_Init+0x304>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308c:	4a0f      	ldr	r2, [pc, #60]	@ (80030cc <HAL_GPIO_Init+0x304>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f aea2 	bls.w	8002de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e001      	b.n	80030f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800311c:	e003      	b.n	8003126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	619a      	str	r2, [r3, #24]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800314a:	4a05      	ldr	r2, [pc, #20]	@ (8003160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fa22 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e12b      	b.n	80033ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fa6e 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	@ 0x24
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c8:	f000 fda6 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a81      	ldr	r2, [pc, #516]	@ (80033d8 <HAL_I2C_Init+0x274>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d807      	bhi.n	80031e8 <HAL_I2C_Init+0x84>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a80      	ldr	r2, [pc, #512]	@ (80033dc <HAL_I2C_Init+0x278>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf94      	ite	ls
 80031e0:	2301      	movls	r3, #1
 80031e2:	2300      	movhi	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e006      	b.n	80031f6 <HAL_I2C_Init+0x92>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a7d      	ldr	r2, [pc, #500]	@ (80033e0 <HAL_I2C_Init+0x27c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0e7      	b.n	80033ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a78      	ldr	r2, [pc, #480]	@ (80033e4 <HAL_I2C_Init+0x280>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a6a      	ldr	r2, [pc, #424]	@ (80033d8 <HAL_I2C_Init+0x274>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d802      	bhi.n	8003238 <HAL_I2C_Init+0xd4>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3301      	adds	r3, #1
 8003236:	e009      	b.n	800324c <HAL_I2C_Init+0xe8>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	4a69      	ldr	r2, [pc, #420]	@ (80033e8 <HAL_I2C_Init+0x284>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	3301      	adds	r3, #1
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	430b      	orrs	r3, r1
 8003252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800325e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	495c      	ldr	r1, [pc, #368]	@ (80033d8 <HAL_I2C_Init+0x274>)
 8003268:	428b      	cmp	r3, r1
 800326a:	d819      	bhi.n	80032a0 <HAL_I2C_Init+0x13c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e59      	subs	r1, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fbb1 f3f3 	udiv	r3, r1, r3
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003280:	400b      	ands	r3, r1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_I2C_Init+0x138>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e59      	subs	r1, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fbb1 f3f3 	udiv	r3, r1, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	e051      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 800329c:	2304      	movs	r3, #4
 800329e:	e04f      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <HAL_I2C_Init+0x168>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e012      	b.n	80032f2 <HAL_I2C_Init+0x18e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x196>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10e      	bne.n	8003320 <HAL_I2C_Init+0x1bc>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e58      	subs	r0, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	440b      	add	r3, r1
 8003310:	fbb0 f3f3 	udiv	r3, r0, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Init+0x1dc>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e58      	subs	r0, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	0099      	lsls	r1, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	fbb0 f3f3 	udiv	r3, r0, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	6809      	ldr	r1, [r1, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800336e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6911      	ldr	r1, [r2, #16]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	000186a0 	.word	0x000186a0
 80033dc:	001e847f 	.word	0x001e847f
 80033e0:	003d08ff 	.word	0x003d08ff
 80033e4:	431bde83 	.word	0x431bde83
 80033e8:	10624dd3 	.word	0x10624dd3

080033ec <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_PWR_EnableWakeUpPin+0x20>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4904      	ldr	r1, [pc, #16]	@ (800340c <HAL_PWR_EnableWakeUpPin+0x20>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40007000 	.word	0x40007000

08003410 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_PWR_DisableWakeUpPin+0x24>)
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	43db      	mvns	r3, r3
 8003420:	4904      	ldr	r1, [pc, #16]	@ (8003434 <HAL_PWR_DisableWakeUpPin+0x24>)
 8003422:	4013      	ands	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000

08003438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e267      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003456:	4b88      	ldr	r3, [pc, #544]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800346a:	2b08      	cmp	r3, #8
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b82      	ldr	r3, [pc, #520]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b7e      	ldr	r3, [pc, #504]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x108>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e242      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x74>
 800349e:	4b76      	ldr	r3, [pc, #472]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b70      	ldr	r3, [pc, #448]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a68      	ldr	r2, [pc, #416]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b66      	ldr	r3, [pc, #408]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fc5c 	bl	8001dac <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe fc58 	bl	8001dac <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e207      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b5b      	ldr	r3, [pc, #364]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fc48 	bl	8001dac <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe fc44 	bl	8001dac <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1f3      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	4b51      	ldr	r3, [pc, #324]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0xe8>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d063      	beq.n	8003616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354e:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d11c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d116      	bne.n	80035a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003572:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e1c7      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4937      	ldr	r1, [pc, #220]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359e:	e03a      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a8:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fe fbfd 	bl	8001dac <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b6:	f7fe fbf9 	bl	8001dac <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1a8      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4925      	ldr	r1, [pc, #148]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e015      	b.n	8003616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ea:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCC_OscConfig+0x244>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fbdc 	bl	8001dac <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fbd8 	bl	8001dac <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e187      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d036      	beq.n	8003690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fe fbbc 	bl	8001dac <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003638:	f7fe fbb8 	bl	8001dac <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e167      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_RCC_OscConfig+0x240>)
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x200>
 8003656:	e01b      	b.n	8003690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_OscConfig+0x248>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe fba5 	bl	8001dac <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	e00e      	b.n	8003684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe fba1 	bl	8001dac <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d907      	bls.n	8003684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e150      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	42470000 	.word	0x42470000
 8003680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ea      	bne.n	8003666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8097 	beq.w	80037cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b81      	ldr	r3, [pc, #516]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	4b7d      	ldr	r3, [pc, #500]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a7c      	ldr	r2, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b7a      	ldr	r3, [pc, #488]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	4b77      	ldr	r3, [pc, #476]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036da:	4b74      	ldr	r3, [pc, #464]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a73      	ldr	r2, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fb61 	bl	8001dac <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fe fb5d 	bl	8001dac <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e10c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_OscConfig+0x474>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x2ea>
 8003714:	4b64      	ldr	r3, [pc, #400]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	4a63      	ldr	r2, [pc, #396]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003720:	e01c      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b05      	cmp	r3, #5
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x30c>
 800372a:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5e      	ldr	r2, [pc, #376]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	4b5c      	ldr	r3, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	4a5b      	ldr	r2, [pc, #364]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6713      	str	r3, [r2, #112]	@ 0x70
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0x324>
 8003744:	4b58      	ldr	r3, [pc, #352]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a57      	ldr	r2, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	4b55      	ldr	r3, [pc, #340]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a54      	ldr	r2, [pc, #336]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0304 	bic.w	r3, r3, #4
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d015      	beq.n	8003790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fb22 	bl	8001dac <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fe fb1e 	bl	8001dac <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e0cb      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	4b49      	ldr	r3, [pc, #292]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ee      	beq.n	800376c <HAL_RCC_OscConfig+0x334>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7fe fb0c 	bl	8001dac <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe fb08 	bl	8001dac <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0b5      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ee      	bne.n	8003798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	4a38      	ldr	r2, [pc, #224]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a1 	beq.w	8003918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d6:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d05c      	beq.n	800389c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d141      	bne.n	800386e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fadc 	bl	8001dac <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe fad8 	bl	8001dac <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e087      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	491b      	ldr	r1, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe fab1 	bl	8001dac <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe faad 	bl	8001dac <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e05c      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x416>
 800386c:	e054      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_OscConfig+0x478>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fa9a 	bl	8001dac <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387c:	f7fe fa96 	bl	8001dac <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e045      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_OscConfig+0x470>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x444>
 800389a:	e03d      	b.n	8003918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e038      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x4ec>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d028      	beq.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d121      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d11a      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d111      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0cc      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d90c      	bls.n	8003964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b65      	ldr	r3, [pc, #404]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d044      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e067      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4934      	ldr	r1, [pc, #208]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fe f9c8 	bl	8001dac <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fe f9c4 	bl	8001dac <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d20c      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe f928 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08006b58 	.word	0x08006b58
 8003aec:	20000000 	.word	0x20000000
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b094      	sub	sp, #80	@ 0x50
 8003afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b04:	2300      	movs	r3, #0
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	4b79      	ldr	r3, [pc, #484]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x40>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	f200 80e1 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x34>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b26:	e0db      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b2c:	e0db      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2e:	4b73      	ldr	r3, [pc, #460]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b32:	e0d8      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b34:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	6139      	str	r1, [r7, #16]
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b98:	4659      	mov	r1, fp
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bac:	4659      	mov	r1, fp
 8003bae:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc6:	4690      	mov	r8, r2
 8003bc8:	4699      	mov	r9, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb18 0303 	adds.w	r3, r8, r3
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb49 0303 	adc.w	r3, r9, r3
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003be6:	4629      	mov	r1, r5
 8003be8:	024b      	lsls	r3, r1, #9
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	024a      	lsls	r2, r1, #9
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c04:	f7fc fb3c 	bl	8000280 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c10:	e058      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3e:	0150      	lsls	r0, r2, #5
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4641      	mov	r1, r8
 8003c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c64:	ebb2 040a 	subs.w	r4, r2, sl
 8003c68:	eb63 050b 	sbc.w	r5, r3, fp
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb8:	f7fc fae2 	bl	8000280 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3750      	adds	r7, #80	@ 0x50
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	@ (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08006b68 	.word	0x08006b68

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d035      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d68:	4b67      	ldr	r3, [pc, #412]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fe f81d 	bl	8001dac <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d76:	f7fe f819 	bl	8001dac <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0ba      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d88:	4b60      	ldr	r3, [pc, #384]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	071b      	lsls	r3, r3, #28
 8003da0:	495a      	ldr	r1, [pc, #360]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da8:	4b57      	ldr	r3, [pc, #348]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fffd 	bl	8001dac <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db6:	f7fd fff9 	bl	8001dac <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e09a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc8:	4b50      	ldr	r3, [pc, #320]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8083 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b49      	ldr	r3, [pc, #292]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	4a48      	ldr	r2, [pc, #288]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df2:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dfe:	4b44      	ldr	r3, [pc, #272]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a43      	ldr	r2, [pc, #268]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd ffcf 	bl	8001dac <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fd ffcb 	bl	8001dac <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e06c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e24:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e30:	4b36      	ldr	r3, [pc, #216]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b2e      	ldr	r3, [pc, #184]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e6a:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d114      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fd ff99 	bl	8001dac <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fd ff95 	bl	8001dac <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e034      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eac:	d10d      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003eae:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	4912      	ldr	r1, [pc, #72]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a0f      	ldr	r2, [pc, #60]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ed4:	6093      	str	r3, [r2, #8]
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	490a      	ldr	r1, [pc, #40]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7c1a      	ldrb	r2, [r3, #16]
 8003ef8:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003efa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	42470068 	.word	0x42470068
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000
 8003f14:	42470e40 	.word	0x42470e40
 8003f18:	424711e0 	.word	0x424711e0

08003f1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e066      	b.n	8004000 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7f5b      	ldrb	r3, [r3, #29]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd fbda 	bl	80016fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	22ca      	movs	r2, #202	@ 0xca
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2253      	movs	r2, #83	@ 0x53
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f87a 	bl	8004058 <RTC_EnterInitMode>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12c      	bne.n	8003fc8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f80:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68d2      	ldr	r2, [r2, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6919      	ldr	r1, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f881 	bl	80040c6 <RTC_ExitInitMode>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	22ff      	movs	r2, #255	@ 0xff
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004022:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004024:	f7fd fec2 	bl	8001dac <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800402a:	e009      	b.n	8004040 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800402c:	f7fd febe 	bl	8001dac <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800403a:	d901      	bls.n	8004040 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e007      	b.n	8004050 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ee      	beq.n	800402c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d122      	bne.n	80040bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004084:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004086:	f7fd fe91 	bl	8001dac <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800408c:	e00c      	b.n	80040a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800408e:	f7fd fe8d 	bl	8001dac <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800409c:	d904      	bls.n	80040a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <RTC_EnterInitMode+0x64>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d1e8      	bne.n	800408e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff89 	bl	8004008 <HAL_RTC_WaitForSynchro>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2204      	movs	r2, #4
 8004100:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07b      	b.n	800421a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d108      	bne.n	800413c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004132:	d009      	beq.n	8004148 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
 800413a:	e005      	b.n	8004148 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd faf6 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800417e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	ea42 0103 	orr.w	r1, r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0104 	and.w	r1, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	f003 0210 	and.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004208:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_SPI_Transmit+0x22>
 8004240:	2302      	movs	r3, #2
 8004242:	e126      	b.n	8004492 <HAL_SPI_Transmit+0x270>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424c:	f7fd fdae 	bl	8001dac <HAL_GetTick>
 8004250:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d002      	beq.n	8004268 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004266:	e10b      	b.n	8004480 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x52>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004278:	e102      	b.n	8004480 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c0:	d10f      	bne.n	80042e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b40      	cmp	r3, #64	@ 0x40
 80042ee:	d007      	beq.n	8004300 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d14b      	bne.n	80043a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0xf6>
 8004312:	8afb      	ldrh	r3, [r7, #22]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13e      	bne.n	8004396 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800433c:	e02b      	b.n	8004396 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d112      	bne.n	8004372 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004370:	e011      	b.n	8004396 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004372:	f7fd fd1b 	bl	8001dac <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d803      	bhi.n	800438a <HAL_SPI_Transmit+0x168>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d102      	bne.n	8004390 <HAL_SPI_Transmit+0x16e>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004394:	e074      	b.n	8004480 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ce      	bne.n	800433e <HAL_SPI_Transmit+0x11c>
 80043a0:	e04c      	b.n	800443c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Transmit+0x18e>
 80043aa:	8afb      	ldrh	r3, [r7, #22]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d140      	bne.n	8004432 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043d6:	e02c      	b.n	8004432 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d113      	bne.n	800440e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800440c:	e011      	b.n	8004432 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800440e:	f7fd fccd 	bl	8001dac <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d803      	bhi.n	8004426 <HAL_SPI_Transmit+0x204>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d102      	bne.n	800442c <HAL_SPI_Transmit+0x20a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004430:	e026      	b.n	8004480 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1cd      	bne.n	80043d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	6839      	ldr	r1, [r7, #0]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa55 	bl	80048f0 <SPI_EndRxTxTransaction>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e000      	b.n	8004480 <HAL_SPI_Transmit+0x25e>
  }

error:
 800447e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004490:	7ffb      	ldrb	r3, [r7, #31]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08c      	sub	sp, #48	@ 0x30
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x26>
 80044bc:	2302      	movs	r3, #2
 80044be:	e18a      	b.n	80047d6 <HAL_SPI_TransmitReceive+0x33c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c8:	f7fd fc70 	bl	8001dac <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d00f      	beq.n	800450a <HAL_SPI_TransmitReceive+0x70>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f0:	d107      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x68>
 80044fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d003      	beq.n	800450a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004502:	2302      	movs	r3, #2
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004508:	e15b      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_SPI_TransmitReceive+0x82>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_TransmitReceive+0x82>
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004522:	e14e      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b04      	cmp	r3, #4
 800452e:	d003      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2205      	movs	r2, #5
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	887a      	ldrh	r2, [r7, #2]
 800455a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d007      	beq.n	800458c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	d178      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x10a>
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d166      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	881a      	ldrh	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	e053      	b.n	8004672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d11b      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x176>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x176>
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d113      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d119      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x1b8>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d014      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	b292      	uxth	r2, r2
 8004634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800464e:	2301      	movs	r3, #1
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004652:	f7fd fbab 	bl	8001dac <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800465e:	429a      	cmp	r2, r3
 8004660:	d807      	bhi.n	8004672 <HAL_SPI_TransmitReceive+0x1d8>
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d003      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004670:	e0a7      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1a6      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x130>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1a1      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x130>
 8004686:	e07c      	b.n	8004782 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x1fc>
 8004690:	8b7b      	ldrh	r3, [r7, #26]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d16b      	bne.n	800476e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	7812      	ldrb	r2, [r2, #0]
 80046a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046bc:	e057      	b.n	800476e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d11c      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x26c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d017      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x26c>
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d114      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d119      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x2ae>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d014      	beq.n	8004748 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004744:	2301      	movs	r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004748:	f7fd fb30 	bl	8001dac <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004754:	429a      	cmp	r2, r3
 8004756:	d803      	bhi.n	8004760 <HAL_SPI_TransmitReceive+0x2c6>
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d102      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x2cc>
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800476c:	e029      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1a2      	bne.n	80046be <HAL_SPI_TransmitReceive+0x224>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d19d      	bne.n	80046be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f8b2 	bl	80048f0 <SPI_EndRxTxTransaction>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800479e:	e010      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e000      	b.n	80047c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3730      	adds	r7, #48	@ 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047f0:	f7fd fadc 	bl	8001dac <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004800:	f7fd fad4 	bl	8001dac <HAL_GetTick>
 8004804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004806:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004816:	e054      	b.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d050      	beq.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004820:	f7fd fac4 	bl	8001dac <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13d      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484e:	d111      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004858:	d004      	beq.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004862:	d107      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487c:	d10f      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800489c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e017      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3b01      	subs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d19b      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <SPI_EndRxTxTransaction+0x7c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <SPI_EndRxTxTransaction+0x80>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0d5b      	lsrs	r3, r3, #21
 8004908:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491a:	d112      	bne.n	8004942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff ff5a 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e00f      	b.n	8004962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3b01      	subs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	2b80      	cmp	r3, #128	@ 0x80
 800495a:	d0f2      	beq.n	8004942 <SPI_EndRxTxTransaction+0x52>
 800495c:	e000      	b.n	8004960 <SPI_EndRxTxTransaction+0x70>
        break;
 800495e:	bf00      	nop
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000000 	.word	0x20000000
 8004970:	165e9f81 	.word	0x165e9f81

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e041      	b.n	8004a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc ff86 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 fc5e 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e044      	b.n	8004ab6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x6c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a56:	d013      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x6c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x6c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <HAL_TIM_Base_Start_IT+0xb8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x6c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x6c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a16      	ldr	r2, [pc, #88]	@ (8004ad4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d111      	bne.n	8004aa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d010      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	e007      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000

08004ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e041      	b.n	8004b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f839 	bl	8004b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fbac 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_TIM_PWM_Start+0x24>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e022      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d109      	bne.n	8004bca <HAL_TIM_PWM_Start+0x3e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e015      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d109      	bne.n	8004be4 <HAL_TIM_PWM_Start+0x58>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x6a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e068      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x82>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x92>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_PWM_Start+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fdbe 	bl	80057c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a23      	ldr	r2, [pc, #140]	@ (8004cd8 <HAL_TIM_PWM_Start+0x14c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d107      	bne.n	8004c5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd8 <HAL_TIM_PWM_Start+0x14c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_TIM_PWM_Start+0x10e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c70:	d013      	beq.n	8004c9a <HAL_TIM_PWM_Start+0x10e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_TIM_PWM_Start+0x150>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_TIM_PWM_Start+0x10e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a17      	ldr	r2, [pc, #92]	@ (8004ce0 <HAL_TIM_PWM_Start+0x154>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_TIM_PWM_Start+0x10e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ce4 <HAL_TIM_PWM_Start+0x158>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_PWM_Start+0x10e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <HAL_TIM_PWM_Start+0x15c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b06      	cmp	r3, #6
 8004caa:	d010      	beq.n	8004cce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e007      	b.n	8004cce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa81 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa73 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa84 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0204 	mvn.w	r2, #4
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa57 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa49 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fa5a 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0208 	mvn.w	r2, #8
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa2d 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa1f 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa30 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0210 	mvn.w	r2, #16
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa03 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9f5 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa06 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0201 	mvn.w	r2, #1
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9cf 	bl	800520e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b80      	cmp	r3, #128	@ 0x80
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e88:	2b80      	cmp	r3, #128	@ 0x80
 8004e8a:	d107      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fd82 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b40      	cmp	r3, #64	@ 0x40
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f9cb 	bl	800525e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0220 	mvn.w	r2, #32
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fd4c 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e0ae      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	f200 809f 	bhi.w	8005068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08005069 	.word	0x08005069
 8004f38:	08005069 	.word	0x08005069
 8004f3c:	08005069 	.word	0x08005069
 8004f40:	08004fa5 	.word	0x08004fa5
 8004f44:	08005069 	.word	0x08005069
 8004f48:	08005069 	.word	0x08005069
 8004f4c:	08005069 	.word	0x08005069
 8004f50:	08004fe7 	.word	0x08004fe7
 8004f54:	08005069 	.word	0x08005069
 8004f58:	08005069 	.word	0x08005069
 8004f5c:	08005069 	.word	0x08005069
 8004f60:	08005027 	.word	0x08005027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa02 	bl	8005374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
      break;
 8004fa2:	e064      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fa48 	bl	8005440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]
      break;
 8004fe4:	e043      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa93 	bl	8005518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0204 	bic.w	r2, r2, #4
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
      break;
 8005024:	e023      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fadd 	bl	80055ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	61da      	str	r2, [r3, #28]
      break;
 8005066:	e002      	b.n	800506e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
      break;
 800506c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIM_ConfigClockSource+0x1c>
 8005098:	2302      	movs	r3, #2
 800509a:	e0b4      	b.n	8005206 <HAL_TIM_ConfigClockSource+0x186>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d4:	d03e      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xd4>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050da:	f200 8087 	bhi.w	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	f000 8086 	beq.w	80051f2 <HAL_TIM_ConfigClockSource+0x172>
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ea:	d87f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b70      	cmp	r3, #112	@ 0x70
 80050ee:	d01a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xa6>
 80050f0:	2b70      	cmp	r3, #112	@ 0x70
 80050f2:	d87b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b60      	cmp	r3, #96	@ 0x60
 80050f6:	d050      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x11a>
 80050f8:	2b60      	cmp	r3, #96	@ 0x60
 80050fa:	d877      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b50      	cmp	r3, #80	@ 0x50
 80050fe:	d03c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0xfa>
 8005100:	2b50      	cmp	r3, #80	@ 0x50
 8005102:	d873      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	d058      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x13a>
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d86f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b30      	cmp	r3, #48	@ 0x30
 800510e:	d064      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b30      	cmp	r3, #48	@ 0x30
 8005112:	d86b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d060      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d867      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d05a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	e062      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f000 fb23 	bl	8005780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e04f      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fb0c 	bl	8005780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005176:	609a      	str	r2, [r3, #8]
      break;
 8005178:	e03c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fa80 	bl	800568c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2150      	movs	r1, #80	@ 0x50
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fad9 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 8005198:	e02c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fa9f 	bl	80056ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2160      	movs	r1, #96	@ 0x60
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fac9 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051b8:	e01c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fa60 	bl	800568c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	@ 0x40
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fab9 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fab0 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a34      	ldr	r2, [pc, #208]	@ (8005358 <TIM_Base_SetConfig+0xe4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00f      	beq.n	80052ac <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005292:	d00b      	beq.n	80052ac <TIM_Base_SetConfig+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a31      	ldr	r2, [pc, #196]	@ (800535c <TIM_Base_SetConfig+0xe8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a30      	ldr	r2, [pc, #192]	@ (8005360 <TIM_Base_SetConfig+0xec>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0x38>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005364 <TIM_Base_SetConfig+0xf0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d108      	bne.n	80052be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <TIM_Base_SetConfig+0xe4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052cc:	d017      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <TIM_Base_SetConfig+0xe8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <TIM_Base_SetConfig+0xec>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a20      	ldr	r2, [pc, #128]	@ (8005364 <TIM_Base_SetConfig+0xf0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <TIM_Base_SetConfig+0xf4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <TIM_Base_SetConfig+0xf8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_Base_SetConfig+0x8a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005370 <TIM_Base_SetConfig+0xfc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a08      	ldr	r2, [pc, #32]	@ (8005358 <TIM_Base_SetConfig+0xe4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d103      	bne.n	8005344 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	615a      	str	r2, [r3, #20]
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0302 	bic.w	r3, r3, #2
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <TIM_OC1_SetConfig+0xc8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10c      	bne.n	80053ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0308 	bic.w	r3, r3, #8
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <TIM_OC1_SetConfig+0xc8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d111      	bne.n	8005416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40010000 	.word	0x40010000

08005440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0210 	bic.w	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0320 	bic.w	r3, r3, #32
 800548a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1e      	ldr	r2, [pc, #120]	@ (8005514 <TIM_OC2_SetConfig+0xd4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10d      	bne.n	80054bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <TIM_OC2_SetConfig+0xd4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d113      	bne.n	80054ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <TIM_OC3_SetConfig+0xd0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10d      	bne.n	8005592 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800557c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a14      	ldr	r2, [pc, #80]	@ (80055e8 <TIM_OC3_SetConfig+0xd0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d113      	bne.n	80055c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	621a      	str	r2, [r3, #32]
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40010000 	.word	0x40010000

080055ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	031b      	lsls	r3, r3, #12
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a10      	ldr	r2, [pc, #64]	@ (8005688 <TIM_OC4_SetConfig+0x9c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d109      	bne.n	8005660 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000

0800568c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 030a 	bic.w	r3, r3, #10
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b087      	sub	sp, #28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0210 	bic.w	r2, r3, #16
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	031b      	lsls	r3, r3, #12
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	f043 0307 	orr.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800579a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	609a      	str	r2, [r3, #8]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2201      	movs	r2, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005820:	2302      	movs	r3, #2
 8005822:	e050      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1c      	ldr	r2, [pc, #112]	@ (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005870:	d013      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a16      	ldr	r2, [pc, #88]	@ (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40014000 	.word	0x40014000

080058e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005900:	2302      	movs	r3, #2
 8005902:	e03d      	b.n	8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059be:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <ST7735_Select+0x14>)
 80059c0:	f7fd fb9e 	bl	8003100 <HAL_GPIO_WritePin>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40020000 	.word	0x40020000

080059cc <ST7735_Unselect>:

void ST7735_Unselect() {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80059d0:	2201      	movs	r2, #1
 80059d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059d6:	4802      	ldr	r0, [pc, #8]	@ (80059e0 <ST7735_Unselect+0x14>)
 80059d8:	f7fd fb92 	bl	8003100 <HAL_GPIO_WritePin>
}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40020000 	.word	0x40020000

080059e4 <ST7735_Reset>:

void ST7735_Reset() {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80059e8:	2200      	movs	r2, #0
 80059ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059ee:	4807      	ldr	r0, [pc, #28]	@ (8005a0c <ST7735_Reset+0x28>)
 80059f0:	f7fd fb86 	bl	8003100 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80059f4:	2005      	movs	r0, #5
 80059f6:	f7fc f9e5 	bl	8001dc4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80059fa:	2201      	movs	r2, #1
 80059fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a00:	4802      	ldr	r0, [pc, #8]	@ (8005a0c <ST7735_Reset+0x28>)
 8005a02:	f7fd fb7d 	bl	8003100 <HAL_GPIO_WritePin>
}
 8005a06:	bf00      	nop
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40020000 	.word	0x40020000

08005a10 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	4807      	ldr	r0, [pc, #28]	@ (8005a3c <ST7735_WriteCommand+0x2c>)
 8005a20:	f7fd fb6e 	bl	8003100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005a24:	1df9      	adds	r1, r7, #7
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4804      	ldr	r0, [pc, #16]	@ (8005a40 <ST7735_WriteCommand+0x30>)
 8005a2e:	f7fe fbf8 	bl	8004222 <HAL_SPI_Transmit>
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	2000013c 	.word	0x2000013c

08005a44 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2110      	movs	r1, #16
 8005a52:	4807      	ldr	r0, [pc, #28]	@ (8005a70 <ST7735_WriteData+0x2c>)
 8005a54:	f7fd fb54 	bl	8003100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4804      	ldr	r0, [pc, #16]	@ (8005a74 <ST7735_WriteData+0x30>)
 8005a64:	f7fe fbdd 	bl	8004222 <HAL_SPI_Transmit>
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40020000 	.word	0x40020000
 8005a74:	2000013c 	.word	0x2000013c

08005a78 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8005a8a:	e034      	b.n	8005af6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	607a      	str	r2, [r7, #4]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ffb9 	bl	8005a10 <ST7735_WriteCommand>

        numArgs = *addr++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8005aa8:	7abb      	ldrb	r3, [r7, #10]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8005ab2:	7abb      	ldrb	r3, [r7, #10]
 8005ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8005aba:	7abb      	ldrb	r3, [r7, #10]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8005ac0:	7abb      	ldrb	r3, [r7, #10]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ffbd 	bl	8005a44 <ST7735_WriteData>
            addr += numArgs;
 8005aca:	7abb      	ldrb	r3, [r7, #10]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8005ad2:	89bb      	ldrh	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8005ae2:	89bb      	ldrh	r3, [r7, #12]
 8005ae4:	2bff      	cmp	r3, #255	@ 0xff
 8005ae6:	d102      	bne.n	8005aee <ST7735_ExecuteCommandList+0x76>
 8005ae8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005aec:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8005aee:	89bb      	ldrh	r3, [r7, #12]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fc f967 	bl	8001dc4 <HAL_Delay>
    while(numCommands--) {
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	1e5a      	subs	r2, r3, #1
 8005afa:	73fa      	strb	r2, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1c5      	bne.n	8005a8c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8005b0a:	b590      	push	{r4, r7, lr}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	4604      	mov	r4, r0
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4623      	mov	r3, r4
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	71bb      	strb	r3, [r7, #6]
 8005b20:	460b      	mov	r3, r1
 8005b22:	717b      	strb	r3, [r7, #5]
 8005b24:	4613      	mov	r3, r2
 8005b26:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8005b28:	202a      	movs	r0, #42	@ 0x2a
 8005b2a:	f7ff ff71 	bl	8005a10 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8005b2e:	2300      	movs	r3, #0
 8005b30:	733b      	strb	r3, [r7, #12]
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	737b      	strb	r3, [r7, #13]
 8005b36:	2300      	movs	r3, #0
 8005b38:	73bb      	strb	r3, [r7, #14]
 8005b3a:	797b      	ldrb	r3, [r7, #5]
 8005b3c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	2104      	movs	r1, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff7d 	bl	8005a44 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8005b4a:	202b      	movs	r0, #43	@ 0x2b
 8005b4c:	f7ff ff60 	bl	8005a10 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8005b50:	79bb      	ldrb	r3, [r7, #6]
 8005b52:	3318      	adds	r3, #24
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8005b58:	793b      	ldrb	r3, [r7, #4]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8005b60:	f107 030c 	add.w	r3, r7, #12
 8005b64:	2104      	movs	r1, #4
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff ff6c 	bl	8005a44 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8005b6c:	202c      	movs	r0, #44	@ 0x2c
 8005b6e:	f7ff ff4f 	bl	8005a10 <ST7735_WriteCommand>
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
	...

08005b7c <ST7735_Init>:

void ST7735_Init() {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8005b80:	f7ff ff18 	bl	80059b4 <ST7735_Select>
    ST7735_Reset();
 8005b84:	f7ff ff2e 	bl	80059e4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8005b88:	4806      	ldr	r0, [pc, #24]	@ (8005ba4 <ST7735_Init+0x28>)
 8005b8a:	f7ff ff75 	bl	8005a78 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8005b8e:	4806      	ldr	r0, [pc, #24]	@ (8005ba8 <ST7735_Init+0x2c>)
 8005b90:	f7ff ff72 	bl	8005a78 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8005b94:	4805      	ldr	r0, [pc, #20]	@ (8005bac <ST7735_Init+0x30>)
 8005b96:	f7ff ff6f 	bl	8005a78 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8005b9a:	f7ff ff17 	bl	80059cc <ST7735_Unselect>
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	080078d4 	.word	0x080078d4
 8005ba8:	08007910 	.word	0x08007910
 8005bac:	08007920 	.word	0x08007920

08005bb0 <ST7735_WriteChar>:
    uint8_t data[] = { color >> 8, color & 0xFF };
    ST7735_WriteData(data, sizeof(data));
    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	b590      	push	{r4, r7, lr}
 8005bb4:	b089      	sub	sp, #36	@ 0x24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	80bb      	strh	r3, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	b2d8      	uxtb	r0, r3
 8005bca:	88bb      	ldrh	r3, [r7, #4]
 8005bcc:	b2d9      	uxtb	r1, r3
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b2dc      	uxtb	r4, r3
 8005bde:	88bb      	ldrh	r3, [r7, #4]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005be6:	4413      	add	r3, r2
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4622      	mov	r2, r4
 8005bf0:	f7ff ff8b 	bl	8005b0a <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 8005bf8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d106      	bne.n	8005c0e <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 8005c00:	230e      	movs	r3, #14
 8005c02:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	2b25      	cmp	r3, #37	@ 0x25
 8005c08:	d101      	bne.n	8005c0e <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e044      	b.n	8005c9e <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 8005c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c16:	78f9      	ldrb	r1, [r7, #3]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1acb      	subs	r3, r1, r3
 8005c1c:	3b20      	subs	r3, #32
 8005c1e:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8005c22:	fb03 f101 	mul.w	r1, r3, r1
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	440b      	add	r3, r1
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e029      	b.n	8005c8c <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8005c48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	733b      	strb	r3, [r7, #12]
 8005c52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8005c58:	f107 030c 	add.w	r3, r7, #12
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fef0 	bl	8005a44 <ST7735_WriteData>
 8005c64:	e00f      	b.n	8005c86 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8005c66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	723b      	strb	r3, [r7, #8]
 8005c72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fedf 	bl	8005a44 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005c90:	461a      	mov	r2, r3
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d3cf      	bcc.n	8005c38 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d3b4      	bcc.n	8005c14 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	3724      	adds	r7, #36	@ 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005cb6:	b002      	add	sp, #8
 8005cb8:	4770      	bx	lr

08005cba <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005cba:	b082      	sub	sp, #8
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af04      	add	r7, sp, #16
 8005cc2:	603a      	str	r2, [r7, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	80fb      	strh	r3, [r7, #6]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8005cce:	f7ff fe71 	bl	80059b4 <ST7735_Select>

    while(*str) {
 8005cd2:	e02d      	b.n	8005d30 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	7d3a      	ldrb	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	2b9f      	cmp	r3, #159	@ 0x9f
 8005cdc:	dd13      	ble.n	8005d06 <ST7735_WriteString+0x4c>
            x = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8005ce2:	7d7b      	ldrb	r3, [r7, #21]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	88bb      	ldrh	r3, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8005cec:	88bb      	ldrh	r3, [r7, #4]
 8005cee:	7d7a      	ldrb	r2, [r7, #21]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	2b4f      	cmp	r3, #79	@ 0x4f
 8005cf4:	dc21      	bgt.n	8005d3a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d103      	bne.n	8005d06 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	603b      	str	r3, [r7, #0]
                continue;
 8005d04:	e014      	b.n	8005d30 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	88b9      	ldrh	r1, [r7, #4]
 8005d0c:	88f8      	ldrh	r0, [r7, #6]
 8005d0e:	8c3b      	ldrh	r3, [r7, #32]
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	8bbb      	ldrh	r3, [r7, #28]
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f7ff ff48 	bl	8005bb0 <ST7735_WriteChar>
        x += font.width;
 8005d20:	7d3b      	ldrb	r3, [r7, #20]
 8005d22:	461a      	mov	r2, r3
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	4413      	add	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
        str++;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1cd      	bne.n	8005cd4 <ST7735_WriteString+0x1a>
 8005d38:	e000      	b.n	8005d3c <ST7735_WriteString+0x82>
                break;
 8005d3a:	bf00      	nop
    }

    ST7735_Unselect();
 8005d3c:	f7ff fe46 	bl	80059cc <ST7735_Unselect>
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d4a:	b002      	add	sp, #8
 8005d4c:	4770      	bx	lr
	...

08005d50 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	80fb      	strh	r3, [r7, #6]
 8005d62:	4603      	mov	r3, r0
 8005d64:	80bb      	strh	r3, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	807b      	strh	r3, [r7, #2]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b9f      	cmp	r3, #159	@ 0x9f
 8005d72:	d857      	bhi.n	8005e24 <ST7735_FillRectangle+0xd4>
 8005d74:	88bb      	ldrh	r3, [r7, #4]
 8005d76:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d78:	d854      	bhi.n	8005e24 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	4413      	add	r3, r2
 8005d80:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d82:	dd03      	ble.n	8005d8c <ST7735_FillRectangle+0x3c>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8005d8a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8005d8c:	88ba      	ldrh	r2, [r7, #4]
 8005d8e:	883b      	ldrh	r3, [r7, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	2b50      	cmp	r3, #80	@ 0x50
 8005d94:	dd03      	ble.n	8005d9e <ST7735_FillRectangle+0x4e>
 8005d96:	88bb      	ldrh	r3, [r7, #4]
 8005d98:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8005d9c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8005d9e:	f7ff fe09 	bl	80059b4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	b2d8      	uxtb	r0, r3
 8005da6:	88bb      	ldrh	r3, [r7, #4]
 8005da8:	b2d9      	uxtb	r1, r3
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b2dc      	uxtb	r4, r3
 8005dba:	88bb      	ldrh	r3, [r7, #4]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	883b      	ldrh	r3, [r7, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4622      	mov	r2, r4
 8005dcc:	f7ff fe9d 	bl	8005b0a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8005dd0:	8c3b      	ldrh	r3, [r7, #32]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	733b      	strb	r3, [r7, #12]
 8005dda:	8c3b      	ldrh	r3, [r7, #32]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005de0:	2201      	movs	r2, #1
 8005de2:	2110      	movs	r1, #16
 8005de4:	4811      	ldr	r0, [pc, #68]	@ (8005e2c <ST7735_FillRectangle+0xdc>)
 8005de6:	f7fd f98b 	bl	8003100 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8005dea:	883b      	ldrh	r3, [r7, #0]
 8005dec:	80bb      	strh	r3, [r7, #4]
 8005dee:	e013      	b.n	8005e18 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8005df0:	887b      	ldrh	r3, [r7, #2]
 8005df2:	80fb      	strh	r3, [r7, #6]
 8005df4:	e00a      	b.n	8005e0c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8005df6:	f107 010c 	add.w	r1, r7, #12
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	2202      	movs	r2, #2
 8005e00:	480b      	ldr	r0, [pc, #44]	@ (8005e30 <ST7735_FillRectangle+0xe0>)
 8005e02:	f7fe fa0e 	bl	8004222 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	80fb      	strh	r3, [r7, #6]
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f1      	bne.n	8005df6 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8005e12:	88bb      	ldrh	r3, [r7, #4]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	80bb      	strh	r3, [r7, #4]
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e8      	bne.n	8005df0 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8005e1e:	f7ff fdd5 	bl	80059cc <ST7735_Unselect>
 8005e22:	e000      	b.n	8005e26 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005e24:	bf00      	nop
}
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd90      	pop	{r4, r7, pc}
 8005e2c:	40020000 	.word	0x40020000
 8005e30:	2000013c 	.word	0x2000013c

08005e34 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2350      	movs	r3, #80	@ 0x50
 8005e44:	22a0      	movs	r2, #160	@ 0xa0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7ff ff81 	bl	8005d50 <ST7735_FillRectangle>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <ST7735_InvertColors>:
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8005e60:	f7ff fda8 	bl	80059b4 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <ST7735_InvertColors+0x18>
 8005e6a:	2321      	movs	r3, #33	@ 0x21
 8005e6c:	e000      	b.n	8005e70 <ST7735_InvertColors+0x1a>
 8005e6e:	2320      	movs	r3, #32
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fdcd 	bl	8005a10 <ST7735_WriteCommand>
    ST7735_Unselect();
 8005e76:	f7ff fda9 	bl	80059cc <ST7735_Unselect>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8005e8e:	f107 020f 	add.w	r2, r7, #15
 8005e92:	1df9      	adds	r1, r7, #7
 8005e94:	2364      	movs	r3, #100	@ 0x64
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4804      	ldr	r0, [pc, #16]	@ (8005eac <W25qxx_Spi+0x28>)
 8005e9c:	f7fe fafd 	bl	800449a <HAL_SPI_TransmitReceive>
	return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000013c 	.word	0x2000013c

08005eb0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005ecc:	4813      	ldr	r0, [pc, #76]	@ (8005f1c <W25qxx_ReadID+0x6c>)
 8005ece:	f7fd f917 	bl	8003100 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8005ed2:	209f      	movs	r0, #159	@ 0x9f
 8005ed4:	f7ff ffd6 	bl	8005e84 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ed8:	20a5      	movs	r0, #165	@ 0xa5
 8005eda:	f7ff ffd3 	bl	8005e84 <W25qxx_Spi>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ee2:	20a5      	movs	r0, #165	@ 0xa5
 8005ee4:	f7ff ffce 	bl	8005e84 <W25qxx_Spi>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005eec:	20a5      	movs	r0, #165	@ 0xa5
 8005eee:	f7ff ffc9 	bl	8005e84 <W25qxx_Spi>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005efc:	4807      	ldr	r0, [pc, #28]	@ (8005f1c <W25qxx_ReadID+0x6c>)
 8005efe:	f7fd f8ff 	bl	8003100 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	041a      	lsls	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
	return Temp;
 8005f12:	68fb      	ldr	r3, [r7, #12]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40020800 	.word	0x40020800

08005f20 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005f26:	2200      	movs	r2, #0
 8005f28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f2c:	4816      	ldr	r0, [pc, #88]	@ (8005f88 <W25qxx_ReadUniqID+0x68>)
 8005f2e:	f7fd f8e7 	bl	8003100 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8005f32:	204b      	movs	r0, #75	@ 0x4b
 8005f34:	f7ff ffa6 	bl	8005e84 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	71fb      	strb	r3, [r7, #7]
 8005f3c:	e005      	b.n	8005f4a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005f3e:	20a5      	movs	r0, #165	@ 0xa5
 8005f40:	f7ff ffa0 	bl	8005e84 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	3301      	adds	r3, #1
 8005f48:	71fb      	strb	r3, [r7, #7]
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d9f6      	bls.n	8005f3e <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	71bb      	strb	r3, [r7, #6]
 8005f54:	e00b      	b.n	8005f6e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005f56:	79bc      	ldrb	r4, [r7, #6]
 8005f58:	20a5      	movs	r0, #165	@ 0xa5
 8005f5a:	f7ff ff93 	bl	8005e84 <W25qxx_Spi>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461a      	mov	r2, r3
 8005f62:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <W25qxx_ReadUniqID+0x6c>)
 8005f64:	4423      	add	r3, r4
 8005f66:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8005f68:	79bb      	ldrb	r3, [r7, #6]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	71bb      	strb	r3, [r7, #6]
 8005f6e:	79bb      	ldrb	r3, [r7, #6]
 8005f70:	2b07      	cmp	r3, #7
 8005f72:	d9f0      	bls.n	8005f56 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005f74:	2201      	movs	r2, #1
 8005f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f7a:	4803      	ldr	r0, [pc, #12]	@ (8005f88 <W25qxx_ReadUniqID+0x68>)
 8005f7c:	f7fd f8c0 	bl	8003100 <HAL_GPIO_WritePin>
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}
 8005f88:	40020800 	.word	0x40020800
 8005f8c:	200003dc 	.word	0x200003dc

08005f90 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005fa4:	481c      	ldr	r0, [pc, #112]	@ (8006018 <W25qxx_ReadStatusRegister+0x88>)
 8005fa6:	f7fd f8ab 	bl	8003100 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10c      	bne.n	8005fca <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8005fb0:	2005      	movs	r0, #5
 8005fb2:	f7ff ff67 	bl	8005e84 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005fb6:	20a5      	movs	r0, #165	@ 0xa5
 8005fb8:	f7ff ff64 	bl	8005e84 <W25qxx_Spi>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8005fc0:	4a16      	ldr	r2, [pc, #88]	@ (800601c <W25qxx_ReadStatusRegister+0x8c>)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 8005fc8:	e01b      	b.n	8006002 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d10c      	bne.n	8005fea <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8005fd0:	2035      	movs	r0, #53	@ 0x35
 8005fd2:	f7ff ff57 	bl	8005e84 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005fd6:	20a5      	movs	r0, #165	@ 0xa5
 8005fd8:	f7ff ff54 	bl	8005e84 <W25qxx_Spi>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8005fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800601c <W25qxx_ReadStatusRegister+0x8c>)
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8005fe8:	e00b      	b.n	8006002 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005fea:	2015      	movs	r0, #21
 8005fec:	f7ff ff4a 	bl	8005e84 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005ff0:	20a5      	movs	r0, #165	@ 0xa5
 8005ff2:	f7ff ff47 	bl	8005e84 <W25qxx_Spi>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005ffa:	4a08      	ldr	r2, [pc, #32]	@ (800601c <W25qxx_ReadStatusRegister+0x8c>)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8006002:	2201      	movs	r2, #1
 8006004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006008:	4803      	ldr	r0, [pc, #12]	@ (8006018 <W25qxx_ReadStatusRegister+0x88>)
 800600a:	f7fd f879 	bl	8003100 <HAL_GPIO_WritePin>
	return status;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40020800 	.word	0x40020800
 800601c:	200003dc 	.word	0x200003dc

08006020 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8006026:	4b65      	ldr	r3, [pc, #404]	@ (80061bc <W25qxx_Init+0x19c>)
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800602e:	e002      	b.n	8006036 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8006030:	2001      	movs	r0, #1
 8006032:	f7fb fec7 	bl	8001dc4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8006036:	f7fb feb9 	bl	8001dac <HAL_GetTick>
 800603a:	4603      	mov	r3, r0
 800603c:	2b63      	cmp	r3, #99	@ 0x63
 800603e:	d9f7      	bls.n	8006030 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8006040:	2201      	movs	r2, #1
 8006042:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006046:	485e      	ldr	r0, [pc, #376]	@ (80061c0 <W25qxx_Init+0x1a0>)
 8006048:	f7fd f85a 	bl	8003100 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800604c:	2064      	movs	r0, #100	@ 0x64
 800604e:	f7fb feb9 	bl	8001dc4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8006052:	f7ff ff2d 	bl	8005eb0 <W25qxx_ReadID>
 8006056:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	3b11      	subs	r3, #17
 800605e:	2b0f      	cmp	r3, #15
 8006060:	d86b      	bhi.n	800613a <W25qxx_Init+0x11a>
 8006062:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <W25qxx_Init+0x48>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	0800612d 	.word	0x0800612d
 800606c:	0800611f 	.word	0x0800611f
 8006070:	08006111 	.word	0x08006111
 8006074:	08006103 	.word	0x08006103
 8006078:	080060f5 	.word	0x080060f5
 800607c:	080060e7 	.word	0x080060e7
 8006080:	080060d9 	.word	0x080060d9
 8006084:	080060c9 	.word	0x080060c9
 8006088:	080060b9 	.word	0x080060b9
 800608c:	0800613b 	.word	0x0800613b
 8006090:	0800613b 	.word	0x0800613b
 8006094:	0800613b 	.word	0x0800613b
 8006098:	0800613b 	.word	0x0800613b
 800609c:	0800613b 	.word	0x0800613b
 80060a0:	0800613b 	.word	0x0800613b
 80060a4:	080060a9 	.word	0x080060a9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80060a8:	4b44      	ldr	r3, [pc, #272]	@ (80061bc <W25qxx_Init+0x19c>)
 80060aa:	220a      	movs	r2, #10
 80060ac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80060ae:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <W25qxx_Init+0x19c>)
 80060b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80060b6:	e046      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80060b8:	4b40      	ldr	r3, [pc, #256]	@ (80061bc <W25qxx_Init+0x19c>)
 80060ba:	2209      	movs	r2, #9
 80060bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80060be:	4b3f      	ldr	r3, [pc, #252]	@ (80061bc <W25qxx_Init+0x19c>)
 80060c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80060c6:	e03e      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80060c8:	4b3c      	ldr	r3, [pc, #240]	@ (80061bc <W25qxx_Init+0x19c>)
 80060ca:	2208      	movs	r2, #8
 80060cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80060ce:	4b3b      	ldr	r3, [pc, #236]	@ (80061bc <W25qxx_Init+0x19c>)
 80060d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80060d6:	e036      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80060d8:	4b38      	ldr	r3, [pc, #224]	@ (80061bc <W25qxx_Init+0x19c>)
 80060da:	2207      	movs	r2, #7
 80060dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80060de:	4b37      	ldr	r3, [pc, #220]	@ (80061bc <W25qxx_Init+0x19c>)
 80060e0:	2280      	movs	r2, #128	@ 0x80
 80060e2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80060e4:	e02f      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80060e6:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <W25qxx_Init+0x19c>)
 80060e8:	2206      	movs	r2, #6
 80060ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80060ec:	4b33      	ldr	r3, [pc, #204]	@ (80061bc <W25qxx_Init+0x19c>)
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80060f2:	e028      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80060f4:	4b31      	ldr	r3, [pc, #196]	@ (80061bc <W25qxx_Init+0x19c>)
 80060f6:	2205      	movs	r2, #5
 80060f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80060fa:	4b30      	ldr	r3, [pc, #192]	@ (80061bc <W25qxx_Init+0x19c>)
 80060fc:	2220      	movs	r2, #32
 80060fe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8006100:	e021      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8006102:	4b2e      	ldr	r3, [pc, #184]	@ (80061bc <W25qxx_Init+0x19c>)
 8006104:	2204      	movs	r2, #4
 8006106:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8006108:	4b2c      	ldr	r3, [pc, #176]	@ (80061bc <W25qxx_Init+0x19c>)
 800610a:	2210      	movs	r2, #16
 800610c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800610e:	e01a      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8006110:	4b2a      	ldr	r3, [pc, #168]	@ (80061bc <W25qxx_Init+0x19c>)
 8006112:	2203      	movs	r2, #3
 8006114:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8006116:	4b29      	ldr	r3, [pc, #164]	@ (80061bc <W25qxx_Init+0x19c>)
 8006118:	2208      	movs	r2, #8
 800611a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800611c:	e013      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800611e:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <W25qxx_Init+0x19c>)
 8006120:	2202      	movs	r2, #2
 8006122:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8006124:	4b25      	ldr	r3, [pc, #148]	@ (80061bc <W25qxx_Init+0x19c>)
 8006126:	2204      	movs	r2, #4
 8006128:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800612a:	e00c      	b.n	8006146 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800612c:	4b23      	ldr	r3, [pc, #140]	@ (80061bc <W25qxx_Init+0x19c>)
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8006132:	4b22      	ldr	r3, [pc, #136]	@ (80061bc <W25qxx_Init+0x19c>)
 8006134:	2202      	movs	r2, #2
 8006136:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8006138:	e005      	b.n	8006146 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <W25qxx_Init+0x19c>)
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 8006142:	2300      	movs	r3, #0
 8006144:	e036      	b.n	80061b4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8006146:	4b1d      	ldr	r3, [pc, #116]	@ (80061bc <W25qxx_Init+0x19c>)
 8006148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800614c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800614e:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <W25qxx_Init+0x19c>)
 8006150:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006154:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8006156:	4b19      	ldr	r3, [pc, #100]	@ (80061bc <W25qxx_Init+0x19c>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <W25qxx_Init+0x19c>)
 800615e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8006160:	4b16      	ldr	r3, [pc, #88]	@ (80061bc <W25qxx_Init+0x19c>)
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <W25qxx_Init+0x19c>)
 8006166:	6912      	ldr	r2, [r2, #16]
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <W25qxx_Init+0x19c>)
 800616e:	8952      	ldrh	r2, [r2, #10]
 8006170:	fbb3 f3f2 	udiv	r3, r3, r2
 8006174:	4a11      	ldr	r2, [pc, #68]	@ (80061bc <W25qxx_Init+0x19c>)
 8006176:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8006178:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <W25qxx_Init+0x19c>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	4a0f      	ldr	r2, [pc, #60]	@ (80061bc <W25qxx_Init+0x19c>)
 8006180:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8006182:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <W25qxx_Init+0x19c>)
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4a0d      	ldr	r2, [pc, #52]	@ (80061bc <W25qxx_Init+0x19c>)
 8006188:	6912      	ldr	r2, [r2, #16]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	0a9b      	lsrs	r3, r3, #10
 8006190:	4a0a      	ldr	r2, [pc, #40]	@ (80061bc <W25qxx_Init+0x19c>)
 8006192:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8006194:	f7ff fec4 	bl	8005f20 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8006198:	2001      	movs	r0, #1
 800619a:	f7ff fef9 	bl	8005f90 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800619e:	2002      	movs	r0, #2
 80061a0:	f7ff fef6 	bl	8005f90 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80061a4:	2003      	movs	r0, #3
 80061a6:	f7ff fef3 	bl	8005f90 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80061aa:	4b04      	ldr	r3, [pc, #16]	@ (80061bc <W25qxx_Init+0x19c>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 80061b2:	2301      	movs	r3, #1
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200003dc 	.word	0x200003dc
 80061c0:	40020800 	.word	0x40020800

080061c4 <siprintf>:
 80061c4:	b40e      	push	{r1, r2, r3}
 80061c6:	b500      	push	{lr}
 80061c8:	b09c      	sub	sp, #112	@ 0x70
 80061ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80061cc:	9002      	str	r0, [sp, #8]
 80061ce:	9006      	str	r0, [sp, #24]
 80061d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061d4:	4809      	ldr	r0, [pc, #36]	@ (80061fc <siprintf+0x38>)
 80061d6:	9107      	str	r1, [sp, #28]
 80061d8:	9104      	str	r1, [sp, #16]
 80061da:	4909      	ldr	r1, [pc, #36]	@ (8006200 <siprintf+0x3c>)
 80061dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e0:	9105      	str	r1, [sp, #20]
 80061e2:	6800      	ldr	r0, [r0, #0]
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	a902      	add	r1, sp, #8
 80061e8:	f000 f994 	bl	8006514 <_svfiprintf_r>
 80061ec:	9b02      	ldr	r3, [sp, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	b01c      	add	sp, #112	@ 0x70
 80061f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f8:	b003      	add	sp, #12
 80061fa:	4770      	bx	lr
 80061fc:	20000014 	.word	0x20000014
 8006200:	ffff0208 	.word	0xffff0208

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	@ (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000014 	.word	0x20000014

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4d0d      	ldr	r5, [pc, #52]	@ (8006258 <__libc_init_array+0x38>)
 8006224:	4c0d      	ldr	r4, [pc, #52]	@ (800625c <__libc_init_array+0x3c>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	2600      	movs	r6, #0
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	4d0b      	ldr	r5, [pc, #44]	@ (8006260 <__libc_init_array+0x40>)
 8006232:	4c0c      	ldr	r4, [pc, #48]	@ (8006264 <__libc_init_array+0x44>)
 8006234:	f000 fc66 	bl	8006b04 <_init>
 8006238:	1b64      	subs	r4, r4, r5
 800623a:	10a4      	asrs	r4, r4, #2
 800623c:	2600      	movs	r6, #0
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	08007988 	.word	0x08007988
 800625c:	08007988 	.word	0x08007988
 8006260:	08007988 	.word	0x08007988
 8006264:	0800798c 	.word	0x0800798c

08006268 <__retarget_lock_acquire_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_release_recursive>:
 800626a:	4770      	bx	lr

0800626c <_free_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4605      	mov	r5, r0
 8006270:	2900      	cmp	r1, #0
 8006272:	d041      	beq.n	80062f8 <_free_r+0x8c>
 8006274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006278:	1f0c      	subs	r4, r1, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfb8      	it	lt
 800627e:	18e4      	addlt	r4, r4, r3
 8006280:	f000 f8e0 	bl	8006444 <__malloc_lock>
 8006284:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <_free_r+0x90>)
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	b933      	cbnz	r3, 8006298 <_free_r+0x2c>
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6014      	str	r4, [r2, #0]
 800628e:	4628      	mov	r0, r5
 8006290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006294:	f000 b8dc 	b.w	8006450 <__malloc_unlock>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d908      	bls.n	80062ae <_free_r+0x42>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1809      	addeq	r1, r1, r0
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	e7ed      	b.n	800628a <_free_r+0x1e>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x4c>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x42>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1850      	adds	r0, r2, r1
 80062bc:	42a0      	cmp	r0, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x6c>
 80062c0:	6820      	ldr	r0, [r4, #0]
 80062c2:	4401      	add	r1, r0
 80062c4:	1850      	adds	r0, r2, r1
 80062c6:	4283      	cmp	r3, r0
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1e0      	bne.n	800628e <_free_r+0x22>
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	4408      	add	r0, r1
 80062d4:	6010      	str	r0, [r2, #0]
 80062d6:	e7da      	b.n	800628e <_free_r+0x22>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x74>
 80062da:	230c      	movs	r3, #12
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	e7d6      	b.n	800628e <_free_r+0x22>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	1821      	adds	r1, r4, r0
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1809      	addeq	r1, r1, r0
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6054      	str	r4, [r2, #4]
 80062f6:	e7ca      	b.n	800628e <_free_r+0x22>
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	20000548 	.word	0x20000548

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0f      	ldr	r6, [pc, #60]	@ (8006340 <sbrk_aligned+0x40>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 fba6 	bl	8006a5c <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fba1 	bl	8006a5c <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d103      	bne.n	8006326 <sbrk_aligned+0x26>
 800631e:	f04f 34ff 	mov.w	r4, #4294967295
 8006322:	4620      	mov	r0, r4
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d0f8      	beq.n	8006322 <sbrk_aligned+0x22>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fb92 	bl	8006a5c <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d1f2      	bne.n	8006322 <sbrk_aligned+0x22>
 800633c:	e7ef      	b.n	800631e <sbrk_aligned+0x1e>
 800633e:	bf00      	nop
 8006340:	20000544 	.word	0x20000544

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4606      	mov	r6, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d904      	bls.n	800636a <_malloc_r+0x26>
 8006360:	230c      	movs	r3, #12
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006440 <_malloc_r+0xfc>
 800636e:	f000 f869 	bl	8006444 <__malloc_lock>
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	461c      	mov	r4, r3
 8006378:	bb44      	cbnz	r4, 80063cc <_malloc_r+0x88>
 800637a:	4629      	mov	r1, r5
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff ffbf 	bl	8006300 <sbrk_aligned>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	4604      	mov	r4, r0
 8006386:	d158      	bne.n	800643a <_malloc_r+0xf6>
 8006388:	f8d8 4000 	ldr.w	r4, [r8]
 800638c:	4627      	mov	r7, r4
 800638e:	2f00      	cmp	r7, #0
 8006390:	d143      	bne.n	800641a <_malloc_r+0xd6>
 8006392:	2c00      	cmp	r4, #0
 8006394:	d04b      	beq.n	800642e <_malloc_r+0xea>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	4639      	mov	r1, r7
 800639a:	4630      	mov	r0, r6
 800639c:	eb04 0903 	add.w	r9, r4, r3
 80063a0:	f000 fb5c 	bl	8006a5c <_sbrk_r>
 80063a4:	4581      	cmp	r9, r0
 80063a6:	d142      	bne.n	800642e <_malloc_r+0xea>
 80063a8:	6821      	ldr	r1, [r4, #0]
 80063aa:	1a6d      	subs	r5, r5, r1
 80063ac:	4629      	mov	r1, r5
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ffa6 	bl	8006300 <sbrk_aligned>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d03a      	beq.n	800642e <_malloc_r+0xea>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	442b      	add	r3, r5
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	f8d8 3000 	ldr.w	r3, [r8]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	bb62      	cbnz	r2, 8006420 <_malloc_r+0xdc>
 80063c6:	f8c8 7000 	str.w	r7, [r8]
 80063ca:	e00f      	b.n	80063ec <_malloc_r+0xa8>
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	1b52      	subs	r2, r2, r5
 80063d0:	d420      	bmi.n	8006414 <_malloc_r+0xd0>
 80063d2:	2a0b      	cmp	r2, #11
 80063d4:	d917      	bls.n	8006406 <_malloc_r+0xc2>
 80063d6:	1961      	adds	r1, r4, r5
 80063d8:	42a3      	cmp	r3, r4
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	6059      	strne	r1, [r3, #4]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	bf08      	it	eq
 80063e4:	f8c8 1000 	streq.w	r1, [r8]
 80063e8:	5162      	str	r2, [r4, r5]
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 f82f 	bl	8006450 <__malloc_unlock>
 80063f2:	f104 000b 	add.w	r0, r4, #11
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	f020 0007 	bic.w	r0, r0, #7
 80063fc:	1ac2      	subs	r2, r0, r3
 80063fe:	bf1c      	itt	ne
 8006400:	1a1b      	subne	r3, r3, r0
 8006402:	50a3      	strne	r3, [r4, r2]
 8006404:	e7af      	b.n	8006366 <_malloc_r+0x22>
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	42a3      	cmp	r3, r4
 800640a:	bf0c      	ite	eq
 800640c:	f8c8 2000 	streq.w	r2, [r8]
 8006410:	605a      	strne	r2, [r3, #4]
 8006412:	e7eb      	b.n	80063ec <_malloc_r+0xa8>
 8006414:	4623      	mov	r3, r4
 8006416:	6864      	ldr	r4, [r4, #4]
 8006418:	e7ae      	b.n	8006378 <_malloc_r+0x34>
 800641a:	463c      	mov	r4, r7
 800641c:	687f      	ldr	r7, [r7, #4]
 800641e:	e7b6      	b.n	800638e <_malloc_r+0x4a>
 8006420:	461a      	mov	r2, r3
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	42a3      	cmp	r3, r4
 8006426:	d1fb      	bne.n	8006420 <_malloc_r+0xdc>
 8006428:	2300      	movs	r3, #0
 800642a:	6053      	str	r3, [r2, #4]
 800642c:	e7de      	b.n	80063ec <_malloc_r+0xa8>
 800642e:	230c      	movs	r3, #12
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	4630      	mov	r0, r6
 8006434:	f000 f80c 	bl	8006450 <__malloc_unlock>
 8006438:	e794      	b.n	8006364 <_malloc_r+0x20>
 800643a:	6005      	str	r5, [r0, #0]
 800643c:	e7d6      	b.n	80063ec <_malloc_r+0xa8>
 800643e:	bf00      	nop
 8006440:	20000548 	.word	0x20000548

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__malloc_lock+0x8>)
 8006446:	f7ff bf0f 	b.w	8006268 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000540 	.word	0x20000540

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	@ (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff bf0a 	b.w	800626a <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000540 	.word	0x20000540

0800645c <__ssputs_r>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	688e      	ldr	r6, [r1, #8]
 8006462:	461f      	mov	r7, r3
 8006464:	42be      	cmp	r6, r7
 8006466:	680b      	ldr	r3, [r1, #0]
 8006468:	4682      	mov	sl, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4690      	mov	r8, r2
 800646e:	d82d      	bhi.n	80064cc <__ssputs_r+0x70>
 8006470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006478:	d026      	beq.n	80064c8 <__ssputs_r+0x6c>
 800647a:	6965      	ldr	r5, [r4, #20]
 800647c:	6909      	ldr	r1, [r1, #16]
 800647e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006482:	eba3 0901 	sub.w	r9, r3, r1
 8006486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800648a:	1c7b      	adds	r3, r7, #1
 800648c:	444b      	add	r3, r9
 800648e:	106d      	asrs	r5, r5, #1
 8006490:	429d      	cmp	r5, r3
 8006492:	bf38      	it	cc
 8006494:	461d      	movcc	r5, r3
 8006496:	0553      	lsls	r3, r2, #21
 8006498:	d527      	bpl.n	80064ea <__ssputs_r+0x8e>
 800649a:	4629      	mov	r1, r5
 800649c:	f7ff ff52 	bl	8006344 <_malloc_r>
 80064a0:	4606      	mov	r6, r0
 80064a2:	b360      	cbz	r0, 80064fe <__ssputs_r+0xa2>
 80064a4:	6921      	ldr	r1, [r4, #16]
 80064a6:	464a      	mov	r2, r9
 80064a8:	f000 fae8 	bl	8006a7c <memcpy>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	6126      	str	r6, [r4, #16]
 80064ba:	6165      	str	r5, [r4, #20]
 80064bc:	444e      	add	r6, r9
 80064be:	eba5 0509 	sub.w	r5, r5, r9
 80064c2:	6026      	str	r6, [r4, #0]
 80064c4:	60a5      	str	r5, [r4, #8]
 80064c6:	463e      	mov	r6, r7
 80064c8:	42be      	cmp	r6, r7
 80064ca:	d900      	bls.n	80064ce <__ssputs_r+0x72>
 80064cc:	463e      	mov	r6, r7
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	4632      	mov	r2, r6
 80064d2:	4641      	mov	r1, r8
 80064d4:	f000 faa8 	bl	8006a28 <memmove>
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	1b9b      	subs	r3, r3, r6
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4433      	add	r3, r6
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	462a      	mov	r2, r5
 80064ec:	f000 fad4 	bl	8006a98 <_realloc_r>
 80064f0:	4606      	mov	r6, r0
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1e0      	bne.n	80064b8 <__ssputs_r+0x5c>
 80064f6:	6921      	ldr	r1, [r4, #16]
 80064f8:	4650      	mov	r0, sl
 80064fa:	f7ff feb7 	bl	800626c <_free_r>
 80064fe:	230c      	movs	r3, #12
 8006500:	f8ca 3000 	str.w	r3, [sl]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e7e9      	b.n	80064e6 <__ssputs_r+0x8a>
	...

08006514 <_svfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	4698      	mov	r8, r3
 800651a:	898b      	ldrh	r3, [r1, #12]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	b09d      	sub	sp, #116	@ 0x74
 8006520:	4607      	mov	r7, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4614      	mov	r4, r2
 8006526:	d510      	bpl.n	800654a <_svfiprintf_r+0x36>
 8006528:	690b      	ldr	r3, [r1, #16]
 800652a:	b973      	cbnz	r3, 800654a <_svfiprintf_r+0x36>
 800652c:	2140      	movs	r1, #64	@ 0x40
 800652e:	f7ff ff09 	bl	8006344 <_malloc_r>
 8006532:	6028      	str	r0, [r5, #0]
 8006534:	6128      	str	r0, [r5, #16]
 8006536:	b930      	cbnz	r0, 8006546 <_svfiprintf_r+0x32>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	b01d      	add	sp, #116	@ 0x74
 8006542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006546:	2340      	movs	r3, #64	@ 0x40
 8006548:	616b      	str	r3, [r5, #20]
 800654a:	2300      	movs	r3, #0
 800654c:	9309      	str	r3, [sp, #36]	@ 0x24
 800654e:	2320      	movs	r3, #32
 8006550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006554:	f8cd 800c 	str.w	r8, [sp, #12]
 8006558:	2330      	movs	r3, #48	@ 0x30
 800655a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066f8 <_svfiprintf_r+0x1e4>
 800655e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006562:	f04f 0901 	mov.w	r9, #1
 8006566:	4623      	mov	r3, r4
 8006568:	469a      	mov	sl, r3
 800656a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656e:	b10a      	cbz	r2, 8006574 <_svfiprintf_r+0x60>
 8006570:	2a25      	cmp	r2, #37	@ 0x25
 8006572:	d1f9      	bne.n	8006568 <_svfiprintf_r+0x54>
 8006574:	ebba 0b04 	subs.w	fp, sl, r4
 8006578:	d00b      	beq.n	8006592 <_svfiprintf_r+0x7e>
 800657a:	465b      	mov	r3, fp
 800657c:	4622      	mov	r2, r4
 800657e:	4629      	mov	r1, r5
 8006580:	4638      	mov	r0, r7
 8006582:	f7ff ff6b 	bl	800645c <__ssputs_r>
 8006586:	3001      	adds	r0, #1
 8006588:	f000 80a7 	beq.w	80066da <_svfiprintf_r+0x1c6>
 800658c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800658e:	445a      	add	r2, fp
 8006590:	9209      	str	r2, [sp, #36]	@ 0x24
 8006592:	f89a 3000 	ldrb.w	r3, [sl]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 809f 	beq.w	80066da <_svfiprintf_r+0x1c6>
 800659c:	2300      	movs	r3, #0
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a6:	f10a 0a01 	add.w	sl, sl, #1
 80065aa:	9304      	str	r3, [sp, #16]
 80065ac:	9307      	str	r3, [sp, #28]
 80065ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80065b4:	4654      	mov	r4, sl
 80065b6:	2205      	movs	r2, #5
 80065b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065bc:	484e      	ldr	r0, [pc, #312]	@ (80066f8 <_svfiprintf_r+0x1e4>)
 80065be:	f7f9 fe0f 	bl	80001e0 <memchr>
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	b9d8      	cbnz	r0, 80065fe <_svfiprintf_r+0xea>
 80065c6:	06d0      	lsls	r0, r2, #27
 80065c8:	bf44      	itt	mi
 80065ca:	2320      	movmi	r3, #32
 80065cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065d0:	0711      	lsls	r1, r2, #28
 80065d2:	bf44      	itt	mi
 80065d4:	232b      	movmi	r3, #43	@ 0x2b
 80065d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065da:	f89a 3000 	ldrb.w	r3, [sl]
 80065de:	2b2a      	cmp	r3, #42	@ 0x2a
 80065e0:	d015      	beq.n	800660e <_svfiprintf_r+0xfa>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	4654      	mov	r4, sl
 80065e6:	2000      	movs	r0, #0
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4621      	mov	r1, r4
 80065ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f2:	3b30      	subs	r3, #48	@ 0x30
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d94b      	bls.n	8006690 <_svfiprintf_r+0x17c>
 80065f8:	b1b0      	cbz	r0, 8006628 <_svfiprintf_r+0x114>
 80065fa:	9207      	str	r2, [sp, #28]
 80065fc:	e014      	b.n	8006628 <_svfiprintf_r+0x114>
 80065fe:	eba0 0308 	sub.w	r3, r0, r8
 8006602:	fa09 f303 	lsl.w	r3, r9, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	46a2      	mov	sl, r4
 800660c:	e7d2      	b.n	80065b4 <_svfiprintf_r+0xa0>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	1d19      	adds	r1, r3, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9103      	str	r1, [sp, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfbb      	ittet	lt
 800661a:	425b      	neglt	r3, r3
 800661c:	f042 0202 	orrlt.w	r2, r2, #2
 8006620:	9307      	strge	r3, [sp, #28]
 8006622:	9307      	strlt	r3, [sp, #28]
 8006624:	bfb8      	it	lt
 8006626:	9204      	strlt	r2, [sp, #16]
 8006628:	7823      	ldrb	r3, [r4, #0]
 800662a:	2b2e      	cmp	r3, #46	@ 0x2e
 800662c:	d10a      	bne.n	8006644 <_svfiprintf_r+0x130>
 800662e:	7863      	ldrb	r3, [r4, #1]
 8006630:	2b2a      	cmp	r3, #42	@ 0x2a
 8006632:	d132      	bne.n	800669a <_svfiprintf_r+0x186>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	9203      	str	r2, [sp, #12]
 800663c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006640:	3402      	adds	r4, #2
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006708 <_svfiprintf_r+0x1f4>
 8006648:	7821      	ldrb	r1, [r4, #0]
 800664a:	2203      	movs	r2, #3
 800664c:	4650      	mov	r0, sl
 800664e:	f7f9 fdc7 	bl	80001e0 <memchr>
 8006652:	b138      	cbz	r0, 8006664 <_svfiprintf_r+0x150>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	eba0 000a 	sub.w	r0, r0, sl
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	4082      	lsls	r2, r0
 800665e:	4313      	orrs	r3, r2
 8006660:	3401      	adds	r4, #1
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006668:	4824      	ldr	r0, [pc, #144]	@ (80066fc <_svfiprintf_r+0x1e8>)
 800666a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800666e:	2206      	movs	r2, #6
 8006670:	f7f9 fdb6 	bl	80001e0 <memchr>
 8006674:	2800      	cmp	r0, #0
 8006676:	d036      	beq.n	80066e6 <_svfiprintf_r+0x1d2>
 8006678:	4b21      	ldr	r3, [pc, #132]	@ (8006700 <_svfiprintf_r+0x1ec>)
 800667a:	bb1b      	cbnz	r3, 80066c4 <_svfiprintf_r+0x1b0>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	3307      	adds	r3, #7
 8006680:	f023 0307 	bic.w	r3, r3, #7
 8006684:	3308      	adds	r3, #8
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668a:	4433      	add	r3, r6
 800668c:	9309      	str	r3, [sp, #36]	@ 0x24
 800668e:	e76a      	b.n	8006566 <_svfiprintf_r+0x52>
 8006690:	fb0c 3202 	mla	r2, ip, r2, r3
 8006694:	460c      	mov	r4, r1
 8006696:	2001      	movs	r0, #1
 8006698:	e7a8      	b.n	80065ec <_svfiprintf_r+0xd8>
 800669a:	2300      	movs	r3, #0
 800669c:	3401      	adds	r4, #1
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	4619      	mov	r1, r3
 80066a2:	f04f 0c0a 	mov.w	ip, #10
 80066a6:	4620      	mov	r0, r4
 80066a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ac:	3a30      	subs	r2, #48	@ 0x30
 80066ae:	2a09      	cmp	r2, #9
 80066b0:	d903      	bls.n	80066ba <_svfiprintf_r+0x1a6>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0c6      	beq.n	8006644 <_svfiprintf_r+0x130>
 80066b6:	9105      	str	r1, [sp, #20]
 80066b8:	e7c4      	b.n	8006644 <_svfiprintf_r+0x130>
 80066ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80066be:	4604      	mov	r4, r0
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7f0      	b.n	80066a6 <_svfiprintf_r+0x192>
 80066c4:	ab03      	add	r3, sp, #12
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	462a      	mov	r2, r5
 80066ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <_svfiprintf_r+0x1f0>)
 80066cc:	a904      	add	r1, sp, #16
 80066ce:	4638      	mov	r0, r7
 80066d0:	f3af 8000 	nop.w
 80066d4:	1c42      	adds	r2, r0, #1
 80066d6:	4606      	mov	r6, r0
 80066d8:	d1d6      	bne.n	8006688 <_svfiprintf_r+0x174>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	065b      	lsls	r3, r3, #25
 80066de:	f53f af2d 	bmi.w	800653c <_svfiprintf_r+0x28>
 80066e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066e4:	e72c      	b.n	8006540 <_svfiprintf_r+0x2c>
 80066e6:	ab03      	add	r3, sp, #12
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	462a      	mov	r2, r5
 80066ec:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <_svfiprintf_r+0x1f0>)
 80066ee:	a904      	add	r1, sp, #16
 80066f0:	4638      	mov	r0, r7
 80066f2:	f000 f879 	bl	80067e8 <_printf_i>
 80066f6:	e7ed      	b.n	80066d4 <_svfiprintf_r+0x1c0>
 80066f8:	0800794b 	.word	0x0800794b
 80066fc:	08007955 	.word	0x08007955
 8006700:	00000000 	.word	0x00000000
 8006704:	0800645d 	.word	0x0800645d
 8006708:	08007951 	.word	0x08007951

0800670c <_printf_common>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	4616      	mov	r6, r2
 8006712:	4698      	mov	r8, r3
 8006714:	688a      	ldr	r2, [r1, #8]
 8006716:	690b      	ldr	r3, [r1, #16]
 8006718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800671c:	4293      	cmp	r3, r2
 800671e:	bfb8      	it	lt
 8006720:	4613      	movlt	r3, r2
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006728:	4607      	mov	r7, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b10a      	cbz	r2, 8006732 <_printf_common+0x26>
 800672e:	3301      	adds	r3, #1
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	0699      	lsls	r1, r3, #26
 8006736:	bf42      	ittt	mi
 8006738:	6833      	ldrmi	r3, [r6, #0]
 800673a:	3302      	addmi	r3, #2
 800673c:	6033      	strmi	r3, [r6, #0]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	f015 0506 	ands.w	r5, r5, #6
 8006744:	d106      	bne.n	8006754 <_printf_common+0x48>
 8006746:	f104 0a19 	add.w	sl, r4, #25
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	6832      	ldr	r2, [r6, #0]
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	42ab      	cmp	r3, r5
 8006752:	dc26      	bgt.n	80067a2 <_printf_common+0x96>
 8006754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	3b00      	subs	r3, #0
 800675c:	bf18      	it	ne
 800675e:	2301      	movne	r3, #1
 8006760:	0692      	lsls	r2, r2, #26
 8006762:	d42b      	bmi.n	80067bc <_printf_common+0xb0>
 8006764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006768:	4641      	mov	r1, r8
 800676a:	4638      	mov	r0, r7
 800676c:	47c8      	blx	r9
 800676e:	3001      	adds	r0, #1
 8006770:	d01e      	beq.n	80067b0 <_printf_common+0xa4>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	6922      	ldr	r2, [r4, #16]
 8006776:	f003 0306 	and.w	r3, r3, #6
 800677a:	2b04      	cmp	r3, #4
 800677c:	bf02      	ittt	eq
 800677e:	68e5      	ldreq	r5, [r4, #12]
 8006780:	6833      	ldreq	r3, [r6, #0]
 8006782:	1aed      	subeq	r5, r5, r3
 8006784:	68a3      	ldr	r3, [r4, #8]
 8006786:	bf0c      	ite	eq
 8006788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800678c:	2500      	movne	r5, #0
 800678e:	4293      	cmp	r3, r2
 8006790:	bfc4      	itt	gt
 8006792:	1a9b      	subgt	r3, r3, r2
 8006794:	18ed      	addgt	r5, r5, r3
 8006796:	2600      	movs	r6, #0
 8006798:	341a      	adds	r4, #26
 800679a:	42b5      	cmp	r5, r6
 800679c:	d11a      	bne.n	80067d4 <_printf_common+0xc8>
 800679e:	2000      	movs	r0, #0
 80067a0:	e008      	b.n	80067b4 <_printf_common+0xa8>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4652      	mov	r2, sl
 80067a6:	4641      	mov	r1, r8
 80067a8:	4638      	mov	r0, r7
 80067aa:	47c8      	blx	r9
 80067ac:	3001      	adds	r0, #1
 80067ae:	d103      	bne.n	80067b8 <_printf_common+0xac>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	3501      	adds	r5, #1
 80067ba:	e7c6      	b.n	800674a <_printf_common+0x3e>
 80067bc:	18e1      	adds	r1, r4, r3
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	2030      	movs	r0, #48	@ 0x30
 80067c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067c6:	4422      	add	r2, r4
 80067c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d0:	3302      	adds	r3, #2
 80067d2:	e7c7      	b.n	8006764 <_printf_common+0x58>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4622      	mov	r2, r4
 80067d8:	4641      	mov	r1, r8
 80067da:	4638      	mov	r0, r7
 80067dc:	47c8      	blx	r9
 80067de:	3001      	adds	r0, #1
 80067e0:	d0e6      	beq.n	80067b0 <_printf_common+0xa4>
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7d9      	b.n	800679a <_printf_common+0x8e>
	...

080067e8 <_printf_i>:
 80067e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	7e0f      	ldrb	r7, [r1, #24]
 80067ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f0:	2f78      	cmp	r7, #120	@ 0x78
 80067f2:	4691      	mov	r9, r2
 80067f4:	4680      	mov	r8, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	469a      	mov	sl, r3
 80067fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067fe:	d807      	bhi.n	8006810 <_printf_i+0x28>
 8006800:	2f62      	cmp	r7, #98	@ 0x62
 8006802:	d80a      	bhi.n	800681a <_printf_i+0x32>
 8006804:	2f00      	cmp	r7, #0
 8006806:	f000 80d2 	beq.w	80069ae <_printf_i+0x1c6>
 800680a:	2f58      	cmp	r7, #88	@ 0x58
 800680c:	f000 80b9 	beq.w	8006982 <_printf_i+0x19a>
 8006810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006818:	e03a      	b.n	8006890 <_printf_i+0xa8>
 800681a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800681e:	2b15      	cmp	r3, #21
 8006820:	d8f6      	bhi.n	8006810 <_printf_i+0x28>
 8006822:	a101      	add	r1, pc, #4	@ (adr r1, 8006828 <_printf_i+0x40>)
 8006824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006828:	08006881 	.word	0x08006881
 800682c:	08006895 	.word	0x08006895
 8006830:	08006811 	.word	0x08006811
 8006834:	08006811 	.word	0x08006811
 8006838:	08006811 	.word	0x08006811
 800683c:	08006811 	.word	0x08006811
 8006840:	08006895 	.word	0x08006895
 8006844:	08006811 	.word	0x08006811
 8006848:	08006811 	.word	0x08006811
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	08006995 	.word	0x08006995
 8006858:	080068bf 	.word	0x080068bf
 800685c:	0800694f 	.word	0x0800694f
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	080069b7 	.word	0x080069b7
 800686c:	08006811 	.word	0x08006811
 8006870:	080068bf 	.word	0x080068bf
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	08006957 	.word	0x08006957
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6032      	str	r2, [r6, #0]
 8006888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800688c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006890:	2301      	movs	r3, #1
 8006892:	e09d      	b.n	80069d0 <_printf_i+0x1e8>
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	1d19      	adds	r1, r3, #4
 800689a:	6031      	str	r1, [r6, #0]
 800689c:	0606      	lsls	r6, r0, #24
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0xbc>
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	e003      	b.n	80068ac <_printf_i+0xc4>
 80068a4:	0645      	lsls	r5, r0, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0xb8>
 80068a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	da03      	bge.n	80068b8 <_printf_i+0xd0>
 80068b0:	232d      	movs	r3, #45	@ 0x2d
 80068b2:	426d      	negs	r5, r5
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b8:	4859      	ldr	r0, [pc, #356]	@ (8006a20 <_printf_i+0x238>)
 80068ba:	230a      	movs	r3, #10
 80068bc:	e011      	b.n	80068e2 <_printf_i+0xfa>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	6833      	ldr	r3, [r6, #0]
 80068c2:	0608      	lsls	r0, r1, #24
 80068c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068c8:	d402      	bmi.n	80068d0 <_printf_i+0xe8>
 80068ca:	0649      	lsls	r1, r1, #25
 80068cc:	bf48      	it	mi
 80068ce:	b2ad      	uxthmi	r5, r5
 80068d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d2:	4853      	ldr	r0, [pc, #332]	@ (8006a20 <_printf_i+0x238>)
 80068d4:	6033      	str	r3, [r6, #0]
 80068d6:	bf14      	ite	ne
 80068d8:	230a      	movne	r3, #10
 80068da:	2308      	moveq	r3, #8
 80068dc:	2100      	movs	r1, #0
 80068de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e2:	6866      	ldr	r6, [r4, #4]
 80068e4:	60a6      	str	r6, [r4, #8]
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	bfa2      	ittt	ge
 80068ea:	6821      	ldrge	r1, [r4, #0]
 80068ec:	f021 0104 	bicge.w	r1, r1, #4
 80068f0:	6021      	strge	r1, [r4, #0]
 80068f2:	b90d      	cbnz	r5, 80068f8 <_printf_i+0x110>
 80068f4:	2e00      	cmp	r6, #0
 80068f6:	d04b      	beq.n	8006990 <_printf_i+0x1a8>
 80068f8:	4616      	mov	r6, r2
 80068fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80068fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006902:	5dc7      	ldrb	r7, [r0, r7]
 8006904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006908:	462f      	mov	r7, r5
 800690a:	42bb      	cmp	r3, r7
 800690c:	460d      	mov	r5, r1
 800690e:	d9f4      	bls.n	80068fa <_printf_i+0x112>
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10b      	bne.n	800692c <_printf_i+0x144>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07df      	lsls	r7, r3, #31
 8006918:	d508      	bpl.n	800692c <_printf_i+0x144>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6861      	ldr	r1, [r4, #4]
 800691e:	4299      	cmp	r1, r3
 8006920:	bfde      	ittt	le
 8006922:	2330      	movle	r3, #48	@ 0x30
 8006924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800692c:	1b92      	subs	r2, r2, r6
 800692e:	6122      	str	r2, [r4, #16]
 8006930:	f8cd a000 	str.w	sl, [sp]
 8006934:	464b      	mov	r3, r9
 8006936:	aa03      	add	r2, sp, #12
 8006938:	4621      	mov	r1, r4
 800693a:	4640      	mov	r0, r8
 800693c:	f7ff fee6 	bl	800670c <_printf_common>
 8006940:	3001      	adds	r0, #1
 8006942:	d14a      	bne.n	80069da <_printf_i+0x1f2>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	b004      	add	sp, #16
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f043 0320 	orr.w	r3, r3, #32
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	4833      	ldr	r0, [pc, #204]	@ (8006a24 <_printf_i+0x23c>)
 8006958:	2778      	movs	r7, #120	@ 0x78
 800695a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	6831      	ldr	r1, [r6, #0]
 8006962:	061f      	lsls	r7, r3, #24
 8006964:	f851 5b04 	ldr.w	r5, [r1], #4
 8006968:	d402      	bmi.n	8006970 <_printf_i+0x188>
 800696a:	065f      	lsls	r7, r3, #25
 800696c:	bf48      	it	mi
 800696e:	b2ad      	uxthmi	r5, r5
 8006970:	6031      	str	r1, [r6, #0]
 8006972:	07d9      	lsls	r1, r3, #31
 8006974:	bf44      	itt	mi
 8006976:	f043 0320 	orrmi.w	r3, r3, #32
 800697a:	6023      	strmi	r3, [r4, #0]
 800697c:	b11d      	cbz	r5, 8006986 <_printf_i+0x19e>
 800697e:	2310      	movs	r3, #16
 8006980:	e7ac      	b.n	80068dc <_printf_i+0xf4>
 8006982:	4827      	ldr	r0, [pc, #156]	@ (8006a20 <_printf_i+0x238>)
 8006984:	e7e9      	b.n	800695a <_printf_i+0x172>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	f023 0320 	bic.w	r3, r3, #32
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	e7f6      	b.n	800697e <_printf_i+0x196>
 8006990:	4616      	mov	r6, r2
 8006992:	e7bd      	b.n	8006910 <_printf_i+0x128>
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	062e      	lsls	r6, r5, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1c0>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1c6>
 80069a8:	0668      	lsls	r0, r5, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1bc>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4616      	mov	r6, r2
 80069b4:	e7bc      	b.n	8006930 <_printf_i+0x148>
 80069b6:	6833      	ldr	r3, [r6, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	6032      	str	r2, [r6, #0]
 80069bc:	681e      	ldr	r6, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7f9 fc0c 	bl	80001e0 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1e6>
 80069ca:	1b80      	subs	r0, r0, r6
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069d8:	e7aa      	b.n	8006930 <_printf_i+0x148>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	4632      	mov	r2, r6
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ad      	beq.n	8006944 <_printf_i+0x15c>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x22e>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a6      	b.n	8006948 <_printf_i+0x160>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09d      	beq.n	8006944 <_printf_i+0x15c>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x212>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x206>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x222>
 8006a1e:	bf00      	nop
 8006a20:	0800795c 	.word	0x0800795c
 8006a24:	0800796d 	.word	0x0800796d

08006a28 <memmove>:
 8006a28:	4288      	cmp	r0, r1
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	eb01 0402 	add.w	r4, r1, r2
 8006a30:	d902      	bls.n	8006a38 <memmove+0x10>
 8006a32:	4284      	cmp	r4, r0
 8006a34:	4623      	mov	r3, r4
 8006a36:	d807      	bhi.n	8006a48 <memmove+0x20>
 8006a38:	1e43      	subs	r3, r0, #1
 8006a3a:	42a1      	cmp	r1, r4
 8006a3c:	d008      	beq.n	8006a50 <memmove+0x28>
 8006a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a46:	e7f8      	b.n	8006a3a <memmove+0x12>
 8006a48:	4402      	add	r2, r0
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	428a      	cmp	r2, r1
 8006a4e:	d100      	bne.n	8006a52 <memmove+0x2a>
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a5a:	e7f7      	b.n	8006a4c <memmove+0x24>

08006a5c <_sbrk_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d06      	ldr	r5, [pc, #24]	@ (8006a78 <_sbrk_r+0x1c>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fb f8c8 	bl	8001bfc <_sbrk>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_sbrk_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_sbrk_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	2000053c 	.word	0x2000053c

08006a7c <memcpy>:
 8006a7c:	440a      	add	r2, r1
 8006a7e:	4291      	cmp	r1, r2
 8006a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a84:	d100      	bne.n	8006a88 <memcpy+0xc>
 8006a86:	4770      	bx	lr
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a92:	4291      	cmp	r1, r2
 8006a94:	d1f9      	bne.n	8006a8a <memcpy+0xe>
 8006a96:	bd10      	pop	{r4, pc}

08006a98 <_realloc_r>:
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	4615      	mov	r5, r2
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	b921      	cbnz	r1, 8006aae <_realloc_r+0x16>
 8006aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	f7ff bc4b 	b.w	8006344 <_malloc_r>
 8006aae:	b92a      	cbnz	r2, 8006abc <_realloc_r+0x24>
 8006ab0:	f7ff fbdc 	bl	800626c <_free_r>
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006abc:	f000 f81a 	bl	8006af4 <_malloc_usable_size_r>
 8006ac0:	4285      	cmp	r5, r0
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	d802      	bhi.n	8006acc <_realloc_r+0x34>
 8006ac6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006aca:	d8f4      	bhi.n	8006ab6 <_realloc_r+0x1e>
 8006acc:	4629      	mov	r1, r5
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fc38 	bl	8006344 <_malloc_r>
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0ec      	beq.n	8006ab4 <_realloc_r+0x1c>
 8006ada:	42b5      	cmp	r5, r6
 8006adc:	462a      	mov	r2, r5
 8006ade:	4621      	mov	r1, r4
 8006ae0:	bf28      	it	cs
 8006ae2:	4632      	movcs	r2, r6
 8006ae4:	f7ff ffca 	bl	8006a7c <memcpy>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4640      	mov	r0, r8
 8006aec:	f7ff fbbe 	bl	800626c <_free_r>
 8006af0:	463c      	mov	r4, r7
 8006af2:	e7e0      	b.n	8006ab6 <_realloc_r+0x1e>

08006af4 <_malloc_usable_size_r>:
 8006af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af8:	1f18      	subs	r0, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bfbc      	itt	lt
 8006afe:	580b      	ldrlt	r3, [r1, r0]
 8006b00:	18c0      	addlt	r0, r0, r3
 8006b02:	4770      	bx	lr

08006b04 <_init>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr

08006b10 <_fini>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr
