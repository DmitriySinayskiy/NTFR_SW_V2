
Graphics_downloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c94  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000db10  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010938  08010938  0001200c  2**0
                  CONTENTS
  4 .ARM          00000008  08010938  08010938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010940  08010940  0001200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010940  08010940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010944  08010944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08010948  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08010954  0001200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08010954  000120ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087c7  00000000  00000000  0001203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bd  00000000  00000000  0001a803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0001c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c2  00000000  00000000  0001c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fa2  00000000  00000000  0001ce12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009449  00000000  00000000  00032db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008745f  00000000  00000000  0003c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c365c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  000c36a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c53c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e10 	.word	0x08002e10

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e10 	.word	0x08002e10

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fba0 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f91e 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9be 	bl	8000850 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d4:	f000 f986 	bl	80007e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004de:	4873      	ldr	r0, [pc, #460]	@ (80006ac <main+0x1e8>)
 80004e0:	f000 fec0 	bl	8001264 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ea:	4870      	ldr	r0, [pc, #448]	@ (80006ac <main+0x1e8>)
 80004ec:	f000 feba 	bl	8001264 <HAL_GPIO_WritePin>

  ST7735_Init();
 80004f0:	f002 f870 	bl	80025d4 <ST7735_Init>
  ST7735_InvertColors(0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f002 f90a 	bl	800270e <ST7735_InvertColors>
  W25qxx_Init();
 80004fa:	f002 fa31 	bl	8002960 <W25qxx_Init>

  ST7735_FillScreen(ST7735_RED);
 80004fe:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000502:	f002 f8f3 	bl	80026ec <ST7735_FillScreen>
//    W25qxx_WriteBlock(L58_data, 7, 4232*11, 4232);
//    W25qxx_WriteBlock(L59_data, 7, 4232*12, 4232);
//    W25qxx_WriteBlock(L60_data, 7, 4232*13, 4232);
//    W25qxx_WriteBlock(L61_data, 7, 4232*14, 4232);

  W25qxx_EraseBlock(8);
 8000506:	2008      	movs	r0, #8
 8000508:	f002 fafc 	bl	8002b04 <W25qxx_EraseBlock>
  W25qxx_WriteBlock(LOADING_1_data, 8, 0, 5408 );
 800050c:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	4866      	ldr	r0, [pc, #408]	@ (80006b0 <main+0x1ec>)
 8000516:	f002 fbed 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOADING_2_data, 8, 5408, 5408 );
 800051a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800051e:	f44f 52a9 	mov.w	r2, #5408	@ 0x1520
 8000522:	2108      	movs	r1, #8
 8000524:	4863      	ldr	r0, [pc, #396]	@ (80006b4 <main+0x1f0>)
 8000526:	f002 fbe5 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOADING_3_data, 8, 10816, 5408 );
 800052a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800052e:	f44f 5229 	mov.w	r2, #10816	@ 0x2a40
 8000532:	2108      	movs	r1, #8
 8000534:	4860      	ldr	r0, [pc, #384]	@ (80006b8 <main+0x1f4>)
 8000536:	f002 fbdd 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_0_data, 8, 16224, 1800 );
 800053a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800053e:	f643 7260 	movw	r2, #16224	@ 0x3f60
 8000542:	2108      	movs	r1, #8
 8000544:	485d      	ldr	r0, [pc, #372]	@ (80006bc <main+0x1f8>)
 8000546:	f002 fbd5 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_10_data, 8, 16224 + 1800*1, 1800 );
 800054a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800054e:	f244 6268 	movw	r2, #18024	@ 0x4668
 8000552:	2108      	movs	r1, #8
 8000554:	485a      	ldr	r0, [pc, #360]	@ (80006c0 <main+0x1fc>)
 8000556:	f002 fbcd 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_20_data, 8, 16224 + 1800*2, 1800 );
 800055a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800055e:	f644 5270 	movw	r2, #19824	@ 0x4d70
 8000562:	2108      	movs	r1, #8
 8000564:	4857      	ldr	r0, [pc, #348]	@ (80006c4 <main+0x200>)
 8000566:	f002 fbc5 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_30_data, 8, 16224 + 1800*3, 1800 );
 800056a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800056e:	f245 4278 	movw	r2, #21624	@ 0x5478
 8000572:	2108      	movs	r1, #8
 8000574:	4854      	ldr	r0, [pc, #336]	@ (80006c8 <main+0x204>)
 8000576:	f002 fbbd 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_40_data, 8, 16224 + 1800*4, 1800 );
 800057a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800057e:	f44f 42b7 	mov.w	r2, #23424	@ 0x5b80
 8000582:	2108      	movs	r1, #8
 8000584:	4851      	ldr	r0, [pc, #324]	@ (80006cc <main+0x208>)
 8000586:	f002 fbb5 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_50_data, 8, 16224 + 1800*5, 1800 );
 800058a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800058e:	f246 2288 	movw	r2, #25224	@ 0x6288
 8000592:	2108      	movs	r1, #8
 8000594:	484e      	ldr	r0, [pc, #312]	@ (80006d0 <main+0x20c>)
 8000596:	f002 fbad 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_60_data, 8, 16224 + 1800*6, 1800 );
 800059a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800059e:	f646 1290 	movw	r2, #27024	@ 0x6990
 80005a2:	2108      	movs	r1, #8
 80005a4:	484b      	ldr	r0, [pc, #300]	@ (80006d4 <main+0x210>)
 80005a6:	f002 fba5 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_70_data, 8, 16224 + 1800*7, 1800 );
 80005aa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005ae:	f247 0298 	movw	r2, #28824	@ 0x7098
 80005b2:	2108      	movs	r1, #8
 80005b4:	4848      	ldr	r0, [pc, #288]	@ (80006d8 <main+0x214>)
 80005b6:	f002 fb9d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_80_data, 8, 16224 + 1800*8, 1800 );
 80005ba:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005be:	f247 72a0 	movw	r2, #30624	@ 0x77a0
 80005c2:	2108      	movs	r1, #8
 80005c4:	4845      	ldr	r0, [pc, #276]	@ (80006dc <main+0x218>)
 80005c6:	f002 fb95 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_90_data, 8, 16224 + 1800*9, 1800 );
 80005ca:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005ce:	f647 62a8 	movw	r2, #32424	@ 0x7ea8
 80005d2:	2108      	movs	r1, #8
 80005d4:	4842      	ldr	r0, [pc, #264]	@ (80006e0 <main+0x21c>)
 80005d6:	f002 fb8d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_100_data, 8, 16224 + 1800*10, 1800 );
 80005da:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005de:	f248 52b0 	movw	r2, #34224	@ 0x85b0
 80005e2:	2108      	movs	r1, #8
 80005e4:	483f      	ldr	r0, [pc, #252]	@ (80006e4 <main+0x220>)
 80005e6:	f002 fb85 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_150_data, 8, 16224 + 1800*11, 1800 );
 80005ea:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005ee:	f648 42b8 	movw	r2, #36024	@ 0x8cb8
 80005f2:	2108      	movs	r1, #8
 80005f4:	483c      	ldr	r0, [pc, #240]	@ (80006e8 <main+0x224>)
 80005f6:	f002 fb7d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_200_data, 8, 16224 + 1800*12, 1800 );
 80005fa:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80005fe:	f249 32c0 	movw	r2, #37824	@ 0x93c0
 8000602:	2108      	movs	r1, #8
 8000604:	4839      	ldr	r0, [pc, #228]	@ (80006ec <main+0x228>)
 8000606:	f002 fb75 	bl	8002cf4 <W25qxx_WriteBlock>
//
  W25qxx_WriteBlock(CHECK_MARK_M_data, 8,39774 , 1920 );
 800060a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800060e:	f649 325e 	movw	r2, #39774	@ 0x9b5e
 8000612:	2108      	movs	r1, #8
 8000614:	4836      	ldr	r0, [pc, #216]	@ (80006f0 <main+0x22c>)
 8000616:	f002 fb6d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(EXCLAMATION_MARK_M_data, 8,41664 , 1920 );
 800061a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800061e:	f24a 22c0 	movw	r2, #41664	@ 0xa2c0
 8000622:	2108      	movs	r1, #8
 8000624:	4833      	ldr	r0, [pc, #204]	@ (80006f4 <main+0x230>)
 8000626:	f002 fb65 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CROSS_MARK_M_data, 8,43584 , 1920 );
 800062a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800062e:	f64a 2240 	movw	r2, #43584	@ 0xaa40
 8000632:	2108      	movs	r1, #8
 8000634:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <main+0x234>)
 8000636:	f002 fb5d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CHECK_MARK_L_data, 8,47104 , 3520 );
 800063a:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 800063e:	f44f 4238 	mov.w	r2, #47104	@ 0xb800
 8000642:	2108      	movs	r1, #8
 8000644:	482d      	ldr	r0, [pc, #180]	@ (80006fc <main+0x238>)
 8000646:	f002 fb55 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(EXCLAMATION_MARK_L_data, 8,50624 , 3520 );
 800064a:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 800064e:	f24c 52c0 	movw	r2, #50624	@ 0xc5c0
 8000652:	2108      	movs	r1, #8
 8000654:	482a      	ldr	r0, [pc, #168]	@ (8000700 <main+0x23c>)
 8000656:	f002 fb4d 	bl	8002cf4 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CROSS_MARK_L_data, 8,54144 , 3520 );
 800065a:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 800065e:	f24d 3280 	movw	r2, #54144	@ 0xd380
 8000662:	2108      	movs	r1, #8
 8000664:	4827      	ldr	r0, [pc, #156]	@ (8000704 <main+0x240>)
 8000666:	f002 fb45 	bl	8002cf4 <W25qxx_WriteBlock>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000670:	4825      	ldr	r0, [pc, #148]	@ (8000708 <main+0x244>)
 8000672:	f000 fdf7 	bl	8001264 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port,LED_BLUE_1_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <main+0x244>)
 800067c:	f000 fdf2 	bl	8001264 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000684:	f000 fb34 	bl	8000cf0 <HAL_Delay>
	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068e:	481e      	ldr	r0, [pc, #120]	@ (8000708 <main+0x244>)
 8000690:	f000 fde8 	bl	8001264 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port,LED_BLUE_1_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2120      	movs	r1, #32
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <main+0x244>)
 800069a:	f000 fde3 	bl	8001264 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a2:	f000 fb25 	bl	8000cf0 <HAL_Delay>
	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 80006a6:	bf00      	nop
 80006a8:	e7df      	b.n	800066a <main+0x1a6>
 80006aa:	bf00      	nop
 80006ac:	40020800 	.word	0x40020800
 80006b0:	08002e38 	.word	0x08002e38
 80006b4:	08004358 	.word	0x08004358
 80006b8:	08005878 	.word	0x08005878
 80006bc:	08006d98 	.word	0x08006d98
 80006c0:	080074a0 	.word	0x080074a0
 80006c4:	080089b8 	.word	0x080089b8
 80006c8:	080097c8 	.word	0x080097c8
 80006cc:	08009ed0 	.word	0x08009ed0
 80006d0:	0800a5d8 	.word	0x0800a5d8
 80006d4:	0800ace0 	.word	0x0800ace0
 80006d8:	0800b3e8 	.word	0x0800b3e8
 80006dc:	0800baf0 	.word	0x0800baf0
 80006e0:	0800c1f8 	.word	0x0800c1f8
 80006e4:	08007ba8 	.word	0x08007ba8
 80006e8:	080082b0 	.word	0x080082b0
 80006ec:	080090c0 	.word	0x080090c0
 80006f0:	0800d6c0 	.word	0x0800d6c0
 80006f4:	08010140 	.word	0x08010140
 80006f8:	0800ec00 	.word	0x0800ec00
 80006fc:	0800c900 	.word	0x0800c900
 8000700:	0800f380 	.word	0x0800f380
 8000704:	0800de40 	.word	0x0800de40
 8000708:	40020400 	.word	0x40020400

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	@ 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fb4c 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <SystemClock_Config+0xd0>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xd4>)
 800075a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000780:	2308      	movs	r3, #8
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	@ 0xa8
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fda3 	bl	80012e0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 f944 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f804 	bl	80017d0 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ce:	f000 f92d 	bl	8000a2c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f001 f9b7 	bl	8001ba8 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 f8f4 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000028 	.word	0x20000028
 800084c:	40013000 	.word	0x40013000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b6b      	ldr	r3, [pc, #428]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a6a      	ldr	r2, [pc, #424]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b68      	ldr	r3, [pc, #416]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b64      	ldr	r3, [pc, #400]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a63      	ldr	r2, [pc, #396]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b61      	ldr	r3, [pc, #388]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b56      	ldr	r3, [pc, #344]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a55      	ldr	r2, [pc, #340]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b4f      	ldr	r3, [pc, #316]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a4e      	ldr	r2, [pc, #312]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a18 <MX_GPIO_Init+0x1c8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80008f8:	4848      	ldr	r0, [pc, #288]	@ (8000a1c <MX_GPIO_Init+0x1cc>)
 80008fa:	f000 fcb3 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 80008fe:	2201      	movs	r2, #1
 8000900:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8000904:	4845      	ldr	r0, [pc, #276]	@ (8000a1c <MX_GPIO_Init+0x1cc>)
 8000906:	f000 fcad 	bl	8001264 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000910:	4843      	ldr	r0, [pc, #268]	@ (8000a20 <MX_GPIO_Init+0x1d0>)
 8000912:	f000 fca7 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 800091c:	4841      	ldr	r0, [pc, #260]	@ (8000a24 <MX_GPIO_Init+0x1d4>)
 800091e:	f000 fca1 	bl	8001264 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ANOD_Pin|S1_Pin|OE_Pin|DFU_FORCE_Pin
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4156 	mov.w	r1, #54784	@ 0xd600
 8000928:	483e      	ldr	r0, [pc, #248]	@ (8000a24 <MX_GPIO_Init+0x1d4>)
 800092a:	f000 fc9b 	bl	8001264 <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 800092e:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8000932:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4835      	ldr	r0, [pc, #212]	@ (8000a1c <MX_GPIO_Init+0x1cc>)
 8000948:	f000 fb08 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 800094c:	230c      	movs	r3, #12
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	482f      	ldr	r0, [pc, #188]	@ (8000a1c <MX_GPIO_Init+0x1cc>)
 8000960:	f000 fafc 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 8000964:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <MX_GPIO_Init+0x1d0>)
 800097e:	f000 faed 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_0_Pin LED_BLUE_0_Pin ANOD_Pin S1_Pin
                           OE_Pin DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_BLUE_1_Pin LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_0_Pin|LED_BLUE_0_Pin|ANOD_Pin|S1_Pin
 8000982:	f24d 733e 	movw	r3, #55102	@ 0xd73e
 8000986:	617b      	str	r3, [r7, #20]
                          |OE_Pin|DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_BLUE_1_Pin|LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <MX_GPIO_Init+0x1d4>)
 800099c:	f000 fade 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	481b      	ldr	r0, [pc, #108]	@ (8000a24 <MX_GPIO_Init+0x1d4>)
 80009b6:	f000 fad1 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 80009ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	@ (8000a20 <MX_GPIO_Init+0x1d0>)
 80009d2:	f000 fac3 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 80009d6:	2304      	movs	r3, #4
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <MX_GPIO_Init+0x1d8>)
 80009ec:	f000 fab6 	bl	8000f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2008      	movs	r0, #8
 80009f6:	f000 fa7a 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009fa:	2008      	movs	r0, #8
 80009fc:	f000 fa93 	bl	8000f26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2028      	movs	r0, #40	@ 0x28
 8000a06:	f000 fa72 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0a:	2028      	movs	r0, #40	@ 0x28
 8000a0c:	f000 fa8b 	bl	8000f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_SPI_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12b      	bne.n	8000b02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_SPI_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae2:	23e0      	movs	r3, #224	@ 0xe0
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af2:	2305      	movs	r3, #5
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <HAL_SPI_MspInit+0x8c>)
 8000afe:	f000 fa2d 	bl	8000f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40013000 	.word	0x40013000
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f89f 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f000 fb8c 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8000b88:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b8c:	f000 fb84 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	@ (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f002 f8ef 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc6b 	bl	80004c4 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08010948 	.word	0x08010948
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200000ac 	.word	0x200000ac

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f94f 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fefa 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f967 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f92f 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000080 	.word	0x20000080

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000080 	.word	0x20000080

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e159      	b.n	800122c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8148 	bne.w	8001226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a2 	beq.w	8001226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b57      	ldr	r3, [pc, #348]	@ (8001244 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	4a56      	ldr	r2, [pc, #344]	@ (8001244 <HAL_GPIO_Init+0x2e8>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f2:	4b54      	ldr	r3, [pc, #336]	@ (8001244 <HAL_GPIO_Init+0x2e8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fe:	4a52      	ldr	r2, [pc, #328]	@ (8001248 <HAL_GPIO_Init+0x2ec>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a49      	ldr	r2, [pc, #292]	@ (800124c <HAL_GPIO_Init+0x2f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x202>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <HAL_GPIO_Init+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x1fe>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a47      	ldr	r2, [pc, #284]	@ (8001254 <HAL_GPIO_Init+0x2f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x1fa>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a46      	ldr	r2, [pc, #280]	@ (8001258 <HAL_GPIO_Init+0x2fc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x1f6>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a45      	ldr	r2, [pc, #276]	@ (800125c <HAL_GPIO_Init+0x300>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x1f2>
 800114a:	2304      	movs	r3, #4
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800114e:	2307      	movs	r3, #7
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	@ (8001248 <HAL_GPIO_Init+0x2ec>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_GPIO_Init+0x304>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a24      	ldr	r2, [pc, #144]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_GPIO_Init+0x304>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <HAL_GPIO_Init+0x304>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f aea2 	bls.w	8000f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f806 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e267      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d075      	beq.n	80013ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4b85      	ldr	r3, [pc, #532]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b82      	ldr	r3, [pc, #520]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001322:	d10b      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4b7e      	ldr	r3, [pc, #504]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d157      	bne.n	80013e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e242      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x74>
 8001346:	4b76      	ldr	r3, [pc, #472]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a75      	ldr	r2, [pc, #468]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b70      	ldr	r3, [pc, #448]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6f      	ldr	r2, [pc, #444]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b6d      	ldr	r3, [pc, #436]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6c      	ldr	r2, [pc, #432]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001378:	4b69      	ldr	r3, [pc, #420]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a68      	ldr	r2, [pc, #416]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b66      	ldr	r3, [pc, #408]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a65      	ldr	r2, [pc, #404]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc9e 	bl	8000cd8 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc9a 	bl	8000cd8 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e207      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xc0>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc8a 	bl	8000cd8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc86 	bl	8000cd8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1f3      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe8>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1c7      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4937      	ldr	r1, [pc, #220]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <HAL_RCC_OscConfig+0x244>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fc3f 	bl	8000cd8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc3b 	bl	8000cd8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1a8      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4925      	ldr	r1, [pc, #148]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <HAL_RCC_OscConfig+0x244>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc1e 	bl	8000cd8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc1a 	bl	8000cd8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e187      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d036      	beq.n	8001538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d016      	beq.n	8001500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_RCC_OscConfig+0x248>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fbfe 	bl	8000cd8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fbfa 	bl	8000cd8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e167      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_RCC_OscConfig+0x240>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
 80014fe:	e01b      	b.n	8001538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RCC_OscConfig+0x248>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fbe7 	bl	8000cd8 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	e00e      	b.n	800152c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fbe3 	bl	8000cd8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d907      	bls.n	800152c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e150      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
 8001520:	40023800 	.word	0x40023800
 8001524:	42470000 	.word	0x42470000
 8001528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	4b88      	ldr	r3, [pc, #544]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ea      	bne.n	800150e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8097 	beq.w	8001674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b81      	ldr	r3, [pc, #516]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b7d      	ldr	r3, [pc, #500]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a7c      	ldr	r2, [pc, #496]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b7a      	ldr	r3, [pc, #488]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001572:	2301      	movs	r3, #1
 8001574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b77      	ldr	r3, [pc, #476]	@ (8001754 <HAL_RCC_OscConfig+0x474>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157e:	2b00      	cmp	r3, #0
 8001580:	d118      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	4b74      	ldr	r3, [pc, #464]	@ (8001754 <HAL_RCC_OscConfig+0x474>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a73      	ldr	r2, [pc, #460]	@ (8001754 <HAL_RCC_OscConfig+0x474>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff fba3 	bl	8000cd8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fb9f 	bl	8000cd8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e10c      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001754 <HAL_RCC_OscConfig+0x474>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x2ea>
 80015bc:	4b64      	ldr	r3, [pc, #400]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c0:	4a63      	ldr	r2, [pc, #396]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x324>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x30c>
 80015d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015de:	4b5c      	ldr	r3, [pc, #368]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0x324>
 80015ec:	4b58      	ldr	r3, [pc, #352]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f0:	4a57      	ldr	r2, [pc, #348]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f8:	4b55      	ldr	r3, [pc, #340]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fc:	4a54      	ldr	r2, [pc, #336]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 0304 	bic.w	r3, r3, #4
 8001602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d015      	beq.n	8001638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fb64 	bl	8000cd8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fb60 	bl	8000cd8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0cb      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ee      	beq.n	8001614 <HAL_RCC_OscConfig+0x334>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fb4e 	bl	8000cd8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff fb4a 	bl	8000cd8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e0b5      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	4b3e      	ldr	r3, [pc, #248]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ee      	bne.n	8001640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	4a38      	ldr	r2, [pc, #224]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800166e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a1 	beq.w	80017c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800167e:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d05c      	beq.n	8001744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d141      	bne.n	8001716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_RCC_OscConfig+0x478>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fb1e 	bl	8000cd8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fb1a 	bl	8000cd8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e087      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	491b      	ldr	r1, [pc, #108]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_RCC_OscConfig+0x478>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff faf3 	bl	8000cd8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff faef 	bl	8000cd8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e05c      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x416>
 8001714:	e054      	b.n	80017c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HAL_RCC_OscConfig+0x478>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fadc 	bl	8000cd8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fad8 	bl	8000cd8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e045      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_RCC_OscConfig+0x470>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
 8001742:	e03d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e038      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000
 8001758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_RCC_OscConfig+0x4ec>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d028      	beq.n	80017bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d121      	bne.n	80017bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d11a      	bne.n	80017bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001794:	4293      	cmp	r3, r2
 8001796:	d111      	bne.n	80017bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0cc      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b68      	ldr	r3, [pc, #416]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d90c      	bls.n	800180c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b65      	ldr	r3, [pc, #404]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b63      	ldr	r3, [pc, #396]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b8      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a58      	ldr	r2, [pc, #352]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800182e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800183c:	4b53      	ldr	r3, [pc, #332]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a52      	ldr	r2, [pc, #328]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b50      	ldr	r3, [pc, #320]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	494d      	ldr	r1, [pc, #308]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d044      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d119      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e07f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d003      	beq.n	800188e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	2b03      	cmp	r3, #3
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e067      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b37      	ldr	r3, [pc, #220]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4934      	ldr	r1, [pc, #208]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa0a 	bl	8000cd8 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff fa06 	bl	8000cd8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e04f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d20c      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e032      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4916      	ldr	r1, [pc, #88]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	490e      	ldr	r1, [pc, #56]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001956:	f000 f821 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800195a:	4602      	mov	r2, r0
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	490a      	ldr	r1, [pc, #40]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	5ccb      	ldrb	r3, [r1, r3]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f96a 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00
 800198c:	40023800 	.word	0x40023800
 8001990:	08002e28 	.word	0x08002e28
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a0:	b094      	sub	sp, #80	@ 0x50
 80019a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019a8:	2300      	movs	r3, #0
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	2300      	movs	r3, #0
 80019ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b4:	4b79      	ldr	r3, [pc, #484]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d00d      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x40>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	f200 80e1 	bhi.w	8001b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ce:	e0db      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b73      	ldr	r3, [pc, #460]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019d4:	e0db      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d6:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80019d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019da:	e0d8      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	2200      	movs	r2, #0
 80019fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a0e:	4622      	mov	r2, r4
 8001a10:	462b      	mov	r3, r5
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	0159      	lsls	r1, r3, #5
 8001a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a20:	0150      	lsls	r0, r2, #5
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4621      	mov	r1, r4
 8001a28:	1a51      	subs	r1, r2, r1
 8001a2a:	6139      	str	r1, [r7, #16]
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a40:	4659      	mov	r1, fp
 8001a42:	018b      	lsls	r3, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	018a      	lsls	r2, r1, #6
 8001a4e:	4651      	mov	r1, sl
 8001a50:	ebb2 0801 	subs.w	r8, r2, r1
 8001a54:	4659      	mov	r1, fp
 8001a56:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	eb18 0303 	adds.w	r3, r8, r3
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	eb49 0303 	adc.w	r3, r9, r3
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	024b      	lsls	r3, r1, #9
 8001a92:	4621      	mov	r1, r4
 8001a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a98:	4621      	mov	r1, r4
 8001a9a:	024a      	lsls	r2, r1, #9
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aac:	f7fe fb92 	bl	80001d4 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ab8:	e058      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aba:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aca:	623b      	str	r3, [r7, #32]
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ad4:	4642      	mov	r2, r8
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	0159      	lsls	r1, r3, #5
 8001ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae6:	0150      	lsls	r0, r2, #5
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4641      	mov	r1, r8
 8001aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001af2:	4649      	mov	r1, r9
 8001af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b10:	eb63 050b 	sbc.w	r5, r3, fp
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	00eb      	lsls	r3, r5, #3
 8001b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b22:	00e2      	lsls	r2, r4, #3
 8001b24:	4614      	mov	r4, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	4643      	mov	r3, r8
 8001b2a:	18e3      	adds	r3, r4, r3
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	464b      	mov	r3, r9
 8001b30:	eb45 0303 	adc.w	r3, r5, r3
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b42:	4629      	mov	r1, r5
 8001b44:	028b      	lsls	r3, r1, #10
 8001b46:	4621      	mov	r1, r4
 8001b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	028a      	lsls	r2, r1, #10
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b56:	2200      	movs	r2, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	61fa      	str	r2, [r7, #28]
 8001b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b60:	f7fe fb38 	bl	80001d4 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3750      	adds	r7, #80	@ 0x50
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07b      	b.n	8001cb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bca:	d009      	beq.n	8001be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	e005      	b.n	8001be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe ff44 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	f003 0104 	and.w	r1, r3, #4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	f003 0210 	and.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b088      	sub	sp, #32
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_SPI_Transmit+0x22>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e126      	b.n	8001f2a <HAL_SPI_Transmit+0x270>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce4:	f7fe fff8 	bl	8000cd8 <HAL_GetTick>
 8001ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cfe:	e10b      	b.n	8001f18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_SPI_Transmit+0x52>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d10:	e102      	b.n	8001f18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d58:	d10f      	bne.n	8001d7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d84:	2b40      	cmp	r3, #64	@ 0x40
 8001d86:	d007      	beq.n	8001d98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001da0:	d14b      	bne.n	8001e3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_SPI_Transmit+0xf6>
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d13e      	bne.n	8001e2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	1c9a      	adds	r2, r3, #2
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dd4:	e02b      	b.n	8001e2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d112      	bne.n	8001e0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	1c9a      	adds	r2, r3, #2
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e08:	e011      	b.n	8001e2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e0a:	f7fe ff65 	bl	8000cd8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d803      	bhi.n	8001e22 <HAL_SPI_Transmit+0x168>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d102      	bne.n	8001e28 <HAL_SPI_Transmit+0x16e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e2c:	e074      	b.n	8001f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ce      	bne.n	8001dd6 <HAL_SPI_Transmit+0x11c>
 8001e38:	e04c      	b.n	8001ed4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_SPI_Transmit+0x18e>
 8001e42:	8afb      	ldrh	r3, [r7, #22]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d140      	bne.n	8001eca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330c      	adds	r3, #12
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e6e:	e02c      	b.n	8001eca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d113      	bne.n	8001ea6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	330c      	adds	r3, #12
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ea4:	e011      	b.n	8001eca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea6:	f7fe ff17 	bl	8000cd8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d803      	bhi.n	8001ebe <HAL_SPI_Transmit+0x204>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d102      	bne.n	8001ec4 <HAL_SPI_Transmit+0x20a>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ec8:	e026      	b.n	8001f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1cd      	bne.n	8001e70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa55 	bl	8002388 <SPI_EndRxTxTransaction>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	77fb      	strb	r3, [r7, #31]
 8001f14:	e000      	b.n	8001f18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001f28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08c      	sub	sp, #48	@ 0x30
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_SPI_TransmitReceive+0x26>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e18a      	b.n	800226e <HAL_SPI_TransmitReceive+0x33c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f60:	f7fe feba 	bl	8000cd8 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d00f      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x70>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f88:	d107      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x68>
 8001f92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d003      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001fa0:	e15b      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x82>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x82>
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001fba:	e14e      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d003      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d007      	beq.n	8002024 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800202c:	d178      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_SPI_TransmitReceive+0x10a>
 8002036:	8b7b      	ldrh	r3, [r7, #26]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d166      	bne.n	800210a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	1c9a      	adds	r2, r3, #2
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002060:	e053      	b.n	800210a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d11b      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x176>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x176>
 800207a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d113      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	1c9a      	adds	r2, r3, #2
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d119      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x1b8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d014      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ca:	b292      	uxth	r2, r2
 80020cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	1c9a      	adds	r2, r3, #2
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020e6:	2301      	movs	r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020ea:	f7fe fdf5 	bl	8000cd8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d807      	bhi.n	800210a <HAL_SPI_TransmitReceive+0x1d8>
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d003      	beq.n	800210a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002108:	e0a7      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1a6      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x130>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1a1      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x130>
 800211e:	e07c      	b.n	800221a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_SPI_TransmitReceive+0x1fc>
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d16b      	bne.n	8002206 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002154:	e057      	b.n	8002206 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	d11c      	bne.n	800219e <HAL_SPI_TransmitReceive+0x26c>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d017      	beq.n	800219e <HAL_SPI_TransmitReceive+0x26c>
 800216e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d114      	bne.n	800219e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	330c      	adds	r3, #12
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d119      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x2ae>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d014      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021dc:	2301      	movs	r3, #1
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021e0:	f7fe fd7a 	bl	8000cd8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d803      	bhi.n	80021f8 <HAL_SPI_TransmitReceive+0x2c6>
 80021f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d102      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x2cc>
 80021f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002204:	e029      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1a2      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x224>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d19d      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800221a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800221c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8b2 	bl	8002388 <SPI_EndRxTxTransaction>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002236:	e010      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	e000      	b.n	800225a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800226a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800226e:	4618      	mov	r0, r3
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002288:	f7fe fd26 	bl	8000cd8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002298:	f7fe fd1e 	bl	8000cd8 <HAL_GetTick>
 800229c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800229e:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	0d1b      	lsrs	r3, r3, #20
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ae:	e054      	b.n	800235a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d050      	beq.n	800235a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022b8:	f7fe fd0e 	bl	8000cd8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d902      	bls.n	80022ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13d      	bne.n	800234a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022e6:	d111      	bne.n	800230c <SPI_WaitFlagStateUntilTimeout+0x94>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f0:	d004      	beq.n	80022fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fa:	d107      	bne.n	800230c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002314:	d10f      	bne.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e017      	b.n	800237a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3b01      	subs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d19b      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000

08002388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <SPI_EndRxTxTransaction+0x7c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <SPI_EndRxTxTransaction+0x80>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023b2:	d112      	bne.n	80023da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ff5a 	bl	8002278 <SPI_WaitFlagStateUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	d0f2      	beq.n	80023da <SPI_EndRxTxTransaction+0x52>
 80023f4:	e000      	b.n	80023f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80023f6:	bf00      	nop
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000
 8002408:	165e9f81 	.word	0x165e9f81

0800240c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002416:	4802      	ldr	r0, [pc, #8]	@ (8002420 <ST7735_Select+0x14>)
 8002418:	f7fe ff24 	bl	8001264 <HAL_GPIO_WritePin>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40020000 	.word	0x40020000

08002424 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800242e:	4802      	ldr	r0, [pc, #8]	@ (8002438 <ST7735_Unselect+0x14>)
 8002430:	f7fe ff18 	bl	8001264 <HAL_GPIO_WritePin>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <ST7735_Reset>:

void ST7735_Reset() {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002446:	4807      	ldr	r0, [pc, #28]	@ (8002464 <ST7735_Reset+0x28>)
 8002448:	f7fe ff0c 	bl	8001264 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800244c:	2005      	movs	r0, #5
 800244e:	f7fe fc4f 	bl	8000cf0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <ST7735_Reset+0x28>)
 800245a:	f7fe ff03 	bl	8001264 <HAL_GPIO_WritePin>
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40020000 	.word	0x40020000

08002468 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	2110      	movs	r1, #16
 8002476:	4807      	ldr	r0, [pc, #28]	@ (8002494 <ST7735_WriteCommand+0x2c>)
 8002478:	f7fe fef4 	bl	8001264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800247c:	1df9      	adds	r1, r7, #7
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2201      	movs	r2, #1
 8002484:	4804      	ldr	r0, [pc, #16]	@ (8002498 <ST7735_WriteCommand+0x30>)
 8002486:	f7ff fc18 	bl	8001cba <HAL_SPI_Transmit>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40020000 	.word	0x40020000
 8002498:	20000028 	.word	0x20000028

0800249c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2110      	movs	r1, #16
 80024aa:	4807      	ldr	r0, [pc, #28]	@ (80024c8 <ST7735_WriteData+0x2c>)
 80024ac:	f7fe feda 	bl	8001264 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4804      	ldr	r0, [pc, #16]	@ (80024cc <ST7735_WriteData+0x30>)
 80024bc:	f7ff fbfd 	bl	8001cba <HAL_SPI_Transmit>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020000 	.word	0x40020000
 80024cc:	20000028 	.word	0x20000028

080024d0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80024e2:	e034      	b.n	800254e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ffb9 	bl	8002468 <ST7735_WriteCommand>

        numArgs = *addr++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002510:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002512:	7abb      	ldrb	r3, [r7, #10]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002518:	7abb      	ldrb	r3, [r7, #10]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffbd 	bl	800249c <ST7735_WriteData>
            addr += numArgs;
 8002522:	7abb      	ldrb	r3, [r7, #10]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800252a:	89bb      	ldrh	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800253a:	89bb      	ldrh	r3, [r7, #12]
 800253c:	2bff      	cmp	r3, #255	@ 0xff
 800253e:	d102      	bne.n	8002546 <ST7735_ExecuteCommandList+0x76>
 8002540:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002544:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002546:	89bb      	ldrh	r3, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fbd1 	bl	8000cf0 <HAL_Delay>
    while(numCommands--) {
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	73fa      	strb	r2, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1c5      	bne.n	80024e4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002562:	b590      	push	{r4, r7, lr}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	4604      	mov	r4, r0
 800256a:	4608      	mov	r0, r1
 800256c:	4611      	mov	r1, r2
 800256e:	461a      	mov	r2, r3
 8002570:	4623      	mov	r3, r4
 8002572:	71fb      	strb	r3, [r7, #7]
 8002574:	4603      	mov	r3, r0
 8002576:	71bb      	strb	r3, [r7, #6]
 8002578:	460b      	mov	r3, r1
 800257a:	717b      	strb	r3, [r7, #5]
 800257c:	4613      	mov	r3, r2
 800257e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002580:	202a      	movs	r0, #42	@ 0x2a
 8002582:	f7ff ff71 	bl	8002468 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002586:	2300      	movs	r3, #0
 8002588:	733b      	strb	r3, [r7, #12]
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	737b      	strb	r3, [r7, #13]
 800258e:	2300      	movs	r3, #0
 8002590:	73bb      	strb	r3, [r7, #14]
 8002592:	797b      	ldrb	r3, [r7, #5]
 8002594:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2104      	movs	r1, #4
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff7d 	bl	800249c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80025a2:	202b      	movs	r0, #43	@ 0x2b
 80025a4:	f7ff ff60 	bl	8002468 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	3318      	adds	r3, #24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	3318      	adds	r3, #24
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2104      	movs	r1, #4
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff6c 	bl	800249c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80025c4:	202c      	movs	r0, #44	@ 0x2c
 80025c6:	f7ff ff4f 	bl	8002468 <ST7735_WriteCommand>
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
	...

080025d4 <ST7735_Init>:

void ST7735_Init() {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80025d8:	f7ff ff18 	bl	800240c <ST7735_Select>
    ST7735_Reset();
 80025dc:	f7ff ff2e 	bl	800243c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80025e0:	4806      	ldr	r0, [pc, #24]	@ (80025fc <ST7735_Init+0x28>)
 80025e2:	f7ff ff75 	bl	80024d0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80025e6:	4806      	ldr	r0, [pc, #24]	@ (8002600 <ST7735_Init+0x2c>)
 80025e8:	f7ff ff72 	bl	80024d0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80025ec:	4805      	ldr	r0, [pc, #20]	@ (8002604 <ST7735_Init+0x30>)
 80025ee:	f7ff ff6f 	bl	80024d0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80025f2:	f7ff ff17 	bl	8002424 <ST7735_Unselect>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	080108c0 	.word	0x080108c0
 8002600:	080108fc 	.word	0x080108fc
 8002604:	0801090c 	.word	0x0801090c

08002608 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4623      	mov	r3, r4
 8002618:	80fb      	strh	r3, [r7, #6]
 800261a:	4603      	mov	r3, r0
 800261c:	80bb      	strh	r3, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b9f      	cmp	r3, #159	@ 0x9f
 800262a:	d857      	bhi.n	80026dc <ST7735_FillRectangle+0xd4>
 800262c:	88bb      	ldrh	r3, [r7, #4]
 800262e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002630:	d854      	bhi.n	80026dc <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	4413      	add	r3, r2
 8002638:	2ba0      	cmp	r3, #160	@ 0xa0
 800263a:	dd03      	ble.n	8002644 <ST7735_FillRectangle+0x3c>
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002642:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002644:	88ba      	ldrh	r2, [r7, #4]
 8002646:	883b      	ldrh	r3, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	2b50      	cmp	r3, #80	@ 0x50
 800264c:	dd03      	ble.n	8002656 <ST7735_FillRectangle+0x4e>
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8002654:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002656:	f7ff fed9 	bl	800240c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	b2d8      	uxtb	r0, r3
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	b2d9      	uxtb	r1, r3
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b2dc      	uxtb	r4, r3
 8002672:	88bb      	ldrh	r3, [r7, #4]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	883b      	ldrh	r3, [r7, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4413      	add	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4622      	mov	r2, r4
 8002684:	f7ff ff6d 	bl	8002562 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002688:	8c3b      	ldrh	r3, [r7, #32]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	b29b      	uxth	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	733b      	strb	r3, [r7, #12]
 8002692:	8c3b      	ldrh	r3, [r7, #32]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	2110      	movs	r1, #16
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <ST7735_FillRectangle+0xdc>)
 800269e:	f7fe fde1 	bl	8001264 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	80bb      	strh	r3, [r7, #4]
 80026a6:	e013      	b.n	80026d0 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	80fb      	strh	r3, [r7, #6]
 80026ac:	e00a      	b.n	80026c4 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80026ae:	f107 010c 	add.w	r1, r7, #12
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	2202      	movs	r2, #2
 80026b8:	480b      	ldr	r0, [pc, #44]	@ (80026e8 <ST7735_FillRectangle+0xe0>)
 80026ba:	f7ff fafe 	bl	8001cba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	80fb      	strh	r3, [r7, #6]
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f1      	bne.n	80026ae <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	80bb      	strh	r3, [r7, #4]
 80026d0:	88bb      	ldrh	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e8      	bne.n	80026a8 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80026d6:	f7ff fea5 	bl	8002424 <ST7735_Unselect>
 80026da:	e000      	b.n	80026de <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80026dc:	bf00      	nop
}
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	40020000 	.word	0x40020000
 80026e8:	20000028 	.word	0x20000028

080026ec <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2350      	movs	r3, #80	@ 0x50
 80026fc:	22a0      	movs	r2, #160	@ 0xa0
 80026fe:	2100      	movs	r1, #0
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff ff81 	bl	8002608 <ST7735_FillRectangle>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ST7735_InvertColors>:
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8002718:	f7ff fe78 	bl	800240c <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <ST7735_InvertColors+0x18>
 8002722:	2321      	movs	r3, #33	@ 0x21
 8002724:	e000      	b.n	8002728 <ST7735_InvertColors+0x1a>
 8002726:	2320      	movs	r3, #32
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe9d 	bl	8002468 <ST7735_WriteCommand>
    ST7735_Unselect();
 800272e:	f7ff fe79 	bl	8002424 <ST7735_Unselect>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002746:	f107 020f 	add.w	r2, r7, #15
 800274a:	1df9      	adds	r1, r7, #7
 800274c:	2364      	movs	r3, #100	@ 0x64
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2301      	movs	r3, #1
 8002752:	4804      	ldr	r0, [pc, #16]	@ (8002764 <W25qxx_Spi+0x28>)
 8002754:	f7ff fbed 	bl	8001f32 <HAL_SPI_TransmitReceive>
	return ret;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000028 	.word	0x20000028

08002768 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002784:	4813      	ldr	r0, [pc, #76]	@ (80027d4 <W25qxx_ReadID+0x6c>)
 8002786:	f7fe fd6d 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800278a:	209f      	movs	r0, #159	@ 0x9f
 800278c:	f7ff ffd6 	bl	800273c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002790:	20a5      	movs	r0, #165	@ 0xa5
 8002792:	f7ff ffd3 	bl	800273c <W25qxx_Spi>
 8002796:	4603      	mov	r3, r0
 8002798:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800279a:	20a5      	movs	r0, #165	@ 0xa5
 800279c:	f7ff ffce 	bl	800273c <W25qxx_Spi>
 80027a0:	4603      	mov	r3, r0
 80027a2:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80027a4:	20a5      	movs	r0, #165	@ 0xa5
 80027a6:	f7ff ffc9 	bl	800273c <W25qxx_Spi>
 80027aa:	4603      	mov	r3, r0
 80027ac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b4:	4807      	ldr	r0, [pc, #28]	@ (80027d4 <W25qxx_ReadID+0x6c>)
 80027b6:	f7fe fd55 	bl	8001264 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4313      	orrs	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
	return Temp;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020800 	.word	0x40020800

080027d8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027e4:	4816      	ldr	r0, [pc, #88]	@ (8002840 <W25qxx_ReadUniqID+0x68>)
 80027e6:	f7fe fd3d 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80027ea:	204b      	movs	r0, #75	@ 0x4b
 80027ec:	f7ff ffa6 	bl	800273c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	e005      	b.n	8002802 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80027f6:	20a5      	movs	r0, #165	@ 0xa5
 80027f8:	f7ff ffa0 	bl	800273c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	3301      	adds	r3, #1
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d9f6      	bls.n	80027f6 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8002808:	2300      	movs	r3, #0
 800280a:	71bb      	strb	r3, [r7, #6]
 800280c:	e00b      	b.n	8002826 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800280e:	79bc      	ldrb	r4, [r7, #6]
 8002810:	20a5      	movs	r0, #165	@ 0xa5
 8002812:	f7ff ff93 	bl	800273c <W25qxx_Spi>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <W25qxx_ReadUniqID+0x6c>)
 800281c:	4423      	add	r3, r4
 800281e:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002820:	79bb      	ldrb	r3, [r7, #6]
 8002822:	3301      	adds	r3, #1
 8002824:	71bb      	strb	r3, [r7, #6]
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	2b07      	cmp	r3, #7
 800282a:	d9f0      	bls.n	800280e <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002832:	4803      	ldr	r0, [pc, #12]	@ (8002840 <W25qxx_ReadUniqID+0x68>)
 8002834:	f7fe fd16 	bl	8001264 <HAL_GPIO_WritePin>
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	40020800 	.word	0x40020800
 8002844:	20000084 	.word	0x20000084

08002848 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002852:	4808      	ldr	r0, [pc, #32]	@ (8002874 <W25qxx_WriteEnable+0x2c>)
 8002854:	f7fe fd06 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002858:	2006      	movs	r0, #6
 800285a:	f7ff ff6f 	bl	800273c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800285e:	2201      	movs	r2, #1
 8002860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002864:	4803      	ldr	r0, [pc, #12]	@ (8002874 <W25qxx_WriteEnable+0x2c>)
 8002866:	f7fe fcfd 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f7fe fa40 	bl	8000cf0 <HAL_Delay>
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020800 	.word	0x40020800

08002878 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800288c:	481c      	ldr	r0, [pc, #112]	@ (8002900 <W25qxx_ReadStatusRegister+0x88>)
 800288e:	f7fe fce9 	bl	8001264 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10c      	bne.n	80028b2 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8002898:	2005      	movs	r0, #5
 800289a:	f7ff ff4f 	bl	800273c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800289e:	20a5      	movs	r0, #165	@ 0xa5
 80028a0:	f7ff ff4c 	bl	800273c <W25qxx_Spi>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80028a8:	4a16      	ldr	r2, [pc, #88]	@ (8002904 <W25qxx_ReadStatusRegister+0x8c>)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 80028b0:	e01b      	b.n	80028ea <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d10c      	bne.n	80028d2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 80028b8:	2035      	movs	r0, #53	@ 0x35
 80028ba:	f7ff ff3f 	bl	800273c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028be:	20a5      	movs	r0, #165	@ 0xa5
 80028c0:	f7ff ff3c 	bl	800273c <W25qxx_Spi>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80028c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002904 <W25qxx_ReadStatusRegister+0x8c>)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80028d0:	e00b      	b.n	80028ea <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80028d2:	2015      	movs	r0, #21
 80028d4:	f7ff ff32 	bl	800273c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028d8:	20a5      	movs	r0, #165	@ 0xa5
 80028da:	f7ff ff2f 	bl	800273c <W25qxx_Spi>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80028e2:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <W25qxx_ReadStatusRegister+0x8c>)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80028ea:	2201      	movs	r2, #1
 80028ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028f0:	4803      	ldr	r0, [pc, #12]	@ (8002900 <W25qxx_ReadStatusRegister+0x88>)
 80028f2:	f7fe fcb7 	bl	8001264 <HAL_GPIO_WritePin>
	return status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40020800 	.word	0x40020800
 8002904:	20000084 	.word	0x20000084

08002908 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800290c:	2001      	movs	r0, #1
 800290e:	f7fe f9ef 	bl	8000cf0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002918:	480f      	ldr	r0, [pc, #60]	@ (8002958 <W25qxx_WaitForWriteEnd+0x50>)
 800291a:	f7fe fca3 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800291e:	2005      	movs	r0, #5
 8002920:	f7ff ff0c 	bl	800273c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002924:	20a5      	movs	r0, #165	@ 0xa5
 8002926:	f7ff ff09 	bl	800273c <W25qxx_Spi>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <W25qxx_WaitForWriteEnd+0x54>)
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		W25qxx_Delay(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f7fe f9db 	bl	8000cf0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <W25qxx_WaitForWriteEnd+0x54>)
 800293c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ed      	bne.n	8002924 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800294e:	4802      	ldr	r0, [pc, #8]	@ (8002958 <W25qxx_WaitForWriteEnd+0x50>)
 8002950:	f7fe fc88 	bl	8001264 <HAL_GPIO_WritePin>
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020800 	.word	0x40020800
 800295c:	20000084 	.word	0x20000084

08002960 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002966:	4b65      	ldr	r3, [pc, #404]	@ (8002afc <W25qxx_Init+0x19c>)
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800296e:	e002      	b.n	8002976 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002970:	2001      	movs	r0, #1
 8002972:	f7fe f9bd 	bl	8000cf0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8002976:	f7fe f9af 	bl	8000cd8 <HAL_GetTick>
 800297a:	4603      	mov	r3, r0
 800297c:	2b63      	cmp	r3, #99	@ 0x63
 800297e:	d9f7      	bls.n	8002970 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002986:	485e      	ldr	r0, [pc, #376]	@ (8002b00 <W25qxx_Init+0x1a0>)
 8002988:	f7fe fc6c 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800298c:	2064      	movs	r0, #100	@ 0x64
 800298e:	f7fe f9af 	bl	8000cf0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8002992:	f7ff fee9 	bl	8002768 <W25qxx_ReadID>
 8002996:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3b11      	subs	r3, #17
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d86b      	bhi.n	8002a7a <W25qxx_Init+0x11a>
 80029a2:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <W25qxx_Init+0x48>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	08002a6d 	.word	0x08002a6d
 80029ac:	08002a5f 	.word	0x08002a5f
 80029b0:	08002a51 	.word	0x08002a51
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a35 	.word	0x08002a35
 80029bc:	08002a27 	.word	0x08002a27
 80029c0:	08002a19 	.word	0x08002a19
 80029c4:	08002a09 	.word	0x08002a09
 80029c8:	080029f9 	.word	0x080029f9
 80029cc:	08002a7b 	.word	0x08002a7b
 80029d0:	08002a7b 	.word	0x08002a7b
 80029d4:	08002a7b 	.word	0x08002a7b
 80029d8:	08002a7b 	.word	0x08002a7b
 80029dc:	08002a7b 	.word	0x08002a7b
 80029e0:	08002a7b 	.word	0x08002a7b
 80029e4:	080029e9 	.word	0x080029e9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80029e8:	4b44      	ldr	r3, [pc, #272]	@ (8002afc <W25qxx_Init+0x19c>)
 80029ea:	220a      	movs	r2, #10
 80029ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80029ee:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <W25qxx_Init+0x19c>)
 80029f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80029f6:	e046      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80029f8:	4b40      	ldr	r3, [pc, #256]	@ (8002afc <W25qxx_Init+0x19c>)
 80029fa:	2209      	movs	r2, #9
 80029fc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002a06:	e03e      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002a08:	4b3c      	ldr	r3, [pc, #240]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a14:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002a16:	e036      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002a18:	4b38      	ldr	r3, [pc, #224]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002a24:	e02f      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002a26:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a28:	2206      	movs	r2, #6
 8002a2a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002a2c:	4b33      	ldr	r3, [pc, #204]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002a32:	e028      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002a34:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a36:	2205      	movs	r2, #5
 8002a38:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002a3a:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002a40:	e021      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002a42:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a44:	2204      	movs	r2, #4
 8002a46:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002a4e:	e01a      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a52:	2203      	movs	r2, #3
 8002a54:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002a56:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a58:	2208      	movs	r2, #8
 8002a5a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002a5c:	e013      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002a64:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002a6a:	e00c      	b.n	8002a86 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002a72:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a74:	2202      	movs	r2, #2
 8002a76:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002a78:	e005      	b.n	8002a86 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e036      	b.n	8002af4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8002a86:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a8c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a94:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <W25qxx_Init+0x19c>)
 8002a9e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <W25qxx_Init+0x19c>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <W25qxx_Init+0x19c>)
 8002aa6:	6912      	ldr	r2, [r2, #16]
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <W25qxx_Init+0x19c>)
 8002aae:	8952      	ldrh	r2, [r2, #10]
 8002ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab4:	4a11      	ldr	r2, [pc, #68]	@ (8002afc <W25qxx_Init+0x19c>)
 8002ab6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <W25qxx_Init+0x19c>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4a0f      	ldr	r2, [pc, #60]	@ (8002afc <W25qxx_Init+0x19c>)
 8002ac0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <W25qxx_Init+0x19c>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <W25qxx_Init+0x19c>)
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <W25qxx_Init+0x19c>)
 8002ad2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002ad4:	f7ff fe80 	bl	80027d8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7ff fecd 	bl	8002878 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f7ff feca 	bl	8002878 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f7ff fec7 	bl	8002878 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <W25qxx_Init+0x19c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000084 	.word	0x20000084
 8002b00:	40020800 	.word	0x40020800

08002b04 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002b0c:	e002      	b.n	8002b14 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fe f8ee 	bl	8000cf0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <W25qxx_EraseBlock+0xb0>)
 8002b16:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d0f7      	beq.n	8002b0e <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 8002b1e:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <W25qxx_EraseBlock+0xb0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002b26:	f7ff feef 	bl	8002908 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8002b2a:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <W25qxx_EraseBlock+0xb0>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002b38:	f7ff fe86 	bl	8002848 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b42:	481d      	ldr	r0, [pc, #116]	@ (8002bb8 <W25qxx_EraseBlock+0xb4>)
 8002b44:	f7fe fb8e 	bl	8001264 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <W25qxx_EraseBlock+0xb0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d909      	bls.n	8002b64 <W25qxx_EraseBlock+0x60>
	{
		W25qxx_Spi(0xDC);
 8002b50:	20dc      	movs	r0, #220	@ 0xdc
 8002b52:	f7ff fdf3 	bl	800273c <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0e1b      	lsrs	r3, r3, #24
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fded 	bl	800273c <W25qxx_Spi>
 8002b62:	e002      	b.n	8002b6a <W25qxx_EraseBlock+0x66>
	}
	else
	{
		W25qxx_Spi(0xD8);
 8002b64:	20d8      	movs	r0, #216	@ 0xd8
 8002b66:	f7ff fde9 	bl	800273c <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fde3 	bl	800273c <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fddd 	bl	800273c <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fdd8 	bl	800273c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b92:	4809      	ldr	r0, [pc, #36]	@ (8002bb8 <W25qxx_EraseBlock+0xb4>)
 8002b94:	f7fe fb66 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002b98:	f7ff feb6 	bl	8002908 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7fe f8a7 	bl	8000cf0 <HAL_Delay>
	w25qxx.Lock = 0;
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <W25qxx_EraseBlock+0xb0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000084 	.word	0x20000084
 8002bb8:	40020800 	.word	0x40020800

08002bbc <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 8002bc4:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <W25qxx_BlockToPage+0x28>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <W25qxx_BlockToPage+0x28>)
 8002bd0:	8952      	ldrh	r2, [r2, #10]
 8002bd2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000084 	.word	0x20000084

08002be8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002bf6:	e002      	b.n	8002bfe <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7fe f879 	bl	8000cf0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c00:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d0f7      	beq.n	8002bf8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002c08:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a34      	ldr	r2, [pc, #208]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c18:	8952      	ldrh	r2, [r2, #10]
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d802      	bhi.n	8002c24 <W25qxx_WritePage+0x3c>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002c24:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c26:	895b      	ldrh	r3, [r3, #10]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c38:	8952      	ldrh	r2, [r2, #10]
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d905      	bls.n	8002c4a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c40:	895b      	ldrh	r3, [r3, #10]
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002c4a:	f7ff fe5d 	bl	8002908 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002c4e:	f7ff fdfb 	bl	8002848 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002c52:	2200      	movs	r2, #0
 8002c54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c58:	4824      	ldr	r0, [pc, #144]	@ (8002cec <W25qxx_WritePage+0x104>)
 8002c5a:	f7fe fb03 	bl	8001264 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c60:	895b      	ldrh	r3, [r3, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002c70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d909      	bls.n	8002c8c <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002c78:	2012      	movs	r0, #18
 8002c7a:	f7ff fd5f 	bl	800273c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0e1b      	lsrs	r3, r3, #24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fd59 	bl	800273c <W25qxx_Spi>
 8002c8a:	e002      	b.n	8002c92 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f7ff fd55 	bl	800273c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fd4f 	bl	800273c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fd49 	bl	800273c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fd44 	bl	800273c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	2364      	movs	r3, #100	@ 0x64
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <W25qxx_WritePage+0x108>)
 8002cbe:	f7fe fffc 	bl	8001cba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cc8:	4808      	ldr	r0, [pc, #32]	@ (8002cec <W25qxx_WritePage+0x104>)
 8002cca:	f7fe facb 	bl	8001264 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002cce:	f7ff fe1b 	bl	8002908 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7fe f80c 	bl	8000cf0 <HAL_Delay>
	w25qxx.Lock = 0;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <W25qxx_WritePage+0x100>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000084 	.word	0x20000084
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	20000028 	.word	0x20000028

08002cf4 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_WriteBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToWrite_up_to_BlockSize == 0))
 8002d02:	4b2c      	ldr	r3, [pc, #176]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d802      	bhi.n	8002d12 <W25qxx_WriteBlock+0x1e>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize = w25qxx.BlockSize;
 8002d12:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 8002d18:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d243      	bcs.n	8002daa <W25qxx_WriteBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	441a      	add	r2, r3
 8002d28:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d905      	bls.n	8002d3c <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 8002d30:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e001      	b.n	8002d40 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002d40:	68b8      	ldr	r0, [r7, #8]
 8002d42:	f7ff ff3b 	bl	8002bbc <W25qxx_BlockToPage>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d4a:	895b      	ldrh	r3, [r3, #10]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d54:	4413      	add	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8002d58:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d5a:	895b      	ldrh	r3, [r3, #10]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d64:	fb01 f202 	mul.w	r2, r1, r2
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	69f9      	ldr	r1, [r7, #28]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff ff38 	bl	8002be8 <W25qxx_WritePage>
		StartPage++;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d80:	895b      	ldrh	r3, [r3, #10]
 8002d82:	461a      	mov	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1a9a      	subs	r2, r3, r2
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <W25qxx_WriteBlock+0xc0>)
 8002d90:	895b      	ldrh	r3, [r3, #10]
 8002d92:	461a      	mov	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	dce1      	bgt.n	8002d6c <W25qxx_WriteBlock+0x78>
 8002da8:	e000      	b.n	8002dac <W25qxx_WriteBlock+0xb8>
		return;
 8002daa:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000084 	.word	0x20000084

08002db8 <memset>:
 8002db8:	4402      	add	r2, r0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4d0d      	ldr	r5, [pc, #52]	@ (8002e00 <__libc_init_array+0x38>)
 8002dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8002e04 <__libc_init_array+0x3c>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	42a6      	cmp	r6, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002e08 <__libc_init_array+0x40>)
 8002dda:	4c0c      	ldr	r4, [pc, #48]	@ (8002e0c <__libc_init_array+0x44>)
 8002ddc:	f000 f818 	bl	8002e10 <_init>
 8002de0:	1b64      	subs	r4, r4, r5
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	2600      	movs	r6, #0
 8002de6:	42a6      	cmp	r6, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df0:	4798      	blx	r3
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfa:	4798      	blx	r3
 8002dfc:	3601      	adds	r6, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08010940 	.word	0x08010940
 8002e04:	08010940 	.word	0x08010940
 8002e08:	08010940 	.word	0x08010940
 8002e0c:	08010944 	.word	0x08010944

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
