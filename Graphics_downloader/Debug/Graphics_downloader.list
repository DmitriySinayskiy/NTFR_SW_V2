
Graphics_downloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003c9fc  080032a4  080032a4  000042a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803fca0  0803fca0  0004100c  2**0
                  CONTENTS
  4 .ARM          00000008  0803fca0  0803fca0  00040ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803fca8  0803fca8  0004100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803fca8  0803fca8  00040ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803fcac  0803fcac  00040cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0803fcb0  00041000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0803fcbc  0004100c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0803fcbc  000410ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004100c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d30  00000000  00000000  0004103c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c6  00000000  00000000  00049d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0004b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c2  00000000  00000000  0004bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fa2  00000000  00000000  0004c38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009488  00000000  00000000  0006232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008765a  00000000  00000000  0006b7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2e0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  000f2e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f4b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800328c 	.word	0x0800328c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800328c 	.word	0x0800328c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdde 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 fb5c 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fbfc 	bl	8000ccc <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d4:	f000 fbc4 	bl	8000c60 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004de:	48e2      	ldr	r0, [pc, #904]	@ (8000868 <main+0x3a4>)
 80004e0:	f001 f8fe 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ea:	48df      	ldr	r0, [pc, #892]	@ (8000868 <main+0x3a4>)
 80004ec:	f001 f8f8 	bl	80016e0 <HAL_GPIO_WritePin>

  ST7735_Init();
 80004f0:	f002 faae 	bl	8002a50 <ST7735_Init>
  ST7735_InvertColors(0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f002 fb48 	bl	8002b8a <ST7735_InvertColors>
  W25qxx_Init();
 80004fa:	f002 fc6f 	bl	8002ddc <W25qxx_Init>

  ST7735_FillScreen(ST7735_RED);
 80004fe:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000502:	f002 fb31 	bl	8002b68 <ST7735_FillScreen>
//    W25qxx_WriteBlock(L16_data, 4, 4232*14, 4232);

/////// FIRMWARE 1


  W25qxx_EraseBlock(5);
 8000506:	2005      	movs	r0, #5
 8000508:	f002 fd3a 	bl	8002f80 <W25qxx_EraseBlock>
  W25qxx_WriteBlock(L17_data, 5, 0, 4232);
 800050c:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000510:	2200      	movs	r2, #0
 8000512:	2105      	movs	r1, #5
 8000514:	48d5      	ldr	r0, [pc, #852]	@ (800086c <main+0x3a8>)
 8000516:	f002 fe2b 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L18_data, 5, 4232, 4232);
 800051a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800051e:	f241 0288 	movw	r2, #4232	@ 0x1088
 8000522:	2105      	movs	r1, #5
 8000524:	48d2      	ldr	r0, [pc, #840]	@ (8000870 <main+0x3ac>)
 8000526:	f002 fe23 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L19_data, 5, 4232*2, 4232);
 800052a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800052e:	f242 1210 	movw	r2, #8464	@ 0x2110
 8000532:	2105      	movs	r1, #5
 8000534:	48cf      	ldr	r0, [pc, #828]	@ (8000874 <main+0x3b0>)
 8000536:	f002 fe1b 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L20_data, 5, 4232*3, 4232);
 800053a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800053e:	f243 1298 	movw	r2, #12696	@ 0x3198
 8000542:	2105      	movs	r1, #5
 8000544:	48cc      	ldr	r0, [pc, #816]	@ (8000878 <main+0x3b4>)
 8000546:	f002 fe13 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L21_data, 5, 4232*4, 4232);
 800054a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800054e:	f244 2220 	movw	r2, #16928	@ 0x4220
 8000552:	2105      	movs	r1, #5
 8000554:	48c9      	ldr	r0, [pc, #804]	@ (800087c <main+0x3b8>)
 8000556:	f002 fe0b 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L22_data, 5, 4232*5, 4232);
 800055a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800055e:	f245 22a8 	movw	r2, #21160	@ 0x52a8
 8000562:	2105      	movs	r1, #5
 8000564:	48c6      	ldr	r0, [pc, #792]	@ (8000880 <main+0x3bc>)
 8000566:	f002 fe03 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L23_data, 5, 4232*6, 4232);
 800056a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800056e:	f246 3230 	movw	r2, #25392	@ 0x6330
 8000572:	2105      	movs	r1, #5
 8000574:	48c3      	ldr	r0, [pc, #780]	@ (8000884 <main+0x3c0>)
 8000576:	f002 fdfb 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L24_data, 5, 4232*7, 4232);
 800057a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800057e:	f247 32b8 	movw	r2, #29624	@ 0x73b8
 8000582:	2105      	movs	r1, #5
 8000584:	48c0      	ldr	r0, [pc, #768]	@ (8000888 <main+0x3c4>)
 8000586:	f002 fdf3 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L25_data, 5, 4232*8, 4232);
 800058a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800058e:	f248 4240 	movw	r2, #33856	@ 0x8440
 8000592:	2105      	movs	r1, #5
 8000594:	48bd      	ldr	r0, [pc, #756]	@ (800088c <main+0x3c8>)
 8000596:	f002 fdeb 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L26_data, 5, 4232*9, 4232);
 800059a:	f241 0388 	movw	r3, #4232	@ 0x1088
 800059e:	f249 42c8 	movw	r2, #38088	@ 0x94c8
 80005a2:	2105      	movs	r1, #5
 80005a4:	48ba      	ldr	r0, [pc, #744]	@ (8000890 <main+0x3cc>)
 80005a6:	f002 fde3 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L27_data, 5, 4232*10, 4232);
 80005aa:	f241 0388 	movw	r3, #4232	@ 0x1088
 80005ae:	f24a 5250 	movw	r2, #42320	@ 0xa550
 80005b2:	2105      	movs	r1, #5
 80005b4:	48b7      	ldr	r0, [pc, #732]	@ (8000894 <main+0x3d0>)
 80005b6:	f002 fddb 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L28_data, 5, 4232*11, 4232);
 80005ba:	f241 0388 	movw	r3, #4232	@ 0x1088
 80005be:	f24b 52d8 	movw	r2, #46552	@ 0xb5d8
 80005c2:	2105      	movs	r1, #5
 80005c4:	48b4      	ldr	r0, [pc, #720]	@ (8000898 <main+0x3d4>)
 80005c6:	f002 fdd3 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L29_data, 5, 4232*12, 4232);
 80005ca:	f241 0388 	movw	r3, #4232	@ 0x1088
 80005ce:	f24c 6260 	movw	r2, #50784	@ 0xc660
 80005d2:	2105      	movs	r1, #5
 80005d4:	48b1      	ldr	r0, [pc, #708]	@ (800089c <main+0x3d8>)
 80005d6:	f002 fdcb 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L30_data, 5, 4232*13, 4232);
 80005da:	f241 0388 	movw	r3, #4232	@ 0x1088
 80005de:	f24d 62e8 	movw	r2, #55016	@ 0xd6e8
 80005e2:	2105      	movs	r1, #5
 80005e4:	48ae      	ldr	r0, [pc, #696]	@ (80008a0 <main+0x3dc>)
 80005e6:	f002 fdc3 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L31_data, 5, 4232*14, 4232);
 80005ea:	f241 0388 	movw	r3, #4232	@ 0x1088
 80005ee:	f24e 7270 	movw	r2, #59248	@ 0xe770
 80005f2:	2105      	movs	r1, #5
 80005f4:	48ab      	ldr	r0, [pc, #684]	@ (80008a4 <main+0x3e0>)
 80005f6:	f002 fdbb 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_EraseBlock(6);
 80005fa:	2006      	movs	r0, #6
 80005fc:	f002 fcc0 	bl	8002f80 <W25qxx_EraseBlock>
  W25qxx_WriteBlock(L32_data, 6, 0, 4232);
 8000600:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	48a7      	ldr	r0, [pc, #668]	@ (80008a8 <main+0x3e4>)
 800060a:	f002 fdb1 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L33_data, 6, 4232, 4232);
 800060e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000612:	f241 0288 	movw	r2, #4232	@ 0x1088
 8000616:	2106      	movs	r1, #6
 8000618:	48a4      	ldr	r0, [pc, #656]	@ (80008ac <main+0x3e8>)
 800061a:	f002 fda9 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L34_data, 6, 4232*2, 4232);
 800061e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000622:	f242 1210 	movw	r2, #8464	@ 0x2110
 8000626:	2106      	movs	r1, #6
 8000628:	48a1      	ldr	r0, [pc, #644]	@ (80008b0 <main+0x3ec>)
 800062a:	f002 fda1 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L35_data, 6, 4232*3, 4232);
 800062e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000632:	f243 1298 	movw	r2, #12696	@ 0x3198
 8000636:	2106      	movs	r1, #6
 8000638:	489e      	ldr	r0, [pc, #632]	@ (80008b4 <main+0x3f0>)
 800063a:	f002 fd99 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L36_data, 6, 4232*4, 4232);
 800063e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000642:	f244 2220 	movw	r2, #16928	@ 0x4220
 8000646:	2106      	movs	r1, #6
 8000648:	489b      	ldr	r0, [pc, #620]	@ (80008b8 <main+0x3f4>)
 800064a:	f002 fd91 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L37_data, 6, 4232*5, 4232);
 800064e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000652:	f245 22a8 	movw	r2, #21160	@ 0x52a8
 8000656:	2106      	movs	r1, #6
 8000658:	4898      	ldr	r0, [pc, #608]	@ (80008bc <main+0x3f8>)
 800065a:	f002 fd89 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L38_data, 6, 4232*6, 4232);
 800065e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000662:	f246 3230 	movw	r2, #25392	@ 0x6330
 8000666:	2106      	movs	r1, #6
 8000668:	4895      	ldr	r0, [pc, #596]	@ (80008c0 <main+0x3fc>)
 800066a:	f002 fd81 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L39_data, 6, 4232*7, 4232);
 800066e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000672:	f247 32b8 	movw	r2, #29624	@ 0x73b8
 8000676:	2106      	movs	r1, #6
 8000678:	4892      	ldr	r0, [pc, #584]	@ (80008c4 <main+0x400>)
 800067a:	f002 fd79 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L40_data, 6, 4232*8, 4232);
 800067e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000682:	f248 4240 	movw	r2, #33856	@ 0x8440
 8000686:	2106      	movs	r1, #6
 8000688:	488f      	ldr	r0, [pc, #572]	@ (80008c8 <main+0x404>)
 800068a:	f002 fd71 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L41_data, 6, 4232*9, 4232);
 800068e:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000692:	f249 42c8 	movw	r2, #38088	@ 0x94c8
 8000696:	2106      	movs	r1, #6
 8000698:	488c      	ldr	r0, [pc, #560]	@ (80008cc <main+0x408>)
 800069a:	f002 fd69 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L42_data, 6, 4232*10, 4232);
 800069e:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006a2:	f24a 5250 	movw	r2, #42320	@ 0xa550
 80006a6:	2106      	movs	r1, #6
 80006a8:	4889      	ldr	r0, [pc, #548]	@ (80008d0 <main+0x40c>)
 80006aa:	f002 fd61 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L43_data, 6, 4232*11, 4232);
 80006ae:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006b2:	f24b 52d8 	movw	r2, #46552	@ 0xb5d8
 80006b6:	2106      	movs	r1, #6
 80006b8:	4886      	ldr	r0, [pc, #536]	@ (80008d4 <main+0x410>)
 80006ba:	f002 fd59 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L44_data, 6, 4232*12, 4232);
 80006be:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006c2:	f24c 6260 	movw	r2, #50784	@ 0xc660
 80006c6:	2106      	movs	r1, #6
 80006c8:	4883      	ldr	r0, [pc, #524]	@ (80008d8 <main+0x414>)
 80006ca:	f002 fd51 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L45_data, 6, 4232*13, 4232);
 80006ce:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006d2:	f24d 62e8 	movw	r2, #55016	@ 0xd6e8
 80006d6:	2106      	movs	r1, #6
 80006d8:	4880      	ldr	r0, [pc, #512]	@ (80008dc <main+0x418>)
 80006da:	f002 fd49 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L46_data, 6, 4232*14, 4232);
 80006de:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006e2:	f24e 7270 	movw	r2, #59248	@ 0xe770
 80006e6:	2106      	movs	r1, #6
 80006e8:	487d      	ldr	r0, [pc, #500]	@ (80008e0 <main+0x41c>)
 80006ea:	f002 fd41 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_EraseBlock(7);
 80006ee:	2007      	movs	r0, #7
 80006f0:	f002 fc46 	bl	8002f80 <W25qxx_EraseBlock>
  W25qxx_WriteBlock(L47_data, 7, 0, 4232);
 80006f4:	f241 0388 	movw	r3, #4232	@ 0x1088
 80006f8:	2200      	movs	r2, #0
 80006fa:	2107      	movs	r1, #7
 80006fc:	4879      	ldr	r0, [pc, #484]	@ (80008e4 <main+0x420>)
 80006fe:	f002 fd37 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L48_data, 7, 4232, 4232);
 8000702:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000706:	f241 0288 	movw	r2, #4232	@ 0x1088
 800070a:	2107      	movs	r1, #7
 800070c:	4876      	ldr	r0, [pc, #472]	@ (80008e8 <main+0x424>)
 800070e:	f002 fd2f 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L49_data, 7, 4232*2, 4232);
 8000712:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000716:	f242 1210 	movw	r2, #8464	@ 0x2110
 800071a:	2107      	movs	r1, #7
 800071c:	4873      	ldr	r0, [pc, #460]	@ (80008ec <main+0x428>)
 800071e:	f002 fd27 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L50_data, 7, 4232*3, 4232);
 8000722:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000726:	f243 1298 	movw	r2, #12696	@ 0x3198
 800072a:	2107      	movs	r1, #7
 800072c:	4870      	ldr	r0, [pc, #448]	@ (80008f0 <main+0x42c>)
 800072e:	f002 fd1f 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L51_data, 7, 4232*4, 4232);
 8000732:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000736:	f244 2220 	movw	r2, #16928	@ 0x4220
 800073a:	2107      	movs	r1, #7
 800073c:	486d      	ldr	r0, [pc, #436]	@ (80008f4 <main+0x430>)
 800073e:	f002 fd17 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L52_data, 7, 4232*5, 4232);
 8000742:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000746:	f245 22a8 	movw	r2, #21160	@ 0x52a8
 800074a:	2107      	movs	r1, #7
 800074c:	486a      	ldr	r0, [pc, #424]	@ (80008f8 <main+0x434>)
 800074e:	f002 fd0f 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L53_data, 7, 4232*6, 4232);
 8000752:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000756:	f246 3230 	movw	r2, #25392	@ 0x6330
 800075a:	2107      	movs	r1, #7
 800075c:	4867      	ldr	r0, [pc, #412]	@ (80008fc <main+0x438>)
 800075e:	f002 fd07 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L54_data, 7, 4232*7, 4232);
 8000762:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000766:	f247 32b8 	movw	r2, #29624	@ 0x73b8
 800076a:	2107      	movs	r1, #7
 800076c:	4864      	ldr	r0, [pc, #400]	@ (8000900 <main+0x43c>)
 800076e:	f002 fcff 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L55_data, 7, 4232*8, 4232);
 8000772:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000776:	f248 4240 	movw	r2, #33856	@ 0x8440
 800077a:	2107      	movs	r1, #7
 800077c:	4861      	ldr	r0, [pc, #388]	@ (8000904 <main+0x440>)
 800077e:	f002 fcf7 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L56_data, 7, 4232*9, 4232);
 8000782:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000786:	f249 42c8 	movw	r2, #38088	@ 0x94c8
 800078a:	2107      	movs	r1, #7
 800078c:	485e      	ldr	r0, [pc, #376]	@ (8000908 <main+0x444>)
 800078e:	f002 fcef 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L57_data, 7, 4232*10, 4232);
 8000792:	f241 0388 	movw	r3, #4232	@ 0x1088
 8000796:	f24a 5250 	movw	r2, #42320	@ 0xa550
 800079a:	2107      	movs	r1, #7
 800079c:	485b      	ldr	r0, [pc, #364]	@ (800090c <main+0x448>)
 800079e:	f002 fce7 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L58_data, 7, 4232*11, 4232);
 80007a2:	f241 0388 	movw	r3, #4232	@ 0x1088
 80007a6:	f24b 52d8 	movw	r2, #46552	@ 0xb5d8
 80007aa:	2107      	movs	r1, #7
 80007ac:	4858      	ldr	r0, [pc, #352]	@ (8000910 <main+0x44c>)
 80007ae:	f002 fcdf 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L59_data, 7, 4232*12, 4232);
 80007b2:	f241 0388 	movw	r3, #4232	@ 0x1088
 80007b6:	f24c 6260 	movw	r2, #50784	@ 0xc660
 80007ba:	2107      	movs	r1, #7
 80007bc:	4855      	ldr	r0, [pc, #340]	@ (8000914 <main+0x450>)
 80007be:	f002 fcd7 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L60_data, 7, 4232*13, 4232);
 80007c2:	f241 0388 	movw	r3, #4232	@ 0x1088
 80007c6:	f24d 62e8 	movw	r2, #55016	@ 0xd6e8
 80007ca:	2107      	movs	r1, #7
 80007cc:	4852      	ldr	r0, [pc, #328]	@ (8000918 <main+0x454>)
 80007ce:	f002 fccf 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(L61_data, 7, 4232*14, 4232);
 80007d2:	f241 0388 	movw	r3, #4232	@ 0x1088
 80007d6:	f24e 7270 	movw	r2, #59248	@ 0xe770
 80007da:	2107      	movs	r1, #7
 80007dc:	484f      	ldr	r0, [pc, #316]	@ (800091c <main+0x458>)
 80007de:	f002 fcc7 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_EraseBlock(8);
 80007e2:	2008      	movs	r0, #8
 80007e4:	f002 fbcc 	bl	8002f80 <W25qxx_EraseBlock>
  W25qxx_WriteBlock(LOADING_1_data, 8, 0, 5408 );
 80007e8:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 80007ec:	2200      	movs	r2, #0
 80007ee:	2108      	movs	r1, #8
 80007f0:	484b      	ldr	r0, [pc, #300]	@ (8000920 <main+0x45c>)
 80007f2:	f002 fcbd 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOADING_2_data, 8, 5408, 5408 );
 80007f6:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 80007fa:	f44f 52a9 	mov.w	r2, #5408	@ 0x1520
 80007fe:	2108      	movs	r1, #8
 8000800:	4848      	ldr	r0, [pc, #288]	@ (8000924 <main+0x460>)
 8000802:	f002 fcb5 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOADING_3_data, 8, 10816, 5408 );
 8000806:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800080a:	f44f 5229 	mov.w	r2, #10816	@ 0x2a40
 800080e:	2108      	movs	r1, #8
 8000810:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x464>)
 8000812:	f002 fcad 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_0_data, 8, 16224, 1800 );
 8000816:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800081a:	f643 7260 	movw	r2, #16224	@ 0x3f60
 800081e:	2108      	movs	r1, #8
 8000820:	4842      	ldr	r0, [pc, #264]	@ (800092c <main+0x468>)
 8000822:	f002 fca5 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_10_data, 8, 16224 + 1800*1, 1800 );
 8000826:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800082a:	f244 6268 	movw	r2, #18024	@ 0x4668
 800082e:	2108      	movs	r1, #8
 8000830:	483f      	ldr	r0, [pc, #252]	@ (8000930 <main+0x46c>)
 8000832:	f002 fc9d 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_20_data, 8, 16224 + 1800*2, 1800 );
 8000836:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800083a:	f644 5270 	movw	r2, #19824	@ 0x4d70
 800083e:	2108      	movs	r1, #8
 8000840:	483c      	ldr	r0, [pc, #240]	@ (8000934 <main+0x470>)
 8000842:	f002 fc95 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_30_data, 8, 16224 + 1800*3, 1800 );
 8000846:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800084a:	f245 4278 	movw	r2, #21624	@ 0x5478
 800084e:	2108      	movs	r1, #8
 8000850:	4839      	ldr	r0, [pc, #228]	@ (8000938 <main+0x474>)
 8000852:	f002 fc8d 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_40_data, 8, 16224 + 1800*4, 1800 );
 8000856:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800085a:	f44f 42b7 	mov.w	r2, #23424	@ 0x5b80
 800085e:	2108      	movs	r1, #8
 8000860:	4836      	ldr	r0, [pc, #216]	@ (800093c <main+0x478>)
 8000862:	f002 fc85 	bl	8003170 <W25qxx_WriteBlock>
 8000866:	e06b      	b.n	8000940 <main+0x47c>
 8000868:	40020800 	.word	0x40020800
 800086c:	080032b4 	.word	0x080032b4
 8000870:	0800433c 	.word	0x0800433c
 8000874:	080053c4 	.word	0x080053c4
 8000878:	0800644c 	.word	0x0800644c
 800087c:	080074d4 	.word	0x080074d4
 8000880:	0800855c 	.word	0x0800855c
 8000884:	080095e4 	.word	0x080095e4
 8000888:	0800a66c 	.word	0x0800a66c
 800088c:	0800b6f4 	.word	0x0800b6f4
 8000890:	0800c77c 	.word	0x0800c77c
 8000894:	0800d804 	.word	0x0800d804
 8000898:	0800e88c 	.word	0x0800e88c
 800089c:	0800f914 	.word	0x0800f914
 80008a0:	0801099c 	.word	0x0801099c
 80008a4:	08011a24 	.word	0x08011a24
 80008a8:	08012aac 	.word	0x08012aac
 80008ac:	08013b34 	.word	0x08013b34
 80008b0:	08014bbc 	.word	0x08014bbc
 80008b4:	08015c44 	.word	0x08015c44
 80008b8:	08016ccc 	.word	0x08016ccc
 80008bc:	08017d54 	.word	0x08017d54
 80008c0:	08018ddc 	.word	0x08018ddc
 80008c4:	08019e64 	.word	0x08019e64
 80008c8:	0801aeec 	.word	0x0801aeec
 80008cc:	0801bf74 	.word	0x0801bf74
 80008d0:	0801cffc 	.word	0x0801cffc
 80008d4:	0801e084 	.word	0x0801e084
 80008d8:	0801f10c 	.word	0x0801f10c
 80008dc:	08020194 	.word	0x08020194
 80008e0:	0802121c 	.word	0x0802121c
 80008e4:	080222a4 	.word	0x080222a4
 80008e8:	0802332c 	.word	0x0802332c
 80008ec:	080243b4 	.word	0x080243b4
 80008f0:	0802543c 	.word	0x0802543c
 80008f4:	080264c4 	.word	0x080264c4
 80008f8:	0802754c 	.word	0x0802754c
 80008fc:	080285d4 	.word	0x080285d4
 8000900:	0802965c 	.word	0x0802965c
 8000904:	0802a6e4 	.word	0x0802a6e4
 8000908:	0802b76c 	.word	0x0802b76c
 800090c:	0802c7f4 	.word	0x0802c7f4
 8000910:	0802d87c 	.word	0x0802d87c
 8000914:	0802e904 	.word	0x0802e904
 8000918:	0802f98c 	.word	0x0802f98c
 800091c:	08030a14 	.word	0x08030a14
 8000920:	08031a9c 	.word	0x08031a9c
 8000924:	08032fbc 	.word	0x08032fbc
 8000928:	080344dc 	.word	0x080344dc
 800092c:	080359fc 	.word	0x080359fc
 8000930:	08036104 	.word	0x08036104
 8000934:	0803761c 	.word	0x0803761c
 8000938:	0803842c 	.word	0x0803842c
 800093c:	08038b34 	.word	0x08038b34
  W25qxx_WriteBlock(LOAD_50_data, 8, 16224 + 1800*5, 1800 );
 8000940:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000944:	f246 2288 	movw	r2, #25224	@ 0x6288
 8000948:	2108      	movs	r1, #8
 800094a:	4873      	ldr	r0, [pc, #460]	@ (8000b18 <main+0x654>)
 800094c:	f002 fc10 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_60_data, 8, 16224 + 1800*6, 1800 );
 8000950:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000954:	f646 1290 	movw	r2, #27024	@ 0x6990
 8000958:	2108      	movs	r1, #8
 800095a:	4870      	ldr	r0, [pc, #448]	@ (8000b1c <main+0x658>)
 800095c:	f002 fc08 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_70_data, 8, 16224 + 1800*7, 1800 );
 8000960:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000964:	f247 0298 	movw	r2, #28824	@ 0x7098
 8000968:	2108      	movs	r1, #8
 800096a:	486d      	ldr	r0, [pc, #436]	@ (8000b20 <main+0x65c>)
 800096c:	f002 fc00 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_80_data, 8, 16224 + 1800*8, 1800 );
 8000970:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000974:	f247 72a0 	movw	r2, #30624	@ 0x77a0
 8000978:	2108      	movs	r1, #8
 800097a:	486a      	ldr	r0, [pc, #424]	@ (8000b24 <main+0x660>)
 800097c:	f002 fbf8 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_90_data, 8, 16224 + 1800*9, 1800 );
 8000980:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000984:	f647 62a8 	movw	r2, #32424	@ 0x7ea8
 8000988:	2108      	movs	r1, #8
 800098a:	4867      	ldr	r0, [pc, #412]	@ (8000b28 <main+0x664>)
 800098c:	f002 fbf0 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_100_data, 8, 16224 + 1800*10, 1800 );
 8000990:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000994:	f248 52b0 	movw	r2, #34224	@ 0x85b0
 8000998:	2108      	movs	r1, #8
 800099a:	4864      	ldr	r0, [pc, #400]	@ (8000b2c <main+0x668>)
 800099c:	f002 fbe8 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_150_data, 8, 16224 + 1800*11, 1800 );
 80009a0:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80009a4:	f648 42b8 	movw	r2, #36024	@ 0x8cb8
 80009a8:	2108      	movs	r1, #8
 80009aa:	4861      	ldr	r0, [pc, #388]	@ (8000b30 <main+0x66c>)
 80009ac:	f002 fbe0 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(LOAD_200_data, 8, 16224 + 1800*12, 1800 );
 80009b0:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80009b4:	f249 32c0 	movw	r2, #37824	@ 0x93c0
 80009b8:	2108      	movs	r1, #8
 80009ba:	485e      	ldr	r0, [pc, #376]	@ (8000b34 <main+0x670>)
 80009bc:	f002 fbd8 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_WriteBlock(CHECK_MARK_M_data, 8,39774 , 1920 );
 80009c0:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80009c4:	f649 325e 	movw	r2, #39774	@ 0x9b5e
 80009c8:	2108      	movs	r1, #8
 80009ca:	485b      	ldr	r0, [pc, #364]	@ (8000b38 <main+0x674>)
 80009cc:	f002 fbd0 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(EXCLAMATION_MARK_M_data, 8,41664 , 1920 );
 80009d0:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80009d4:	f24a 22c0 	movw	r2, #41664	@ 0xa2c0
 80009d8:	2108      	movs	r1, #8
 80009da:	4858      	ldr	r0, [pc, #352]	@ (8000b3c <main+0x678>)
 80009dc:	f002 fbc8 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CROSS_MARK_M_data, 8,43584 , 1920 );
 80009e0:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80009e4:	f64a 2240 	movw	r2, #43584	@ 0xaa40
 80009e8:	2108      	movs	r1, #8
 80009ea:	4855      	ldr	r0, [pc, #340]	@ (8000b40 <main+0x67c>)
 80009ec:	f002 fbc0 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CHECK_MARK_L_data, 8,47104 , 3520 );
 80009f0:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 80009f4:	f44f 4238 	mov.w	r2, #47104	@ 0xb800
 80009f8:	2108      	movs	r1, #8
 80009fa:	4852      	ldr	r0, [pc, #328]	@ (8000b44 <main+0x680>)
 80009fc:	f002 fbb8 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(EXCLAMATION_MARK_L_data, 8,50624 , 3520 );
 8000a00:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 8000a04:	f24c 52c0 	movw	r2, #50624	@ 0xc5c0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	484f      	ldr	r0, [pc, #316]	@ (8000b48 <main+0x684>)
 8000a0c:	f002 fbb0 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(CROSS_MARK_L_data, 8,54144 , 3520 );
 8000a10:	f44f 635c 	mov.w	r3, #3520	@ 0xdc0
 8000a14:	f24d 3280 	movw	r2, #54144	@ 0xd380
 8000a18:	2108      	movs	r1, #8
 8000a1a:	484c      	ldr	r0, [pc, #304]	@ (8000b4c <main+0x688>)
 8000a1c:	f002 fba8 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_WriteBlock(ARROW_SUB_DARK_DOWN_data, 8,57664 , 90);
 8000a20:	235a      	movs	r3, #90	@ 0x5a
 8000a22:	f24e 1240 	movw	r2, #57664	@ 0xe140
 8000a26:	2108      	movs	r1, #8
 8000a28:	4849      	ldr	r0, [pc, #292]	@ (8000b50 <main+0x68c>)
 8000a2a:	f002 fba1 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_DARK_LEFT_data, 8,57754 , 90);
 8000a2e:	235a      	movs	r3, #90	@ 0x5a
 8000a30:	f24e 129a 	movw	r2, #57754	@ 0xe19a
 8000a34:	2108      	movs	r1, #8
 8000a36:	4847      	ldr	r0, [pc, #284]	@ (8000b54 <main+0x690>)
 8000a38:	f002 fb9a 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_DARK_RIGHT_data, 8,57844 , 90);
 8000a3c:	235a      	movs	r3, #90	@ 0x5a
 8000a3e:	f24e 12f4 	movw	r2, #57844	@ 0xe1f4
 8000a42:	2108      	movs	r1, #8
 8000a44:	4844      	ldr	r0, [pc, #272]	@ (8000b58 <main+0x694>)
 8000a46:	f002 fb93 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_DARK_UP_data, 8,57934 , 90);
 8000a4a:	235a      	movs	r3, #90	@ 0x5a
 8000a4c:	f24e 224e 	movw	r2, #57934	@ 0xe24e
 8000a50:	2108      	movs	r1, #8
 8000a52:	4842      	ldr	r0, [pc, #264]	@ (8000b5c <main+0x698>)
 8000a54:	f002 fb8c 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_WriteBlock(ARROW_SUB_LIGHT_DOWN_data, 8,58024 , 90);
 8000a58:	235a      	movs	r3, #90	@ 0x5a
 8000a5a:	f24e 22a8 	movw	r2, #58024	@ 0xe2a8
 8000a5e:	2108      	movs	r1, #8
 8000a60:	483f      	ldr	r0, [pc, #252]	@ (8000b60 <main+0x69c>)
 8000a62:	f002 fb85 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_LIGHT_LEFT_data, 8,58114 , 90);
 8000a66:	235a      	movs	r3, #90	@ 0x5a
 8000a68:	f24e 3202 	movw	r2, #58114	@ 0xe302
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	483d      	ldr	r0, [pc, #244]	@ (8000b64 <main+0x6a0>)
 8000a70:	f002 fb7e 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_LIGHT_RIGHT_data, 8,58204 , 90);
 8000a74:	235a      	movs	r3, #90	@ 0x5a
 8000a76:	f24e 325c 	movw	r2, #58204	@ 0xe35c
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	483a      	ldr	r0, [pc, #232]	@ (8000b68 <main+0x6a4>)
 8000a7e:	f002 fb77 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_SUB_LIGHT_UP_data, 8,58294 , 90);
 8000a82:	235a      	movs	r3, #90	@ 0x5a
 8000a84:	f24e 32b6 	movw	r2, #58294	@ 0xe3b6
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4838      	ldr	r0, [pc, #224]	@ (8000b6c <main+0x6a8>)
 8000a8c:	f002 fb70 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_WriteBlock(FAVORITE_STAR_data, 8,58384 , 162);
 8000a90:	23a2      	movs	r3, #162	@ 0xa2
 8000a92:	f24e 4210 	movw	r2, #58384	@ 0xe410
 8000a96:	2108      	movs	r1, #8
 8000a98:	4835      	ldr	r0, [pc, #212]	@ (8000b70 <main+0x6ac>)
 8000a9a:	f002 fb69 	bl	8003170 <W25qxx_WriteBlock>

  W25qxx_WriteBlock(ARROW_MAIN_DARK_RIGHT_data, 8,58546 , 224);
 8000a9e:	23e0      	movs	r3, #224	@ 0xe0
 8000aa0:	f24e 42b2 	movw	r2, #58546	@ 0xe4b2
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4833      	ldr	r0, [pc, #204]	@ (8000b74 <main+0x6b0>)
 8000aa8:	f002 fb62 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_MAIN_LIGHT_RIGHT_data, 8,58770 , 224);
 8000aac:	23e0      	movs	r3, #224	@ 0xe0
 8000aae:	f24e 5292 	movw	r2, #58770	@ 0xe592
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4830      	ldr	r0, [pc, #192]	@ (8000b78 <main+0x6b4>)
 8000ab6:	f002 fb5b 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_MAIN_DARK_LEFT_data, 8,58994 , 224);
 8000aba:	23e0      	movs	r3, #224	@ 0xe0
 8000abc:	f24e 6272 	movw	r2, #58994	@ 0xe672
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	482e      	ldr	r0, [pc, #184]	@ (8000b7c <main+0x6b8>)
 8000ac4:	f002 fb54 	bl	8003170 <W25qxx_WriteBlock>
  W25qxx_WriteBlock(ARROW_MAIN_LIGHT_LEFT_data, 8,59218 , 224);
 8000ac8:	23e0      	movs	r3, #224	@ 0xe0
 8000aca:	f24e 7252 	movw	r2, #59218	@ 0xe752
 8000ace:	2108      	movs	r1, #8
 8000ad0:	482b      	ldr	r0, [pc, #172]	@ (8000b80 <main+0x6bc>)
 8000ad2:	f002 fb4d 	bl	8003170 <W25qxx_WriteBlock>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	4829      	ldr	r0, [pc, #164]	@ (8000b84 <main+0x6c0>)
 8000ade:	f000 fdff 	bl	80016e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port,LED_BLUE_1_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <main+0x6c0>)
 8000ae8:	f000 fdfa 	bl	80016e0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af0:	f000 fb3c 	bl	800116c <HAL_Delay>
	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afa:	4822      	ldr	r0, [pc, #136]	@ (8000b84 <main+0x6c0>)
 8000afc:	f000 fdf0 	bl	80016e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port,LED_BLUE_1_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	481f      	ldr	r0, [pc, #124]	@ (8000b84 <main+0x6c0>)
 8000b06:	f000 fdeb 	bl	80016e0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0e:	f000 fb2d 	bl	800116c <HAL_Delay>
	  HAL_GPIO_WritePin(ANOD_GPIO_Port, ANOD_Pin, GPIO_PIN_SET);
 8000b12:	bf00      	nop
 8000b14:	e7df      	b.n	8000ad6 <main+0x612>
 8000b16:	bf00      	nop
 8000b18:	0803923c 	.word	0x0803923c
 8000b1c:	08039944 	.word	0x08039944
 8000b20:	0803a04c 	.word	0x0803a04c
 8000b24:	0803a754 	.word	0x0803a754
 8000b28:	0803ae5c 	.word	0x0803ae5c
 8000b2c:	0803680c 	.word	0x0803680c
 8000b30:	08036f14 	.word	0x08036f14
 8000b34:	08037d24 	.word	0x08037d24
 8000b38:	0803c324 	.word	0x0803c324
 8000b3c:	0803eda4 	.word	0x0803eda4
 8000b40:	0803d864 	.word	0x0803d864
 8000b44:	0803b564 	.word	0x0803b564
 8000b48:	0803dfe4 	.word	0x0803dfe4
 8000b4c:	0803caa4 	.word	0x0803caa4
 8000b50:	0803f6e4 	.word	0x0803f6e4
 8000b54:	0803f740 	.word	0x0803f740
 8000b58:	0803f79c 	.word	0x0803f79c
 8000b5c:	0803f7f8 	.word	0x0803f7f8
 8000b60:	0803f854 	.word	0x0803f854
 8000b64:	0803f8b0 	.word	0x0803f8b0
 8000b68:	0803f90c 	.word	0x0803f90c
 8000b6c:	0803f968 	.word	0x0803f968
 8000b70:	0803f9c4 	.word	0x0803f9c4
 8000b74:	0803f524 	.word	0x0803f524
 8000b78:	0803f604 	.word	0x0803f604
 8000b7c:	0803fa68 	.word	0x0803fa68
 8000b80:	0803fb48 	.word	0x0803fb48
 8000b84:	40020400 	.word	0x40020400

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	@ 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	@ 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fb4c 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <SystemClock_Config+0xd0>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a28      	ldr	r2, [pc, #160]	@ (8000c58 <SystemClock_Config+0xd0>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <SystemClock_Config+0xd0>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd4:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c00:	23a8      	movs	r3, #168	@ 0xa8
 8000c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fda3 	bl	800175c <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c1c:	f000 f944 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f804 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c4a:	f000 f92d 	bl	8000ea8 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	@ 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <MX_SPI1_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_SPI1_Init+0x64>)
 8000cb2:	f001 f9b7 	bl	8002024 <HAL_SPI_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cbc:	f000 f8f4 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000028 	.word	0x20000028
 8000cc8:	40013000 	.word	0x40013000

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a6a      	ldr	r2, [pc, #424]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b68      	ldr	r3, [pc, #416]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b64      	ldr	r3, [pc, #400]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a63      	ldr	r2, [pc, #396]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b61      	ldr	r3, [pc, #388]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a5c      	ldr	r2, [pc, #368]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a55      	ldr	r2, [pc, #340]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b4c      	ldr	r3, [pc, #304]	@ (8000e94 <MX_GPIO_Init+0x1c8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000d74:	4848      	ldr	r0, [pc, #288]	@ (8000e98 <MX_GPIO_Init+0x1cc>)
 8000d76:	f000 fcb3 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8000d80:	4845      	ldr	r0, [pc, #276]	@ (8000e98 <MX_GPIO_Init+0x1cc>)
 8000d82:	f000 fcad 	bl	80016e0 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000d8c:	4843      	ldr	r0, [pc, #268]	@ (8000e9c <MX_GPIO_Init+0x1d0>)
 8000d8e:	f000 fca7 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8000d98:	4841      	ldr	r0, [pc, #260]	@ (8000ea0 <MX_GPIO_Init+0x1d4>)
 8000d9a:	f000 fca1 	bl	80016e0 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ANOD_Pin|S1_Pin|OE_Pin|DFU_FORCE_Pin
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4156 	mov.w	r1, #54784	@ 0xd600
 8000da4:	483e      	ldr	r0, [pc, #248]	@ (8000ea0 <MX_GPIO_Init+0x1d4>)
 8000da6:	f000 fc9b 	bl	80016e0 <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 8000daa:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8000dae:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4835      	ldr	r0, [pc, #212]	@ (8000e98 <MX_GPIO_Init+0x1cc>)
 8000dc4:	f000 fb08 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 8000dc8:	230c      	movs	r3, #12
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	482f      	ldr	r0, [pc, #188]	@ (8000e98 <MX_GPIO_Init+0x1cc>)
 8000ddc:	f000 fafc 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 8000de0:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4828      	ldr	r0, [pc, #160]	@ (8000e9c <MX_GPIO_Init+0x1d0>)
 8000dfa:	f000 faed 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_0_Pin LED_BLUE_0_Pin ANOD_Pin S1_Pin
                           OE_Pin DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_BLUE_1_Pin LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_0_Pin|LED_BLUE_0_Pin|ANOD_Pin|S1_Pin
 8000dfe:	f24d 733e 	movw	r3, #55102	@ 0xd73e
 8000e02:	617b      	str	r3, [r7, #20]
                          |OE_Pin|DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_BLUE_1_Pin|LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4822      	ldr	r0, [pc, #136]	@ (8000ea0 <MX_GPIO_Init+0x1d4>)
 8000e18:	f000 fade 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0x1d4>)
 8000e32:	f000 fad1 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8000e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4813      	ldr	r0, [pc, #76]	@ (8000e9c <MX_GPIO_Init+0x1d0>)
 8000e4e:	f000 fac3 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <MX_GPIO_Init+0x1d8>)
 8000e68:	f000 fab6 	bl	80013d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2008      	movs	r0, #8
 8000e72:	f000 fa7a 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e76:	2008      	movs	r0, #8
 8000e78:	f000 fa93 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2028      	movs	r0, #40	@ 0x28
 8000e82:	f000 fa72 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e86:	2028      	movs	r0, #40	@ 0x28
 8000e88:	f000 fa8b 	bl	80013a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	@ 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <HAL_SPI_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f5e:	23e0      	movs	r3, #224	@ 0xe0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f7a:	f000 fa2d 	bl	80013d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40013000 	.word	0x40013000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f89f 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f000 fb8c 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8001004:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001008:	f000 fb84 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	@ (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	@ (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffd7 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f002 f8ef 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fa2d 	bl	80004c4 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001078:	0803fcb0 	.word	0x0803fcb0
  ldr r2, =_sbss
 800107c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001080:	200000ac 	.word	0x200000ac

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <HAL_Init+0x40>)
 8001092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_Init+0x40>)
 800109e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <HAL_Init+0x40>)
 80010aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f94f 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b6:	200f      	movs	r0, #15
 80010b8:	f000 f808 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fefa 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023c00 	.word	0x40023c00

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_InitTick+0x54>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_InitTick+0x58>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f967 	bl	80013be <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f92f 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <HAL_InitTick+0x5c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000000 	.word	0x20000000
 8001124:	20000008 	.word	0x20000008
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000080 	.word	0x20000080

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000080 	.word	0x20000080

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e159      	b.n	80016a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8148 	bne.w	80016a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	2b02      	cmp	r3, #2
 8001428:	d130      	bne.n	800148c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d017      	beq.n	80014c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d123      	bne.n	800151c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a2 	beq.w	80016a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b57      	ldr	r3, [pc, #348]	@ (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a56      	ldr	r2, [pc, #344]	@ (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b54      	ldr	r3, [pc, #336]	@ (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157a:	4a52      	ldr	r2, [pc, #328]	@ (80016c4 <HAL_GPIO_Init+0x2ec>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a49      	ldr	r2, [pc, #292]	@ (80016c8 <HAL_GPIO_Init+0x2f0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x202>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a48      	ldr	r2, [pc, #288]	@ (80016cc <HAL_GPIO_Init+0x2f4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x1fe>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a47      	ldr	r2, [pc, #284]	@ (80016d0 <HAL_GPIO_Init+0x2f8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x1fa>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a46      	ldr	r2, [pc, #280]	@ (80016d4 <HAL_GPIO_Init+0x2fc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x1f6>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a45      	ldr	r2, [pc, #276]	@ (80016d8 <HAL_GPIO_Init+0x300>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x1f2>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015da:	2300      	movs	r3, #0
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ec:	4935      	ldr	r1, [pc, #212]	@ (80016c4 <HAL_GPIO_Init+0x2ec>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fa:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <HAL_GPIO_Init+0x304>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161e:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <HAL_GPIO_Init+0x304>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <HAL_GPIO_Init+0x304>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001648:	4a24      	ldr	r2, [pc, #144]	@ (80016dc <HAL_GPIO_Init+0x304>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <HAL_GPIO_Init+0x304>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001672:	4a1a      	ldr	r2, [pc, #104]	@ (80016dc <HAL_GPIO_Init+0x304>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_GPIO_Init+0x304>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169c:	4a0f      	ldr	r2, [pc, #60]	@ (80016dc <HAL_GPIO_Init+0x304>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	f67f aea2 	bls.w	80013f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f806 	bl	8001744 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e267      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d075      	beq.n	8001866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800177a:	4b88      	ldr	r3, [pc, #544]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b04      	cmp	r3, #4
 8001784:	d00c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001786:	4b85      	ldr	r3, [pc, #532]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178e:	2b08      	cmp	r3, #8
 8001790:	d112      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b82      	ldr	r3, [pc, #520]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800179e:	d10b      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d05b      	beq.n	8001864 <HAL_RCC_OscConfig+0x108>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d157      	bne.n	8001864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e242      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c0:	d106      	bne.n	80017d0 <HAL_RCC_OscConfig+0x74>
 80017c2:	4b76      	ldr	r3, [pc, #472]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a75      	ldr	r2, [pc, #468]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01d      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x98>
 80017da:	4b70      	ldr	r3, [pc, #448]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6f      	ldr	r2, [pc, #444]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b6d      	ldr	r3, [pc, #436]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6c      	ldr	r2, [pc, #432]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xb0>
 80017f4:	4b69      	ldr	r3, [pc, #420]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a68      	ldr	r2, [pc, #416]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b66      	ldr	r3, [pc, #408]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc9e 	bl	8001154 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc9a 	bl	8001154 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e207      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b5b      	ldr	r3, [pc, #364]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xc0>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc8a 	bl	8001154 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc86 	bl	8001154 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1f3      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b51      	ldr	r3, [pc, #324]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0xe8>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d063      	beq.n	800193a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001872:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187e:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001886:	2b08      	cmp	r3, #8
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b44      	ldr	r3, [pc, #272]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1c7      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4937      	ldr	r1, [pc, #220]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	e03a      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018cc:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fc3f 	bl	8001154 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fc3b 	bl	8001154 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1a8      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4925      	ldr	r1, [pc, #148]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_RCC_OscConfig+0x244>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fc1e 	bl	8001154 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fc1a 	bl	8001154 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e187      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d036      	beq.n	80019b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d016      	beq.n	800197c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fbfe 	bl	8001154 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fbfa 	bl	8001154 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e167      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x240>)
 8001970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x200>
 800197a:	e01b      	b.n	80019b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_OscConfig+0x248>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fbe7 	bl	8001154 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	e00e      	b.n	80019a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff fbe3 	bl	8001154 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d907      	bls.n	80019a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e150      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470000 	.word	0x42470000
 80019a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ea      	bne.n	800198a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8097 	beq.w	8001af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b81      	ldr	r3, [pc, #516]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a7c      	ldr	r2, [pc, #496]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b77      	ldr	r3, [pc, #476]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a73      	ldr	r2, [pc, #460]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fba3 	bl	8001154 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fb9f 	bl	8001154 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e10c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd0 <HAL_RCC_OscConfig+0x474>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ea>
 8001a38:	4b64      	ldr	r3, [pc, #400]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a63      	ldr	r2, [pc, #396]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x30c>
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	4a5e      	ldr	r2, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x324>
 8001a68:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a74:	4b55      	ldr	r3, [pc, #340]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a54      	ldr	r2, [pc, #336]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fb64 	bl	8001154 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff fb60 	bl	8001154 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0cb      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ee      	beq.n	8001a90 <HAL_RCC_OscConfig+0x334>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fb4e 	bl	8001154 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fb4a 	bl	8001154 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0b5      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ee      	bne.n	8001abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a38      	ldr	r2, [pc, #224]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a1 	beq.w	8001c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afa:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d05c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d141      	bne.n	8001b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb1e 	bl	8001154 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fb1a 	bl	8001154 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e087      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff faf3 	bl	8001154 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff faef 	bl	8001154 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e05c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x416>
 8001b90:	e054      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fadc 	bl	8001154 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fad8 	bl	8001154 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e045      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x444>
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e038      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x4ec>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d028      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d121      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d11a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d111      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	3b01      	subs	r3, #1
 8001c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0cc      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d90c      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b65      	ldr	r3, [pc, #404]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0b8      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca0:	4b59      	ldr	r3, [pc, #356]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a58      	ldr	r2, [pc, #352]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001caa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb8:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b50      	ldr	r3, [pc, #320]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	494d      	ldr	r1, [pc, #308]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d044      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d119      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e07f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e067      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4934      	ldr	r1, [pc, #208]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fa0a 	bl	8001154 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff fa06 	bl	8001154 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d20c      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e032      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4916      	ldr	r1, [pc, #88]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	490e      	ldr	r1, [pc, #56]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dd2:	f000 f821 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	490a      	ldr	r1, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	5ccb      	ldrb	r3, [r1, r3]
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f96a 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	080032a4 	.word	0x080032a4
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b094      	sub	sp, #80	@ 0x50
 8001e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e28:	2300      	movs	r3, #0
 8001e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e30:	4b79      	ldr	r3, [pc, #484]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d00d      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	f200 80e1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e4a:	e0db      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b73      	ldr	r3, [pc, #460]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001e50:	e0db      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e52:	4b73      	ldr	r3, [pc, #460]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e56:	e0d8      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e58:	4b6f      	ldr	r3, [pc, #444]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e62:	4b6d      	ldr	r3, [pc, #436]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	2200      	movs	r2, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	0159      	lsls	r1, r3, #5
 8001e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9c:	0150      	lsls	r0, r2, #5
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	1a51      	subs	r1, r2, r1
 8001ea6:	6139      	str	r1, [r7, #16]
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	018b      	lsls	r3, r1, #6
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	018a      	lsls	r2, r1, #6
 8001eca:	4651      	mov	r1, sl
 8001ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eea:	4690      	mov	r8, r2
 8001eec:	4699      	mov	r9, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	eb18 0303 	adds.w	r3, r8, r3
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	eb49 0303 	adc.w	r3, r9, r3
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	024b      	lsls	r3, r1, #9
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f14:	4621      	mov	r1, r4
 8001f16:	024a      	lsls	r2, r1, #9
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f28:	f7fe f954 	bl	80001d4 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f34:	e058      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	099b      	lsrs	r3, r3, #6
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4611      	mov	r1, r2
 8001f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	f04f 0000 	mov.w	r0, #0
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	0159      	lsls	r1, r3, #5
 8001f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f62:	0150      	lsls	r0, r2, #5
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f88:	ebb2 040a 	subs.w	r4, r2, sl
 8001f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	00eb      	lsls	r3, r5, #3
 8001f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9e:	00e2      	lsls	r2, r4, #3
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	18e3      	adds	r3, r4, r3
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	464b      	mov	r3, r9
 8001fac:	eb45 0303 	adc.w	r3, r5, r3
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	61fa      	str	r2, [r7, #28]
 8001fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fdc:	f7fe f8fa 	bl	80001d4 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetSysClockFreq+0x204>)
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800200c:	4618      	mov	r0, r3
 800200e:	3750      	adds	r7, #80	@ 0x50
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07b      	b.n	800212e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002046:	d009      	beq.n	800205c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
 800204e:	e005      	b.n	800205c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe ff44 	bl	8000f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0104 	and.w	r1, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	f003 0210 	and.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_SPI_Transmit+0x22>
 8002154:	2302      	movs	r3, #2
 8002156:	e126      	b.n	80023a6 <HAL_SPI_Transmit+0x270>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002160:	f7fe fff8 	bl	8001154 <HAL_GetTick>
 8002164:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800217a:	e10b      	b.n	8002394 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_Transmit+0x52>
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800218c:	e102      	b.n	8002394 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021d4:	d10f      	bne.n	80021f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002200:	2b40      	cmp	r3, #64	@ 0x40
 8002202:	d007      	beq.n	8002214 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800221c:	d14b      	bne.n	80022b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_Transmit+0xf6>
 8002226:	8afb      	ldrh	r3, [r7, #22]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d13e      	bne.n	80022aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002250:	e02b      	b.n	80022aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d112      	bne.n	8002286 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	1c9a      	adds	r2, r3, #2
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002284:	e011      	b.n	80022aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002286:	f7fe ff65 	bl	8001154 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d803      	bhi.n	800229e <HAL_SPI_Transmit+0x168>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d102      	bne.n	80022a4 <HAL_SPI_Transmit+0x16e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a8:	e074      	b.n	8002394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ce      	bne.n	8002252 <HAL_SPI_Transmit+0x11c>
 80022b4:	e04c      	b.n	8002350 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_SPI_Transmit+0x18e>
 80022be:	8afb      	ldrh	r3, [r7, #22]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d140      	bne.n	8002346 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022ea:	e02c      	b.n	8002346 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d113      	bne.n	8002322 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002320:	e011      	b.n	8002346 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002322:	f7fe ff17 	bl	8001154 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d803      	bhi.n	800233a <HAL_SPI_Transmit+0x204>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d102      	bne.n	8002340 <HAL_SPI_Transmit+0x20a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002344:	e026      	b.n	8002394 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1cd      	bne.n	80022ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fa55 	bl	8002804 <SPI_EndRxTxTransaction>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	e000      	b.n	8002394 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80023a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b08c      	sub	sp, #48	@ 0x30
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023bc:	2301      	movs	r3, #1
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x26>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e18a      	b.n	80026ea <HAL_SPI_TransmitReceive+0x33c>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023dc:	f7fe feba 	bl	8001154 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d00f      	beq.n	800241e <HAL_SPI_TransmitReceive+0x70>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002404:	d107      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x68>
 800240e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800241c:	e15b      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x82>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x82>
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002436:	e14e      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b04      	cmp	r3, #4
 8002442:	d003      	beq.n	800244c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2205      	movs	r2, #5
 8002448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	887a      	ldrh	r2, [r7, #2]
 800246e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d007      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a8:	d178      	bne.n	800259c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x10a>
 80024b2:	8b7b      	ldrh	r3, [r7, #26]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d166      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	1c9a      	adds	r2, r3, #2
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024dc:	e053      	b.n	8002586 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11b      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x176>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x176>
 80024f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d113      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d119      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x1b8>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d014      	beq.n	8002566 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002546:	b292      	uxth	r2, r2
 8002548:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002562:	2301      	movs	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002566:	f7fe fdf5 	bl	8001154 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002572:	429a      	cmp	r2, r3
 8002574:	d807      	bhi.n	8002586 <HAL_SPI_TransmitReceive+0x1d8>
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d003      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002584:	e0a7      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1a6      	bne.n	80024de <HAL_SPI_TransmitReceive+0x130>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1a1      	bne.n	80024de <HAL_SPI_TransmitReceive+0x130>
 800259a:	e07c      	b.n	8002696 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x1fc>
 80025a4:	8b7b      	ldrh	r3, [r7, #26]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d16b      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d0:	e057      	b.n	8002682 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11c      	bne.n	800261a <HAL_SPI_TransmitReceive+0x26c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_SPI_TransmitReceive+0x26c>
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d114      	bne.n	800261a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d119      	bne.n	800265c <HAL_SPI_TransmitReceive+0x2ae>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002658:	2301      	movs	r3, #1
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800265c:	f7fe fd7a 	bl	8001154 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002668:	429a      	cmp	r2, r3
 800266a:	d803      	bhi.n	8002674 <HAL_SPI_TransmitReceive+0x2c6>
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d102      	bne.n	800267a <HAL_SPI_TransmitReceive+0x2cc>
 8002674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002680:	e029      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1a2      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x224>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d19d      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002698:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8b2 	bl	8002804 <SPI_EndRxTxTransaction>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80026b2:	e010      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	e000      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80026e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3730      	adds	r7, #48	@ 0x30
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002704:	f7fe fd26 	bl	8001154 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002714:	f7fe fd1e 	bl	8001154 <HAL_GetTick>
 8002718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800271a:	4b39      	ldr	r3, [pc, #228]	@ (8002800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	015b      	lsls	r3, r3, #5
 8002720:	0d1b      	lsrs	r3, r3, #20
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800272a:	e054      	b.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d050      	beq.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002734:	f7fe fd0e 	bl	8001154 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d902      	bls.n	800274a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13d      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002762:	d111      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800276c:	d004      	beq.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002776:	d107      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002790:	d10f      	bne.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e017      	b.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d19b      	bne.n	800272c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000

08002804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <SPI_EndRxTxTransaction+0x7c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <SPI_EndRxTxTransaction+0x80>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0d5b      	lsrs	r3, r3, #21
 800281c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282e:	d112      	bne.n	8002856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	2180      	movs	r1, #128	@ 0x80
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff5a 	bl	80026f4 <SPI_WaitFlagStateUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e00f      	b.n	8002876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3b01      	subs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286c:	2b80      	cmp	r3, #128	@ 0x80
 800286e:	d0f2      	beq.n	8002856 <SPI_EndRxTxTransaction+0x52>
 8002870:	e000      	b.n	8002874 <SPI_EndRxTxTransaction+0x70>
        break;
 8002872:	bf00      	nop
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000000 	.word	0x20000000
 8002884:	165e9f81 	.word	0x165e9f81

08002888 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002892:	4802      	ldr	r0, [pc, #8]	@ (800289c <ST7735_Select+0x14>)
 8002894:	f7fe ff24 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020000 	.word	0x40020000

080028a0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028aa:	4802      	ldr	r0, [pc, #8]	@ (80028b4 <ST7735_Unselect+0x14>)
 80028ac:	f7fe ff18 	bl	80016e0 <HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40020000 	.word	0x40020000

080028b8 <ST7735_Reset>:

void ST7735_Reset() {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028c2:	4807      	ldr	r0, [pc, #28]	@ (80028e0 <ST7735_Reset+0x28>)
 80028c4:	f7fe ff0c 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80028c8:	2005      	movs	r0, #5
 80028ca:	f7fe fc4f 	bl	800116c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <ST7735_Reset+0x28>)
 80028d6:	f7fe ff03 	bl	80016e0 <HAL_GPIO_WritePin>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40020000 	.word	0x40020000

080028e4 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2110      	movs	r1, #16
 80028f2:	4807      	ldr	r0, [pc, #28]	@ (8002910 <ST7735_WriteCommand+0x2c>)
 80028f4:	f7fe fef4 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80028f8:	1df9      	adds	r1, r7, #7
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	2201      	movs	r2, #1
 8002900:	4804      	ldr	r0, [pc, #16]	@ (8002914 <ST7735_WriteCommand+0x30>)
 8002902:	f7ff fc18 	bl	8002136 <HAL_SPI_Transmit>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40020000 	.word	0x40020000
 8002914:	20000028 	.word	0x20000028

08002918 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002922:	2201      	movs	r2, #1
 8002924:	2110      	movs	r1, #16
 8002926:	4807      	ldr	r0, [pc, #28]	@ (8002944 <ST7735_WriteData+0x2c>)
 8002928:	f7fe feda 	bl	80016e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b29a      	uxth	r2, r3
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4804      	ldr	r0, [pc, #16]	@ (8002948 <ST7735_WriteData+0x30>)
 8002938:	f7ff fbfd 	bl	8002136 <HAL_SPI_Transmit>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40020000 	.word	0x40020000
 8002948:	20000028 	.word	0x20000028

0800294c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800295e:	e034      	b.n	80029ca <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ffb9 	bl	80028e4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800297c:	7abb      	ldrb	r3, [r7, #10]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002984:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002986:	7abb      	ldrb	r3, [r7, #10]
 8002988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800298c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800298e:	7abb      	ldrb	r3, [r7, #10]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002994:	7abb      	ldrb	r3, [r7, #10]
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffbd 	bl	8002918 <ST7735_WriteData>
            addr += numArgs;
 800299e:	7abb      	ldrb	r3, [r7, #10]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80029b6:	89bb      	ldrh	r3, [r7, #12]
 80029b8:	2bff      	cmp	r3, #255	@ 0xff
 80029ba:	d102      	bne.n	80029c2 <ST7735_ExecuteCommandList+0x76>
 80029bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029c0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80029c2:	89bb      	ldrh	r3, [r7, #12]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fbd1 	bl	800116c <HAL_Delay>
    while(numCommands--) {
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	73fa      	strb	r2, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1c5      	bne.n	8002960 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80029de:	b590      	push	{r4, r7, lr}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4604      	mov	r4, r0
 80029e6:	4608      	mov	r0, r1
 80029e8:	4611      	mov	r1, r2
 80029ea:	461a      	mov	r2, r3
 80029ec:	4623      	mov	r3, r4
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	4603      	mov	r3, r0
 80029f2:	71bb      	strb	r3, [r7, #6]
 80029f4:	460b      	mov	r3, r1
 80029f6:	717b      	strb	r3, [r7, #5]
 80029f8:	4613      	mov	r3, r2
 80029fa:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80029fc:	202a      	movs	r0, #42	@ 0x2a
 80029fe:	f7ff ff71 	bl	80028e4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002a02:	2300      	movs	r3, #0
 8002a04:	733b      	strb	r3, [r7, #12]
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	737b      	strb	r3, [r7, #13]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73bb      	strb	r3, [r7, #14]
 8002a0e:	797b      	ldrb	r3, [r7, #5]
 8002a10:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	2104      	movs	r1, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff7d 	bl	8002918 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002a1e:	202b      	movs	r0, #43	@ 0x2b
 8002a20:	f7ff ff60 	bl	80028e4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002a24:	79bb      	ldrb	r3, [r7, #6]
 8002a26:	3318      	adds	r3, #24
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002a2c:	793b      	ldrb	r3, [r7, #4]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff6c 	bl	8002918 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002a40:	202c      	movs	r0, #44	@ 0x2c
 8002a42:	f7ff ff4f 	bl	80028e4 <ST7735_WriteCommand>
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}
	...

08002a50 <ST7735_Init>:

void ST7735_Init() {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002a54:	f7ff ff18 	bl	8002888 <ST7735_Select>
    ST7735_Reset();
 8002a58:	f7ff ff2e 	bl	80028b8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002a5c:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <ST7735_Init+0x28>)
 8002a5e:	f7ff ff75 	bl	800294c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002a62:	4806      	ldr	r0, [pc, #24]	@ (8002a7c <ST7735_Init+0x2c>)
 8002a64:	f7ff ff72 	bl	800294c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002a68:	4805      	ldr	r0, [pc, #20]	@ (8002a80 <ST7735_Init+0x30>)
 8002a6a:	f7ff ff6f 	bl	800294c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002a6e:	f7ff ff17 	bl	80028a0 <ST7735_Unselect>
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	0803fc28 	.word	0x0803fc28
 8002a7c:	0803fc64 	.word	0x0803fc64
 8002a80:	0803fc74 	.word	0x0803fc74

08002a84 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	4603      	mov	r3, r0
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b9f      	cmp	r3, #159	@ 0x9f
 8002aa6:	d857      	bhi.n	8002b58 <ST7735_FillRectangle+0xd4>
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	2b4f      	cmp	r3, #79	@ 0x4f
 8002aac:	d854      	bhi.n	8002b58 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ab6:	dd03      	ble.n	8002ac0 <ST7735_FillRectangle+0x3c>
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002abe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002ac0:	88ba      	ldrh	r2, [r7, #4]
 8002ac2:	883b      	ldrh	r3, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	2b50      	cmp	r3, #80	@ 0x50
 8002ac8:	dd03      	ble.n	8002ad2 <ST7735_FillRectangle+0x4e>
 8002aca:	88bb      	ldrh	r3, [r7, #4]
 8002acc:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8002ad0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002ad2:	f7ff fed9 	bl	8002888 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	b2d8      	uxtb	r0, r3
 8002ada:	88bb      	ldrh	r3, [r7, #4]
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b2dc      	uxtb	r4, r3
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	883b      	ldrh	r3, [r7, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4622      	mov	r2, r4
 8002b00:	f7ff ff6d 	bl	80029de <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002b04:	8c3b      	ldrh	r3, [r7, #32]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	733b      	strb	r3, [r7, #12]
 8002b0e:	8c3b      	ldrh	r3, [r7, #32]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002b14:	2201      	movs	r2, #1
 8002b16:	2110      	movs	r1, #16
 8002b18:	4811      	ldr	r0, [pc, #68]	@ (8002b60 <ST7735_FillRectangle+0xdc>)
 8002b1a:	f7fe fde1 	bl	80016e0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002b1e:	883b      	ldrh	r3, [r7, #0]
 8002b20:	80bb      	strh	r3, [r7, #4]
 8002b22:	e013      	b.n	8002b4c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	80fb      	strh	r3, [r7, #6]
 8002b28:	e00a      	b.n	8002b40 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002b2a:	f107 010c 	add.w	r1, r7, #12
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	2202      	movs	r2, #2
 8002b34:	480b      	ldr	r0, [pc, #44]	@ (8002b64 <ST7735_FillRectangle+0xe0>)
 8002b36:	f7ff fafe 	bl	8002136 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	80fb      	strh	r3, [r7, #6]
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f1      	bne.n	8002b2a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8002b46:	88bb      	ldrh	r3, [r7, #4]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	80bb      	strh	r3, [r7, #4]
 8002b4c:	88bb      	ldrh	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e8      	bne.n	8002b24 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8002b52:	f7ff fea5 	bl	80028a0 <ST7735_Unselect>
 8002b56:	e000      	b.n	8002b5a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002b58:	bf00      	nop
}
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	40020000 	.word	0x40020000
 8002b64:	20000028 	.word	0x20000028

08002b68 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2350      	movs	r3, #80	@ 0x50
 8002b78:	22a0      	movs	r2, #160	@ 0xa0
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff ff81 	bl	8002a84 <ST7735_FillRectangle>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <ST7735_InvertColors>:
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8002b94:	f7ff fe78 	bl	8002888 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <ST7735_InvertColors+0x18>
 8002b9e:	2321      	movs	r3, #33	@ 0x21
 8002ba0:	e000      	b.n	8002ba4 <ST7735_InvertColors+0x1a>
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fe9d 	bl	80028e4 <ST7735_WriteCommand>
    ST7735_Unselect();
 8002baa:	f7ff fe79 	bl	80028a0 <ST7735_Unselect>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002bc2:	f107 020f 	add.w	r2, r7, #15
 8002bc6:	1df9      	adds	r1, r7, #7
 8002bc8:	2364      	movs	r3, #100	@ 0x64
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4804      	ldr	r0, [pc, #16]	@ (8002be0 <W25qxx_Spi+0x28>)
 8002bd0:	f7ff fbed 	bl	80023ae <HAL_SPI_TransmitReceive>
	return ret;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000028 	.word	0x20000028

08002be4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c00:	4813      	ldr	r0, [pc, #76]	@ (8002c50 <W25qxx_ReadID+0x6c>)
 8002c02:	f7fe fd6d 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002c06:	209f      	movs	r0, #159	@ 0x9f
 8002c08:	f7ff ffd6 	bl	8002bb8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c0c:	20a5      	movs	r0, #165	@ 0xa5
 8002c0e:	f7ff ffd3 	bl	8002bb8 <W25qxx_Spi>
 8002c12:	4603      	mov	r3, r0
 8002c14:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c16:	20a5      	movs	r0, #165	@ 0xa5
 8002c18:	f7ff ffce 	bl	8002bb8 <W25qxx_Spi>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c20:	20a5      	movs	r0, #165	@ 0xa5
 8002c22:	f7ff ffc9 	bl	8002bb8 <W25qxx_Spi>
 8002c26:	4603      	mov	r3, r0
 8002c28:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c30:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <W25qxx_ReadID+0x6c>)
 8002c32:	f7fe fd55 	bl	80016e0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40020800 	.word	0x40020800

08002c54 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c60:	4816      	ldr	r0, [pc, #88]	@ (8002cbc <W25qxx_ReadUniqID+0x68>)
 8002c62:	f7fe fd3d 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002c66:	204b      	movs	r0, #75	@ 0x4b
 8002c68:	f7ff ffa6 	bl	8002bb8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	e005      	b.n	8002c7e <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c72:	20a5      	movs	r0, #165	@ 0xa5
 8002c74:	f7ff ffa0 	bl	8002bb8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d9f6      	bls.n	8002c72 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	71bb      	strb	r3, [r7, #6]
 8002c88:	e00b      	b.n	8002ca2 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002c8a:	79bc      	ldrb	r4, [r7, #6]
 8002c8c:	20a5      	movs	r0, #165	@ 0xa5
 8002c8e:	f7ff ff93 	bl	8002bb8 <W25qxx_Spi>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <W25qxx_ReadUniqID+0x6c>)
 8002c98:	4423      	add	r3, r4
 8002c9a:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002c9c:	79bb      	ldrb	r3, [r7, #6]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	71bb      	strb	r3, [r7, #6]
 8002ca2:	79bb      	ldrb	r3, [r7, #6]
 8002ca4:	2b07      	cmp	r3, #7
 8002ca6:	d9f0      	bls.n	8002c8a <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cae:	4803      	ldr	r0, [pc, #12]	@ (8002cbc <W25qxx_ReadUniqID+0x68>)
 8002cb0:	f7fe fd16 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	20000084 	.word	0x20000084

08002cc4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cce:	4808      	ldr	r0, [pc, #32]	@ (8002cf0 <W25qxx_WriteEnable+0x2c>)
 8002cd0:	f7fe fd06 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002cd4:	2006      	movs	r0, #6
 8002cd6:	f7ff ff6f 	bl	8002bb8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ce0:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <W25qxx_WriteEnable+0x2c>)
 8002ce2:	f7fe fcfd 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7fe fa40 	bl	800116c <HAL_Delay>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40020800 	.word	0x40020800

08002cf4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d08:	481c      	ldr	r0, [pc, #112]	@ (8002d7c <W25qxx_ReadStatusRegister+0x88>)
 8002d0a:	f7fe fce9 	bl	80016e0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8002d14:	2005      	movs	r0, #5
 8002d16:	f7ff ff4f 	bl	8002bb8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d1a:	20a5      	movs	r0, #165	@ 0xa5
 8002d1c:	f7ff ff4c 	bl	8002bb8 <W25qxx_Spi>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <W25qxx_ReadStatusRegister+0x8c>)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 8002d2c:	e01b      	b.n	8002d66 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d10c      	bne.n	8002d4e <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8002d34:	2035      	movs	r0, #53	@ 0x35
 8002d36:	f7ff ff3f 	bl	8002bb8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d3a:	20a5      	movs	r0, #165	@ 0xa5
 8002d3c:	f7ff ff3c 	bl	8002bb8 <W25qxx_Spi>
 8002d40:	4603      	mov	r3, r0
 8002d42:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <W25qxx_ReadStatusRegister+0x8c>)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002d4c:	e00b      	b.n	8002d66 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002d4e:	2015      	movs	r0, #21
 8002d50:	f7ff ff32 	bl	8002bb8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002d54:	20a5      	movs	r0, #165	@ 0xa5
 8002d56:	f7ff ff2f 	bl	8002bb8 <W25qxx_Spi>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002d5e:	4a08      	ldr	r2, [pc, #32]	@ (8002d80 <W25qxx_ReadStatusRegister+0x8c>)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002d66:	2201      	movs	r2, #1
 8002d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d6c:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <W25qxx_ReadStatusRegister+0x88>)
 8002d6e:	f7fe fcb7 	bl	80016e0 <HAL_GPIO_WritePin>
	return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	20000084 	.word	0x20000084

08002d84 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7fe f9ef 	bl	800116c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d94:	480f      	ldr	r0, [pc, #60]	@ (8002dd4 <W25qxx_WaitForWriteEnd+0x50>)
 8002d96:	f7fe fca3 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002d9a:	2005      	movs	r0, #5
 8002d9c:	f7ff ff0c 	bl	8002bb8 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002da0:	20a5      	movs	r0, #165	@ 0xa5
 8002da2:	f7ff ff09 	bl	8002bb8 <W25qxx_Spi>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <W25qxx_WaitForWriteEnd+0x54>)
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		W25qxx_Delay(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f7fe f9db 	bl	800116c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <W25qxx_WaitForWriteEnd+0x54>)
 8002db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ed      	bne.n	8002da0 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dca:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <W25qxx_WaitForWriteEnd+0x50>)
 8002dcc:	f7fe fc88 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	20000084 	.word	0x20000084

08002ddc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002de2:	4b65      	ldr	r3, [pc, #404]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 8002dea:	e002      	b.n	8002df2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe f9bd 	bl	800116c <HAL_Delay>
	while (HAL_GetTick() < 100)
 8002df2:	f7fe f9af 	bl	8001154 <HAL_GetTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b63      	cmp	r3, #99	@ 0x63
 8002dfa:	d9f7      	bls.n	8002dec <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e02:	485e      	ldr	r0, [pc, #376]	@ (8002f7c <W25qxx_Init+0x1a0>)
 8002e04:	f7fe fc6c 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002e08:	2064      	movs	r0, #100	@ 0x64
 8002e0a:	f7fe f9af 	bl	800116c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8002e0e:	f7ff fee9 	bl	8002be4 <W25qxx_ReadID>
 8002e12:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3b11      	subs	r3, #17
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d86b      	bhi.n	8002ef6 <W25qxx_Init+0x11a>
 8002e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <W25qxx_Init+0x48>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002ee9 	.word	0x08002ee9
 8002e28:	08002edb 	.word	0x08002edb
 8002e2c:	08002ecd 	.word	0x08002ecd
 8002e30:	08002ebf 	.word	0x08002ebf
 8002e34:	08002eb1 	.word	0x08002eb1
 8002e38:	08002ea3 	.word	0x08002ea3
 8002e3c:	08002e95 	.word	0x08002e95
 8002e40:	08002e85 	.word	0x08002e85
 8002e44:	08002e75 	.word	0x08002e75
 8002e48:	08002ef7 	.word	0x08002ef7
 8002e4c:	08002ef7 	.word	0x08002ef7
 8002e50:	08002ef7 	.word	0x08002ef7
 8002e54:	08002ef7 	.word	0x08002ef7
 8002e58:	08002ef7 	.word	0x08002ef7
 8002e5c:	08002ef7 	.word	0x08002ef7
 8002e60:	08002e65 	.word	0x08002e65
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002e64:	4b44      	ldr	r3, [pc, #272]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e66:	220a      	movs	r2, #10
 8002e68:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002e6a:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e70:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002e72:	e046      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002e74:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e76:	2209      	movs	r2, #9
 8002e78:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002e82:	e03e      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002e84:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e86:	2208      	movs	r2, #8
 8002e88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002e92:	e036      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002e94:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e96:	2207      	movs	r2, #7
 8002e98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002e9a:	4b37      	ldr	r3, [pc, #220]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002ea0:	e02f      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002ea2:	4b35      	ldr	r3, [pc, #212]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ea4:	2206      	movs	r2, #6
 8002ea6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002ea8:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002eae:	e028      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002eb0:	4b31      	ldr	r3, [pc, #196]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002eb6:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002eb8:	2220      	movs	r2, #32
 8002eba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002ebc:	e021      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002eca:	e01a      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ece:	2203      	movs	r2, #3
 8002ed0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002ed2:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002ed8:	e013      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002eda:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002ee0:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8002ee6:	e00c      	b.n	8002f02 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002eee:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002ef4:	e005      	b.n	8002f02 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e036      	b.n	8002f70 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8002f02:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f08:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f10:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f1a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f22:	6912      	ldr	r2, [r2, #16]
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f2a:	8952      	ldrh	r2, [r2, #10]
 8002f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f30:	4a11      	ldr	r2, [pc, #68]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f32:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002f34:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f3c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4a0d      	ldr	r2, [pc, #52]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f44:	6912      	ldr	r2, [r2, #16]
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f4e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002f50:	f7ff fe80 	bl	8002c54 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7ff fecd 	bl	8002cf4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f7ff feca 	bl	8002cf4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f7ff fec7 	bl	8002cf4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002f66:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <W25qxx_Init+0x19c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000084 	.word	0x20000084
 8002f7c:	40020800 	.word	0x40020800

08002f80 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002f88:	e002      	b.n	8002f90 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7fe f8ee 	bl	800116c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <W25qxx_EraseBlock+0xb0>)
 8002f92:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d0f7      	beq.n	8002f8a <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <W25qxx_EraseBlock+0xb0>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002fa2:	f7ff feef 	bl	8002d84 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <W25qxx_EraseBlock+0xb0>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002fb4:	f7ff fe86 	bl	8002cc4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fbe:	481d      	ldr	r0, [pc, #116]	@ (8003034 <W25qxx_EraseBlock+0xb4>)
 8002fc0:	f7fe fb8e 	bl	80016e0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <W25qxx_EraseBlock+0xb0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d909      	bls.n	8002fe0 <W25qxx_EraseBlock+0x60>
	{
		W25qxx_Spi(0xDC);
 8002fcc:	20dc      	movs	r0, #220	@ 0xdc
 8002fce:	f7ff fdf3 	bl	8002bb8 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fded 	bl	8002bb8 <W25qxx_Spi>
 8002fde:	e002      	b.n	8002fe6 <W25qxx_EraseBlock+0x66>
	}
	else
	{
		W25qxx_Spi(0xD8);
 8002fe0:	20d8      	movs	r0, #216	@ 0xd8
 8002fe2:	f7ff fde9 	bl	8002bb8 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fde3 	bl	8002bb8 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fddd 	bl	8002bb8 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fdd8 	bl	8002bb8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003008:	2201      	movs	r2, #1
 800300a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800300e:	4809      	ldr	r0, [pc, #36]	@ (8003034 <W25qxx_EraseBlock+0xb4>)
 8003010:	f7fe fb66 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003014:	f7ff feb6 	bl	8002d84 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003018:	2001      	movs	r0, #1
 800301a:	f7fe f8a7 	bl	800116c <HAL_Delay>
	w25qxx.Lock = 0;
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <W25qxx_EraseBlock+0xb0>)
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000084 	.word	0x20000084
 8003034:	40020800 	.word	0x40020800

08003038 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 8003040:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <W25qxx_BlockToPage+0x28>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <W25qxx_BlockToPage+0x28>)
 800304c:	8952      	ldrh	r2, [r2, #10]
 800304e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000084 	.word	0x20000084

08003064 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003072:	e002      	b.n	800307a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe f879 	bl	800116c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800307a:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <W25qxx_WritePage+0x100>)
 800307c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8003080:	2b01      	cmp	r3, #1
 8003082:	d0f7      	beq.n	8003074 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003084:	4b37      	ldr	r3, [pc, #220]	@ (8003164 <W25qxx_WritePage+0x100>)
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a34      	ldr	r2, [pc, #208]	@ (8003164 <W25qxx_WritePage+0x100>)
 8003094:	8952      	ldrh	r2, [r2, #10]
 8003096:	4293      	cmp	r3, r2
 8003098:	d802      	bhi.n	80030a0 <W25qxx_WritePage+0x3c>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80030a0:	4b30      	ldr	r3, [pc, #192]	@ (8003164 <W25qxx_WritePage+0x100>)
 80030a2:	895b      	ldrh	r3, [r3, #10]
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003164 <W25qxx_WritePage+0x100>)
 80030b4:	8952      	ldrh	r2, [r2, #10]
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d905      	bls.n	80030c6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <W25qxx_WritePage+0x100>)
 80030bc:	895b      	ldrh	r3, [r3, #10]
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80030c6:	f7ff fe5d 	bl	8002d84 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80030ca:	f7ff fdfb 	bl	8002cc4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030d4:	4824      	ldr	r0, [pc, #144]	@ (8003168 <W25qxx_WritePage+0x104>)
 80030d6:	f7fe fb03 	bl	80016e0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80030da:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <W25qxx_WritePage+0x100>)
 80030dc:	895b      	ldrh	r3, [r3, #10]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <W25qxx_WritePage+0x100>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d909      	bls.n	8003108 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 80030f4:	2012      	movs	r0, #18
 80030f6:	f7ff fd5f 	bl	8002bb8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0e1b      	lsrs	r3, r3, #24
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd59 	bl	8002bb8 <W25qxx_Spi>
 8003106:	e002      	b.n	800310e <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003108:	2002      	movs	r0, #2
 800310a:	f7ff fd55 	bl	8002bb8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd4f 	bl	8002bb8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd49 	bl	8002bb8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fd44 	bl	8002bb8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b29a      	uxth	r2, r3
 8003134:	2364      	movs	r3, #100	@ 0x64
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <W25qxx_WritePage+0x108>)
 800313a:	f7fe fffc 	bl	8002136 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800313e:	2201      	movs	r2, #1
 8003140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003144:	4808      	ldr	r0, [pc, #32]	@ (8003168 <W25qxx_WritePage+0x104>)
 8003146:	f7fe facb 	bl	80016e0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800314a:	f7ff fe1b 	bl	8002d84 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800314e:	2001      	movs	r0, #1
 8003150:	f7fe f80c 	bl	800116c <HAL_Delay>
	w25qxx.Lock = 0;
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <W25qxx_WritePage+0x100>)
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000084 	.word	0x20000084
 8003168:	40020800 	.word	0x40020800
 800316c:	20000028 	.word	0x20000028

08003170 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_WriteBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToWrite_up_to_BlockSize == 0))
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d802      	bhi.n	800318e <W25qxx_WriteBlock+0x1e>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize = w25qxx.BlockSize;
 800318e:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d243      	bcs.n	8003226 <W25qxx_WriteBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	441a      	add	r2, r3
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d905      	bls.n	80031b8 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e001      	b.n	80031bc <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f7ff ff3b 	bl	8003038 <W25qxx_BlockToPage>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 80031c6:	895b      	ldrh	r3, [r3, #10]
 80031c8:	4619      	mov	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d0:	4413      	add	r3, r2
 80031d2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80031d4:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 80031d6:	895b      	ldrh	r3, [r3, #10]
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80031e0:	fb01 f202 	mul.w	r2, r1, r2
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	69f9      	ldr	r1, [r7, #28]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff38 	bl	8003064 <W25qxx_WritePage>
		StartPage++;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80031fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 80031fc:	895b      	ldrh	r3, [r3, #10]
 80031fe:	461a      	mov	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1a9a      	subs	r2, r3, r2
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <W25qxx_WriteBlock+0xc0>)
 800320c:	895b      	ldrh	r3, [r3, #10]
 800320e:	461a      	mov	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	dce1      	bgt.n	80031e8 <W25qxx_WriteBlock+0x78>
 8003224:	e000      	b.n	8003228 <W25qxx_WriteBlock+0xb8>
		return;
 8003226:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000084 	.word	0x20000084

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	@ (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	@ (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	@ (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	@ (8003288 <__libc_init_array+0x44>)
 8003258:	f000 f818 	bl	800328c <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	0803fca8 	.word	0x0803fca8
 8003280:	0803fca8 	.word	0x0803fca8
 8003284:	0803fca8 	.word	0x0803fca8
 8003288:	0803fcac 	.word	0x0803fcac

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
