
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d600  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010394  08010394  00012628  2**0
                  CONTENTS
  4 .ARM          00000008  08010394  08010394  00011394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801039c  0801039c  00012628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801039c  0801039c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103a0  080103a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000628  20000000  080103a4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  20000628  080109cc  00012628  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  080109cc  00012ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012628  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2db  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d53  00000000  00000000  00031933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00036688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e3  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc60  00000000  00000000  00039893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a48  00000000  00000000  000574f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8e70  00000000  00000000  0007cf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125dab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b58  00000000  00000000  00125df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000628 	.word	0x20000628
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d788 	.word	0x0800d788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000062c 	.word	0x2000062c
 80001dc:	0800d788 	.word	0x0800d788

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
		{60,1000,2000,100, 3, 2592*11, 7, 4232*13, "FRESH FISH"} ,//FRESH FISH
		{61,1000,2000,100, 3, 2592*12, 7, 4232*14, "CHILDREN'S NORM"} //CHILDREN'S NORM
    };


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d102      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x24>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000938 	.word	0x20000938

08000598 <SPI_Flash_to_LCD>:
        Error_Handler();
    }
}
void SPI_Flash_to_LCD(uint16_t block, uint32_t offset, uint16_t w, uint16_t h, uint16_t x, uint16_t y)

{
 8000598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800059c:	b08b      	sub	sp, #44	@ 0x2c
 800059e:	af02      	add	r7, sp, #8
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4611      	mov	r1, r2
 80005a4:	461a      	mov	r2, r3
 80005a6:	4603      	mov	r3, r0
 80005a8:	81fb      	strh	r3, [r7, #14]
 80005aa:	460b      	mov	r3, r1
 80005ac:	81bb      	strh	r3, [r7, #12]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
 80005b2:	466b      	mov	r3, sp
 80005b4:	461e      	mov	r6, r3
	uint32_t img_byte_amount = w*h*2;
 80005b6:	89bb      	ldrh	r3, [r7, #12]
 80005b8:	88fa      	ldrh	r2, [r7, #6]
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
	uint16_t img_buffer[img_byte_amount/2];
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	0859      	lsrs	r1, r3, #1
 80005c6:	460b      	mov	r3, r1
 80005c8:	3b01      	subs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	2300      	movs	r3, #0
 80005ce:	4688      	mov	r8, r1
 80005d0:	4699      	mov	r9, r3
 80005d2:	f04f 0200 	mov.w	r2, #0
 80005d6:	f04f 0300 	mov.w	r3, #0
 80005da:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80005de:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80005e2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80005e6:	2300      	movs	r3, #0
 80005e8:	460c      	mov	r4, r1
 80005ea:	461d      	mov	r5, r3
 80005ec:	f04f 0200 	mov.w	r2, #0
 80005f0:	f04f 0300 	mov.w	r3, #0
 80005f4:	012b      	lsls	r3, r5, #4
 80005f6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80005fa:	0122      	lsls	r2, r4, #4
 80005fc:	004b      	lsls	r3, r1, #1
 80005fe:	3307      	adds	r3, #7
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	ebad 0d03 	sub.w	sp, sp, r3
 8000608:	ab02      	add	r3, sp, #8
 800060a:	3301      	adds	r3, #1
 800060c:	085b      	lsrs	r3, r3, #1
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	617b      	str	r3, [r7, #20]
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
 8000612:	89f9      	ldrh	r1, [r7, #14]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	6978      	ldr	r0, [r7, #20]
 800061a:	f00c fbb3 	bl	800cd84 <W25qxx_ReadBlock>
	ST7735_DrawImage(x, y, w, h, img_buffer);
 800061e:	88fc      	ldrh	r4, [r7, #6]
 8000620:	89ba      	ldrh	r2, [r7, #12]
 8000622:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8000626:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	4623      	mov	r3, r4
 8000630:	f00a ff91 	bl	800b556 <ST7735_DrawImage>
 8000634:	46b5      	mov	sp, r6
}
 8000636:	bf00      	nop
 8000638:	3724      	adds	r7, #36	@ 0x24
 800063a:	46bd      	mov	sp, r7
 800063c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000640 <touch_init>:
//	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
//	//datasentflag = 1;
//}

void touch_init()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	MPR121_setregister(MHD_R,0x01);
 8000644:	2101      	movs	r1, #1
 8000646:	202b      	movs	r0, #43	@ 0x2b
 8000648:	f00c f94c 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(NHD_R,0x01);
 800064c:	2101      	movs	r1, #1
 800064e:	202c      	movs	r0, #44	@ 0x2c
 8000650:	f00c f948 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(NCL_R,0x00);
 8000654:	2100      	movs	r1, #0
 8000656:	202d      	movs	r0, #45	@ 0x2d
 8000658:	f00c f944 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(FDL_R,0x00);
 800065c:	2100      	movs	r1, #0
 800065e:	202e      	movs	r0, #46	@ 0x2e
 8000660:	f00c f940 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(MHD_F,0x01);
 8000664:	2101      	movs	r1, #1
 8000666:	202f      	movs	r0, #47	@ 0x2f
 8000668:	f00c f93c 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(NHD_F,0x01);
 800066c:	2101      	movs	r1, #1
 800066e:	2030      	movs	r0, #48	@ 0x30
 8000670:	f00c f938 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(NCL_F,0xFF);
 8000674:	21ff      	movs	r1, #255	@ 0xff
 8000676:	2031      	movs	r0, #49	@ 0x31
 8000678:	f00c f934 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(FDL_F,0x02);
 800067c:	2102      	movs	r1, #2
 800067e:	2032      	movs	r0, #50	@ 0x32
 8000680:	f00c f930 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE0_T,TOU_THRESH);
 8000684:	2106      	movs	r1, #6
 8000686:	2041      	movs	r0, #65	@ 0x41
 8000688:	f00c f92c 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE0_R,TOU_THRESH);
 800068c:	2106      	movs	r1, #6
 800068e:	2042      	movs	r0, #66	@ 0x42
 8000690:	f00c f928 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE1_T,TOU_THRESH);
 8000694:	2106      	movs	r1, #6
 8000696:	2043      	movs	r0, #67	@ 0x43
 8000698:	f00c f924 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE1_R,TOU_THRESH);
 800069c:	2106      	movs	r1, #6
 800069e:	2044      	movs	r0, #68	@ 0x44
 80006a0:	f00c f920 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE2_T,TOU_THRESH);
 80006a4:	2106      	movs	r1, #6
 80006a6:	2045      	movs	r0, #69	@ 0x45
 80006a8:	f00c f91c 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE2_R,TOU_THRESH);
 80006ac:	2106      	movs	r1, #6
 80006ae:	2046      	movs	r0, #70	@ 0x46
 80006b0:	f00c f918 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE3_T,TOU_THRESH);
 80006b4:	2106      	movs	r1, #6
 80006b6:	2047      	movs	r0, #71	@ 0x47
 80006b8:	f00c f914 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE3_R,TOU_THRESH);
 80006bc:	2106      	movs	r1, #6
 80006be:	2048      	movs	r0, #72	@ 0x48
 80006c0:	f00c f910 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE4_T,TOU_THRESH);
 80006c4:	2106      	movs	r1, #6
 80006c6:	2049      	movs	r0, #73	@ 0x49
 80006c8:	f00c f90c 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE4_R,TOU_THRESH);
 80006cc:	2106      	movs	r1, #6
 80006ce:	204a      	movs	r0, #74	@ 0x4a
 80006d0:	f00c f908 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE5_T,TOU_THRESH);
 80006d4:	2106      	movs	r1, #6
 80006d6:	204b      	movs	r0, #75	@ 0x4b
 80006d8:	f00c f904 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE5_R,TOU_THRESH);
 80006dc:	2106      	movs	r1, #6
 80006de:	204c      	movs	r0, #76	@ 0x4c
 80006e0:	f00c f900 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE6_T,TOU_THRESH);
 80006e4:	2106      	movs	r1, #6
 80006e6:	204d      	movs	r0, #77	@ 0x4d
 80006e8:	f00c f8fc 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE6_R,TOU_THRESH);
 80006ec:	2106      	movs	r1, #6
 80006ee:	204e      	movs	r0, #78	@ 0x4e
 80006f0:	f00c f8f8 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE7_T,TOU_THRESH);
 80006f4:	2106      	movs	r1, #6
 80006f6:	204f      	movs	r0, #79	@ 0x4f
 80006f8:	f00c f8f4 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE7_R,TOU_THRESH);
 80006fc:	2106      	movs	r1, #6
 80006fe:	2050      	movs	r0, #80	@ 0x50
 8000700:	f00c f8f0 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE8_T,TOU_THRESH);
 8000704:	2106      	movs	r1, #6
 8000706:	2051      	movs	r0, #81	@ 0x51
 8000708:	f00c f8ec 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE8_R,TOU_THRESH);
 800070c:	2106      	movs	r1, #6
 800070e:	2052      	movs	r0, #82	@ 0x52
 8000710:	f00c f8e8 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE9_T,TOU_THRESH);
 8000714:	2106      	movs	r1, #6
 8000716:	2053      	movs	r0, #83	@ 0x53
 8000718:	f00c f8e4 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE9_R,TOU_THRESH);
 800071c:	2106      	movs	r1, #6
 800071e:	2054      	movs	r0, #84	@ 0x54
 8000720:	f00c f8e0 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE10_T,TOU_THRESH);
 8000724:	2106      	movs	r1, #6
 8000726:	2055      	movs	r0, #85	@ 0x55
 8000728:	f00c f8dc 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE10_R,TOU_THRESH);
 800072c:	2106      	movs	r1, #6
 800072e:	2056      	movs	r0, #86	@ 0x56
 8000730:	f00c f8d8 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(ELE11_T,TOU_THRESH);
 8000734:	2106      	movs	r1, #6
 8000736:	2057      	movs	r0, #87	@ 0x57
 8000738:	f00c f8d4 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE11_R,TOU_THRESH);
 800073c:	2106      	movs	r1, #6
 800073e:	2058      	movs	r0, #88	@ 0x58
 8000740:	f00c f8d0 	bl	800c8e4 <MPR121_setregister>

	MPR121_setregister(FIL_CFG,0x04);
 8000744:	2104      	movs	r1, #4
 8000746:	205d      	movs	r0, #93	@ 0x5d
 8000748:	f00c f8cc 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800074c:	210c      	movs	r1, #12
 800074e:	205e      	movs	r0, #94	@ 0x5e
 8000750:	f00c f8c8 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 8000754:	210c      	movs	r1, #12
 8000756:	205e      	movs	r0, #94	@ 0x5e
 8000758:	f00c f8c4 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ATO_CFG0,0x0F);
 800075c:	210f      	movs	r1, #15
 800075e:	207b      	movs	r0, #123	@ 0x7b
 8000760:	f00c f8c0 	bl	800c8e4 <MPR121_setregister>
	MPR121_setregister(ATO_CFGU,0xC8);
 8000764:	21c8      	movs	r1, #200	@ 0xc8
 8000766:	207d      	movs	r0, #125	@ 0x7d
 8000768:	f00c f8bc 	bl	800c8e4 <MPR121_setregister>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f001 f97b 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f901 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fc89 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8000782:	f000 fc5f 	bl	8001044 <MX_DMA_Init>
  MX_I2C1_Init();
 8000786:	f000 f9b9 	bl	8000afc <MX_I2C1_Init>
  MX_RTC_Init();
 800078a:	f000 f9e5 	bl	8000b58 <MX_RTC_Init>
  MX_SPI1_Init();
 800078e:	f000 fa71 	bl	8000c74 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000792:	f000 f961 	bl	8000a58 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000796:	f000 fbb9 	bl	8000f0c <MX_TIM3_Init>
  MX_TIM2_Init();
 800079a:	f000 fb41 	bl	8000e20 <MX_TIM2_Init>
  MX_TIM4_Init();
 800079e:	f000 fc03 	bl	8000fa8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80007a2:	f000 fa9d 	bl	8000ce0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007a6:	f00a ff39 	bl	800b61c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */




  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b0:	486a      	ldr	r0, [pc, #424]	@ (800095c <main+0x1ec>)
 80007b2:	f002 f9d5 	bl	8002b60 <HAL_GPIO_WritePin>
  ST7735_Init();
 80007b6:	f00a fd2d 	bl	800b214 <ST7735_Init>
  ST7735_InvertColors(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f00a ff17 	bl	800b5ee <ST7735_InvertColors>
  ST7735_FillScreen(ST7735_BLACK);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f00a feb7 	bl	800b534 <ST7735_FillScreen>
  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007cc:	4863      	ldr	r0, [pc, #396]	@ (800095c <main+0x1ec>)
 80007ce:	f002 f9c7 	bl	8002b60 <HAL_GPIO_WritePin>

  W25qxx_Init();
 80007d2:	f00c f96f 	bl	800cab4 <W25qxx_Init>
  MX_I2C1_Init();
 80007d6:	f000 f991 	bl	8000afc <MX_I2C1_Init>
  touch_init();
 80007da:	f7ff ff31 	bl	8000640 <touch_init>

  HAL_TIM_Base_Start_IT(&htim4);
 80007de:	4860      	ldr	r0, [pc, #384]	@ (8000960 <main+0x1f0>)
 80007e0:	f006 f804 	bl	80067ec <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ea:	485e      	ldr	r0, [pc, #376]	@ (8000964 <main+0x1f4>)
 80007ec:	f002 f9b8 	bl	8002b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f6:	485b      	ldr	r0, [pc, #364]	@ (8000964 <main+0x1f4>)
 80007f8:	f002 f9b2 	bl	8002b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000802:	4858      	ldr	r0, [pc, #352]	@ (8000964 <main+0x1f4>)
 8000804:	f002 f9ac 	bl	8002b60 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000808:	4857      	ldr	r0, [pc, #348]	@ (8000968 <main+0x1f8>)
 800080a:	f005 ffef 	bl	80067ec <HAL_TIM_Base_Start_IT>
//	  	  	  {
//	  		  SPI_Flash_to_LCD(LOADING_2,28,14);
//	  		  SPI_Flash_to_LCD(LOADING_1,80,14);
//	  		  gl_int_5hz_tim2_for_pic = 0;
//	  	  	  }
	  uint16_t measuring_result = 100;
 800080e:	2364      	movs	r3, #100	@ 0x64
 8000810:	80fb      	strh	r3, [r7, #6]


	  if(gl_led_pwm_state==LED_PWM_CCR_STABLE)
 8000812:	4b56      	ldr	r3, [pc, #344]	@ (800096c <main+0x1fc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d13f      	bne.n	800089a <main+0x12a>
	  {
		  SPI_Flash_to_LCD(LOADING_1,28,14);
 800081a:	230e      	movs	r3, #14
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	231c      	movs	r3, #28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2334      	movs	r3, #52	@ 0x34
 8000824:	2234      	movs	r2, #52	@ 0x34
 8000826:	2100      	movs	r1, #0
 8000828:	2008      	movs	r0, #8
 800082a:	f7ff feb5 	bl	8000598 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,80,14);
 800082e:	230e      	movs	r3, #14
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2350      	movs	r3, #80	@ 0x50
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2334      	movs	r3, #52	@ 0x34
 8000838:	2234      	movs	r2, #52	@ 0x34
 800083a:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800083e:	2008      	movs	r0, #8
 8000840:	f7ff feaa 	bl	8000598 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,28,14);
 8000844:	230e      	movs	r3, #14
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	231c      	movs	r3, #28
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2334      	movs	r3, #52	@ 0x34
 800084e:	2234      	movs	r2, #52	@ 0x34
 8000850:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff fe9f 	bl	8000598 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,28,14);
 800085a:	230e      	movs	r3, #14
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	231c      	movs	r3, #28
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2334      	movs	r3, #52	@ 0x34
 8000864:	2234      	movs	r2, #52	@ 0x34
 8000866:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800086a:	2008      	movs	r0, #8
 800086c:	f7ff fe94 	bl	8000598 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_1,80,14);
 8000870:	230e      	movs	r3, #14
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	2350      	movs	r3, #80	@ 0x50
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2334      	movs	r3, #52	@ 0x34
 800087a:	2234      	movs	r2, #52	@ 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	2008      	movs	r0, #8
 8000880:	f7ff fe8a 	bl	8000598 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,80,14);
 8000884:	230e      	movs	r3, #14
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2350      	movs	r3, #80	@ 0x50
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2334      	movs	r3, #52	@ 0x34
 800088e:	2234      	movs	r2, #52	@ 0x34
 8000890:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 8000894:	2008      	movs	r0, #8
 8000896:	f7ff fe7f 	bl	8000598 <SPI_Flash_to_LCD>
	  }
	  if(gl_led_pwm_state ==  LED_PWM_CCR_STABLE)
 800089a:	4b34      	ldr	r3, [pc, #208]	@ (800096c <main+0x1fc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d102      	bne.n	80008a8 <main+0x138>
	  {
		  led_accumulation();
 80008a2:	f00b fc81 	bl	800c1a8 <led_accumulation>
 80008a6:	e7b2      	b.n	800080e <main+0x9e>
	  }
	  else if(gl_led_pwm_state ==  LED_PWM_CCR_CHANGEBALE && led_1hz_counter && gl_led_color_result_blink_counter <= 3 && !gl_loading_bar_stop_flag )
 80008a8:	4b30      	ldr	r3, [pc, #192]	@ (800096c <main+0x1fc>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d142      	bne.n	8000936 <main+0x1c6>
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <main+0x200>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d03e      	beq.n	8000936 <main+0x1c6>
 80008b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <main+0x204>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d83a      	bhi.n	8000936 <main+0x1c6>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <main+0x208>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d136      	bne.n	8000936 <main+0x1c6>
	  {

		  ST7735_FillScreen(ST7735_BLACK);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f00a fe33 	bl	800b534 <ST7735_FillScreen>
		  HAL_TIM_Base_Start_IT(&htim2);
 80008ce:	4826      	ldr	r0, [pc, #152]	@ (8000968 <main+0x1f8>)
 80008d0:	f005 ff8c 	bl	80067ec <HAL_TIM_Base_Start_IT>

		  uint8_t load_bar_index = (conduct_acidity_loading_bar_calculation(product_array[0].conductivity, product_array[0].temperature_coeff, measuring_result));
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <main+0x20c>)
 80008d6:	885b      	ldrh	r3, [r3, #2]
 80008d8:	4a28      	ldr	r2, [pc, #160]	@ (800097c <main+0x20c>)
 80008da:	7991      	ldrb	r1, [r2, #6]
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b fe88 	bl	800c5f4 <conduct_acidity_loading_bar_calculation>
 80008e4:	4603      	mov	r3, r0
 80008e6:	717b      	strb	r3, [r7, #5]
		  uint8_t result_status = display_loading_status(load_bar_index, product_array[0].id);
 80008e8:	4b24      	ldr	r3, [pc, #144]	@ (800097c <main+0x20c>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00b fed1 	bl	800c698 <display_loading_status>
 80008f6:	4603      	mov	r3, r0
 80008f8:	713b      	strb	r3, [r7, #4]

		  display_measuring_product(product_array[0].addr_block_S, product_array[0].addr_offset_S, HORIZ_AFTER_MEASURING);
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <main+0x20c>)
 80008fc:	79d8      	ldrb	r0, [r3, #7]
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <main+0x20c>)
 8000900:	8919      	ldrh	r1, [r3, #8]
 8000902:	2303      	movs	r3, #3
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2307      	movs	r3, #7
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2324      	movs	r3, #36	@ 0x24
 800090c:	2224      	movs	r2, #36	@ 0x24
 800090e:	f00b ff21 	bl	800c754 <display_measuring_product>
		  display_measuring_text(product_array[0].name , product_array[0].conductivity, measuring_result, result_status, ENGLISH);
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <main+0x20c>)
 8000914:	6918      	ldr	r0, [r3, #16]
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <main+0x20c>)
 8000918:	8859      	ldrh	r1, [r3, #2]
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	88fa      	ldrh	r2, [r7, #6]
 800091e:	2401      	movs	r4, #1
 8000920:	9400      	str	r4, [sp, #0]
 8000922:	f00b ff37 	bl	800c794 <display_measuring_text>
		  led_measuring_results_reflection(result_status);
 8000926:	793b      	ldrb	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f00b fbb9 	bl	800c0a0 <led_measuring_results_reflection>
		  gl_loading_bar_stop_flag = 1;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <main+0x208>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
	  {
 8000934:	e011      	b.n	800095a <main+0x1ea>
	  }
	  else if (gl_led_color_result_blink_counter > 3)
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <main+0x204>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b03      	cmp	r3, #3
 800093c:	f67f af67 	bls.w	800080e <main+0x9e>
	  {
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <main+0x1f8>)
 8000942:	f005 ffb5 	bl	80068b0 <HAL_TIM_Base_Stop_IT>
		  led_off();
 8000946:	f00b fb53 	bl	800bff0 <led_off>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800094a:	2108      	movs	r1, #8
 800094c:	4806      	ldr	r0, [pc, #24]	@ (8000968 <main+0x1f8>)
 800094e:	f006 f8e7 	bl	8006b20 <HAL_TIM_PWM_Stop>
		  TIM2->CCR3 = 0;
 8000952:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000956:	2200      	movs	r2, #0
 8000958:	63da      	str	r2, [r3, #60]	@ 0x3c
  {
 800095a:	e758      	b.n	800080e <main+0x9e>
 800095c:	40020800 	.word	0x40020800
 8000960:	200008f0 	.word	0x200008f0
 8000964:	40020400 	.word	0x40020400
 8000968:	20000860 	.word	0x20000860
 800096c:	200005d6 	.word	0x200005d6
 8000970:	20000942 	.word	0x20000942
 8000974:	20000943 	.word	0x20000943
 8000978:	20001d59 	.word	0x20001d59
 800097c:	20000000 	.word	0x20000000

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	@ 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2230      	movs	r2, #48	@ 0x30
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f00c fa7a 	bl	800ce88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <SystemClock_Config+0xd0>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a28      	ldr	r2, [pc, #160]	@ (8000a50 <SystemClock_Config+0xd0>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <SystemClock_Config+0xd0>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <SystemClock_Config+0xd4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009cc:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <SystemClock_Config+0xd4>)
 80009ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <SystemClock_Config+0xd4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80009e0:	2305      	movs	r3, #5
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009fc:	23a8      	movs	r3, #168	@ 0xa8
 80009fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 ffb1 	bl	8004974 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a18:	f000 fc2a 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 fa13 	bl	8004e64 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a44:	f000 fc14 	bl	8001270 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3750      	adds	r7, #80	@ 0x50
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a6c:	4a21      	ldr	r2, [pc, #132]	@ (8000af4 <MX_ADC1_Init+0x9c>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000a9a:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <MX_ADC1_Init+0xa0>)
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000aba:	f001 f86f 	bl	8001b9c <HAL_ADC_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac4:	f000 fbd4 	bl	8001270 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_ADC1_Init+0x98>)
 8000ada:	f001 f8a3 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae4:	f000 fbc4 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000644 	.word	0x20000644
 8000af4:	40012000 	.word	0x40012000
 8000af8:	0f000001 	.word	0x0f000001

08000afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <MX_I2C1_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_I2C1_Init+0x58>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_I2C1_Init+0x50>)
 8000b3a:	f002 f843 	bl	8002bc4 <HAL_I2C_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f000 fb94 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000068c 	.word	0x2000068c
 8000b50:	40005400 	.word	0x40005400
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b090      	sub	sp, #64	@ 0x40
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2228      	movs	r2, #40	@ 0x28
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00c f985 	bl	800ce88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b80:	4a3b      	ldr	r2, [pc, #236]	@ (8000c70 <MX_RTC_Init+0x118>)
 8000b82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b84:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b8a:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b8c:	227f      	movs	r2, #127	@ 0x7f
 8000b8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b90:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b92:	22ff      	movs	r2, #255	@ 0xff
 8000b94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ba8:	4830      	ldr	r0, [pc, #192]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000baa:	f004 fc55 	bl	8005458 <HAL_RTC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000bb4:	f000 fb5c 	bl	8001270 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4824      	ldr	r0, [pc, #144]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000bdc:	f004 fcb2 	bl	8005544 <HAL_RTC_SetTime>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000be6:	f000 fb43 	bl	8001270 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c06:	2201      	movs	r2, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4818      	ldr	r0, [pc, #96]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000c0c:	f004 fd34 	bl	8005678 <HAL_RTC_SetDate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000c16:	f000 fb2b 	bl	8001270 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000c32:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8000c36:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_RTC_Init+0x114>)
 8000c54:	f004 fd94 	bl	8005780 <HAL_RTC_SetAlarm_IT>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000c5e:	f000 fb07 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3740      	adds	r7, #64	@ 0x40
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200006e0 	.word	0x200006e0
 8000c70:	40002800 	.word	0x40002800

08000c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c78:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c7a:	4a18      	ldr	r2, [pc, #96]	@ (8000cdc <MX_SPI1_Init+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_SPI1_Init+0x64>)
 8000cc6:	f004 ff98 	bl	8005bfa <HAL_SPI_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd0:	f000 face 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000700 	.word	0x20000700
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b096      	sub	sp, #88	@ 0x58
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2220      	movs	r2, #32
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00c f8b5 	bl	800ce88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d20:	4a3e      	ldr	r2, [pc, #248]	@ (8000e1c <MX_TIM1_Init+0x13c>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000d24:	4b3c      	ldr	r3, [pc, #240]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d26:	f240 3233 	movw	r2, #819	@ 0x333
 8000d2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d32:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d34:	2263      	movs	r2, #99	@ 0x63
 8000d36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4a:	4833      	ldr	r0, [pc, #204]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d4c:	f005 fcfe 	bl	800674c <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d56:	f000 fa8b 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d64:	4619      	mov	r1, r3
 8000d66:	482c      	ldr	r0, [pc, #176]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d68:	f006 f908 	bl	8006f7c <HAL_TIM_ConfigClockSource>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d72:	f000 fa7d 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d76:	4828      	ldr	r0, [pc, #160]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d78:	f005 fdc9 	bl	800690e <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d82:	f000 fa75 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d92:	4619      	mov	r1, r3
 8000d94:	4820      	ldr	r0, [pc, #128]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000d96:	f006 fcb7 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000da0:	f000 fa66 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	@ 0x60
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000dca:	f006 f815 	bl	8006df8 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000dd4:	f000 fa4c 	bl	8001270 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000dfc:	f006 fcf2 	bl	80077e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e06:	f000 fa33 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM1_Init+0x138>)
 8000e0c:	f000 fc4a 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000e10:	bf00      	nop
 8000e12:	3758      	adds	r7, #88	@ 0x58
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000818 	.word	0x20000818
 8000e1c:	40010000 	.word	0x40010000

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	@ 0x38
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e5a:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e66:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e68:	2263      	movs	r2, #99	@ 0x63
 8000e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e78:	4823      	ldr	r0, [pc, #140]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e7a:	f005 fc67 	bl	800674c <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e84:	f000 f9f4 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e92:	4619      	mov	r1, r3
 8000e94:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000e96:	f006 f871 	bl	8006f7c <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ea0:	f000 f9e6 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ea4:	4818      	ldr	r0, [pc, #96]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000ea6:	f005 fd32 	bl	800690e <HAL_TIM_PWM_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000eb0:	f000 f9de 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000ec4:	f006 fc20 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ece:	f000 f9cf 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed2:	2360      	movs	r3, #96	@ 0x60
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000eea:	f005 ff85 	bl	8006df8 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ef4:	f000 f9bc 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <MX_TIM2_Init+0xe8>)
 8000efa:	f000 fbd3 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000efe:	bf00      	nop
 8000f00:	3738      	adds	r7, #56	@ 0x38
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000860 	.word	0x20000860

08000f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <MX_TIM3_Init+0x98>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f30:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f3e:	2263      	movs	r2, #99	@ 0x63
 8000f40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f50:	f005 fbfc 	bl	800674c <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 f989 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f6c:	f006 f806 	bl	8006f7c <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 f97b 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_TIM3_Init+0x94>)
 8000f88:	f006 fbbe 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f92:	f000 f96d 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200008a8 	.word	0x200008a8
 8000fa4:	40000400 	.word	0x40000400

08000fa8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001040 <MX_TIM4_Init+0x98>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fcc:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000fd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25-1;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fda:	2218      	movs	r2, #24
 8000fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fea:	4814      	ldr	r0, [pc, #80]	@ (800103c <MX_TIM4_Init+0x94>)
 8000fec:	f005 fbae 	bl	800674c <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ff6:	f000 f93b 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_TIM4_Init+0x94>)
 8001008:	f005 ffb8 	bl	8006f7c <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 f92d 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <MX_TIM4_Init+0x94>)
 8001024:	f006 fb70 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800102e:	f000 f91f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200008f0 	.word	0x200008f0
 8001040:	40000800 	.word	0x40000800

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <MX_DMA_Init+0x4c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <MX_DMA_Init+0x4c>)
 8001054:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <MX_DMA_Init+0x4c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2038      	movs	r0, #56	@ 0x38
 800106c:	f001 f8d3 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001070:	2038      	movs	r0, #56	@ 0x38
 8001072:	f001 f8ec 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	203b      	movs	r0, #59	@ 0x3b
 800107c:	f001 f8cb 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001080:	203b      	movs	r0, #59	@ 0x3b
 8001082:	f001 f8e4 	bl	800224e <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b6b      	ldr	r3, [pc, #428]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a6a      	ldr	r2, [pc, #424]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b68      	ldr	r3, [pc, #416]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b64      	ldr	r3, [pc, #400]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a63      	ldr	r2, [pc, #396]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b61      	ldr	r3, [pc, #388]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b5d      	ldr	r3, [pc, #372]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a5c      	ldr	r2, [pc, #368]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b5a      	ldr	r3, [pc, #360]	@ (800125c <MX_GPIO_Init+0x1c8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b56      	ldr	r3, [pc, #344]	@ (800125c <MX_GPIO_Init+0x1c8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a55      	ldr	r2, [pc, #340]	@ (800125c <MX_GPIO_Init+0x1c8>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b53      	ldr	r3, [pc, #332]	@ (800125c <MX_GPIO_Init+0x1c8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b4f      	ldr	r3, [pc, #316]	@ (800125c <MX_GPIO_Init+0x1c8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a4e      	ldr	r2, [pc, #312]	@ (800125c <MX_GPIO_Init+0x1c8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b4c      	ldr	r3, [pc, #304]	@ (800125c <MX_GPIO_Init+0x1c8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800113c:	4848      	ldr	r0, [pc, #288]	@ (8001260 <MX_GPIO_Init+0x1cc>)
 800113e:	f001 fd0f 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 8001142:	2201      	movs	r2, #1
 8001144:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8001148:	4845      	ldr	r0, [pc, #276]	@ (8001260 <MX_GPIO_Init+0x1cc>)
 800114a:	f001 fd09 	bl	8002b60 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001154:	4843      	ldr	r0, [pc, #268]	@ (8001264 <MX_GPIO_Init+0x1d0>)
 8001156:	f001 fd03 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8001160:	4841      	ldr	r0, [pc, #260]	@ (8001268 <MX_GPIO_Init+0x1d4>)
 8001162:	f001 fcfd 	bl	8002b60 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_Pin|OE_Pin|DFU_FORCE_Pin|S0_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 4152 	mov.w	r1, #53760	@ 0xd200
 800116c:	483e      	ldr	r0, [pc, #248]	@ (8001268 <MX_GPIO_Init+0x1d4>)
 800116e:	f001 fcf7 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 8001172:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8001176:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4835      	ldr	r0, [pc, #212]	@ (8001260 <MX_GPIO_Init+0x1cc>)
 800118c:	f001 fb64 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 8001190:	230c      	movs	r3, #12
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	482f      	ldr	r0, [pc, #188]	@ (8001260 <MX_GPIO_Init+0x1cc>)
 80011a4:	f001 fb58 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 80011a8:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4828      	ldr	r0, [pc, #160]	@ (8001264 <MX_GPIO_Init+0x1d0>)
 80011c2:	f001 fb49 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin OE_Pin
                           DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin LED_BLUE_1_Pin
                           LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin|OE_Pin
 80011c6:	f24d 333e 	movw	r3, #54078	@ 0xd33e
 80011ca:	617b      	str	r3, [r7, #20]
                          |DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin|LED_BLUE_1_Pin
                          |LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4822      	ldr	r0, [pc, #136]	@ (8001268 <MX_GPIO_Init+0x1d4>)
 80011e0:	f001 fb3a 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	481b      	ldr	r0, [pc, #108]	@ (8001268 <MX_GPIO_Init+0x1d4>)
 80011fa:	f001 fb2d 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 80011fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001204:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4813      	ldr	r0, [pc, #76]	@ (8001264 <MX_GPIO_Init+0x1d0>)
 8001216:	f001 fb1f 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 800121a:	2304      	movs	r3, #4
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	@ (800126c <MX_GPIO_Init+0x1d8>)
 8001230:	f001 fb12 	bl	8002858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2008      	movs	r0, #8
 800123a:	f000 ffec 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800123e:	2008      	movs	r0, #8
 8001240:	f001 f805 	bl	800224e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2028      	movs	r0, #40	@ 0x28
 800124a:	f000 ffe4 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124e:	2028      	movs	r0, #40	@ 0x28
 8001250:	f000 fffd 	bl	800224e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	@ 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020c00 	.word	0x40020c00

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001290:	6453      	str	r3, [r2, #68]	@ 0x44
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <HAL_ADC_MspInit+0x7c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d127      	bne.n	800133e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_ADC_MspInit+0x80>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <HAL_ADC_MspInit+0x80>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_ADC_MspInit+0x80>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 8001326:	230e      	movs	r3, #14
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132a:	2303      	movs	r3, #3
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_ADC_MspInit+0x84>)
 800133a:	f001 fa8d 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <HAL_I2C_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001392:	23c0      	movs	r3, #192	@ 0xc0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a2:	2304      	movs	r3, #4
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <HAL_I2C_MspInit+0x8c>)
 80013ae:	f001 fa53 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	@ 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400

080013e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <HAL_RTC_MspInit+0x60>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d119      	bne.n	800143a <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800140a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4618      	mov	r0, r3
 8001416:	f003 ff31 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001420:	f7ff ff26 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_RTC_MspInit+0x64>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2029      	movs	r0, #41	@ 0x29
 8001430:	f000 fef1 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001434:	2029      	movs	r0, #41	@ 0x29
 8001436:	f000 ff0a 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40002800 	.word	0x40002800
 8001448:	42470e3c 	.word	0x42470e3c

0800144c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a47      	ldr	r2, [pc, #284]	@ (8001588 <HAL_SPI_MspInit+0x13c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 8088 	bne.w	8001580 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	4b45      	ldr	r3, [pc, #276]	@ (800158c <HAL_SPI_MspInit+0x140>)
 8001476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001478:	4a44      	ldr	r2, [pc, #272]	@ (800158c <HAL_SPI_MspInit+0x140>)
 800147a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001480:	4b42      	ldr	r3, [pc, #264]	@ (800158c <HAL_SPI_MspInit+0x140>)
 8001482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b3e      	ldr	r3, [pc, #248]	@ (800158c <HAL_SPI_MspInit+0x140>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001494:	4a3d      	ldr	r2, [pc, #244]	@ (800158c <HAL_SPI_MspInit+0x140>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6313      	str	r3, [r2, #48]	@ 0x30
 800149c:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_SPI_MspInit+0x140>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23e0      	movs	r3, #224	@ 0xe0
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b8:	2305      	movs	r3, #5
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4833      	ldr	r0, [pc, #204]	@ (8001590 <HAL_SPI_MspInit+0x144>)
 80014c4:	f001 f9c8 	bl	8002858 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014ca:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <HAL_SPI_MspInit+0x14c>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001508:	4822      	ldr	r0, [pc, #136]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 800150a:	f000 febb 	bl	8002284 <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001514:	f7ff feac 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 800151c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800151e:	4a1d      	ldr	r2, [pc, #116]	@ (8001594 <HAL_SPI_MspInit+0x148>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <HAL_SPI_MspInit+0x154>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_SPI_MspInit+0x150>)
 800152c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001530:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001534:	2240      	movs	r2, #64	@ 0x40
 8001536:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_SPI_MspInit+0x150>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001544:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_SPI_MspInit+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_SPI_MspInit+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001566:	f000 fe8d 	bl	8002284 <HAL_DMA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001570:	f7ff fe7e 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_SPI_MspInit+0x150>)
 8001578:	649a      	str	r2, [r3, #72]	@ 0x48
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_SPI_MspInit+0x150>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013000 	.word	0x40013000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	20000758 	.word	0x20000758
 8001598:	40026410 	.word	0x40026410
 800159c:	200007b8 	.word	0x200007b8
 80015a0:	40026458 	.word	0x40026458

080015a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a38      	ldr	r2, [pc, #224]	@ (8001694 <HAL_TIM_Base_MspInit+0xf0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d11e      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a36      	ldr	r2, [pc, #216]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2019      	movs	r0, #25
 80015d8:	f000 fe1d 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015dc:	2019      	movs	r0, #25
 80015de:	f000 fe36 	bl	800224e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	201a      	movs	r0, #26
 80015e8:	f000 fe15 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015ec:	201a      	movs	r0, #26
 80015ee:	f000 fe2e 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015f2:	e04a      	b.n	800168a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fc:	d116      	bne.n	800162c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201c      	movs	r0, #28
 8001620:	f000 fdf9 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001624:	201c      	movs	r0, #28
 8001626:	f000 fe12 	bl	800224e <HAL_NVIC_EnableIRQ>
}
 800162a:	e02e      	b.n	800168a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_TIM_Base_MspInit+0xf8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10e      	bne.n	8001654 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	e01a      	b.n	800168a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_TIM_Base_MspInit+0xfc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d115      	bne.n	800168a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_TIM_Base_MspInit+0xf4>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2101      	movs	r1, #1
 800167e:	201e      	movs	r0, #30
 8001680:	f000 fdc9 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001684:	201e      	movs	r0, #30
 8001686:	f000 fde2 	bl	800224e <HAL_NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40010000 	.word	0x40010000
 8001698:	40023800 	.word	0x40023800
 800169c:	40000400 	.word	0x40000400
 80016a0:	40000800 	.word	0x40000800

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a25      	ldr	r2, [pc, #148]	@ (8001758 <HAL_TIM_MspPostInit+0xb4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11f      	bne.n	8001706 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4818      	ldr	r0, [pc, #96]	@ (8001760 <HAL_TIM_MspPostInit+0xbc>)
 8001700:	f001 f8aa 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001704:	e023      	b.n	800174e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800170e:	d11e      	bne.n	800174e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_TIM_MspPostInit+0xb8>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800172c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173e:	2301      	movs	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4806      	ldr	r0, [pc, #24]	@ (8001764 <HAL_TIM_MspPostInit+0xc0>)
 800174a:	f001 f885 	bl	8002858 <HAL_GPIO_Init>
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010000 	.word	0x40010000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 f9a9 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 80017ca:	2004      	movs	r0, #4
 80017cc:	f001 f9e2 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017da:	f005 fa05 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000818 	.word	0x20000818

080017e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017ee:	f005 f9fb 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000818 	.word	0x20000818

080017fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	gl_counter_1000hz_tim2++;
 8001800:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <TIM2_IRQHandler+0xe4>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <TIM2_IRQHandler+0xe4>)
 800180a:	801a      	strh	r2, [r3, #0]

	if(gl_counter_1000hz_tim2 % 500 == 0)
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <TIM2_IRQHandler+0xe4>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	4a34      	ldr	r2, [pc, #208]	@ (80018e4 <TIM2_IRQHandler+0xe8>)
 8001812:	fba2 1203 	umull	r1, r2, r2, r3
 8001816:	0952      	lsrs	r2, r2, #5
 8001818:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800181c:	fb01 f202 	mul.w	r2, r1, r2
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d108      	bne.n	800183a <TIM2_IRQHandler+0x3e>
	{
		gl_int_5hz_tim2 = 1;
 8001828:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <TIM2_IRQHandler+0xec>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
		gl_int_5hz_tim2_for_pic ++;
 800182e:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <TIM2_IRQHandler+0xf0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <TIM2_IRQHandler+0xf0>)
 8001838:	701a      	strb	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 50 == 0 && gl_led_pwm_state == LED_PWM_CCR_CHANGEBALE )
 800183a:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <TIM2_IRQHandler+0xe4>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	4a2c      	ldr	r2, [pc, #176]	@ (80018f0 <TIM2_IRQHandler+0xf4>)
 8001840:	fba2 1203 	umull	r1, r2, r2, r3
 8001844:	0912      	lsrs	r2, r2, #4
 8001846:	2132      	movs	r1, #50	@ 0x32
 8001848:	fb01 f202 	mul.w	r2, r1, r2
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d13f      	bne.n	80018d4 <TIM2_IRQHandler+0xd8>
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <TIM2_IRQHandler+0xf8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d13b      	bne.n	80018d4 <TIM2_IRQHandler+0xd8>
	{
		ch3_counter += 3;
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	3303      	adds	r3, #3
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 8001866:	801a      	strh	r2, [r3, #0]
		if(ch3_counter < 300)
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001870:	d20b      	bcs.n	800188a <TIM2_IRQHandler+0x8e>
		{
			CH3_DC = ch3_counter;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <TIM2_IRQHandler+0x100>)
 800187a:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = CH3_DC;
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <TIM2_IRQHandler+0x100>)
 800187e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001882:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001886:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001888:	e024      	b.n	80018d4 <TIM2_IRQHandler+0xd8>
		}
		else if(ch3_counter >= 300)
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001892:	d31f      	bcc.n	80018d4 <TIM2_IRQHandler+0xd8>
		{
			TIM2->CCR3 = CH3_DC;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <TIM2_IRQHandler+0x100>)
 8001896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800189a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c
			CH3_DC -= 3;
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <TIM2_IRQHandler+0x100>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b03      	subs	r3, #3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <TIM2_IRQHandler+0x100>)
 80018b0:	801a      	strh	r2, [r3, #0]
			if(CH3_DC <=0)
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <TIM2_IRQHandler+0x100>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dc0b      	bgt.n	80018d4 <TIM2_IRQHandler+0xd8>
			{
				CH3_DC = 0;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <TIM2_IRQHandler+0x100>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
				ch3_counter = 0;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <TIM2_IRQHandler+0xfc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
				gl_led_color_result_blink_counter++;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <TIM2_IRQHandler+0x104>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <TIM2_IRQHandler+0x104>)
 80018d2:	701a      	strb	r2, [r3, #0]
		}


	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d4:	480b      	ldr	r0, [pc, #44]	@ (8001904 <TIM2_IRQHandler+0x108>)
 80018d6:	f005 f987 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000093e 	.word	0x2000093e
 80018e4:	10624dd3 	.word	0x10624dd3
 80018e8:	20000940 	.word	0x20000940
 80018ec:	20000941 	.word	0x20000941
 80018f0:	51eb851f 	.word	0x51eb851f
 80018f4:	200005d6 	.word	0x200005d6
 80018f8:	2000093c 	.word	0x2000093c
 80018fc:	2000093a 	.word	0x2000093a
 8001900:	20000943 	.word	0x20000943
 8001904:	20000860 	.word	0x20000860

08001908 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <TIM4_IRQHandler+0x10>)
 800190e:	f005 f96b 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200008f0 	.word	0x200008f0

0800191c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8001920:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001924:	f001 f936 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	led_1hz_counter++;
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <RTC_Alarm_IRQHandler+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <RTC_Alarm_IRQHandler+0x1c>)
 800193a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <RTC_Alarm_IRQHandler+0x20>)
 800193e:	f004 f861 	bl	8005a04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000942 	.word	0x20000942
 800194c:	200006e0 	.word	0x200006e0

08001950 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <DMA2_Stream0_IRQHandler+0x10>)
 8001956:	f000 fd43 	bl	80023e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000758 	.word	0x20000758

08001964 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA2_Stream3_IRQHandler+0x10>)
 800196a:	f000 fd39 	bl	80023e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200007b8 	.word	0x200007b8

08001978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <OTG_FS_IRQHandler+0x10>)
 800197e:	f001 fecc 	bl	800371a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000162c 	.word	0x2000162c

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f00b fa6c 	bl	800ce98 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20010000 	.word	0x20010000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000944 	.word	0x20000944
 80019f4:	20001ed0 	.word	0x20001ed0

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystemInit+0x20>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <SystemInit+0x20>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a22:	490e      	ldr	r1, [pc, #56]	@ (8001a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a24:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a38:	4c0b      	ldr	r4, [pc, #44]	@ (8001a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a46:	f7ff ffd7 	bl	80019f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f00b fa2b 	bl	800cea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7fe fe8f 	bl	8000770 <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000628 	.word	0x20000628
  ldr r2, =_sidata
 8001a60:	080103a4 	.word	0x080103a4
  ldr r2, =_sbss
 8001a64:	20000628 	.word	0x20000628
  ldr r4, =_ebss
 8001a68:	20001ecc 	.word	0x20001ecc

08001a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <HAL_Init+0x40>)
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_Init+0x40>)
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x40>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 fbb1 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fbea 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fbc9 	bl	800226a <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 fb91 	bl	8002216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200004c4 	.word	0x200004c4
 8001b0c:	200004cc 	.word	0x200004cc
 8001b10:	200004c8 	.word	0x200004c8

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200004cc 	.word	0x200004cc
 8001b38:	20000948 	.word	0x20000948

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000948 	.word	0x20000948

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200004cc 	.word	0x200004cc

08001b9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e033      	b.n	8001c1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fb86 	bl	80012cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f93a 	bl	8001e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e105      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x228>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d925      	bls.n	8001c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	3b1e      	subs	r3, #30
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	e022      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4403      	add	r3, r0
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d824      	bhi.n	8001d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b05      	subs	r3, #5
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d32:	e04c      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d824      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b23      	subs	r3, #35	@ 0x23
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	@ 0x23
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d84:	e023      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b41      	subs	r3, #65	@ 0x41
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	@ 0x41
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_ADC_ConfigChannel+0x234>)
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <HAL_ADC_ConfigChannel+0x238>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <HAL_ADC_ConfigChannel+0x238>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d123      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x1e6>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b11      	cmp	r3, #17
 8001e08:	d11b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_ADC_ConfigChannel+0x23c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <HAL_ADC_ConfigChannel+0x240>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9a      	lsrs	r2, r3, #18
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	200004c4 	.word	0x200004c4
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e70:	4b79      	ldr	r3, [pc, #484]	@ (8002058 <ADC_Init+0x1f0>)
 8001e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	021a      	lsls	r2, r3, #8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	4a58      	ldr	r2, [pc, #352]	@ (800205c <ADC_Init+0x1f4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d022      	beq.n	8001f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e00f      	b.n	8001f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0202 	bic.w	r2, r2, #2
 8001f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
 8001f80:	005a      	lsls	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6859      	ldr	r1, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	035a      	lsls	r2, r3, #13
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e007      	b.n	8001fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	051a      	lsls	r2, r3, #20
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800201e:	025a      	lsls	r2, r3, #9
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	029a      	lsls	r2, r3, #10
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40012300 	.word	0x40012300
 800205c:	0f000001 	.word	0x0f000001

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	@ (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	@ (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f7ff ff8e 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff29 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002228:	f7ff ff3e 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 800222c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff8e 	bl	8002154 <NVIC_EncodePriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff5d 	bl	8002100 <__NVIC_SetPriority>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff31 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffa2 	bl	80021bc <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff fc54 	bl	8001b3c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e099      	b.n	80023d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c0:	e00f      	b.n	80022e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c2:	f7ff fc3b 	bl	8001b3c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d908      	bls.n	80022e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2203      	movs	r2, #3
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e078      	b.n	80023d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e8      	bne.n	80022c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <HAL_DMA_Init+0x158>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4313      	orrs	r3, r2
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0307 	bic.w	r3, r3, #7
 8002362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2b04      	cmp	r3, #4
 8002374:	d117      	bne.n	80023a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f9e9 	bl	8002760 <DMA_CheckFifoParam>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023a2:	2301      	movs	r3, #1
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9a0 	bl	80026f4 <DMA_CalcBaseAndBitshift>
 80023b4:	4603      	mov	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	223f      	movs	r2, #63	@ 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	f010803f 	.word	0xf010803f

080023e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002628 <HAL_DMA_IRQHandler+0x248>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a8e      	ldr	r2, [pc, #568]	@ (800262c <HAL_DMA_IRQHandler+0x24c>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a9b      	lsrs	r3, r3, #10
 80023f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	2208      	movs	r2, #8
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01a      	beq.n	800244c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0204 	bic.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	2208      	movs	r2, #8
 800243a:	409a      	lsls	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d012      	beq.n	8002482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2201      	movs	r2, #1
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	f043 0202 	orr.w	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	2204      	movs	r2, #4
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	2204      	movs	r2, #4
 80024a6:	409a      	lsls	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2210      	movs	r2, #16
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d043      	beq.n	8002550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03c      	beq.n	8002550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	2210      	movs	r2, #16
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d018      	beq.n	8002522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d108      	bne.n	8002510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4798      	blx	r3
 800250e:	e01f      	b.n	8002550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
 8002520:	e016      	b.n	8002550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	2220      	movs	r2, #32
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 808f 	beq.w	8002680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8087 	beq.w	8002680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	2220      	movs	r2, #32
 8002578:	409a      	lsls	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b05      	cmp	r3, #5
 8002588:	d136      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0216 	bic.w	r2, r2, #22
 8002598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_DMA_IRQHandler+0x1da>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0208 	bic.w	r2, r2, #8
 80025c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	223f      	movs	r2, #63	@ 0x3f
 80025d0:	409a      	lsls	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d07e      	beq.n	80026ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
        }
        return;
 80025f6:	e079      	b.n	80026ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01d      	beq.n	8002642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	2b00      	cmp	r3, #0
 800261a:	d031      	beq.n	8002680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e02c      	b.n	8002680 <HAL_DMA_IRQHandler+0x2a0>
 8002626:	bf00      	nop
 8002628:	200004c4 	.word	0x200004c4
 800262c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d023      	beq.n	8002680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
 8002640:	e01e      	b.n	8002680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0210 	bic.w	r2, r2, #16
 800265e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	2b00      	cmp	r3, #0
 8002686:	d032      	beq.n	80026ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d022      	beq.n	80026da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2205      	movs	r2, #5
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d307      	bcc.n	80026c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f2      	bne.n	80026ac <HAL_DMA_IRQHandler+0x2cc>
 80026c6:	e000      	b.n	80026ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
 80026ea:	e000      	b.n	80026ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80026ec:	bf00      	nop
    }
  }
}
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3b10      	subs	r3, #16
 8002704:	4a14      	ldr	r2, [pc, #80]	@ (8002758 <DMA_CalcBaseAndBitshift+0x64>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800270e:	4a13      	ldr	r2, [pc, #76]	@ (800275c <DMA_CalcBaseAndBitshift+0x68>)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d909      	bls.n	8002736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	1d1a      	adds	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58
 8002734:	e007      	b.n	8002746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	aaaaaaab 	.word	0xaaaaaaab
 800275c:	0800dacc 	.word	0x0800dacc

08002760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11f      	bne.n	80027ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d856      	bhi.n	800282e <DMA_CheckFifoParam+0xce>
 8002780:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <DMA_CheckFifoParam+0x28>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	08002799 	.word	0x08002799
 800278c:	080027ab 	.word	0x080027ab
 8002790:	08002799 	.word	0x08002799
 8002794:	0800282f 	.word	0x0800282f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d046      	beq.n	8002832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e043      	b.n	8002832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027b2:	d140      	bne.n	8002836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e03d      	b.n	8002836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	d121      	bne.n	8002808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d837      	bhi.n	800283a <DMA_CheckFifoParam+0xda>
 80027ca:	a201      	add	r2, pc, #4	@ (adr r2, 80027d0 <DMA_CheckFifoParam+0x70>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027e7 	.word	0x080027e7
 80027d8:	080027e1 	.word	0x080027e1
 80027dc:	080027f9 	.word	0x080027f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e030      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d025      	beq.n	800283e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e022      	b.n	800283e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002800:	d11f      	bne.n	8002842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002806:	e01c      	b.n	8002842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d903      	bls.n	8002816 <DMA_CheckFifoParam+0xb6>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d003      	beq.n	800281c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002814:	e018      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      break;
 800281a:	e015      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e00b      	b.n	8002846 <DMA_CheckFifoParam+0xe6>
      break;
 800282e:	bf00      	nop
 8002830:	e00a      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
 8002834:	e008      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
 8002838:	e006      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 800283a:	bf00      	nop
 800283c:	e004      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 800283e:	bf00      	nop
 8002840:	e002      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;   
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
    }
  } 
  
  return status; 
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e159      	b.n	8002b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 8148 	bne.w	8002b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d130      	bne.n	800290c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a2 	beq.w	8002b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	4a56      	ldr	r2, [pc, #344]	@ (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ee:	4b54      	ldr	r3, [pc, #336]	@ (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_GPIO_Init+0x2ec>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a49      	ldr	r2, [pc, #292]	@ (8002b48 <HAL_GPIO_Init+0x2f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x202>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a48      	ldr	r2, [pc, #288]	@ (8002b4c <HAL_GPIO_Init+0x2f4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x1fe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a47      	ldr	r2, [pc, #284]	@ (8002b50 <HAL_GPIO_Init+0x2f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a46      	ldr	r2, [pc, #280]	@ (8002b54 <HAL_GPIO_Init+0x2fc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x1f6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a45      	ldr	r2, [pc, #276]	@ (8002b58 <HAL_GPIO_Init+0x300>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x1f2>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	@ (8002b44 <HAL_GPIO_Init+0x2ec>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac8:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ace:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af8:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b5c <HAL_GPIO_Init+0x304>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f aea2 	bls.w	8002874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcdc 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e12b      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fbb2 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	@ 0x24
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c28:	f002 fb14 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a81      	ldr	r2, [pc, #516]	@ (8002e38 <HAL_I2C_Init+0x274>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d807      	bhi.n	8002c48 <HAL_I2C_Init+0x84>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a80      	ldr	r2, [pc, #512]	@ (8002e3c <HAL_I2C_Init+0x278>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e006      	b.n	8002c56 <HAL_I2C_Init+0x92>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e40 <HAL_I2C_Init+0x27c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0e7      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a78      	ldr	r2, [pc, #480]	@ (8002e44 <HAL_I2C_Init+0x280>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9b      	lsrs	r3, r3, #18
 8002c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_I2C_Init+0x274>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <HAL_I2C_Init+0xd4>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3301      	adds	r3, #1
 8002c96:	e009      	b.n	8002cac <HAL_I2C_Init+0xe8>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	4a69      	ldr	r2, [pc, #420]	@ (8002e48 <HAL_I2C_Init+0x284>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	3301      	adds	r3, #1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	495c      	ldr	r1, [pc, #368]	@ (8002e38 <HAL_I2C_Init+0x274>)
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d819      	bhi.n	8002d00 <HAL_I2C_Init+0x13c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e59      	subs	r1, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_I2C_Init+0x138>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e59      	subs	r1, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	e051      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e04f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <HAL_I2C_Init+0x168>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e012      	b.n	8002d52 <HAL_I2C_Init+0x18e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x196>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e022      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10e      	bne.n	8002d80 <HAL_I2C_Init+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e58      	subs	r0, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	440b      	add	r3, r1
 8002d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7e:	e00f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6809      	ldr	r1, [r1, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6911      	ldr	r1, [r2, #16]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	000186a0 	.word	0x000186a0
 8002e3c:	001e847f 	.word	0x001e847f
 8002e40:	003d08ff 	.word	0x003d08ff
 8002e44:	431bde83 	.word	0x431bde83
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e66:	f7fe fe69 	bl	8001b3c <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	f040 80d9 	bne.w	800302c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2319      	movs	r3, #25
 8002e80:	2201      	movs	r2, #1
 8002e82:	496d      	ldr	r1, [pc, #436]	@ (8003038 <HAL_I2C_Mem_Write+0x1ec>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f971 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0cc      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Mem_Write+0x56>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0c5      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d007      	beq.n	8002ec8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2221      	movs	r2, #33	@ 0x21
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2240      	movs	r2, #64	@ 0x40
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a4d      	ldr	r2, [pc, #308]	@ (800303c <HAL_I2C_Mem_Write+0x1f0>)
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f0a:	88f8      	ldrh	r0, [r7, #6]
 8002f0c:	893a      	ldrh	r2, [r7, #8]
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f890 	bl	8003040 <I2C_RequestMemoryWrite>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d052      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e081      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f9f2 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d107      	bne.n	8002f52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06b      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d11b      	bne.n	8002fcc <HAL_I2C_Mem_Write+0x180>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1aa      	bne.n	8002f2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9de 	bl	800339a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d107      	bne.n	8002ffc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e016      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	00100002 	.word	0x00100002
 800303c:	ffff0000 	.word	0xffff0000

08003040 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2200      	movs	r2, #0
 8003072:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f878 	bl	800316c <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003090:	d103      	bne.n	800309a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e05f      	b.n	800315e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	492d      	ldr	r1, [pc, #180]	@ (8003168 <I2C_RequestMemoryWrite+0x128>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f8b0 	bl	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e04c      	b.n	800315e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f91a 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d107      	bne.n	8003102 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e02b      	b.n	800315e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800310c:	893b      	ldrh	r3, [r7, #8]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e021      	b.n	800315c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	b29b      	uxth	r3, r3
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003128:	6a39      	ldr	r1, [r7, #32]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f8f4 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b04      	cmp	r3, #4
 800313c:	d107      	bne.n	800314e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e005      	b.n	800315e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003152:	893b      	ldrh	r3, [r7, #8]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	e025      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d021      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fcd9 	bl	8001b3c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e023      	b.n	8003212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10d      	bne.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	e00c      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0b6      	beq.n	800317e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003228:	e051      	b.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003238:	d123      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e046      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d021      	beq.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fc57 	bl	8001b3c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e020      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10c      	bne.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e00b      	b.n	800330a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d18d      	bne.n	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	e02d      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f878 	bl	800341c <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02d      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d021      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fbfd 	bl	8001b3c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b80      	cmp	r3, #128	@ 0x80
 800338e:	d1ca      	bne.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f837 	bl	800341c <I2C_IsAcknowledgeFailed>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e02d      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d021      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fe fbbc 	bl	8001b3c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d1ca      	bne.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003432:	d11b      	bne.n	800346c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800343c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800347a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347c:	b08f      	sub	sp, #60	@ 0x3c
 800347e:	af0a      	add	r7, sp, #40	@ 0x28
 8003480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e10f      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f008 fa98 	bl	800b9dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 fb05 	bl	8007ada <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	687e      	ldr	r6, [r7, #4]
 80034d8:	466d      	mov	r5, sp
 80034da:	f106 0410 	add.w	r4, r6, #16
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ee:	1d33      	adds	r3, r6, #4
 80034f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f004 f9dc 	bl	80078b0 <USB_CoreInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0d0      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f004 faf3 	bl	8007afc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e04a      	b.n	80035b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	@ 0x3d
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	333c      	adds	r3, #60	@ 0x3c
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	b298      	uxth	r0, r3
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	@ 0x44
 8003558:	4602      	mov	r2, r0
 800355a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3340      	adds	r3, #64	@ 0x40
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3348      	adds	r3, #72	@ 0x48
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334c      	adds	r3, #76	@ 0x4c
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3354      	adds	r3, #84	@ 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	3301      	adds	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3af      	bcc.n	800351c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e044      	b.n	800364c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3301      	adds	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3b5      	bcc.n	80035c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	687e      	ldr	r6, [r7, #4]
 800365e:	466d      	mov	r5, sp
 8003660:	f106 0410 	add.w	r4, r6, #16
 8003664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003670:	e885 0003 	stmia.w	r5, {r0, r1}
 8003674:	1d33      	adds	r3, r6, #4
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f004 fa8b 	bl	8007b94 <USB_DevInit>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e00d      	b.n	80036ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f005 fbda 	bl	8008e5e <USB_DevDisconnect>

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_PCD_Start+0x1c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e020      	b.n	8003712 <HAL_PCD_Start+0x5e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d109      	bne.n	80036f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d005      	beq.n	80036f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 f9dd 	bl	8007ab8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f005 fb8a 	bl	8008e1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b08d      	sub	sp, #52	@ 0x34
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f005 fc48 	bl	8008fc6 <USB_GetMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 848a 	bne.w	8004052 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fbac 	bl	8008ea0 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8480 	beq.w	8004050 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f005 fb99 	bl	8008ea0 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d107      	bne.n	8003788 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0202 	and.w	r2, r2, #2
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f005 fb87 	bl	8008ea0 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	d161      	bne.n	8003860 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0210 	bic.w	r2, r2, #16
 80037aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	0c5b      	lsrs	r3, r3, #17
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d124      	bne.n	8003822 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d035      	beq.n	8003850 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a38      	ldr	r0, [r7, #32]
 80037f8:	f005 f9be 	bl	8008b78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003808:	441a      	add	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381a:	441a      	add	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
 8003820:	e016      	b.n	8003850 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	0c5b      	lsrs	r3, r3, #17
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2b06      	cmp	r3, #6
 800382c:	d110      	bne.n	8003850 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003834:	2208      	movs	r2, #8
 8003836:	4619      	mov	r1, r3
 8003838:	6a38      	ldr	r0, [r7, #32]
 800383a:	f005 f99d 	bl	8008b78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384a:	441a      	add	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0210 	orr.w	r2, r2, #16
 800385e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f005 fb1b 	bl	8008ea0 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003870:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003874:	f040 80a7 	bne.w	80039c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f005 fb20 	bl	8008ec6 <USB_ReadDevAllOutEpInterrupt>
 8003886:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003888:	e099      	b.n	80039be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 808e 	beq.w	80039b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f005 fb44 	bl	8008f2e <USB_ReadDevOutEPInterrupt>
 80038a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fec2 	bl	8004650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2308      	movs	r3, #8
 80038e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 ff98 	bl	8004820 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	2310      	movs	r3, #16
 800390a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d030      	beq.n	8003978 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391e:	2b80      	cmp	r3, #128	@ 0x80
 8003920:	d109      	bne.n	8003936 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003930:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003934:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	78db      	ldrb	r3, [r3, #3]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f008 f937 	bl	800bbd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	2302      	movs	r3, #2
 8003976:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	2320      	movs	r3, #32
 8003992:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	3301      	adds	r3, #1
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f af62 	bne.w	800388a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f005 fa68 	bl	8008ea0 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039da:	f040 80db 	bne.w	8003b94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f005 fa89 	bl	8008efa <USB_ReadDevAllInEpInterrupt>
 80039e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80039ee:	e0cd      	b.n	8003b8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80c2 	beq.w	8003b80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f005 faaf 	bl	8008f6a <USB_ReadDevInEPInterrupt>
 8003a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d057      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69f9      	ldr	r1, [r7, #28]
 8003a34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a38:	4013      	ands	r3, r2
 8003a3a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d132      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334c      	adds	r3, #76	@ 0x4c
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4403      	add	r3, r0
 8003a76:	3348      	adds	r3, #72	@ 0x48
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4419      	add	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	334c      	adds	r3, #76	@ 0x4c
 8003a8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d113      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3354      	adds	r3, #84	@ 0x54
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f005 fab6 	bl	8009028 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f008 f80b 	bl	800bade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003afa:	461a      	mov	r2, r3
 8003afc:	2310      	movs	r3, #16
 8003afe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b16:	461a      	mov	r2, r3
 8003b18:	2340      	movs	r3, #64	@ 0x40
 8003b1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d023      	beq.n	8003b6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b28:	6a38      	ldr	r0, [r7, #32]
 8003b2a:	f004 f997 	bl	8007e5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	@ 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	78db      	ldrb	r3, [r3, #3]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f008 f84e 	bl	800bbf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fcdb 	bl	8004536 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	3301      	adds	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f af2e 	bne.w	80039f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 f981 	bl	8008ea0 <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba8:	d122      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fec2 	bl	800495c <HAL_PCDEx_LPM_Callback>
 8003bd8:	e002      	b.n	8003be0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f007 ffec 	bl	800bbb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 f953 	bl	8008ea0 <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c04:	d112      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f007 ffa8 	bl	800bb6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c2a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f005 f935 	bl	8008ea0 <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	f040 80b7 	bne.w	8003db2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 f8fc 	bl	8007e5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c68:	e046      	b.n	8003cf8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ccc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cf0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3b3      	bcc.n	8003c6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d10:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d2e:	f043 030b 	orr.w	r3, r3, #11
 8003d32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d44:	f043 030b 	orr.w	r3, r3, #11
 8003d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4a:	e015      	b.n	8003d78 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d72:	f043 030b 	orr.w	r3, r3, #11
 8003d76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f005 f943 	bl	8009028 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 f872 	bl	8008ea0 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc6:	d124      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 f908 	bl	8008fe2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 f8bd 	bl	8007f56 <USB_GetDevSpeed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681c      	ldr	r4, [r3, #0]
 8003de8:	f001 fa28 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8003dec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	4620      	mov	r0, r4
 8003df8:	f003 fdbc 	bl	8007974 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f007 fe96 	bl	800bb2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f005 f842 	bl	8008ea0 <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d10a      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f007 fe73 	bl	800bb12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 0208 	and.w	r2, r2, #8
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 f82d 	bl	8008ea0 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4c:	2b80      	cmp	r3, #128	@ 0x80
 8003e4e:	d122      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e60:	e014      	b.n	8003e8c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb27 	bl	80044d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	3301      	adds	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3e5      	bcc.n	8003e62 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 f800 	bl	8008ea0 <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eaa:	d13b      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb0:	e02b      	b.n	8003f0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3340      	adds	r3, #64	@ 0x40
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da12      	bge.n	8003f04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	333f      	adds	r3, #63	@ 0x3f
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fae8 	bl	80044d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3ce      	bcc.n	8003eb2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 ffb9 	bl	8008ea0 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f38:	d155      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3e:	e045      	b.n	8003fcc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d12e      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da2b      	bge.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d121      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc2:	6053      	str	r3, [r2, #4]
            break;
 8003fc4:	e007      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3b4      	bcc.n	8003f40 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 ff58 	bl	8008ea0 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f007 fe0d 	bl	800bc1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 ff42 	bl	8008ea0 <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d115      	bne.n	8004052 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f007 fdfd 	bl	800bc38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e000      	b.n	8004052 <HAL_PCD_IRQHandler+0x938>
      return;
 8004050:	bf00      	nop
    }
  }
}
 8004052:	3734      	adds	r7, #52	@ 0x34
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_PCD_SetAddress+0x1a>
 800406e:	2302      	movs	r3, #2
 8004070:	e013      	b.n	800409a <HAL_PCD_SetAddress+0x42>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f004 fea0 	bl	8008dd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	461a      	mov	r2, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	70fb      	strb	r3, [r7, #3]
 80040b4:	460b      	mov	r3, r1
 80040b6:	803b      	strh	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da0f      	bge.n	80040e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3338      	adds	r3, #56	@ 0x38
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
 80040e6:	e00f      	b.n	8004108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 020f 	and.w	r2, r3, #15
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004114:	883a      	ldrh	r2, [r7, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	78ba      	ldrb	r2, [r7, #2]
 800411e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004132:	78bb      	ldrb	r3, [r7, #2]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d102      	bne.n	800413e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_PCD_EP_Open+0xaa>
 8004148:	2302      	movs	r3, #2
 800414a:	e00e      	b.n	800416a <HAL_PCD_EP_Open+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 ff20 	bl	8007fa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004168:	7afb      	ldrb	r3, [r7, #11]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800417e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da0f      	bge.n	80041a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3338      	adds	r3, #56	@ 0x38
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	3304      	adds	r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	705a      	strb	r2, [r3, #1]
 80041a4:	e00f      	b.n	80041c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_PCD_EP_Close+0x6e>
 80041dc:	2302      	movs	r3, #2
 80041de:	e00e      	b.n	80041fe <HAL_PCD_EP_Close+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 ff5e 	bl	80080b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	460b      	mov	r3, r1
 8004214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	f004 fa3d 	bl	80086f8 <USB_EP0StartXfer>
 800427e:	e008      	b.n	8004292 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	f003 ffeb 	bl	8008268 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	460b      	mov	r3, r1
 80042da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3338      	adds	r3, #56	@ 0x38
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2201      	movs	r2, #1
 800430a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	b2da      	uxtb	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	f004 f9db 	bl	80086f8 <USB_EP0StartXfer>
 8004342:	e008      	b.n	8004356 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	f003 ff89 	bl	8008268 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d901      	bls.n	800437e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e050      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0f      	bge.n	80043a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3338      	adds	r3, #56	@ 0x38
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	3304      	adds	r3, #4
 800439c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	705a      	strb	r2, [r3, #1]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_EP_SetStall+0x82>
 80043de:	2302      	movs	r3, #2
 80043e0:	e01e      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fc19 	bl	8008c28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004410:	461a      	mov	r2, r3
 8004412:	f004 fe09 	bl	8009028 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d901      	bls.n	8004446 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da0f      	bge.n	800446e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	3338      	adds	r3, #56	@ 0x38
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	3304      	adds	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	705a      	strb	r2, [r3, #1]
 800446c:	e00f      	b.n	800448e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_EP_ClrStall+0x86>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e00e      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f004 fc21 	bl	8008d04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0c      	bge.n	8004502 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	3338      	adds	r3, #56	@ 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e00c      	b.n	800451c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fa40 	bl	80089a8 <USB_EPStopXfer>
 8004528:	4603      	mov	r3, r0
 800452a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800452c:	7afb      	ldrb	r3, [r7, #11]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	@ 0x28
 800453a:	af02      	add	r7, sp, #8
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	3338      	adds	r3, #56	@ 0x38
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d901      	bls.n	800456e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06c      	b.n	8004648 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	429a      	cmp	r2, r3
 8004582:	d902      	bls.n	800458a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3303      	adds	r3, #3
 800458e:	089b      	lsrs	r3, r3, #2
 8004590:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004592:	e02b      	b.n	80045ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d902      	bls.n	80045b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3303      	adds	r3, #3
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6919      	ldr	r1, [r3, #16]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4603      	mov	r3, r0
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f004 fa94 	bl	8008afc <USB_WritePacket>

    ep->xfer_buff  += len;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d809      	bhi.n	8004616 <PCD_WriteEmptyTxFifo+0xe0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800460a:	429a      	cmp	r2, r3
 800460c:	d203      	bcs.n	8004616 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1be      	bne.n	8004594 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	429a      	cmp	r2, r3
 8004620:	d811      	bhi.n	8004646 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2201      	movs	r2, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	43db      	mvns	r3, r3
 800463c:	6939      	ldr	r1, [r7, #16]
 800463e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004642:	4013      	ands	r3, r2
 8004644:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	333c      	adds	r3, #60	@ 0x3c
 8004668:	3304      	adds	r3, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d17b      	bne.n	800477e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a61      	ldr	r2, [pc, #388]	@ (8004818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	f240 80b9 	bls.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80b3 	beq.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b2:	461a      	mov	r2, r3
 80046b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	e0a7      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d2:	461a      	mov	r2, r3
 80046d4:	2320      	movs	r3, #32
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	e098      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 8093 	bne.w	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d90f      	bls.n	800470e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	e07e      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	3304      	adds	r3, #4
 8004722:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	0159      	lsls	r1, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	440b      	add	r3, r1
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d114      	bne.n	8004770 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004758:	461a      	mov	r2, r3
 800475a:	2101      	movs	r1, #1
 800475c:	f004 fc64 	bl	8009028 <USB_EP0_OutStart>
 8004760:	e006      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f007 f996 	bl	800baa8 <HAL_PCD_DataOutStageCallback>
 800477c:	e046      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4a26      	ldr	r2, [pc, #152]	@ (800481c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d124      	bne.n	80047d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	e032      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	2320      	movs	r3, #32
 80047c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f007 f96d 	bl	800baa8 <HAL_PCD_DataOutStageCallback>
 80047ce:	e01d      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d114      	bne.n	8004800 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80047f8:	461a      	mov	r2, r3
 80047fa:	2100      	movs	r1, #0
 80047fc:	f004 fc14 	bl	8009028 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f007 f94e 	bl	800baa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	4f54300a 	.word	0x4f54300a
 800481c:	4f54310a 	.word	0x4f54310a

08004820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	333c      	adds	r3, #60	@ 0x3c
 8004838:	3304      	adds	r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a15      	ldr	r2, [pc, #84]	@ (80048a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d90e      	bls.n	8004874 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486c:	461a      	mov	r2, r3
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f007 f905 	bl	800ba84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a0a      	ldr	r2, [pc, #40]	@ (80048a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d90c      	bls.n	800489c <PCD_EP_OutSetupPacket_int+0x7c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d108      	bne.n	800489c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004894:	461a      	mov	r2, r3
 8004896:	2101      	movs	r1, #1
 8004898:	f004 fbc6 	bl	8009028 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	4f54300a 	.word	0x4f54300a

080048ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
 80048b8:	4613      	mov	r3, r2
 80048ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048ca:	883b      	ldrh	r3, [r7, #0]
 80048cc:	0419      	lsls	r1, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048d8:	e028      	b.n	800492c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	e00d      	b.n	800490a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	3340      	adds	r3, #64	@ 0x40
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	3301      	adds	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	3b01      	subs	r3, #1
 8004910:	429a      	cmp	r2, r3
 8004912:	d3ec      	bcc.n	80048ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004914:	883b      	ldrh	r3, [r7, #0]
 8004916:	0418      	lsls	r0, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	3b01      	subs	r3, #1
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	4302      	orrs	r2, r0
 8004924:	3340      	adds	r3, #64	@ 0x40
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e267      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004992:	4b88      	ldr	r3, [pc, #544]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b85      	ldr	r3, [pc, #532]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b82      	ldr	r3, [pc, #520]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e242      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b76      	ldr	r3, [pc, #472]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a75      	ldr	r2, [pc, #468]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6f      	ldr	r2, [pc, #444]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b69      	ldr	r3, [pc, #420]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b66      	ldr	r3, [pc, #408]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a65      	ldr	r2, [pc, #404]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fd f886 	bl	8001b3c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd f882 	bl	8001b3c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e207      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd f872 	bl	8001b3c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fd f86e 	bl	8001b3c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f3      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b51      	ldr	r3, [pc, #324]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d063      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b44      	ldr	r3, [pc, #272]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1c7      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4937      	ldr	r1, [pc, #220]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	@ (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fd f827 	bl	8001b3c <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fd f823 	bl	8001b3c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1a8      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4925      	ldr	r1, [pc, #148]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b24      	ldr	r3, [pc, #144]	@ (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd f806 	bl	8001b3c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd f802 	bl	8001b3c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e187      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fc ffe6 	bl	8001b3c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fc ffe2 	bl	8001b3c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e167      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fc ffcf 	bl	8001b3c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fc ffcb 	bl	8001b3c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d907      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e150      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470000 	.word	0x42470000
 8004bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ea      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8097 	beq.w	8004d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b81      	ldr	r3, [pc, #516]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	4b7d      	ldr	r3, [pc, #500]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b77      	ldr	r3, [pc, #476]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b74      	ldr	r3, [pc, #464]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a73      	ldr	r2, [pc, #460]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fc ff8b 	bl	8001b3c <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fc ff87 	bl	8001b3c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e10c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2ea>
 8004c50:	4b64      	ldr	r3, [pc, #400]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a63      	ldr	r2, [pc, #396]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x30c>
 8004c66:	4b5f      	ldr	r3, [pc, #380]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c72:	4b5c      	ldr	r3, [pc, #368]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	4a5b      	ldr	r2, [pc, #364]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c80:	4b58      	ldr	r3, [pc, #352]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c84:	4a57      	ldr	r2, [pc, #348]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8c:	4b55      	ldr	r3, [pc, #340]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	4a54      	ldr	r2, [pc, #336]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fc ff4c 	bl	8001b3c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fc ff48 	bl	8001b3c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0cb      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b49      	ldr	r3, [pc, #292]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x334>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fc ff36 	bl	8001b3c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fc ff32 	bl	8001b3c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0b5      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	4a38      	ldr	r2, [pc, #224]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a1 	beq.w	8004e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d12:	4b34      	ldr	r3, [pc, #208]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d05c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d141      	bne.n	8004daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b31      	ldr	r3, [pc, #196]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fc ff06 	bl	8001b3c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fc ff02 	bl	8001b3c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	491b      	ldr	r1, [pc, #108]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fc fedb 	bl	8001b3c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fc fed7 	bl	8001b3c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e05c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x416>
 8004da8:	e054      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fc fec4 	bl	8001b3c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fc fec0 	bl	8001b3c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e045      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x444>
 8004dd6:	e03d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e038      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d121      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0cc      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b68      	ldr	r3, [pc, #416]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90c      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b65      	ldr	r3, [pc, #404]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d119      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3b      	ldr	r3, [pc, #236]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e067      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4934      	ldr	r1, [pc, #208]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7fc fdf2 	bl	8001b3c <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fc fdee 	bl	8001b3c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b25      	ldr	r3, [pc, #148]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20c      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b22      	ldr	r3, [pc, #136]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fc fd52 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00
 8005020:	40023800 	.word	0x40023800
 8005024:	0800dab4 	.word	0x0800dab4
 8005028:	200004c4 	.word	0x200004c4
 800502c:	200004c8 	.word	0x200004c8

08005030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	b094      	sub	sp, #80	@ 0x50
 8005036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	647b      	str	r3, [r7, #68]	@ 0x44
 800503c:	2300      	movs	r3, #0
 800503e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005048:	4b79      	ldr	r3, [pc, #484]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d00d      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x40>
 8005054:	2b08      	cmp	r3, #8
 8005056:	f200 80e1 	bhi.w	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x34>
 800505e:	2b04      	cmp	r3, #4
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x3a>
 8005062:	e0db      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b73      	ldr	r3, [pc, #460]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005068:	e0db      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800506a:	4b73      	ldr	r3, [pc, #460]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x208>)
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800506e:	e0d8      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005070:	4b6f      	ldr	r3, [pc, #444]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800507a:	4b6d      	ldr	r3, [pc, #436]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b6a      	ldr	r3, [pc, #424]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	2200      	movs	r2, #0
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005098:	633b      	str	r3, [r7, #48]	@ 0x30
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
 800509e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	0159      	lsls	r1, r3, #5
 80050b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b4:	0150      	lsls	r0, r2, #5
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4621      	mov	r1, r4
 80050bc:	1a51      	subs	r1, r2, r1
 80050be:	6139      	str	r1, [r7, #16]
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb63 0301 	sbc.w	r3, r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	018b      	lsls	r3, r1, #6
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050de:	4651      	mov	r1, sl
 80050e0:	018a      	lsls	r2, r1, #6
 80050e2:	4651      	mov	r1, sl
 80050e4:	ebb2 0801 	subs.w	r8, r2, r1
 80050e8:	4659      	mov	r1, fp
 80050ea:	eb63 0901 	sbc.w	r9, r3, r1
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005102:	4690      	mov	r8, r2
 8005104:	4699      	mov	r9, r3
 8005106:	4623      	mov	r3, r4
 8005108:	eb18 0303 	adds.w	r3, r8, r3
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	462b      	mov	r3, r5
 8005110:	eb49 0303 	adc.w	r3, r9, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005122:	4629      	mov	r1, r5
 8005124:	024b      	lsls	r3, r1, #9
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800512c:	4621      	mov	r1, r4
 800512e:	024a      	lsls	r2, r1, #9
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800513c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005140:	f7fb f89e 	bl	8000280 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800514c:	e058      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	2200      	movs	r2, #0
 8005156:	4618      	mov	r0, r3
 8005158:	4611      	mov	r1, r2
 800515a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
 8005164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	0159      	lsls	r1, r3, #5
 8005176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800517a:	0150      	lsls	r0, r2, #5
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4641      	mov	r1, r8
 8005182:	ebb2 0a01 	subs.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb63 0b01 	sbc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800519c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051a0:	ebb2 040a 	subs.w	r4, r2, sl
 80051a4:	eb63 050b 	sbc.w	r5, r3, fp
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	00eb      	lsls	r3, r5, #3
 80051b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	18e3      	adds	r3, r4, r3
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	464b      	mov	r3, r9
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d6:	4629      	mov	r1, r5
 80051d8:	028b      	lsls	r3, r1, #10
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051e0:	4621      	mov	r1, r4
 80051e2:	028a      	lsls	r2, r1, #10
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	f7fb f844 	bl	8000280 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	3301      	adds	r3, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005210:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800521a:	e002      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005224:	4618      	mov	r0, r3
 8005226:	3750      	adds	r7, #80	@ 0x50
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	00f42400 	.word	0x00f42400
 8005238:	007a1200 	.word	0x007a1200

0800523c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005240:	4b03      	ldr	r3, [pc, #12]	@ (8005250 <HAL_RCC_GetHCLKFreq+0x14>)
 8005242:	681b      	ldr	r3, [r3, #0]
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	200004c4 	.word	0x200004c4

08005254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005258:	f7ff fff0 	bl	800523c <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	0a9b      	lsrs	r3, r3, #10
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	@ (8005278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	0800dac4 	.word	0x0800dac4

0800527c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d035      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052a4:	4b67      	ldr	r3, [pc, #412]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052aa:	f7fc fc47 	bl	8001b3c <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052b2:	f7fc fc43 	bl	8001b3c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e0ba      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c4:	4b60      	ldr	r3, [pc, #384]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	019a      	lsls	r2, r3, #6
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	495a      	ldr	r1, [pc, #360]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e4:	4b57      	ldr	r3, [pc, #348]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ea:	f7fc fc27 	bl	8001b3c <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052f2:	f7fc fc23 	bl	8001b3c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e09a      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	4b50      	ldr	r3, [pc, #320]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8083 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b49      	ldr	r3, [pc, #292]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	4a48      	ldr	r2, [pc, #288]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	@ 0x40
 800532e:	4b46      	ldr	r3, [pc, #280]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800533a:	4b44      	ldr	r3, [pc, #272]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a43      	ldr	r2, [pc, #268]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005346:	f7fc fbf9 	bl	8001b3c <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fc fbf5 	bl	8001b3c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e06c      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005360:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800536c:	4b36      	ldr	r3, [pc, #216]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005374:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d028      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005392:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005394:	4b2e      	ldr	r3, [pc, #184]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800539a:	4b2d      	ldr	r3, [pc, #180]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053a0:	4a29      	ldr	r2, [pc, #164]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053a6:	4b28      	ldr	r3, [pc, #160]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d114      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fc fbc3 	bl	8001b3c <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fc fbbf 	bl	8001b3c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e034      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ee      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e8:	d10d      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053ea:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fe:	4912      	ldr	r1, [pc, #72]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]
 8005404:	e005      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005406:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4a0f      	ldr	r2, [pc, #60]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800540c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005410:	6093      	str	r3, [r2, #8]
 8005412:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005414:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541e:	490a      	ldr	r1, [pc, #40]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7c1a      	ldrb	r2, [r3, #16]
 8005434:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005436:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	42470068 	.word	0x42470068
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000
 8005450:	42470e40 	.word	0x42470e40
 8005454:	424711e0 	.word	0x424711e0

08005458 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e066      	b.n	800553c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	7f5b      	ldrb	r3, [r3, #29]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fb ffb0 	bl	80013e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	22ca      	movs	r2, #202	@ 0xca
 8005490:	625a      	str	r2, [r3, #36]	@ 0x24
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2253      	movs	r2, #83	@ 0x53
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb2a 	bl	8005af4 <RTC_EnterInitMode>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d12c      	bne.n	8005504 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80054b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6899      	ldr	r1, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68d2      	ldr	r2, [r2, #12]
 80054e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6919      	ldr	r1, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	041a      	lsls	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb31 	bl	8005b62 <RTC_ExitInitMode>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005518:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	22ff      	movs	r2, #255	@ 0xff
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	7f1b      	ldrb	r3, [r3, #28]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_RTC_SetTime+0x1c>
 800555c:	2302      	movs	r3, #2
 800555e:	e087      	b.n	8005670 <HAL_RTC_SetTime+0x12c>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2202      	movs	r2, #2
 800556a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d126      	bne.n	80055c0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fb0e 	bl	8005bac <RTC_ByteToBcd2>
 8005590:	4603      	mov	r3, r0
 8005592:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fb07 	bl	8005bac <RTC_ByteToBcd2>
 800559e:	4603      	mov	r3, r0
 80055a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055a2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	789b      	ldrb	r3, [r3, #2]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 faff 	bl	8005bac <RTC_ByteToBcd2>
 80055ae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e018      	b.n	80055f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055e0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	78db      	ldrb	r3, [r3, #3]
 80055ec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	22ca      	movs	r2, #202	@ 0xca
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2253      	movs	r2, #83	@ 0x53
 8005600:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fa76 	bl	8005af4 <RTC_EnterInitMode>
 8005608:	4603      	mov	r3, r0
 800560a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d120      	bne.n	8005654 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800561c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005620:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005630:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6899      	ldr	r1, [r3, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fa89 	bl	8005b62 <RTC_ExitInitMode>
 8005650:	4603      	mov	r3, r0
 8005652:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	22ff      	movs	r2, #255	@ 0xff
 8005666:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	771a      	strb	r2, [r3, #28]

  return status;
 800566e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd90      	pop	{r4, r7, pc}

08005678 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	7f1b      	ldrb	r3, [r3, #28]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_RTC_SetDate+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e071      	b.n	8005778 <HAL_RTC_SetDate+0x100>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2202      	movs	r2, #2
 800569e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10e      	bne.n	80056c4 <HAL_RTC_SetDate+0x4c>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	330a      	adds	r3, #10
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d11c      	bne.n	8005704 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	78db      	ldrb	r3, [r3, #3]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa6c 	bl	8005bac <RTC_ByteToBcd2>
 80056d4:	4603      	mov	r3, r0
 80056d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fa65 	bl	8005bac <RTC_ByteToBcd2>
 80056e2:	4603      	mov	r3, r0
 80056e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	789b      	ldrb	r3, [r3, #2]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fa5d 	bl	8005bac <RTC_ByteToBcd2>
 80056f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e00e      	b.n	8005722 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	78db      	ldrb	r3, [r3, #3]
 8005708:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005710:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005716:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	22ca      	movs	r2, #202	@ 0xca
 8005728:	625a      	str	r2, [r3, #36]	@ 0x24
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2253      	movs	r2, #83	@ 0x53
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f9de 	bl	8005af4 <RTC_EnterInitMode>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800574c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005750:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fa05 	bl	8005b62 <RTC_ExitInitMode>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	22ff      	movs	r2, #255	@ 0xff
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]

  return status;
 8005776:	7cfb      	ldrb	r3, [r7, #19]
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b089      	sub	sp, #36	@ 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800578c:	4b9a      	ldr	r3, [pc, #616]	@ (80059f8 <HAL_RTC_SetAlarm_IT+0x278>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a9a      	ldr	r2, [pc, #616]	@ (80059fc <HAL_RTC_SetAlarm_IT+0x27c>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0adb      	lsrs	r3, r3, #11
 8005798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	7f1b      	ldrb	r3, [r3, #28]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_RTC_SetAlarm_IT+0x36>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e11c      	b.n	80059f0 <HAL_RTC_SetAlarm_IT+0x270>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2202      	movs	r2, #2
 80057c0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d137      	bne.n	8005838 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f9e3 	bl	8005bac <RTC_ByteToBcd2>
 80057e6:	4603      	mov	r3, r0
 80057e8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f9dc 	bl	8005bac <RTC_ByteToBcd2>
 80057f4:	4603      	mov	r3, r0
 80057f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80057f8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f9d4 	bl	8005bac <RTC_ByteToBcd2>
 8005804:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005806:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005810:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f9c6 	bl	8005bac <RTC_ByteToBcd2>
 8005820:	4603      	mov	r3, r0
 8005822:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005824:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800582c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005832:	4313      	orrs	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e023      	b.n	8005880 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005858:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800585e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	78db      	ldrb	r3, [r3, #3]
 8005864:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005866:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800586e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005870:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005876:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800587c:	4313      	orrs	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	22ca      	movs	r2, #202	@ 0xca
 8005892:	625a      	str	r2, [r3, #36]	@ 0x24
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2253      	movs	r2, #83	@ 0x53
 800589a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a4:	d141      	bne.n	800592a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058b4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80058c6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	617a      	str	r2, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	22ff      	movs	r2, #255	@ 0xff
 80058d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2203      	movs	r2, #3
 80058de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e082      	b.n	80059f0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0e7      	beq.n	80058c8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005916:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	e04b      	b.n	80059c2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005938:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800594a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800594c:	4b2a      	ldr	r3, [pc, #168]	@ (80059f8 <HAL_RTC_SetAlarm_IT+0x278>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <HAL_RTC_SetAlarm_IT+0x27c>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0adb      	lsrs	r3, r3, #11
 8005958:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	617a      	str	r2, [r7, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	22ff      	movs	r2, #255	@ 0xff
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2203      	movs	r2, #3
 8005978:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e035      	b.n	80059f0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0e7      	beq.n	8005962 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059c0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80059c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <HAL_RTC_SetAlarm_IT+0x280>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a00 <HAL_RTC_SetAlarm_IT+0x280>)
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059cc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80059ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <HAL_RTC_SetAlarm_IT+0x280>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a00 <HAL_RTC_SetAlarm_IT+0x280>)
 80059d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	22ff      	movs	r2, #255	@ 0xff
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3724      	adds	r7, #36	@ 0x24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd90      	pop	{r4, r7, pc}
 80059f8:	200004c4 	.word	0x200004c4
 80059fc:	10624dd3 	.word	0x10624dd3
 8005a00:	40013c00 	.word	0x40013c00

08005a04 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f831 	bl	8005a90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005a3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d012      	beq.n	8005a74 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8c2 	bl	8005be6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005a72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005a74:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <HAL_RTC_AlarmIRQHandler+0x88>)
 8005a76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a7a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	775a      	strb	r2, [r3, #29]
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40013c00 	.word	0x40013c00

08005a90 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005abe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac0:	f7fc f83c 	bl	8001b3c <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ac6:	e009      	b.n	8005adc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ac8:	f7fc f838 	bl	8001b3c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ad6:	d901      	bls.n	8005adc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e007      	b.n	8005aec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ee      	beq.n	8005ac8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d122      	bne.n	8005b58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b22:	f7fc f80b 	bl	8001b3c <HAL_GetTick>
 8005b26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b28:	e00c      	b.n	8005b44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b2a:	f7fc f807 	bl	8001b3c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b38:	d904      	bls.n	8005b44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <RTC_EnterInitMode+0x64>
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d1e8      	bne.n	8005b2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ff89 	bl	8005aa4 <HAL_RTC_WaitForSynchro>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005bba:	e005      	b.n	8005bc8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	3b0a      	subs	r3, #10
 8005bc6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b09      	cmp	r3, #9
 8005bcc:	d8f6      	bhi.n	8005bbc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b2db      	uxtb	r3, r3
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e07b      	b.n	8005d04 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c1c:	d009      	beq.n	8005c32 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	61da      	str	r2, [r3, #28]
 8005c24:	e005      	b.n	8005c32 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb fbfd 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	ea42 0103 	orr.w	r1, r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	f003 0104 	and.w	r1, r3, #4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	f003 0210 	and.w	r2, r3, #16
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_SPI_Transmit+0x22>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e126      	b.n	8005f7c <HAL_SPI_Transmit+0x270>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d36:	f7fb ff01 	bl	8001b3c <HAL_GetTick>
 8005d3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d50:	e10b      	b.n	8005f6a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_SPI_Transmit+0x52>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d62:	e102      	b.n	8005f6a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2203      	movs	r2, #3
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005daa:	d10f      	bne.n	8005dcc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d007      	beq.n	8005dea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df2:	d14b      	bne.n	8005e8c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Transmit+0xf6>
 8005dfc:	8afb      	ldrh	r3, [r7, #22]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d13e      	bne.n	8005e80 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e26:	e02b      	b.n	8005e80 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d112      	bne.n	8005e5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e5a:	e011      	b.n	8005e80 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7fb fe6e 	bl	8001b3c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d803      	bhi.n	8005e74 <HAL_SPI_Transmit+0x168>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_Transmit+0x16e>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e7e:	e074      	b.n	8005f6a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ce      	bne.n	8005e28 <HAL_SPI_Transmit+0x11c>
 8005e8a:	e04c      	b.n	8005f26 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_SPI_Transmit+0x18e>
 8005e94:	8afb      	ldrh	r3, [r7, #22]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d140      	bne.n	8005f1c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ec0:	e02c      	b.n	8005f1c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d113      	bne.n	8005ef8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ef6:	e011      	b.n	8005f1c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef8:	f7fb fe20 	bl	8001b3c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d803      	bhi.n	8005f10 <HAL_SPI_Transmit+0x204>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d102      	bne.n	8005f16 <HAL_SPI_Transmit+0x20a>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f1a:	e026      	b.n	8005f6a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1cd      	bne.n	8005ec2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fbcc 	bl	80066c8 <SPI_EndRxTxTransaction>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e000      	b.n	8005f6a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa0:	d112      	bne.n	8005fc8 <HAL_SPI_Receive+0x44>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2204      	movs	r2, #4
 8005fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8f1 	bl	80061a6 <HAL_SPI_TransmitReceive>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	e0ea      	b.n	800619e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_SPI_Receive+0x52>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e0e3      	b.n	800619e <HAL_SPI_Receive+0x21a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fde:	f7fb fdad 	bl	8001b3c <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ff4:	e0ca      	b.n	800618c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Receive+0x7e>
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006006:	e0c1      	b.n	800618c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2204      	movs	r2, #4
 800600c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604e:	d10f      	bne.n	8006070 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800605e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607a:	2b40      	cmp	r3, #64	@ 0x40
 800607c:	d007      	beq.n	800608e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800608c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d162      	bne.n	800615c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006096:	e02e      	b.n	80060f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d115      	bne.n	80060d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f103 020c 	add.w	r2, r3, #12
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060d0:	e011      	b.n	80060f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d2:	f7fb fd33 	bl	8001b3c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d803      	bhi.n	80060ea <HAL_SPI_Receive+0x166>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Receive+0x16c>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060f4:	e04a      	b.n	800618c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1cb      	bne.n	8006098 <HAL_SPI_Receive+0x114>
 8006100:	e031      	b.n	8006166 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d113      	bne.n	8006138 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	b292      	uxth	r2, r2
 800611c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006136:	e011      	b.n	800615c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006138:	f7fb fd00 	bl	8001b3c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d803      	bhi.n	8006150 <HAL_SPI_Receive+0x1cc>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Receive+0x1d2>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	75fb      	strb	r3, [r7, #23]
          goto error;
 800615a:	e017      	b.n	800618c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1cd      	bne.n	8006102 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fa46 	bl	80065fc <SPI_EndRxTransaction>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	75fb      	strb	r3, [r7, #23]
 8006188:	e000      	b.n	800618c <HAL_SPI_Receive+0x208>
  }

error :
 800618a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08c      	sub	sp, #48	@ 0x30
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x26>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e18a      	b.n	80064e2 <HAL_SPI_TransmitReceive+0x33c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d4:	f7fb fcb2 	bl	8001b3c <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d00f      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061fc:	d107      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
 8006206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800620a:	2b04      	cmp	r3, #4
 800620c:	d003      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006214:	e15b      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800622e:	e14e      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b04      	cmp	r3, #4
 800623a:	d003      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2205      	movs	r2, #5
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	887a      	ldrh	r2, [r7, #2]
 8006266:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	887a      	ldrh	r2, [r7, #2]
 800626c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	d007      	beq.n	8006298 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a0:	d178      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x10a>
 80062aa:	8b7b      	ldrh	r3, [r7, #26]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d166      	bne.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d4:	e053      	b.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d11b      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d113      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d119      	bne.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d014      	beq.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	b292      	uxth	r2, r2
 8006340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800635a:	2301      	movs	r3, #1
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800635e:	f7fb fbed 	bl	8001b3c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800636a:	429a      	cmp	r2, r3
 800636c:	d807      	bhi.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d003      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800637c:	e0a7      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1a6      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1a1      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006392:	e07c      	b.n	800648e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x1fc>
 800639c:	8b7b      	ldrh	r3, [r7, #26]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d16b      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c8:	e057      	b.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11c      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d114      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d119      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006454:	f7fb fb72 	bl	8001b3c <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006460:	429a      	cmp	r2, r3
 8006462:	d803      	bhi.n	800646c <HAL_SPI_TransmitReceive+0x2c6>
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d102      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x2cc>
 800646c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006478:	e029      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1a2      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d19d      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800648e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006490:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f918 	bl	80066c8 <SPI_EndRxTxTransaction>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80064aa:	e010      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e000      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80064de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	@ 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064fc:	f7fb fb1e 	bl	8001b3c <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4413      	add	r3, r2
 800650a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800650c:	f7fb fb16 	bl	8001b3c <HAL_GetTick>
 8006510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006512:	4b39      	ldr	r3, [pc, #228]	@ (80065f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	015b      	lsls	r3, r3, #5
 8006518:	0d1b      	lsrs	r3, r3, #20
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006522:	e054      	b.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d050      	beq.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800652c:	f7fb fb06 	bl	8001b3c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	429a      	cmp	r2, r3
 800653a:	d902      	bls.n	8006542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d13d      	bne.n	80065be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800655a:	d111      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006564:	d004      	beq.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656e:	d107      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800657e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006588:	d10f      	bne.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e017      	b.n	80065ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d19b      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	200004c4 	.word	0x200004c4

080065fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006610:	d111      	bne.n	8006636 <SPI_EndRxTransaction+0x3a>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800661a:	d004      	beq.n	8006626 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006624:	d107      	bne.n	8006636 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006634:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800663e:	d12a      	bne.n	8006696 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d012      	beq.n	8006670 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	@ 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff49 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02d      	beq.n	80066bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e026      	b.n	80066be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	2101      	movs	r1, #1
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff ff36 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01a      	beq.n	80066bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e013      	b.n	80066be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	2101      	movs	r1, #1
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff23 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e000      	b.n	80066be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <SPI_EndRxTxTransaction+0x7c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <SPI_EndRxTxTransaction+0x80>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	0d5b      	lsrs	r3, r3, #21
 80066e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066e4:	fb02 f303 	mul.w	r3, r2, r3
 80066e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f2:	d112      	bne.n	800671a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	2180      	movs	r1, #128	@ 0x80
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff fef4 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e00f      	b.n	800673a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3b01      	subs	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006730:	2b80      	cmp	r3, #128	@ 0x80
 8006732:	d0f2      	beq.n	800671a <SPI_EndRxTxTransaction+0x52>
 8006734:	e000      	b.n	8006738 <SPI_EndRxTxTransaction+0x70>
        break;
 8006736:	bf00      	nop
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200004c4 	.word	0x200004c4
 8006748:	165e9f81 	.word	0x165e9f81

0800674c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e041      	b.n	80067e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fa ff16 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f000 fcf0 	bl	8007170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e044      	b.n	800688e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1e      	ldr	r2, [pc, #120]	@ (800689c <HAL_TIM_Base_Start_IT+0xb0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682e:	d013      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x6c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1a      	ldr	r2, [pc, #104]	@ (80068a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x6c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a19      	ldr	r2, [pc, #100]	@ (80068a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x6c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a17      	ldr	r2, [pc, #92]	@ (80068a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x6c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a16      	ldr	r2, [pc, #88]	@ (80068ac <HAL_TIM_Base_Start_IT+0xc0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d111      	bne.n	800687c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b06      	cmp	r3, #6
 8006868:	d010      	beq.n	800688c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	e007      	b.n	800688c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40014000 	.word	0x40014000

080068b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0201 	bic.w	r2, r2, #1
 80068c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <HAL_TIM_Base_Stop_IT+0x48>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	f240 4344 	movw	r3, #1092	@ 0x444
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <HAL_TIM_Base_Stop_IT+0x48>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e041      	b.n	80069a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f839 	bl	80069ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f000 fc0f 	bl	8007170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_TIM_PWM_Start+0x24>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e022      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d109      	bne.n	80069fe <HAL_TIM_PWM_Start+0x3e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	bf14      	ite	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	2300      	moveq	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	e015      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d109      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x58>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e008      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e068      	b.n	8006b04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x82>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a40:	e013      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x92>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a50:	e00b      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Start+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a60:	e003      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fe22 	bl	80076bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a23      	ldr	r2, [pc, #140]	@ (8006b0c <HAL_TIM_PWM_Start+0x14c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <HAL_TIM_PWM_Start+0x14c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_TIM_PWM_Start+0x10e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa4:	d013      	beq.n	8006ace <HAL_TIM_PWM_Start+0x10e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <HAL_TIM_PWM_Start+0x150>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_TIM_PWM_Start+0x10e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_TIM_PWM_Start+0x154>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_TIM_PWM_Start+0x10e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <HAL_TIM_PWM_Start+0x158>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIM_PWM_Start+0x10e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <HAL_TIM_PWM_Start+0x15c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d111      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b06      	cmp	r3, #6
 8006ade:	d010      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	e007      	b.n	8006b02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40014000 	.word	0x40014000

08006b20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fdc2 	bl	80076bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a29      	ldr	r2, [pc, #164]	@ (8006be4 <HAL_TIM_PWM_Stop+0xc4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d117      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10f      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Stop+0x92>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb0:	e013      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Stop+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc0:	e00b      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Stop+0xb2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd0:	e003      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40010000 	.word	0x40010000

08006be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0202 	mvn.w	r2, #2
 8006c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa81 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa73 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa84 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0204 	mvn.w	r2, #4
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa57 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa49 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa5a 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0208 	mvn.w	r2, #8
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa2d 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa1f 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa30 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d122      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d11b      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0210 	mvn.w	r2, #16
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2208      	movs	r2, #8
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa03 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006d2c:	e005      	b.n	8006d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9f5 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa06 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10e      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d107      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0201 	mvn.w	r2, #1
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9cf 	bl	800710a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d76:	2b80      	cmp	r3, #128	@ 0x80
 8006d78:	d10e      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d84:	2b80      	cmp	r3, #128	@ 0x80
 8006d86:	d107      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fd82 	bl	800789c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f9cb 	bl	800715a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0220 	mvn.w	r2, #32
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd4c 	bl	8007888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e0ae      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	f200 809f 	bhi.w	8006f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006f65 	.word	0x08006f65
 8006e34:	08006f65 	.word	0x08006f65
 8006e38:	08006f65 	.word	0x08006f65
 8006e3c:	08006ea1 	.word	0x08006ea1
 8006e40:	08006f65 	.word	0x08006f65
 8006e44:	08006f65 	.word	0x08006f65
 8006e48:	08006f65 	.word	0x08006f65
 8006e4c:	08006ee3 	.word	0x08006ee3
 8006e50:	08006f65 	.word	0x08006f65
 8006e54:	08006f65 	.word	0x08006f65
 8006e58:	08006f65 	.word	0x08006f65
 8006e5c:	08006f23 	.word	0x08006f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fa02 	bl	8007270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0208 	orr.w	r2, r2, #8
 8006e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0204 	bic.w	r2, r2, #4
 8006e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	619a      	str	r2, [r3, #24]
      break;
 8006e9e:	e064      	b.n	8006f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fa48 	bl	800733c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6999      	ldr	r1, [r3, #24]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	021a      	lsls	r2, r3, #8
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	619a      	str	r2, [r3, #24]
      break;
 8006ee0:	e043      	b.n	8006f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fa93 	bl	8007414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0208 	orr.w	r2, r2, #8
 8006efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0204 	bic.w	r2, r2, #4
 8006f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69d9      	ldr	r1, [r3, #28]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	61da      	str	r2, [r3, #28]
      break;
 8006f20:	e023      	b.n	8006f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fadd 	bl	80074e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69d9      	ldr	r1, [r3, #28]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	021a      	lsls	r2, r3, #8
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	61da      	str	r2, [r3, #28]
      break;
 8006f62:	e002      	b.n	8006f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]
      break;
 8006f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_TIM_ConfigClockSource+0x1c>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e0b4      	b.n	8007102 <HAL_TIM_ConfigClockSource+0x186>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd0:	d03e      	beq.n	8007050 <HAL_TIM_ConfigClockSource+0xd4>
 8006fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd6:	f200 8087 	bhi.w	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fde:	f000 8086 	beq.w	80070ee <HAL_TIM_ConfigClockSource+0x172>
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe6:	d87f      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe8:	2b70      	cmp	r3, #112	@ 0x70
 8006fea:	d01a      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0xa6>
 8006fec:	2b70      	cmp	r3, #112	@ 0x70
 8006fee:	d87b      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff0:	2b60      	cmp	r3, #96	@ 0x60
 8006ff2:	d050      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x11a>
 8006ff4:	2b60      	cmp	r3, #96	@ 0x60
 8006ff6:	d877      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff8:	2b50      	cmp	r3, #80	@ 0x50
 8006ffa:	d03c      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0xfa>
 8006ffc:	2b50      	cmp	r3, #80	@ 0x50
 8006ffe:	d873      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b40      	cmp	r3, #64	@ 0x40
 8007002:	d058      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007004:	2b40      	cmp	r3, #64	@ 0x40
 8007006:	d86f      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b30      	cmp	r3, #48	@ 0x30
 800700a:	d064      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x15a>
 800700c:	2b30      	cmp	r3, #48	@ 0x30
 800700e:	d86b      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b20      	cmp	r3, #32
 8007012:	d060      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007014:	2b20      	cmp	r3, #32
 8007016:	d867      	bhi.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d05c      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x15a>
 800701c:	2b10      	cmp	r3, #16
 800701e:	d05a      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007020:	e062      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	6899      	ldr	r1, [r3, #8]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f000 fb23 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	609a      	str	r2, [r3, #8]
      break;
 800704e:	e04f      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	6899      	ldr	r1, [r3, #8]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f000 fb0c 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007072:	609a      	str	r2, [r3, #8]
      break;
 8007074:	e03c      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6859      	ldr	r1, [r3, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	461a      	mov	r2, r3
 8007084:	f000 fa80 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2150      	movs	r1, #80	@ 0x50
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fad9 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8007094:	e02c      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 fa9f 	bl	80075e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2160      	movs	r1, #96	@ 0x60
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fac9 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80070b4:	e01c      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6859      	ldr	r1, [r3, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f000 fa60 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2140      	movs	r1, #64	@ 0x40
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fab9 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80070d4:	e00c      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f000 fab0 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80070e6:	e003      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
      break;
 80070ec:	e000      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a34      	ldr	r2, [pc, #208]	@ (8007254 <TIM_Base_SetConfig+0xe4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00f      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718e:	d00b      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a31      	ldr	r2, [pc, #196]	@ (8007258 <TIM_Base_SetConfig+0xe8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d007      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a30      	ldr	r2, [pc, #192]	@ (800725c <TIM_Base_SetConfig+0xec>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007260 <TIM_Base_SetConfig+0xf0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d108      	bne.n	80071ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a25      	ldr	r2, [pc, #148]	@ (8007254 <TIM_Base_SetConfig+0xe4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01b      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c8:	d017      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a22      	ldr	r2, [pc, #136]	@ (8007258 <TIM_Base_SetConfig+0xe8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a21      	ldr	r2, [pc, #132]	@ (800725c <TIM_Base_SetConfig+0xec>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00f      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a20      	ldr	r2, [pc, #128]	@ (8007260 <TIM_Base_SetConfig+0xf0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007264 <TIM_Base_SetConfig+0xf4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007268 <TIM_Base_SetConfig+0xf8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1d      	ldr	r2, [pc, #116]	@ (800726c <TIM_Base_SetConfig+0xfc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d108      	bne.n	800720c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a08      	ldr	r2, [pc, #32]	@ (8007254 <TIM_Base_SetConfig+0xe4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d103      	bne.n	8007240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	615a      	str	r2, [r3, #20]
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40010000 	.word	0x40010000
 8007258:	40000400 	.word	0x40000400
 800725c:	40000800 	.word	0x40000800
 8007260:	40000c00 	.word	0x40000c00
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 0302 	bic.w	r3, r3, #2
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <TIM_OC1_SetConfig+0xc8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10c      	bne.n	80072e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0308 	bic.w	r3, r3, #8
 80072d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a13      	ldr	r2, [pc, #76]	@ (8007338 <TIM_OC1_SetConfig+0xc8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d111      	bne.n	8007312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40010000 	.word	0x40010000

0800733c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f023 0210 	bic.w	r2, r3, #16
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0320 	bic.w	r3, r3, #32
 8007386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a1e      	ldr	r2, [pc, #120]	@ (8007410 <TIM_OC2_SetConfig+0xd4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d10d      	bne.n	80073b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <TIM_OC2_SetConfig+0xd4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d113      	bne.n	80073e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000

08007414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800745c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <TIM_OC3_SetConfig+0xd0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d10d      	bne.n	800748e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800748c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <TIM_OC3_SetConfig+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d113      	bne.n	80074be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800749c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	621a      	str	r2, [r3, #32]
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40010000 	.word	0x40010000

080074e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	031b      	lsls	r3, r3, #12
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a10      	ldr	r2, [pc, #64]	@ (8007584 <TIM_OC4_SetConfig+0x9c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d109      	bne.n	800755c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800754e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	019b      	lsls	r3, r3, #6
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	621a      	str	r2, [r3, #32]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40010000 	.word	0x40010000

08007588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f023 030a 	bic.w	r3, r3, #10
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b087      	sub	sp, #28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	f043 0307 	orr.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	431a      	orrs	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2201      	movs	r2, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	43db      	mvns	r3, r3
 80076de:	401a      	ands	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800771c:	2302      	movs	r3, #2
 800771e:	e050      	b.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776c:	d013      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a16      	ldr	r2, [pc, #88]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a15      	ldr	r2, [pc, #84]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a13      	ldr	r2, [pc, #76]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d10c      	bne.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800779c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40014000 	.word	0x40014000

080077e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e03d      	b.n	800787c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b0:	b084      	sub	sp, #16
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	f107 001c 	add.w	r0, r7, #28
 80078be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d122      	bne.n	800790e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80078dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d105      	bne.n	8007902 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fbee 	bl	80090e4 <USB_CoreReset>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e01a      	b.n	8007944 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fbe2 	bl	80090e4 <USB_CoreReset>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	639a      	str	r2, [r3, #56]	@ 0x38
 8007936:	e005      	b.n	8007944 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	2b01      	cmp	r3, #1
 8007948:	d10b      	bne.n	8007962 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f043 0206 	orr.w	r2, r3, #6
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f043 0220 	orr.w	r2, r3, #32
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800796e:	b004      	add	sp, #16
 8007970:	4770      	bx	lr
	...

08007974 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d165      	bne.n	8007a54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4a41      	ldr	r2, [pc, #260]	@ (8007a90 <USB_SetTurnaroundTime+0x11c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d906      	bls.n	800799e <USB_SetTurnaroundTime+0x2a>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4a40      	ldr	r2, [pc, #256]	@ (8007a94 <USB_SetTurnaroundTime+0x120>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d202      	bcs.n	800799e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007998:	230f      	movs	r3, #15
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e062      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007a94 <USB_SetTurnaroundTime+0x120>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d306      	bcc.n	80079b4 <USB_SetTurnaroundTime+0x40>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007a98 <USB_SetTurnaroundTime+0x124>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d202      	bcs.n	80079b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079ae:	230e      	movs	r3, #14
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e057      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4a38      	ldr	r2, [pc, #224]	@ (8007a98 <USB_SetTurnaroundTime+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d306      	bcc.n	80079ca <USB_SetTurnaroundTime+0x56>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4a37      	ldr	r2, [pc, #220]	@ (8007a9c <USB_SetTurnaroundTime+0x128>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d202      	bcs.n	80079ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079c4:	230d      	movs	r3, #13
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e04c      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4a33      	ldr	r2, [pc, #204]	@ (8007a9c <USB_SetTurnaroundTime+0x128>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d306      	bcc.n	80079e0 <USB_SetTurnaroundTime+0x6c>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4a32      	ldr	r2, [pc, #200]	@ (8007aa0 <USB_SetTurnaroundTime+0x12c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d802      	bhi.n	80079e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079da:	230c      	movs	r3, #12
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	e041      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa0 <USB_SetTurnaroundTime+0x12c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d906      	bls.n	80079f6 <USB_SetTurnaroundTime+0x82>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa4 <USB_SetTurnaroundTime+0x130>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d802      	bhi.n	80079f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079f0:	230b      	movs	r3, #11
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e036      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa4 <USB_SetTurnaroundTime+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d906      	bls.n	8007a0c <USB_SetTurnaroundTime+0x98>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <USB_SetTurnaroundTime+0x134>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d802      	bhi.n	8007a0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a06:	230a      	movs	r3, #10
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	e02b      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4a26      	ldr	r2, [pc, #152]	@ (8007aa8 <USB_SetTurnaroundTime+0x134>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d906      	bls.n	8007a22 <USB_SetTurnaroundTime+0xae>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4a25      	ldr	r2, [pc, #148]	@ (8007aac <USB_SetTurnaroundTime+0x138>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d202      	bcs.n	8007a22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a1c:	2309      	movs	r3, #9
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e020      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4a21      	ldr	r2, [pc, #132]	@ (8007aac <USB_SetTurnaroundTime+0x138>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d306      	bcc.n	8007a38 <USB_SetTurnaroundTime+0xc4>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	@ (8007ab0 <USB_SetTurnaroundTime+0x13c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d802      	bhi.n	8007a38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a32:	2308      	movs	r3, #8
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e015      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab0 <USB_SetTurnaroundTime+0x13c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d906      	bls.n	8007a4e <USB_SetTurnaroundTime+0xda>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab4 <USB_SetTurnaroundTime+0x140>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d202      	bcs.n	8007a4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a48:	2307      	movs	r3, #7
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e00a      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a4e:	2306      	movs	r3, #6
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e007      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a5a:	2309      	movs	r3, #9
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a60:	2309      	movs	r3, #9
 8007a62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	029b      	lsls	r3, r3, #10
 8007a78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	00d8acbf 	.word	0x00d8acbf
 8007a94:	00e4e1c0 	.word	0x00e4e1c0
 8007a98:	00f42400 	.word	0x00f42400
 8007a9c:	01067380 	.word	0x01067380
 8007aa0:	011a499f 	.word	0x011a499f
 8007aa4:	01312cff 	.word	0x01312cff
 8007aa8:	014ca43f 	.word	0x014ca43f
 8007aac:	016e3600 	.word	0x016e3600
 8007ab0:	01a6ab1f 	.word	0x01a6ab1f
 8007ab4:	01e84800 	.word	0x01e84800

08007ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f043 0201 	orr.w	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d115      	bne.n	8007b4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f7fa f812 	bl	8001b54 <HAL_Delay>
      ms++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 fa45 	bl	8008fc6 <USB_GetMode>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d01e      	beq.n	8007b80 <USB_SetCurrentMode+0x84>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b31      	cmp	r3, #49	@ 0x31
 8007b46:	d9f0      	bls.n	8007b2a <USB_SetCurrentMode+0x2e>
 8007b48:	e01a      	b.n	8007b80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d115      	bne.n	8007b7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f7f9 fff9 	bl	8001b54 <HAL_Delay>
      ms++;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fa2c 	bl	8008fc6 <USB_GetMode>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <USB_SetCurrentMode+0x84>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b31      	cmp	r3, #49	@ 0x31
 8007b78:	d9f0      	bls.n	8007b5c <USB_SetCurrentMode+0x60>
 8007b7a:	e001      	b.n	8007b80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e005      	b.n	8007b8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b32      	cmp	r3, #50	@ 0x32
 8007b84:	d101      	bne.n	8007b8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b94:	b084      	sub	sp, #16
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	e009      	b.n	8007bc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3340      	adds	r3, #64	@ 0x40
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b0e      	cmp	r3, #14
 8007bcc:	d9f2      	bls.n	8007bb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11c      	bne.n	8007c0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be2:	f043 0302 	orr.w	r3, r3, #2
 8007be6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c0c:	e00b      	b.n	8007c26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c40:	461a      	mov	r2, r3
 8007c42:	680b      	ldr	r3, [r1, #0]
 8007c44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10c      	bne.n	8007c66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c52:	2100      	movs	r1, #0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f965 	bl	8007f24 <USB_SetDevSpeed>
 8007c5a:	e008      	b.n	8007c6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f960 	bl	8007f24 <USB_SetDevSpeed>
 8007c64:	e003      	b.n	8007c6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c66:	2103      	movs	r1, #3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f95b 	bl	8007f24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c6e:	2110      	movs	r1, #16
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8f3 	bl	8007e5c <USB_FlushTxFifo>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f91f 	bl	8007ec4 <USB_FlushRxFifo>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c96:	461a      	mov	r2, r3
 8007c98:	2300      	movs	r3, #0
 8007c9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	e043      	b.n	8007d42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd0:	d118      	bne.n	8007d04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	e013      	b.n	8007d16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e008      	b.n	8007d16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d10:	461a      	mov	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d22:	461a      	mov	r2, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d34:	461a      	mov	r2, r3
 8007d36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3b7      	bcc.n	8007cba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	e043      	b.n	8007dd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d66:	d118      	bne.n	8007d9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e013      	b.n	8007dac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d90:	461a      	mov	r2, r3
 8007d92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	e008      	b.n	8007dac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da6:	461a      	mov	r2, r3
 8007da8:	2300      	movs	r3, #0
 8007daa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db8:	461a      	mov	r2, r3
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007dd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d3b7      	bcc.n	8007d50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f043 0210 	orr.w	r2, r3, #16
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <USB_DevInit+0x2c4>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	f043 0208 	orr.w	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d107      	bne.n	8007e48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e40:	f043 0304 	orr.w	r3, r3, #4
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	803c3800 	.word	0x803c3800

08007e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a13      	ldr	r2, [pc, #76]	@ (8007ec0 <USB_FlushTxFifo+0x64>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d901      	bls.n	8007e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e01b      	b.n	8007eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	daf2      	bge.n	8007e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	019b      	lsls	r3, r3, #6
 8007e8c:	f043 0220 	orr.w	r2, r3, #32
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a08      	ldr	r2, [pc, #32]	@ (8007ec0 <USB_FlushTxFifo+0x64>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d901      	bls.n	8007ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e006      	b.n	8007eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d0f0      	beq.n	8007e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	00030d40 	.word	0x00030d40

08007ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a11      	ldr	r2, [pc, #68]	@ (8007f20 <USB_FlushRxFifo+0x5c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e018      	b.n	8007f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	daf2      	bge.n	8007ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <USB_FlushRxFifo+0x5c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d901      	bls.n	8007f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e006      	b.n	8007f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d0f0      	beq.n	8007ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	00030d40 	.word	0x00030d40

08007f24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f44:	4313      	orrs	r3, r2
 8007f46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0306 	and.w	r3, r3, #6
 8007f6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
 8007f7a:	e00a      	b.n	8007f92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d002      	beq.n	8007f88 <USB_GetDevSpeed+0x32>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b06      	cmp	r3, #6
 8007f86:	d102      	bne.n	8007f8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	e001      	b.n	8007f92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f8e:	230f      	movs	r3, #15
 8007f90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d13a      	bne.n	8008032 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	2101      	movs	r1, #1
 8007fce:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d155      	bne.n	80080a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008010:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	059b      	lsls	r3, r3, #22
 8008016:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008018:	4313      	orrs	r3, r2
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	440a      	add	r2, r1
 8008022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	e036      	b.n	80080a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008038:	69da      	ldr	r2, [r3, #28]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	2101      	movs	r1, #1
 8008044:	fa01 f303 	lsl.w	r3, r1, r3
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008050:	4313      	orrs	r3, r2
 8008052:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d11a      	bne.n	80080a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	791b      	ldrb	r3, [r3, #4]
 8008084:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008086:	430b      	orrs	r3, r1
 8008088:	4313      	orrs	r3, r2
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d161      	bne.n	8008190 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080e2:	d11f      	bne.n	8008124 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008102:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	440a      	add	r2, r1
 800811a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800811e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	2101      	movs	r1, #1
 8008136:	fa01 f303 	lsl.w	r3, r1, r3
 800813a:	b29b      	uxth	r3, r3
 800813c:	43db      	mvns	r3, r3
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008144:	4013      	ands	r3, r2
 8008146:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	2101      	movs	r1, #1
 800815a:	fa01 f303 	lsl.w	r3, r1, r3
 800815e:	b29b      	uxth	r3, r3
 8008160:	43db      	mvns	r3, r3
 8008162:	68f9      	ldr	r1, [r7, #12]
 8008164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008168:	4013      	ands	r3, r2
 800816a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	0159      	lsls	r1, r3, #5
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	440b      	add	r3, r1
 8008182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008186:	4619      	mov	r1, r3
 8008188:	4b35      	ldr	r3, [pc, #212]	@ (8008260 <USB_DeactivateEndpoint+0x1b0>)
 800818a:	4013      	ands	r3, r2
 800818c:	600b      	str	r3, [r1, #0]
 800818e:	e060      	b.n	8008252 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081a6:	d11f      	bne.n	80081e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	43db      	mvns	r3, r3
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008208:	4013      	ands	r3, r2
 800820a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	2101      	movs	r1, #1
 800821e:	fa01 f303 	lsl.w	r3, r1, r3
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	43db      	mvns	r3, r3
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800822c:	4013      	ands	r3, r2
 800822e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	0159      	lsls	r1, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	440b      	add	r3, r1
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	4619      	mov	r1, r3
 800824c:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <USB_DeactivateEndpoint+0x1b4>)
 800824e:	4013      	ands	r3, r2
 8008250:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	ec337800 	.word	0xec337800
 8008264:	eff37800 	.word	0xeff37800

08008268 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	@ 0x28
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b01      	cmp	r3, #1
 8008286:	f040 815c 	bne.w	8008542 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d132      	bne.n	80082f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f0:	0cdb      	lsrs	r3, r3, #19
 80082f2:	04db      	lsls	r3, r3, #19
 80082f4:	6113      	str	r3, [r2, #16]
 80082f6:	e074      	b.n	80083e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008312:	0cdb      	lsrs	r3, r3, #19
 8008314:	04db      	lsls	r3, r3, #19
 8008316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	0151      	lsls	r1, r2, #5
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	440a      	add	r2, r1
 800832e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008332:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008336:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800833a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008348:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6999      	ldr	r1, [r3, #24]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	440b      	add	r3, r1
 8008354:	1e59      	subs	r1, r3, #1
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	fbb1 f3f3 	udiv	r3, r1, r3
 800835e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008360:	4b9d      	ldr	r3, [pc, #628]	@ (80085d8 <USB_EPStartXfer+0x370>)
 8008362:	400b      	ands	r3, r1
 8008364:	69b9      	ldr	r1, [r7, #24]
 8008366:	0148      	lsls	r0, r1, #5
 8008368:	69f9      	ldr	r1, [r7, #28]
 800836a:	4401      	add	r1, r0
 800836c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008370:	4313      	orrs	r3, r2
 8008372:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008380:	691a      	ldr	r2, [r3, #16]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838a:	69b9      	ldr	r1, [r7, #24]
 800838c:	0148      	lsls	r0, r1, #5
 800838e:	69f9      	ldr	r1, [r7, #28]
 8008390:	4401      	add	r1, r0
 8008392:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008396:	4313      	orrs	r3, r2
 8008398:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d11f      	bne.n	80083e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	0151      	lsls	r1, r2, #5
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	440a      	add	r2, r1
 80083b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083bc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80083c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d14b      	bne.n	8008480 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	461a      	mov	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	791b      	ldrb	r3, [r3, #4]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d128      	bne.n	800845e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d110      	bne.n	800843e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	440a      	add	r2, r1
 8008432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	e00f      	b.n	800845e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	440a      	add	r2, r1
 8008454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800845c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008478:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e133      	b.n	80086e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	0151      	lsls	r1, r2, #5
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	440a      	add	r2, r1
 8008496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800849a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800849e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	791b      	ldrb	r3, [r3, #4]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d015      	beq.n	80084d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 811b 	beq.w	80086e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	2101      	movs	r1, #1
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084ce:	4313      	orrs	r3, r2
 80084d0:	634b      	str	r3, [r1, #52]	@ 0x34
 80084d2:	e109      	b.n	80086e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d110      	bne.n	8008506 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	e00f      	b.n	8008526 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008524:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6919      	ldr	r1, [r3, #16]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	781a      	ldrb	r2, [r3, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	b298      	uxth	r0, r3
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 fade 	bl	8008afc <USB_WritePacket>
 8008540:	e0d2      	b.n	80086e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800855c:	0cdb      	lsrs	r3, r3, #19
 800855e:	04db      	lsls	r3, r3, #19
 8008560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800857c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008580:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008584:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d126      	bne.n	80085dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085a4:	69b9      	ldr	r1, [r7, #24]
 80085a6:	0148      	lsls	r0, r1, #5
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	4401      	add	r1, r0
 80085ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085b0:	4313      	orrs	r3, r2
 80085b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085d2:	6113      	str	r3, [r2, #16]
 80085d4:	e03a      	b.n	800864c <USB_EPStartXfer+0x3e4>
 80085d6:	bf00      	nop
 80085d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	1e5a      	subs	r2, r3, #1
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	8afa      	ldrh	r2, [r7, #22]
 80085f8:	fb03 f202 	mul.w	r2, r3, r2
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	04d9      	lsls	r1, r3, #19
 8008612:	4b38      	ldr	r3, [pc, #224]	@ (80086f4 <USB_EPStartXfer+0x48c>)
 8008614:	400b      	ands	r3, r1
 8008616:	69b9      	ldr	r1, [r7, #24]
 8008618:	0148      	lsls	r0, r1, #5
 800861a:	69f9      	ldr	r1, [r7, #28]
 800861c:	4401      	add	r1, r0
 800861e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008622:	4313      	orrs	r3, r2
 8008624:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800863c:	69b9      	ldr	r1, [r7, #24]
 800863e:	0148      	lsls	r0, r1, #5
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	4401      	add	r1, r0
 8008644:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008648:	4313      	orrs	r3, r2
 800864a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10d      	bne.n	800866e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6919      	ldr	r1, [r3, #16]
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866a:	460a      	mov	r2, r1
 800866c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	791b      	ldrb	r3, [r3, #4]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d128      	bne.n	80086c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008682:	2b00      	cmp	r3, #0
 8008684:	d110      	bne.n	80086a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	e00f      	b.n	80086c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	1ff80000 	.word	0x1ff80000

080086f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	2b01      	cmp	r3, #1
 8008716:	f040 80ce 	bne.w	80088b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d132      	bne.n	8008788 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800873c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008740:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008780:	0cdb      	lsrs	r3, r3, #19
 8008782:	04db      	lsls	r3, r3, #19
 8008784:	6113      	str	r3, [r2, #16]
 8008786:	e04e      	b.n	8008826 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a2:	0cdb      	lsrs	r3, r3, #19
 80087a4:	04db      	lsls	r3, r3, #19
 80087a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d903      	bls.n	80087e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008816:	6939      	ldr	r1, [r7, #16]
 8008818:	0148      	lsls	r0, r1, #5
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	4401      	add	r1, r0
 800881e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d11e      	bne.n	800886a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	461a      	mov	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	0151      	lsls	r1, r2, #5
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	440a      	add	r2, r1
 800885e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008862:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e097      	b.n	800899a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008884:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008888:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8083 	beq.w	800899a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800889a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	6979      	ldr	r1, [r7, #20]
 80088ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088b0:	4313      	orrs	r3, r2
 80088b2:	634b      	str	r3, [r1, #52]	@ 0x34
 80088b4:	e071      	b.n	800899a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088d0:	0cdb      	lsrs	r3, r3, #19
 80088d2:	04db      	lsls	r3, r3, #19
 80088d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	440a      	add	r2, r1
 8008928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800892c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893e:	691a      	ldr	r2, [r3, #16]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008948:	6939      	ldr	r1, [r7, #16]
 800894a:	0148      	lsls	r0, r1, #5
 800894c:	6979      	ldr	r1, [r7, #20]
 800894e:	4401      	add	r1, r0
 8008950:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008954:	4313      	orrs	r3, r2
 8008956:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d10d      	bne.n	800897a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d009      	beq.n	800897a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6919      	ldr	r1, [r3, #16]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008976:	460a      	mov	r2, r1
 8008978:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	440a      	add	r2, r1
 8008990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008994:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008998:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d14a      	bne.n	8008a5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089de:	f040 8086 	bne.w	8008aee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d902      	bls.n	8008a40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a3e:	e056      	b.n	8008aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a58:	d0e7      	beq.n	8008a2a <USB_EPStopXfer+0x82>
 8008a5a:	e048      	b.n	8008aee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a74:	d13b      	bne.n	8008aee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008abc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d902      	bls.n	8008ad4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ad2:	e00c      	b.n	8008aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aec:	d0e7      	beq.n	8008abe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4611      	mov	r1, r2
 8008b08:	461a      	mov	r2, r3
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	71fb      	strb	r3, [r7, #7]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d123      	bne.n	8008b6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b22:	88bb      	ldrh	r3, [r7, #4]
 8008b24:	3303      	adds	r3, #3
 8008b26:	089b      	lsrs	r3, r3, #2
 8008b28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	e018      	b.n	8008b62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	031a      	lsls	r2, r3, #12
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	3301      	adds	r3, #1
 8008b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d3e2      	bcc.n	8008b30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3724      	adds	r7, #36	@ 0x24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b08b      	sub	sp, #44	@ 0x2c
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	089b      	lsrs	r3, r3, #2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	623b      	str	r3, [r7, #32]
 8008ba2:	e014      	b.n	8008bce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	3301      	adds	r3, #1
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	623b      	str	r3, [r7, #32]
 8008bce:	6a3a      	ldr	r2, [r7, #32]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3e6      	bcc.n	8008ba4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bd6:	8bfb      	ldrh	r3, [r7, #30]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01e      	beq.n	8008c1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008be6:	461a      	mov	r2, r3
 8008be8:	f107 0310 	add.w	r3, r7, #16
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	701a      	strb	r2, [r3, #0]
      i++;
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	3301      	adds	r3, #1
 8008c06:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008c0e:	8bfb      	ldrh	r3, [r7, #30]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c14:	8bfb      	ldrh	r3, [r7, #30]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1ea      	bne.n	8008bf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	372c      	adds	r7, #44	@ 0x2c
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	785b      	ldrb	r3, [r3, #1]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d12c      	bne.n	8008c9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	db12      	blt.n	8008c7c <USB_EPSetStall+0x54>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00f      	beq.n	8008c7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	e02b      	b.n	8008cf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db12      	blt.n	8008cd6 <USB_EPSetStall+0xae>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00f      	beq.n	8008cd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	0151      	lsls	r1, r2, #5
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	440a      	add	r2, r1
 8008ccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	785b      	ldrb	r3, [r3, #1]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d128      	bne.n	8008d72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d003      	beq.n	8008d50 <USB_EPClearStall+0x4c>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	791b      	ldrb	r3, [r3, #4]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d138      	bne.n	8008dc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e027      	b.n	8008dc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	791b      	ldrb	r3, [r3, #4]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d003      	beq.n	8008da2 <USB_EPClearStall+0x9e>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	791b      	ldrb	r3, [r3, #4]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d10f      	bne.n	8008dc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008df2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008e04:	68f9      	ldr	r1, [r7, #12]
 8008e06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e4a:	f023 0302 	bic.w	r3, r3, #2
 8008e4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b085      	sub	sp, #20
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e8c:	f043 0302 	orr.w	r3, r3, #2
 8008e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b085      	sub	sp, #20
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	0c1b      	lsrs	r3, r3, #16
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	b29b      	uxth	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	01db      	lsls	r3, r3, #7
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	460b      	mov	r3, r1
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	333c      	adds	r3, #60	@ 0x3c
 800903e:	3304      	adds	r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4a26      	ldr	r2, [pc, #152]	@ (80090e0 <USB_EP0_OutStart+0xb8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d90a      	bls.n	8009062 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800905c:	d101      	bne.n	8009062 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	e037      	b.n	80090d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009068:	461a      	mov	r2, r3
 800906a:	2300      	movs	r3, #0
 800906c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800907c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009090:	f043 0318 	orr.w	r3, r3, #24
 8009094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80090a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090aa:	7afb      	ldrb	r3, [r7, #11]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d10f      	bne.n	80090d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090b6:	461a      	mov	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80090ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	4f54300a 	.word	0x4f54300a

080090e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4a13      	ldr	r2, [pc, #76]	@ (8009148 <USB_CoreReset+0x64>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e01b      	b.n	800913a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	daf2      	bge.n	80090f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f043 0201 	orr.w	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a09      	ldr	r2, [pc, #36]	@ (8009148 <USB_CoreReset+0x64>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d901      	bls.n	800912c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e006      	b.n	800913a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d0f0      	beq.n	800911a <USB_CoreReset+0x36>

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	00030d40 	.word	0x00030d40

0800914c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009158:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800915c:	f002 ff04 	bl	800bf68 <USBD_static_malloc>
 8009160:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32b0      	adds	r2, #176	@ 0xb0
 8009172:	2100      	movs	r1, #0
 8009174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009178:	2302      	movs	r3, #2
 800917a:	e0d4      	b.n	8009326 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800917c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009180:	2100      	movs	r1, #0
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f003 fe80 	bl	800ce88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	32b0      	adds	r2, #176	@ 0xb0
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32b0      	adds	r2, #176	@ 0xb0
 80091a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	7c1b      	ldrb	r3, [r3, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d138      	bne.n	8009226 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091b4:	4b5e      	ldr	r3, [pc, #376]	@ (8009330 <USBD_CDC_Init+0x1e4>)
 80091b6:	7819      	ldrb	r1, [r3, #0]
 80091b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091bc:	2202      	movs	r2, #2
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f002 fdaf 	bl	800bd22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091c4:	4b5a      	ldr	r3, [pc, #360]	@ (8009330 <USBD_CDC_Init+0x1e4>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3324      	adds	r3, #36	@ 0x24
 80091da:	2201      	movs	r2, #1
 80091dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091de:	4b55      	ldr	r3, [pc, #340]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 80091e0:	7819      	ldrb	r1, [r3, #0]
 80091e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091e6:	2202      	movs	r2, #2
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 fd9a 	bl	800bd22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091ee:	4b51      	ldr	r3, [pc, #324]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f003 020f 	and.w	r2, r3, #15
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009206:	2201      	movs	r2, #1
 8009208:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800920a:	4b4b      	ldr	r3, [pc, #300]	@ (8009338 <USBD_CDC_Init+0x1ec>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f003 020f 	and.w	r2, r3, #15
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	3326      	adds	r3, #38	@ 0x26
 8009220:	2210      	movs	r2, #16
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	e035      	b.n	8009292 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009226:	4b42      	ldr	r3, [pc, #264]	@ (8009330 <USBD_CDC_Init+0x1e4>)
 8009228:	7819      	ldrb	r1, [r3, #0]
 800922a:	2340      	movs	r3, #64	@ 0x40
 800922c:	2202      	movs	r2, #2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f002 fd77 	bl	800bd22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009234:	4b3e      	ldr	r3, [pc, #248]	@ (8009330 <USBD_CDC_Init+0x1e4>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3324      	adds	r3, #36	@ 0x24
 800924a:	2201      	movs	r2, #1
 800924c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800924e:	4b39      	ldr	r3, [pc, #228]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 8009250:	7819      	ldrb	r1, [r3, #0]
 8009252:	2340      	movs	r3, #64	@ 0x40
 8009254:	2202      	movs	r2, #2
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f002 fd63 	bl	800bd22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800925c:	4b35      	ldr	r3, [pc, #212]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f003 020f 	and.w	r2, r3, #15
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009274:	2201      	movs	r2, #1
 8009276:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009278:	4b2f      	ldr	r3, [pc, #188]	@ (8009338 <USBD_CDC_Init+0x1ec>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 020f 	and.w	r2, r3, #15
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	3326      	adds	r3, #38	@ 0x26
 800928e:	2210      	movs	r2, #16
 8009290:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009292:	4b29      	ldr	r3, [pc, #164]	@ (8009338 <USBD_CDC_Init+0x1ec>)
 8009294:	7819      	ldrb	r1, [r3, #0]
 8009296:	2308      	movs	r3, #8
 8009298:	2203      	movs	r2, #3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f002 fd41 	bl	800bd22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092a0:	4b25      	ldr	r3, [pc, #148]	@ (8009338 <USBD_CDC_Init+0x1ec>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 020f 	and.w	r2, r3, #15
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	3324      	adds	r3, #36	@ 0x24
 80092b6:	2201      	movs	r2, #1
 80092b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	33b0      	adds	r3, #176	@ 0xb0
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80092f0:	2302      	movs	r3, #2
 80092f2:	e018      	b.n	8009326 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7c1b      	ldrb	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 80092fe:	7819      	ldrb	r1, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 fdf8 	bl	800bf00 <USBD_LL_PrepareReceive>
 8009310:	e008      	b.n	8009324 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009312:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <USBD_CDC_Init+0x1e8>)
 8009314:	7819      	ldrb	r1, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800931c:	2340      	movs	r3, #64	@ 0x40
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f002 fdee 	bl	800bf00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000557 	.word	0x20000557
 8009334:	20000558 	.word	0x20000558
 8009338:	20000559 	.word	0x20000559

0800933c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009348:	4b3a      	ldr	r3, [pc, #232]	@ (8009434 <USBD_CDC_DeInit+0xf8>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f002 fd0d 	bl	800bd6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009354:	4b37      	ldr	r3, [pc, #220]	@ (8009434 <USBD_CDC_DeInit+0xf8>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 020f 	and.w	r2, r3, #15
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	3324      	adds	r3, #36	@ 0x24
 800936a:	2200      	movs	r2, #0
 800936c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800936e:	4b32      	ldr	r3, [pc, #200]	@ (8009438 <USBD_CDC_DeInit+0xfc>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f002 fcfa 	bl	800bd6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800937a:	4b2f      	ldr	r3, [pc, #188]	@ (8009438 <USBD_CDC_DeInit+0xfc>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 020f 	and.w	r2, r3, #15
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009392:	2200      	movs	r2, #0
 8009394:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009396:	4b29      	ldr	r3, [pc, #164]	@ (800943c <USBD_CDC_DeInit+0x100>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f002 fce6 	bl	800bd6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093a2:	4b26      	ldr	r3, [pc, #152]	@ (800943c <USBD_CDC_DeInit+0x100>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 020f 	and.w	r2, r3, #15
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3324      	adds	r3, #36	@ 0x24
 80093b8:	2200      	movs	r2, #0
 80093ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80093bc:	4b1f      	ldr	r3, [pc, #124]	@ (800943c <USBD_CDC_DeInit+0x100>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3326      	adds	r3, #38	@ 0x26
 80093d2:	2200      	movs	r2, #0
 80093d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	32b0      	adds	r2, #176	@ 0xb0
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01f      	beq.n	8009428 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	33b0      	adds	r3, #176	@ 0xb0
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	32b0      	adds	r2, #176	@ 0xb0
 8009406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940a:	4618      	mov	r0, r3
 800940c:	f002 fdba 	bl	800bf84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32b0      	adds	r2, #176	@ 0xb0
 800941a:	2100      	movs	r1, #0
 800941c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000557 	.word	0x20000557
 8009438:	20000558 	.word	0x20000558
 800943c:	20000559 	.word	0x20000559

08009440 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	32b0      	adds	r2, #176	@ 0xb0
 8009454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009458:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	e0bf      	b.n	80095f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009478:	2b00      	cmp	r3, #0
 800947a:	d050      	beq.n	800951e <USBD_CDC_Setup+0xde>
 800947c:	2b20      	cmp	r3, #32
 800947e:	f040 80af 	bne.w	80095e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	88db      	ldrh	r3, [r3, #6]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d03a      	beq.n	8009500 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b25b      	sxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	da1b      	bge.n	80094cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	33b0      	adds	r3, #176	@ 0xb0
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	88d2      	ldrh	r2, [r2, #6]
 80094b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	bf28      	it	cs
 80094ba:	2307      	movcs	r3, #7
 80094bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	89fa      	ldrh	r2, [r7, #14]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fd41 	bl	800af4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80094ca:	e090      	b.n	80095ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	785a      	ldrb	r2, [r3, #1]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b3f      	cmp	r3, #63	@ 0x3f
 80094dc:	d803      	bhi.n	80094e6 <USBD_CDC_Setup+0xa6>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	e000      	b.n	80094e8 <USBD_CDC_Setup+0xa8>
 80094e6:	2240      	movs	r2, #64	@ 0x40
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80094ee:	6939      	ldr	r1, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80094f6:	461a      	mov	r2, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 fd53 	bl	800afa4 <USBD_CtlPrepareRx>
      break;
 80094fe:	e076      	b.n	80095ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	33b0      	adds	r3, #176	@ 0xb0
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	7850      	ldrb	r0, [r2, #1]
 8009516:	2200      	movs	r2, #0
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	4798      	blx	r3
      break;
 800951c:	e067      	b.n	80095ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b0b      	cmp	r3, #11
 8009524:	d851      	bhi.n	80095ca <USBD_CDC_Setup+0x18a>
 8009526:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <USBD_CDC_Setup+0xec>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	0800955d 	.word	0x0800955d
 8009530:	080095d9 	.word	0x080095d9
 8009534:	080095cb 	.word	0x080095cb
 8009538:	080095cb 	.word	0x080095cb
 800953c:	080095cb 	.word	0x080095cb
 8009540:	080095cb 	.word	0x080095cb
 8009544:	080095cb 	.word	0x080095cb
 8009548:	080095cb 	.word	0x080095cb
 800954c:	080095cb 	.word	0x080095cb
 8009550:	080095cb 	.word	0x080095cb
 8009554:	08009587 	.word	0x08009587
 8009558:	080095b1 	.word	0x080095b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b03      	cmp	r3, #3
 8009566:	d107      	bne.n	8009578 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009568:	f107 030a 	add.w	r3, r7, #10
 800956c:	2202      	movs	r2, #2
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fceb 	bl	800af4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009576:	e032      	b.n	80095de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fc75 	bl	800ae6a <USBD_CtlError>
            ret = USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	75fb      	strb	r3, [r7, #23]
          break;
 8009584:	e02b      	b.n	80095de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b03      	cmp	r3, #3
 8009590:	d107      	bne.n	80095a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009592:	f107 030d 	add.w	r3, r7, #13
 8009596:	2201      	movs	r2, #1
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 fcd6 	bl	800af4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095a0:	e01d      	b.n	80095de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 fc60 	bl	800ae6a <USBD_CtlError>
            ret = USBD_FAIL;
 80095aa:	2303      	movs	r3, #3
 80095ac:	75fb      	strb	r3, [r7, #23]
          break;
 80095ae:	e016      	b.n	80095de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d00f      	beq.n	80095dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f001 fc53 	bl	800ae6a <USBD_CtlError>
            ret = USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095c8:	e008      	b.n	80095dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fc4c 	bl	800ae6a <USBD_CtlError>
          ret = USBD_FAIL;
 80095d2:	2303      	movs	r3, #3
 80095d4:	75fb      	strb	r3, [r7, #23]
          break;
 80095d6:	e002      	b.n	80095de <USBD_CDC_Setup+0x19e>
          break;
 80095d8:	bf00      	nop
 80095da:	e008      	b.n	80095ee <USBD_CDC_Setup+0x1ae>
          break;
 80095dc:	bf00      	nop
      }
      break;
 80095de:	e006      	b.n	80095ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fc41 	bl	800ae6a <USBD_CtlError>
      ret = USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	75fb      	strb	r3, [r7, #23]
      break;
 80095ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800960a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32b0      	adds	r2, #176	@ 0xb0
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800961e:	2303      	movs	r3, #3
 8009620:	e065      	b.n	80096ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32b0      	adds	r2, #176	@ 0xb0
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3318      	adds	r3, #24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d02f      	beq.n	80096ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	f003 020f 	and.w	r2, r3, #15
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	3318      	adds	r3, #24
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	f003 010f 	and.w	r1, r3, #15
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	460b      	mov	r3, r1
 800966c:	00db      	lsls	r3, r3, #3
 800966e:	440b      	add	r3, r1
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4403      	add	r3, r0
 8009674:	3348      	adds	r3, #72	@ 0x48
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	fbb2 f1f3 	udiv	r1, r2, r3
 800967c:	fb01 f303 	mul.w	r3, r1, r3
 8009680:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009682:	2b00      	cmp	r3, #0
 8009684:	d112      	bne.n	80096ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 020f 	and.w	r2, r3, #15
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	3318      	adds	r3, #24
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800969e:	78f9      	ldrb	r1, [r7, #3]
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 fc0a 	bl	800bebe <USBD_LL_Transmit>
 80096aa:	e01f      	b.n	80096ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	33b0      	adds	r3, #176	@ 0xb0
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	33b0      	adds	r3, #176	@ 0xb0
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	32b0      	adds	r2, #176	@ 0xb0
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32b0      	adds	r2, #176	@ 0xb0
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	e01a      	b.n	800975e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 fc08 	bl	800bf42 <USBD_LL_GetRxDataSize>
 8009732:	4602      	mov	r2, r0
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	33b0      	adds	r3, #176	@ 0xb0
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009758:	4611      	mov	r1, r2
 800975a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	32b0      	adds	r2, #176	@ 0xb0
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009784:	2303      	movs	r3, #3
 8009786:	e024      	b.n	80097d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	33b0      	adds	r3, #176	@ 0xb0
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d019      	beq.n	80097d0 <USBD_CDC_EP0_RxReady+0x6a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80097a2:	2bff      	cmp	r3, #255	@ 0xff
 80097a4:	d014      	beq.n	80097d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	33b0      	adds	r3, #176	@ 0xb0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80097be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	22ff      	movs	r2, #255	@ 0xff
 80097cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097e4:	2182      	movs	r1, #130	@ 0x82
 80097e6:	4818      	ldr	r0, [pc, #96]	@ (8009848 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097e8:	f000 fd09 	bl	800a1fe <USBD_GetEpDesc>
 80097ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097ee:	2101      	movs	r1, #1
 80097f0:	4815      	ldr	r0, [pc, #84]	@ (8009848 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097f2:	f000 fd04 	bl	800a1fe <USBD_GetEpDesc>
 80097f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097f8:	2181      	movs	r1, #129	@ 0x81
 80097fa:	4813      	ldr	r0, [pc, #76]	@ (8009848 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097fc:	f000 fcff 	bl	800a1fe <USBD_GetEpDesc>
 8009800:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2210      	movs	r2, #16
 800980c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2200      	movs	r2, #0
 8009818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800981c:	711a      	strb	r2, [r3, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009830:	711a      	strb	r2, [r3, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2243      	movs	r2, #67	@ 0x43
 800983a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800983c:	4b02      	ldr	r3, [pc, #8]	@ (8009848 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000514 	.word	0x20000514

0800984c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009854:	2182      	movs	r1, #130	@ 0x82
 8009856:	4818      	ldr	r0, [pc, #96]	@ (80098b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009858:	f000 fcd1 	bl	800a1fe <USBD_GetEpDesc>
 800985c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800985e:	2101      	movs	r1, #1
 8009860:	4815      	ldr	r0, [pc, #84]	@ (80098b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009862:	f000 fccc 	bl	800a1fe <USBD_GetEpDesc>
 8009866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009868:	2181      	movs	r1, #129	@ 0x81
 800986a:	4813      	ldr	r0, [pc, #76]	@ (80098b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800986c:	f000 fcc7 	bl	800a1fe <USBD_GetEpDesc>
 8009870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2210      	movs	r2, #16
 800987c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	711a      	strb	r2, [r3, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f042 0202 	orr.w	r2, r2, #2
 8009890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	711a      	strb	r2, [r3, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f042 0202 	orr.w	r2, r2, #2
 80098a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2243      	movs	r2, #67	@ 0x43
 80098aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098ac:	4b02      	ldr	r3, [pc, #8]	@ (80098b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000514 	.word	0x20000514

080098bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098c4:	2182      	movs	r1, #130	@ 0x82
 80098c6:	4818      	ldr	r0, [pc, #96]	@ (8009928 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098c8:	f000 fc99 	bl	800a1fe <USBD_GetEpDesc>
 80098cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098ce:	2101      	movs	r1, #1
 80098d0:	4815      	ldr	r0, [pc, #84]	@ (8009928 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098d2:	f000 fc94 	bl	800a1fe <USBD_GetEpDesc>
 80098d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098d8:	2181      	movs	r1, #129	@ 0x81
 80098da:	4813      	ldr	r0, [pc, #76]	@ (8009928 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098dc:	f000 fc8f 	bl	800a1fe <USBD_GetEpDesc>
 80098e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2210      	movs	r2, #16
 80098ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d006      	beq.n	8009902 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098fc:	711a      	strb	r2, [r3, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009910:	711a      	strb	r2, [r3, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2243      	movs	r2, #67	@ 0x43
 800991a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800991c:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000514 	.word	0x20000514

0800992c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	220a      	movs	r2, #10
 8009938:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800993a:	4b03      	ldr	r3, [pc, #12]	@ (8009948 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	200004d0 	.word	0x200004d0

0800994c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800995c:	2303      	movs	r3, #3
 800995e:	e009      	b.n	8009974 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	33b0      	adds	r3, #176	@ 0xb0
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	32b0      	adds	r2, #176	@ 0xb0
 8009996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e008      	b.n	80099b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	32b0      	adds	r2, #176	@ 0xb0
 80099d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e004      	b.n	80099f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32b0      	adds	r2, #176	@ 0xb0
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32b0      	adds	r2, #176	@ 0xb0
 8009a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e018      	b.n	8009a60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7c1b      	ldrb	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a36:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <USBD_CDC_ReceivePacket+0x68>)
 8009a38:	7819      	ldrb	r1, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f002 fa5b 	bl	800bf00 <USBD_LL_PrepareReceive>
 8009a4a:	e008      	b.n	8009a5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a4c:	4b06      	ldr	r3, [pc, #24]	@ (8009a68 <USBD_CDC_ReceivePacket+0x68>)
 8009a4e:	7819      	ldrb	r1, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a56:	2340      	movs	r3, #64	@ 0x40
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f002 fa51 	bl	800bf00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000558 	.word	0x20000558

08009a6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e01f      	b.n	8009ac4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	79fa      	ldrb	r2, [r7, #7]
 8009ab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f002 f8cb 	bl	800bc54 <USBD_LL_Init>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e025      	b.n	8009b30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	32ae      	adds	r2, #174	@ 0xae
 8009af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00f      	beq.n	8009b20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32ae      	adds	r2, #174	@ 0xae
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	f107 020e 	add.w	r2, r7, #14
 8009b14:	4610      	mov	r0, r2
 8009b16:	4798      	blx	r3
 8009b18:	4602      	mov	r2, r0
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 f8d3 	bl	800bcec <USBD_LL_Start>
 8009b46:	4603      	mov	r3, r0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d009      	beq.n	8009b94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	4611      	mov	r1, r2
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	4798      	blx	r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 f906 	bl	800adf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d01a      	beq.n	8009c44 <USBD_LL_SetupStage+0x72>
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d822      	bhi.n	8009c58 <USBD_LL_SetupStage+0x86>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <USBD_LL_SetupStage+0x4a>
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d00a      	beq.n	8009c30 <USBD_LL_SetupStage+0x5e>
 8009c1a:	e01d      	b.n	8009c58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fb5d 	bl	800a2e4 <USBD_StdDevReq>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2e:	e020      	b.n	8009c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fbc5 	bl	800a3c8 <USBD_StdItfReq>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
      break;
 8009c42:	e016      	b.n	8009c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fc27 	bl	800a4a0 <USBD_StdEPReq>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]
      break;
 8009c56:	e00c      	b.n	8009c72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f002 f8a0 	bl	800bdac <USBD_LL_StallEP>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c70:	bf00      	nop
  }

  return ret;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	460b      	mov	r3, r1
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d16e      	bne.n	8009d72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009c9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	f040 8098 	bne.w	8009dd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d913      	bls.n	8009cdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	1ad2      	subs	r2, r2, r3
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	bf28      	it	cs
 8009cce:	4613      	movcs	r3, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f001 f982 	bl	800afde <USBD_CtlContinueRx>
 8009cda:	e07d      	b.n	8009dd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ce2:	f003 031f 	and.w	r3, r3, #31
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d014      	beq.n	8009d14 <USBD_LL_DataOutStage+0x98>
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d81d      	bhi.n	8009d2a <USBD_LL_DataOutStage+0xae>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <USBD_LL_DataOutStage+0x7c>
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d003      	beq.n	8009cfe <USBD_LL_DataOutStage+0x82>
 8009cf6:	e018      	b.n	8009d2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	75bb      	strb	r3, [r7, #22]
            break;
 8009cfc:	e018      	b.n	8009d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4619      	mov	r1, r3
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 fa5e 	bl	800a1ca <USBD_CoreFindIF>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	75bb      	strb	r3, [r7, #22]
            break;
 8009d12:	e00d      	b.n	8009d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 fa60 	bl	800a1e4 <USBD_CoreFindEP>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75bb      	strb	r3, [r7, #22]
            break;
 8009d28:	e002      	b.n	8009d30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75bb      	strb	r3, [r7, #22]
            break;
 8009d2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d30:	7dbb      	ldrb	r3, [r7, #22]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d119      	bne.n	8009d6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d113      	bne.n	8009d6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d42:	7dba      	ldrb	r2, [r7, #22]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	32ae      	adds	r2, #174	@ 0xae
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00b      	beq.n	8009d6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d52:	7dba      	ldrb	r2, [r7, #22]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d5a:	7dba      	ldrb	r2, [r7, #22]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	32ae      	adds	r2, #174	@ 0xae
 8009d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f001 f948 	bl	800b000 <USBD_CtlSendStatus>
 8009d70:	e032      	b.n	8009dd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d72:	7afb      	ldrb	r3, [r7, #11]
 8009d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 fa31 	bl	800a1e4 <USBD_CoreFindEP>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d86:	7dbb      	ldrb	r3, [r7, #22]
 8009d88:	2bff      	cmp	r3, #255	@ 0xff
 8009d8a:	d025      	beq.n	8009dd8 <USBD_LL_DataOutStage+0x15c>
 8009d8c:	7dbb      	ldrb	r3, [r7, #22]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d122      	bne.n	8009dd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d117      	bne.n	8009dce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d9e:	7dba      	ldrb	r2, [r7, #22]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	32ae      	adds	r2, #174	@ 0xae
 8009da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00f      	beq.n	8009dce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009dae:	7dba      	ldrb	r2, [r7, #22]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009db6:	7dba      	ldrb	r2, [r7, #22]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	32ae      	adds	r2, #174	@ 0xae
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	7afa      	ldrb	r2, [r7, #11]
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	4798      	blx	r3
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	e000      	b.n	8009dda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b086      	sub	sp, #24
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	60f8      	str	r0, [r7, #12]
 8009dea:	460b      	mov	r3, r1
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009df0:	7afb      	ldrb	r3, [r7, #11]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d16f      	bne.n	8009ed6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3314      	adds	r3, #20
 8009dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d15a      	bne.n	8009ebc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d914      	bls.n	8009e3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	1ad2      	subs	r2, r2, r3
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	461a      	mov	r2, r3
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f001 f8aa 	bl	800af82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2200      	movs	r2, #0
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f002 f863 	bl	800bf00 <USBD_LL_PrepareReceive>
 8009e3a:	e03f      	b.n	8009ebc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d11c      	bne.n	8009e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d316      	bcc.n	8009e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d20f      	bcs.n	8009e82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e62:	2200      	movs	r2, #0
 8009e64:	2100      	movs	r1, #0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f001 f88b 	bl	800af82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	2100      	movs	r1, #0
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f002 f840 	bl	800bf00 <USBD_LL_PrepareReceive>
 8009e80:	e01c      	b.n	8009ebc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d10f      	bne.n	8009eae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eae:	2180      	movs	r1, #128	@ 0x80
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f001 ff7b 	bl	800bdac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f001 f8b5 	bl	800b026 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d03a      	beq.n	8009f3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff fe42 	bl	8009b50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ed4:	e032      	b.n	8009f3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f97f 	bl	800a1e4 <USBD_CoreFindEP>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2bff      	cmp	r3, #255	@ 0xff
 8009eee:	d025      	beq.n	8009f3c <USBD_LL_DataInStage+0x15a>
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d122      	bne.n	8009f3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d11c      	bne.n	8009f3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f02:	7dfa      	ldrb	r2, [r7, #23]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	32ae      	adds	r2, #174	@ 0xae
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d014      	beq.n	8009f3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009f12:	7dfa      	ldrb	r2, [r7, #23]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f1a:	7dfa      	ldrb	r2, [r7, #23]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	32ae      	adds	r2, #174	@ 0xae
 8009f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	7afa      	ldrb	r2, [r7, #11]
 8009f28:	4611      	mov	r1, r2
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	4798      	blx	r3
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f32:	7dbb      	ldrb	r3, [r7, #22]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f38:	7dbb      	ldrb	r3, [r7, #22]
 8009f3a:	e000      	b.n	8009f3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d014      	beq.n	8009fac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	6852      	ldr	r2, [r2, #4]
 8009f9a:	b2d2      	uxtb	r2, r2
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fac:	2340      	movs	r3, #64	@ 0x40
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 feb5 	bl	800bd22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2240      	movs	r2, #64	@ 0x40
 8009fc4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fc8:	2340      	movs	r3, #64	@ 0x40
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2180      	movs	r1, #128	@ 0x80
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 fea7 	bl	800bd22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2240      	movs	r2, #64	@ 0x40
 8009fde:	621a      	str	r2, [r3, #32]

  return ret;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2204      	movs	r2, #4
 800a024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b04      	cmp	r3, #4
 800a048:	d106      	bne.n	800a058 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b03      	cmp	r3, #3
 800a078:	d110      	bne.n	800a09c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	32ae      	adds	r2, #174	@ 0xae
 800a0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e01c      	b.n	800a102 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d115      	bne.n	800a100 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	32ae      	adds	r2, #174	@ 0xae
 800a0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	32ae      	adds	r2, #174	@ 0xae
 800a0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	32ae      	adds	r2, #174	@ 0xae
 800a120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a128:	2303      	movs	r3, #3
 800a12a:	e01c      	b.n	800a166 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b03      	cmp	r3, #3
 800a136:	d115      	bne.n	800a164 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	32ae      	adds	r2, #174	@ 0xae
 800a142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	32ae      	adds	r2, #174	@ 0xae
 800a156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00e      	beq.n	800a1c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6852      	ldr	r2, [r2, #4]
 800a1ae:	b2d2      	uxtb	r2, r2
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	4293      	cmp	r3, r2
 800a222:	d91f      	bls.n	800a264 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a22a:	e013      	b.n	800a254 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a22c:	f107 030a 	add.w	r3, r7, #10
 800a230:	4619      	mov	r1, r3
 800a232:	6978      	ldr	r0, [r7, #20]
 800a234:	f000 f81b 	bl	800a26e <USBD_GetNextDesc>
 800a238:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	2b05      	cmp	r3, #5
 800a240:	d108      	bne.n	800a254 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	789b      	ldrb	r3, [r3, #2]
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d008      	beq.n	800a262 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	885b      	ldrh	r3, [r3, #2]
 800a258:	b29a      	uxth	r2, r3
 800a25a:	897b      	ldrh	r3, [r7, #10]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d8e5      	bhi.n	800a22c <USBD_GetEpDesc+0x2e>
 800a260:	e000      	b.n	800a264 <USBD_GetEpDesc+0x66>
          break;
 800a262:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a264:	693b      	ldr	r3, [r7, #16]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a26e:	b480      	push	{r7}
 800a270:	b085      	sub	sp, #20
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	7812      	ldrb	r2, [r2, #0]
 800a284:	4413      	add	r3, r2
 800a286:	b29a      	uxth	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b087      	sub	sp, #28
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2c4:	8a3b      	ldrh	r3, [r7, #16]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	b21a      	sxth	r2, r3
 800a2ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	b21b      	sxth	r3, r3
 800a2d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
	...

0800a2e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2fa:	2b40      	cmp	r3, #64	@ 0x40
 800a2fc:	d005      	beq.n	800a30a <USBD_StdDevReq+0x26>
 800a2fe:	2b40      	cmp	r3, #64	@ 0x40
 800a300:	d857      	bhi.n	800a3b2 <USBD_StdDevReq+0xce>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <USBD_StdDevReq+0x42>
 800a306:	2b20      	cmp	r3, #32
 800a308:	d153      	bne.n	800a3b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	32ae      	adds	r2, #174	@ 0xae
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	4798      	blx	r3
 800a320:	4603      	mov	r3, r0
 800a322:	73fb      	strb	r3, [r7, #15]
      break;
 800a324:	e04a      	b.n	800a3bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	785b      	ldrb	r3, [r3, #1]
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d83b      	bhi.n	800a3a6 <USBD_StdDevReq+0xc2>
 800a32e:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <USBD_StdDevReq+0x50>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a389 	.word	0x0800a389
 800a338:	0800a39d 	.word	0x0800a39d
 800a33c:	0800a3a7 	.word	0x0800a3a7
 800a340:	0800a393 	.word	0x0800a393
 800a344:	0800a3a7 	.word	0x0800a3a7
 800a348:	0800a367 	.word	0x0800a367
 800a34c:	0800a35d 	.word	0x0800a35d
 800a350:	0800a3a7 	.word	0x0800a3a7
 800a354:	0800a37f 	.word	0x0800a37f
 800a358:	0800a371 	.word	0x0800a371
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa3c 	bl	800a7dc <USBD_GetDescriptor>
          break;
 800a364:	e024      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fba1 	bl	800aab0 <USBD_SetAddress>
          break;
 800a36e:	e01f      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fbe0 	bl	800ab38 <USBD_SetConfig>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
          break;
 800a37c:	e018      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fc83 	bl	800ac8c <USBD_GetConfig>
          break;
 800a386:	e013      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fcb4 	bl	800acf8 <USBD_GetStatus>
          break;
 800a390:	e00e      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fce3 	bl	800ad60 <USBD_SetFeature>
          break;
 800a39a:	e009      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fd07 	bl	800adb2 <USBD_ClrFeature>
          break;
 800a3a4:	e004      	b.n	800a3b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fd5e 	bl	800ae6a <USBD_CtlError>
          break;
 800a3ae:	bf00      	nop
      }
      break;
 800a3b0:	e004      	b.n	800a3bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fd58 	bl	800ae6a <USBD_CtlError>
      break;
 800a3ba:	bf00      	nop
  }

  return ret;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop

0800a3c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3de:	2b40      	cmp	r3, #64	@ 0x40
 800a3e0:	d005      	beq.n	800a3ee <USBD_StdItfReq+0x26>
 800a3e2:	2b40      	cmp	r3, #64	@ 0x40
 800a3e4:	d852      	bhi.n	800a48c <USBD_StdItfReq+0xc4>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <USBD_StdItfReq+0x26>
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d14e      	bne.n	800a48c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d840      	bhi.n	800a47e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	889b      	ldrh	r3, [r3, #4]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	d836      	bhi.n	800a474 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	889b      	ldrh	r3, [r3, #4]
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff fedb 	bl	800a1ca <USBD_CoreFindIF>
 800a414:	4603      	mov	r3, r0
 800a416:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2bff      	cmp	r3, #255	@ 0xff
 800a41c:	d01d      	beq.n	800a45a <USBD_StdItfReq+0x92>
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11a      	bne.n	800a45a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a424:	7bba      	ldrb	r2, [r7, #14]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32ae      	adds	r2, #174	@ 0xae
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00f      	beq.n	800a454 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a434:	7bba      	ldrb	r2, [r7, #14]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a43c:	7bba      	ldrb	r2, [r7, #14]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	32ae      	adds	r2, #174	@ 0xae
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a452:	e004      	b.n	800a45e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a458:	e001      	b.n	800a45e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a45a:	2303      	movs	r3, #3
 800a45c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d110      	bne.n	800a488 <USBD_StdItfReq+0xc0>
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10d      	bne.n	800a488 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fdc7 	bl	800b000 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a472:	e009      	b.n	800a488 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fcf7 	bl	800ae6a <USBD_CtlError>
          break;
 800a47c:	e004      	b.n	800a488 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fcf2 	bl	800ae6a <USBD_CtlError>
          break;
 800a486:	e000      	b.n	800a48a <USBD_StdItfReq+0xc2>
          break;
 800a488:	bf00      	nop
      }
      break;
 800a48a:	e004      	b.n	800a496 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fceb 	bl	800ae6a <USBD_CtlError>
      break;
 800a494:	bf00      	nop
  }

  return ret;
 800a496:	7bfb      	ldrb	r3, [r7, #15]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	889b      	ldrh	r3, [r3, #4]
 800a4b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d007      	beq.n	800a4d0 <USBD_StdEPReq+0x30>
 800a4c0:	2b40      	cmp	r3, #64	@ 0x40
 800a4c2:	f200 817f 	bhi.w	800a7c4 <USBD_StdEPReq+0x324>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d02a      	beq.n	800a520 <USBD_StdEPReq+0x80>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	f040 817a 	bne.w	800a7c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff fe85 	bl	800a1e4 <USBD_CoreFindEP>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4de:	7b7b      	ldrb	r3, [r7, #13]
 800a4e0:	2bff      	cmp	r3, #255	@ 0xff
 800a4e2:	f000 8174 	beq.w	800a7ce <USBD_StdEPReq+0x32e>
 800a4e6:	7b7b      	ldrb	r3, [r7, #13]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 8170 	bne.w	800a7ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4ee:	7b7a      	ldrb	r2, [r7, #13]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4f6:	7b7a      	ldrb	r2, [r7, #13]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	32ae      	adds	r2, #174	@ 0xae
 800a4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8163 	beq.w	800a7ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a508:	7b7a      	ldrb	r2, [r7, #13]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32ae      	adds	r2, #174	@ 0xae
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a51e:	e156      	b.n	800a7ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d008      	beq.n	800a53a <USBD_StdEPReq+0x9a>
 800a528:	2b03      	cmp	r3, #3
 800a52a:	f300 8145 	bgt.w	800a7b8 <USBD_StdEPReq+0x318>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 809b 	beq.w	800a66a <USBD_StdEPReq+0x1ca>
 800a534:	2b01      	cmp	r3, #1
 800a536:	d03c      	beq.n	800a5b2 <USBD_StdEPReq+0x112>
 800a538:	e13e      	b.n	800a7b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b02      	cmp	r3, #2
 800a544:	d002      	beq.n	800a54c <USBD_StdEPReq+0xac>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d016      	beq.n	800a578 <USBD_StdEPReq+0xd8>
 800a54a:	e02c      	b.n	800a5a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00d      	beq.n	800a56e <USBD_StdEPReq+0xce>
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	2b80      	cmp	r3, #128	@ 0x80
 800a556:	d00a      	beq.n	800a56e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fc25 	bl	800bdac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a562:	2180      	movs	r1, #128	@ 0x80
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 fc21 	bl	800bdac <USBD_LL_StallEP>
 800a56a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a56c:	e020      	b.n	800a5b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fc7a 	bl	800ae6a <USBD_CtlError>
              break;
 800a576:	e01b      	b.n	800a5b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10e      	bne.n	800a59e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00b      	beq.n	800a59e <USBD_StdEPReq+0xfe>
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b80      	cmp	r3, #128	@ 0x80
 800a58a:	d008      	beq.n	800a59e <USBD_StdEPReq+0xfe>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	88db      	ldrh	r3, [r3, #6]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d104      	bne.n	800a59e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a594:	7bbb      	ldrb	r3, [r7, #14]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fc07 	bl	800bdac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fd2e 	bl	800b000 <USBD_CtlSendStatus>

              break;
 800a5a4:	e004      	b.n	800a5b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fc5e 	bl	800ae6a <USBD_CtlError>
              break;
 800a5ae:	bf00      	nop
          }
          break;
 800a5b0:	e107      	b.n	800a7c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d002      	beq.n	800a5c4 <USBD_StdEPReq+0x124>
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d016      	beq.n	800a5f0 <USBD_StdEPReq+0x150>
 800a5c2:	e04b      	b.n	800a65c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <USBD_StdEPReq+0x146>
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b80      	cmp	r3, #128	@ 0x80
 800a5ce:	d00a      	beq.n	800a5e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 fbe9 	bl	800bdac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5da:	2180      	movs	r1, #128	@ 0x80
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fbe5 	bl	800bdac <USBD_LL_StallEP>
 800a5e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5e4:	e040      	b.n	800a668 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fc3e 	bl	800ae6a <USBD_CtlError>
              break;
 800a5ee:	e03b      	b.n	800a668 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	885b      	ldrh	r3, [r3, #2]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d136      	bne.n	800a666 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 fbef 	bl	800bdea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fcf7 	bl	800b000 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff fde4 	bl	800a1e4 <USBD_CoreFindEP>
 800a61c:	4603      	mov	r3, r0
 800a61e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a620:	7b7b      	ldrb	r3, [r7, #13]
 800a622:	2bff      	cmp	r3, #255	@ 0xff
 800a624:	d01f      	beq.n	800a666 <USBD_StdEPReq+0x1c6>
 800a626:	7b7b      	ldrb	r3, [r7, #13]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11c      	bne.n	800a666 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a62c:	7b7a      	ldrb	r2, [r7, #13]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a634:	7b7a      	ldrb	r2, [r7, #13]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	32ae      	adds	r2, #174	@ 0xae
 800a63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a644:	7b7a      	ldrb	r2, [r7, #13]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	32ae      	adds	r2, #174	@ 0xae
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
 800a656:	4603      	mov	r3, r0
 800a658:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a65a:	e004      	b.n	800a666 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fc03 	bl	800ae6a <USBD_CtlError>
              break;
 800a664:	e000      	b.n	800a668 <USBD_StdEPReq+0x1c8>
              break;
 800a666:	bf00      	nop
          }
          break;
 800a668:	e0ab      	b.n	800a7c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d002      	beq.n	800a67c <USBD_StdEPReq+0x1dc>
 800a676:	2b03      	cmp	r3, #3
 800a678:	d032      	beq.n	800a6e0 <USBD_StdEPReq+0x240>
 800a67a:	e097      	b.n	800a7ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d007      	beq.n	800a692 <USBD_StdEPReq+0x1f2>
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b80      	cmp	r3, #128	@ 0x80
 800a686:	d004      	beq.n	800a692 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fbed 	bl	800ae6a <USBD_CtlError>
                break;
 800a690:	e091      	b.n	800a7b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a696:	2b00      	cmp	r3, #0
 800a698:	da0b      	bge.n	800a6b2 <USBD_StdEPReq+0x212>
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	3310      	adds	r3, #16
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	e00b      	b.n	800a6ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc37 	bl	800af4c <USBD_CtlSendData>
              break;
 800a6de:	e06a      	b.n	800a7b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da11      	bge.n	800a70c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	f003 020f 	and.w	r2, r3, #15
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	3324      	adds	r3, #36	@ 0x24
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d117      	bne.n	800a732 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fbb0 	bl	800ae6a <USBD_CtlError>
                  break;
 800a70a:	e054      	b.n	800a7b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	f003 020f 	and.w	r2, r3, #15
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	440b      	add	r3, r1
 800a71e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d104      	bne.n	800a732 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fb9d 	bl	800ae6a <USBD_CtlError>
                  break;
 800a730:	e041      	b.n	800a7b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a736:	2b00      	cmp	r3, #0
 800a738:	da0b      	bge.n	800a752 <USBD_StdEPReq+0x2b2>
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	3310      	adds	r3, #16
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	4413      	add	r3, r2
 800a74e:	3304      	adds	r3, #4
 800a750:	e00b      	b.n	800a76a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	4413      	add	r3, r2
 800a768:	3304      	adds	r3, #4
 800a76a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <USBD_StdEPReq+0x2d8>
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	2b80      	cmp	r3, #128	@ 0x80
 800a776:	d103      	bne.n	800a780 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e00e      	b.n	800a79e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fb4f 	bl	800be28 <USBD_LL_IsStallEP>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2201      	movs	r2, #1
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	e002      	b.n	800a79e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fbd1 	bl	800af4c <USBD_CtlSendData>
              break;
 800a7aa:	e004      	b.n	800a7b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fb5b 	bl	800ae6a <USBD_CtlError>
              break;
 800a7b4:	bf00      	nop
          }
          break;
 800a7b6:	e004      	b.n	800a7c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fb55 	bl	800ae6a <USBD_CtlError>
          break;
 800a7c0:	bf00      	nop
      }
      break;
 800a7c2:	e005      	b.n	800a7d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fb4f 	bl	800ae6a <USBD_CtlError>
      break;
 800a7cc:	e000      	b.n	800a7d0 <USBD_StdEPReq+0x330>
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	885b      	ldrh	r3, [r3, #2]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	2b06      	cmp	r3, #6
 800a7fe:	f200 8128 	bhi.w	800aa52 <USBD_GetDescriptor+0x276>
 800a802:	a201      	add	r2, pc, #4	@ (adr r2, 800a808 <USBD_GetDescriptor+0x2c>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a825 	.word	0x0800a825
 800a80c:	0800a83d 	.word	0x0800a83d
 800a810:	0800a87d 	.word	0x0800a87d
 800a814:	0800aa53 	.word	0x0800aa53
 800a818:	0800aa53 	.word	0x0800aa53
 800a81c:	0800a9f3 	.word	0x0800a9f3
 800a820:	0800aa1f 	.word	0x0800aa1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	7c12      	ldrb	r2, [r2, #16]
 800a830:	f107 0108 	add.w	r1, r7, #8
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	60f8      	str	r0, [r7, #12]
      break;
 800a83a:	e112      	b.n	800aa62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7c1b      	ldrb	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10d      	bne.n	800a860 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
 800a854:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3301      	adds	r3, #1
 800a85a:	2202      	movs	r2, #2
 800a85c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a85e:	e100      	b.n	800aa62 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a868:	f107 0208 	add.w	r2, r7, #8
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
 800a870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3301      	adds	r3, #1
 800a876:	2202      	movs	r2, #2
 800a878:	701a      	strb	r2, [r3, #0]
      break;
 800a87a:	e0f2      	b.n	800aa62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	885b      	ldrh	r3, [r3, #2]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b05      	cmp	r3, #5
 800a884:	f200 80ac 	bhi.w	800a9e0 <USBD_GetDescriptor+0x204>
 800a888:	a201      	add	r2, pc, #4	@ (adr r2, 800a890 <USBD_GetDescriptor+0xb4>)
 800a88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88e:	bf00      	nop
 800a890:	0800a8a9 	.word	0x0800a8a9
 800a894:	0800a8dd 	.word	0x0800a8dd
 800a898:	0800a911 	.word	0x0800a911
 800a89c:	0800a945 	.word	0x0800a945
 800a8a0:	0800a979 	.word	0x0800a979
 800a8a4:	0800a9ad 	.word	0x0800a9ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7c12      	ldrb	r2, [r2, #16]
 800a8c0:	f107 0108 	add.w	r1, r7, #8
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	4798      	blx	r3
 800a8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ca:	e091      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 facb 	bl	800ae6a <USBD_CtlError>
            err++;
 800a8d4:	7afb      	ldrb	r3, [r7, #11]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8da:	e089      	b.n	800a9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00b      	beq.n	800a900 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	7c12      	ldrb	r2, [r2, #16]
 800a8f4:	f107 0108 	add.w	r1, r7, #8
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	4798      	blx	r3
 800a8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8fe:	e077      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fab1 	bl	800ae6a <USBD_CtlError>
            err++;
 800a908:	7afb      	ldrb	r3, [r7, #11]
 800a90a:	3301      	adds	r3, #1
 800a90c:	72fb      	strb	r3, [r7, #11]
          break;
 800a90e:	e06f      	b.n	800a9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	7c12      	ldrb	r2, [r2, #16]
 800a928:	f107 0108 	add.w	r1, r7, #8
 800a92c:	4610      	mov	r0, r2
 800a92e:	4798      	blx	r3
 800a930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a932:	e05d      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa97 	bl	800ae6a <USBD_CtlError>
            err++;
 800a93c:	7afb      	ldrb	r3, [r7, #11]
 800a93e:	3301      	adds	r3, #1
 800a940:	72fb      	strb	r3, [r7, #11]
          break;
 800a942:	e055      	b.n	800a9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7c12      	ldrb	r2, [r2, #16]
 800a95c:	f107 0108 	add.w	r1, r7, #8
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
 800a964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a966:	e043      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa7d 	bl	800ae6a <USBD_CtlError>
            err++;
 800a970:	7afb      	ldrb	r3, [r7, #11]
 800a972:	3301      	adds	r3, #1
 800a974:	72fb      	strb	r3, [r7, #11]
          break;
 800a976:	e03b      	b.n	800a9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	7c12      	ldrb	r2, [r2, #16]
 800a990:	f107 0108 	add.w	r1, r7, #8
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
 800a998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99a:	e029      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa63 	bl	800ae6a <USBD_CtlError>
            err++;
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9aa:	e021      	b.n	800a9f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	7c12      	ldrb	r2, [r2, #16]
 800a9c4:	f107 0108 	add.w	r1, r7, #8
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
 800a9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ce:	e00f      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fa49 	bl	800ae6a <USBD_CtlError>
            err++;
 800a9d8:	7afb      	ldrb	r3, [r7, #11]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9de:	e007      	b.n	800a9f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa41 	bl	800ae6a <USBD_CtlError>
          err++;
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9ee:	bf00      	nop
      }
      break;
 800a9f0:	e037      	b.n	800aa62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7c1b      	ldrb	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa02:	f107 0208 	add.w	r2, r7, #8
 800aa06:	4610      	mov	r0, r2
 800aa08:	4798      	blx	r3
 800aa0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa0c:	e029      	b.n	800aa62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fa2a 	bl	800ae6a <USBD_CtlError>
        err++;
 800aa16:	7afb      	ldrb	r3, [r7, #11]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa1c:	e021      	b.n	800aa62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7c1b      	ldrb	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10d      	bne.n	800aa42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2e:	f107 0208 	add.w	r2, r7, #8
 800aa32:	4610      	mov	r0, r2
 800aa34:	4798      	blx	r3
 800aa36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	2207      	movs	r2, #7
 800aa3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa40:	e00f      	b.n	800aa62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fa10 	bl	800ae6a <USBD_CtlError>
        err++;
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa50:	e007      	b.n	800aa62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fa08 	bl	800ae6a <USBD_CtlError>
      err++;
 800aa5a:	7afb      	ldrb	r3, [r7, #11]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa60:	bf00      	nop
  }

  if (err != 0U)
 800aa62:	7afb      	ldrb	r3, [r7, #11]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11e      	bne.n	800aaa6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	88db      	ldrh	r3, [r3, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d016      	beq.n	800aa9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa70:	893b      	ldrh	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00e      	beq.n	800aa94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	88da      	ldrh	r2, [r3, #6]
 800aa7a:	893b      	ldrh	r3, [r7, #8]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	bf28      	it	cs
 800aa80:	4613      	movcs	r3, r2
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa86:	893b      	ldrh	r3, [r7, #8]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa5d 	bl	800af4c <USBD_CtlSendData>
 800aa92:	e009      	b.n	800aaa8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f9e7 	bl	800ae6a <USBD_CtlError>
 800aa9c:	e004      	b.n	800aaa8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 faae 	bl	800b000 <USBD_CtlSendStatus>
 800aaa4:	e000      	b.n	800aaa8 <USBD_GetDescriptor+0x2cc>
    return;
 800aaa6:	bf00      	nop
  }
}
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop

0800aab0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	889b      	ldrh	r3, [r3, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d131      	bne.n	800ab26 <USBD_SetAddress+0x76>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	88db      	ldrh	r3, [r3, #6]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d12d      	bne.n	800ab26 <USBD_SetAddress+0x76>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	2b7f      	cmp	r3, #127	@ 0x7f
 800aad0:	d829      	bhi.n	800ab26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aadc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d104      	bne.n	800aaf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9bc 	bl	800ae6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf2:	e01d      	b.n	800ab30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	7bfa      	ldrb	r2, [r7, #15]
 800aaf8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 f9bd 	bl	800be80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa7a 	bl	800b000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2202      	movs	r2, #2
 800ab16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1a:	e009      	b.n	800ab30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab24:	e004      	b.n	800ab30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f99e 	bl	800ae6a <USBD_CtlError>
  }
}
 800ab2e:	bf00      	nop
 800ab30:	bf00      	nop
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	885b      	ldrh	r3, [r3, #2]
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	4b4e      	ldr	r3, [pc, #312]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ab4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab50:	4b4d      	ldr	r3, [pc, #308]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d905      	bls.n	800ab64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f985 	bl	800ae6a <USBD_CtlError>
    return USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e08c      	b.n	800ac7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d002      	beq.n	800ab76 <USBD_SetConfig+0x3e>
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d029      	beq.n	800abc8 <USBD_SetConfig+0x90>
 800ab74:	e075      	b.n	800ac62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab76:	4b44      	ldr	r3, [pc, #272]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d020      	beq.n	800abc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab7e:	4b42      	ldr	r3, [pc, #264]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab88:	4b3f      	ldr	r3, [pc, #252]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7fe ffe9 	bl	8009b66 <USBD_SetClassConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d008      	beq.n	800abb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f962 	bl	800ae6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abae:	e065      	b.n	800ac7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fa25 	bl	800b000 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2203      	movs	r2, #3
 800abba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800abbe:	e05d      	b.n	800ac7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fa1d 	bl	800b000 <USBD_CtlSendStatus>
      break;
 800abc6:	e059      	b.n	800ac7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abc8:	4b2f      	ldr	r3, [pc, #188]	@ (800ac88 <USBD_SetConfig+0x150>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d112      	bne.n	800abf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800abd8:	4b2b      	ldr	r3, [pc, #172]	@ (800ac88 <USBD_SetConfig+0x150>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	461a      	mov	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abe2:	4b29      	ldr	r3, [pc, #164]	@ (800ac88 <USBD_SetConfig+0x150>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7fe ffd8 	bl	8009b9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa06 	bl	800b000 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abf4:	e042      	b.n	800ac7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800abf6:	4b24      	ldr	r3, [pc, #144]	@ (800ac88 <USBD_SetConfig+0x150>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d02a      	beq.n	800ac5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fe ffc6 	bl	8009b9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac12:	4b1d      	ldr	r3, [pc, #116]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7fe ff9f 	bl	8009b66 <USBD_SetClassConfig>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00f      	beq.n	800ac52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f918 	bl	800ae6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7fe ffab 	bl	8009b9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac50:	e014      	b.n	800ac7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f9d4 	bl	800b000 <USBD_CtlSendStatus>
      break;
 800ac58:	e010      	b.n	800ac7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f9d0 	bl	800b000 <USBD_CtlSendStatus>
      break;
 800ac60:	e00c      	b.n	800ac7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f900 	bl	800ae6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac6a:	4b07      	ldr	r3, [pc, #28]	@ (800ac88 <USBD_SetConfig+0x150>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7fe ff94 	bl	8009b9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac76:	2303      	movs	r3, #3
 800ac78:	73fb      	strb	r3, [r7, #15]
      break;
 800ac7a:	bf00      	nop
  }

  return ret;
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	2000094c 	.word	0x2000094c

0800ac8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	88db      	ldrh	r3, [r3, #6]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d004      	beq.n	800aca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f8e2 	bl	800ae6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aca6:	e023      	b.n	800acf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	dc02      	bgt.n	800acba <USBD_GetConfig+0x2e>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dc03      	bgt.n	800acc0 <USBD_GetConfig+0x34>
 800acb8:	e015      	b.n	800ace6 <USBD_GetConfig+0x5a>
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d00b      	beq.n	800acd6 <USBD_GetConfig+0x4a>
 800acbe:	e012      	b.n	800ace6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3308      	adds	r3, #8
 800acca:	2201      	movs	r2, #1
 800accc:	4619      	mov	r1, r3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f93c 	bl	800af4c <USBD_CtlSendData>
        break;
 800acd4:	e00c      	b.n	800acf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3304      	adds	r3, #4
 800acda:	2201      	movs	r2, #1
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f934 	bl	800af4c <USBD_CtlSendData>
        break;
 800ace4:	e004      	b.n	800acf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f8be 	bl	800ae6a <USBD_CtlError>
        break;
 800acee:	bf00      	nop
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d81e      	bhi.n	800ad4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	88db      	ldrh	r3, [r3, #6]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d004      	beq.n	800ad22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f8a5 	bl	800ae6a <USBD_CtlError>
        break;
 800ad20:	e01a      	b.n	800ad58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	f043 0202 	orr.w	r2, r3, #2
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	330c      	adds	r3, #12
 800ad42:	2202      	movs	r2, #2
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f900 	bl	800af4c <USBD_CtlSendData>
      break;
 800ad4c:	e004      	b.n	800ad58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f88a 	bl	800ae6a <USBD_CtlError>
      break;
 800ad56:	bf00      	nop
  }
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	885b      	ldrh	r3, [r3, #2]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d107      	bne.n	800ad82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f940 	bl	800b000 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad80:	e013      	b.n	800adaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	885b      	ldrh	r3, [r3, #2]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d10b      	bne.n	800ada2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	889b      	ldrh	r3, [r3, #4]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f930 	bl	800b000 <USBD_CtlSendStatus>
}
 800ada0:	e003      	b.n	800adaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f860 	bl	800ae6a <USBD_CtlError>
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	3b01      	subs	r3, #1
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d80b      	bhi.n	800ade2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	885b      	ldrh	r3, [r3, #2]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d10c      	bne.n	800adec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f910 	bl	800b000 <USBD_CtlSendStatus>
      }
      break;
 800ade0:	e004      	b.n	800adec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f840 	bl	800ae6a <USBD_CtlError>
      break;
 800adea:	e000      	b.n	800adee <USBD_ClrFeature+0x3c>
      break;
 800adec:	bf00      	nop
  }
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	781a      	ldrb	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7ff fa40 	bl	800a2a6 <SWAPBYTE>
 800ae26:	4603      	mov	r3, r0
 800ae28:	461a      	mov	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	3301      	adds	r3, #1
 800ae38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff fa33 	bl	800a2a6 <SWAPBYTE>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3301      	adds	r3, #1
 800ae52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fa26 	bl	800a2a6 <SWAPBYTE>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	80da      	strh	r2, [r3, #6]
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae74:	2180      	movs	r1, #128	@ 0x80
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 ff98 	bl	800bdac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 ff94 	bl	800bdac <USBD_LL_StallEP>
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d036      	beq.n	800af10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aea6:	6938      	ldr	r0, [r7, #16]
 800aea8:	f000 f836 	bl	800af18 <USBD_GetLen>
 800aeac:	4603      	mov	r3, r0
 800aeae:	3301      	adds	r3, #1
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	4413      	add	r3, r2
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7812      	ldrb	r2, [r2, #0]
 800aec4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	3301      	adds	r3, #1
 800aeca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aecc:	7dfb      	ldrb	r3, [r7, #23]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	4413      	add	r3, r2
 800aed2:	2203      	movs	r2, #3
 800aed4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	3301      	adds	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aedc:	e013      	b.n	800af06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	4413      	add	r3, r2
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3301      	adds	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
    idx++;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	3301      	adds	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	4413      	add	r3, r2
 800aefc:	2200      	movs	r2, #0
 800aefe:	701a      	strb	r2, [r3, #0]
    idx++;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	3301      	adds	r3, #1
 800af04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e7      	bne.n	800aede <USBD_GetString+0x52>
 800af0e:	e000      	b.n	800af12 <USBD_GetString+0x86>
    return;
 800af10:	bf00      	nop
  }
}
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af28:	e005      	b.n	800af36 <USBD_GetLen+0x1e>
  {
    len++;
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	3301      	adds	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	3301      	adds	r3, #1
 800af34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f5      	bne.n	800af2a <USBD_GetLen+0x12>
  }

  return len;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2202      	movs	r2, #2
 800af5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	2100      	movs	r1, #0
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 ffa3 	bl	800bebe <USBD_LL_Transmit>

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	2100      	movs	r1, #0
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 ff92 	bl	800bebe <USBD_LL_Transmit>

  return USBD_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2203      	movs	r2, #3
 800afb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	2100      	movs	r1, #0
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 ff96 	bl	800bf00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	2100      	movs	r1, #0
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 ff85 	bl	800bf00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2204      	movs	r2, #4
 800b00c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b010:	2300      	movs	r3, #0
 800b012:	2200      	movs	r2, #0
 800b014:	2100      	movs	r1, #0
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 ff51 	bl	800bebe <USBD_LL_Transmit>

  return USBD_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2205      	movs	r2, #5
 800b032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b036:	2300      	movs	r3, #0
 800b038:	2200      	movs	r2, #0
 800b03a:	2100      	movs	r1, #0
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 ff5f 	bl	800bf00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800b050:	2200      	movs	r2, #0
 800b052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b056:	4802      	ldr	r0, [pc, #8]	@ (800b060 <ST7735_Select+0x14>)
 800b058:	f7f7 fd82 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800b05c:	bf00      	nop
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40020000 	.word	0x40020000

0800b064 <ST7735_Unselect>:

void ST7735_Unselect() {
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800b068:	2201      	movs	r2, #1
 800b06a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b06e:	4802      	ldr	r0, [pc, #8]	@ (800b078 <ST7735_Unselect+0x14>)
 800b070:	f7f7 fd76 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800b074:	bf00      	nop
 800b076:	bd80      	pop	{r7, pc}
 800b078:	40020000 	.word	0x40020000

0800b07c <ST7735_Reset>:

void ST7735_Reset() {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800b080:	2200      	movs	r2, #0
 800b082:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b086:	4807      	ldr	r0, [pc, #28]	@ (800b0a4 <ST7735_Reset+0x28>)
 800b088:	f7f7 fd6a 	bl	8002b60 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800b08c:	2005      	movs	r0, #5
 800b08e:	f7f6 fd61 	bl	8001b54 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800b092:	2201      	movs	r2, #1
 800b094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b098:	4802      	ldr	r0, [pc, #8]	@ (800b0a4 <ST7735_Reset+0x28>)
 800b09a:	f7f7 fd61 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800b09e:	bf00      	nop
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40020000 	.word	0x40020000

0800b0a8 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2110      	movs	r1, #16
 800b0b6:	4807      	ldr	r0, [pc, #28]	@ (800b0d4 <ST7735_WriteCommand+0x2c>)
 800b0b8:	f7f7 fd52 	bl	8002b60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b0bc:	1df9      	adds	r1, r7, #7
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4804      	ldr	r0, [pc, #16]	@ (800b0d8 <ST7735_WriteCommand+0x30>)
 800b0c6:	f7fa fe21 	bl	8005d0c <HAL_SPI_Transmit>
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	40020000 	.word	0x40020000
 800b0d8:	20000700 	.word	0x20000700

0800b0dc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	2110      	movs	r1, #16
 800b0ea:	4807      	ldr	r0, [pc, #28]	@ (800b108 <ST7735_WriteData+0x2c>)
 800b0ec:	f7f7 fd38 	bl	8002b60 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	4804      	ldr	r0, [pc, #16]	@ (800b10c <ST7735_WriteData+0x30>)
 800b0fc:	f7fa fe06 	bl	8005d0c <HAL_SPI_Transmit>
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	40020000 	.word	0x40020000
 800b10c:	20000700 	.word	0x20000700

0800b110 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	607a      	str	r2, [r7, #4]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800b122:	e034      	b.n	800b18e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	607a      	str	r2, [r7, #4]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff ffb9 	bl	800b0a8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800b140:	7abb      	ldrb	r3, [r7, #10]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b148:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800b14a:	7abb      	ldrb	r3, [r7, #10]
 800b14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b150:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800b152:	7abb      	ldrb	r3, [r7, #10]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d008      	beq.n	800b16a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800b158:	7abb      	ldrb	r3, [r7, #10]
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff ffbd 	bl	800b0dc <ST7735_WriteData>
            addr += numArgs;
 800b162:	7abb      	ldrb	r3, [r7, #10]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	4413      	add	r3, r2
 800b168:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800b16a:	89bb      	ldrh	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800b17a:	89bb      	ldrh	r3, [r7, #12]
 800b17c:	2bff      	cmp	r3, #255	@ 0xff
 800b17e:	d102      	bne.n	800b186 <ST7735_ExecuteCommandList+0x76>
 800b180:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b184:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800b186:	89bb      	ldrh	r3, [r7, #12]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f6 fce3 	bl	8001b54 <HAL_Delay>
    while(numCommands--) {
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	1e5a      	subs	r2, r3, #1
 800b192:	73fa      	strb	r2, [r7, #15]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1c5      	bne.n	800b124 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800b1a2:	b590      	push	{r4, r7, lr}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	71fb      	strb	r3, [r7, #7]
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	71bb      	strb	r3, [r7, #6]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	717b      	strb	r3, [r7, #5]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800b1c0:	202a      	movs	r0, #42	@ 0x2a
 800b1c2:	f7ff ff71 	bl	800b0a8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	733b      	strb	r3, [r7, #12]
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	737b      	strb	r3, [r7, #13]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73bb      	strb	r3, [r7, #14]
 800b1d2:	797b      	ldrb	r3, [r7, #5]
 800b1d4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b1d6:	f107 030c 	add.w	r3, r7, #12
 800b1da:	2104      	movs	r1, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff ff7d 	bl	800b0dc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800b1e2:	202b      	movs	r0, #43	@ 0x2b
 800b1e4:	f7ff ff60 	bl	800b0a8 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800b1e8:	79bb      	ldrb	r3, [r7, #6]
 800b1ea:	3318      	adds	r3, #24
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800b1f0:	793b      	ldrb	r3, [r7, #4]
 800b1f2:	3318      	adds	r3, #24
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b1f8:	f107 030c 	add.w	r3, r7, #12
 800b1fc:	2104      	movs	r1, #4
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff ff6c 	bl	800b0dc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800b204:	202c      	movs	r0, #44	@ 0x2c
 800b206:	f7ff ff4f 	bl	800b0a8 <ST7735_WriteCommand>
}
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd90      	pop	{r4, r7, pc}
	...

0800b214 <ST7735_Init>:

void ST7735_Init() {
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
    ST7735_Select();
 800b218:	f7ff ff18 	bl	800b04c <ST7735_Select>
    ST7735_Reset();
 800b21c:	f7ff ff2e 	bl	800b07c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800b220:	4806      	ldr	r0, [pc, #24]	@ (800b23c <ST7735_Init+0x28>)
 800b222:	f7ff ff75 	bl	800b110 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800b226:	4806      	ldr	r0, [pc, #24]	@ (800b240 <ST7735_Init+0x2c>)
 800b228:	f7ff ff72 	bl	800b110 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800b22c:	4805      	ldr	r0, [pc, #20]	@ (800b244 <ST7735_Init+0x30>)
 800b22e:	f7ff ff6f 	bl	800b110 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800b232:	f7ff ff17 	bl	800b064 <ST7735_Unselect>
}
 800b236:	bf00      	nop
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	080102e8 	.word	0x080102e8
 800b240:	08010324 	.word	0x08010324
 800b244:	08010334 	.word	0x08010334

0800b248 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	80fb      	strh	r3, [r7, #6]
 800b252:	460b      	mov	r3, r1
 800b254:	80bb      	strh	r3, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	2b9f      	cmp	r3, #159	@ 0x9f
 800b25e:	d823      	bhi.n	800b2a8 <ST7735_DrawPixel+0x60>
 800b260:	88bb      	ldrh	r3, [r7, #4]
 800b262:	2b4f      	cmp	r3, #79	@ 0x4f
 800b264:	d820      	bhi.n	800b2a8 <ST7735_DrawPixel+0x60>
        return;
		
    ST7735_Select();
 800b266:	f7ff fef1 	bl	800b04c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800b26a:	88fb      	ldrh	r3, [r7, #6]
 800b26c:	b2d8      	uxtb	r0, r3
 800b26e:	88bb      	ldrh	r3, [r7, #4]
 800b270:	b2d9      	uxtb	r1, r3
 800b272:	88fb      	ldrh	r3, [r7, #6]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	3301      	adds	r3, #1
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	88bb      	ldrh	r3, [r7, #4]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	3301      	adds	r3, #1
 800b280:	b2db      	uxtb	r3, r3
 800b282:	f7ff ff8e 	bl	800b1a2 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800b286:	887b      	ldrh	r3, [r7, #2]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	733b      	strb	r3, [r7, #12]
 800b290:	887b      	ldrh	r3, [r7, #2]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800b296:	f107 030c 	add.w	r3, r7, #12
 800b29a:	2102      	movs	r1, #2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff ff1d 	bl	800b0dc <ST7735_WriteData>
    ST7735_Unselect();
 800b2a2:	f7ff fedf 	bl	800b064 <ST7735_Unselect>
 800b2a6:	e000      	b.n	800b2aa <ST7735_DrawPixel+0x62>
        return;
 800b2a8:	bf00      	nop
}
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	b590      	push	{r4, r7, lr}
 800b2b4:	b089      	sub	sp, #36	@ 0x24
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	80fb      	strh	r3, [r7, #6]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	80bb      	strh	r3, [r7, #4]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	b2d8      	uxtb	r0, r3
 800b2ca:	88bb      	ldrh	r3, [r7, #4]
 800b2cc:	b2d9      	uxtb	r1, r3
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	b2dc      	uxtb	r4, r3
 800b2de:	88bb      	ldrh	r3, [r7, #4]
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	f7ff ff57 	bl	800b1a2 <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 800b2f8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d106      	bne.n	800b30e <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 800b300:	230e      	movs	r3, #14
 800b302:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	2b25      	cmp	r3, #37	@ 0x25
 800b308:	d101      	bne.n	800b30e <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 800b30a:	2304      	movs	r3, #4
 800b30c:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]
 800b312:	e044      	b.n	800b39e <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 800b314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b316:	78f9      	ldrb	r1, [r7, #3]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	1acb      	subs	r3, r1, r3
 800b31c:	3b20      	subs	r3, #32
 800b31e:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800b322:	fb03 f101 	mul.w	r1, r3, r1
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	440b      	add	r3, r1
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 800b332:	2300      	movs	r3, #0
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	e029      	b.n	800b38c <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	fa02 f303 	lsl.w	r3, r2, r3
 800b340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00e      	beq.n	800b366 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800b348:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b34a:	0a1b      	lsrs	r3, r3, #8
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	733b      	strb	r3, [r7, #12]
 800b352:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	2102      	movs	r1, #2
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff febc 	bl	800b0dc <ST7735_WriteData>
 800b364:	e00f      	b.n	800b386 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800b366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b36a:	0a1b      	lsrs	r3, r3, #8
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	723b      	strb	r3, [r7, #8]
 800b372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b376:	b2db      	uxtb	r3, r3
 800b378:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 800b37a:	f107 0308 	add.w	r3, r7, #8
 800b37e:	2102      	movs	r1, #2
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff feab 	bl	800b0dc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	3301      	adds	r3, #1
 800b38a:	61bb      	str	r3, [r7, #24]
 800b38c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b390:	461a      	mov	r2, r3
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	4293      	cmp	r3, r2
 800b396:	d3cf      	bcc.n	800b338 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	3301      	adds	r3, #1
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d3b4      	bcc.n	800b314 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 800b3aa:	bf00      	nop
 800b3ac:	bf00      	nop
 800b3ae:	3724      	adds	r7, #36	@ 0x24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b3b6:	b002      	add	sp, #8
 800b3b8:	4770      	bx	lr

0800b3ba <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af04      	add	r7, sp, #16
 800b3c2:	603a      	str	r2, [r7, #0]
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	80fb      	strh	r3, [r7, #6]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800b3ce:	f7ff fe3d 	bl	800b04c <ST7735_Select>

    while(*str) {
 800b3d2:	e02d      	b.n	800b430 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800b3d4:	88fb      	ldrh	r3, [r7, #6]
 800b3d6:	7d3a      	ldrb	r2, [r7, #20]
 800b3d8:	4413      	add	r3, r2
 800b3da:	2b9f      	cmp	r3, #159	@ 0x9f
 800b3dc:	dd13      	ble.n	800b406 <ST7735_WriteString+0x4c>
            x = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800b3e2:	7d7b      	ldrb	r3, [r7, #21]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	88bb      	ldrh	r3, [r7, #4]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800b3ec:	88bb      	ldrh	r3, [r7, #4]
 800b3ee:	7d7a      	ldrb	r2, [r7, #21]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	2b4f      	cmp	r3, #79	@ 0x4f
 800b3f4:	dc21      	bgt.n	800b43a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	d103      	bne.n	800b406 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	603b      	str	r3, [r7, #0]
                continue;
 800b404:	e014      	b.n	800b430 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781a      	ldrb	r2, [r3, #0]
 800b40a:	88b9      	ldrh	r1, [r7, #4]
 800b40c:	88f8      	ldrh	r0, [r7, #6]
 800b40e:	8c3b      	ldrh	r3, [r7, #32]
 800b410:	9302      	str	r3, [sp, #8]
 800b412:	8bbb      	ldrh	r3, [r7, #28]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f7ff ff48 	bl	800b2b0 <ST7735_WriteChar>
        x += font.width;
 800b420:	7d3b      	ldrb	r3, [r7, #20]
 800b422:	461a      	mov	r2, r3
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	4413      	add	r3, r2
 800b428:	80fb      	strh	r3, [r7, #6]
        str++;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
    while(*str) {
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1cd      	bne.n	800b3d4 <ST7735_WriteString+0x1a>
 800b438:	e000      	b.n	800b43c <ST7735_WriteString+0x82>
                break;
 800b43a:	bf00      	nop
    }

    ST7735_Unselect();
 800b43c:	f7ff fe12 	bl	800b064 <ST7735_Unselect>
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b44a:	b002      	add	sp, #8
 800b44c:	4770      	bx	lr
	...

0800b450 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	4611      	mov	r1, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	4623      	mov	r3, r4
 800b460:	80fb      	strh	r3, [r7, #6]
 800b462:	4603      	mov	r3, r0
 800b464:	80bb      	strh	r3, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	807b      	strh	r3, [r7, #2]
 800b46a:	4613      	mov	r3, r2
 800b46c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b46e:	88fb      	ldrh	r3, [r7, #6]
 800b470:	2b9f      	cmp	r3, #159	@ 0x9f
 800b472:	d857      	bhi.n	800b524 <ST7735_FillRectangle+0xd4>
 800b474:	88bb      	ldrh	r3, [r7, #4]
 800b476:	2b4f      	cmp	r3, #79	@ 0x4f
 800b478:	d854      	bhi.n	800b524 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800b47a:	88fa      	ldrh	r2, [r7, #6]
 800b47c:	887b      	ldrh	r3, [r7, #2]
 800b47e:	4413      	add	r3, r2
 800b480:	2ba0      	cmp	r3, #160	@ 0xa0
 800b482:	dd03      	ble.n	800b48c <ST7735_FillRectangle+0x3c>
 800b484:	88fb      	ldrh	r3, [r7, #6]
 800b486:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800b48a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800b48c:	88ba      	ldrh	r2, [r7, #4]
 800b48e:	883b      	ldrh	r3, [r7, #0]
 800b490:	4413      	add	r3, r2
 800b492:	2b50      	cmp	r3, #80	@ 0x50
 800b494:	dd03      	ble.n	800b49e <ST7735_FillRectangle+0x4e>
 800b496:	88bb      	ldrh	r3, [r7, #4]
 800b498:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800b49c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800b49e:	f7ff fdd5 	bl	800b04c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b4a2:	88fb      	ldrh	r3, [r7, #6]
 800b4a4:	b2d8      	uxtb	r0, r3
 800b4a6:	88bb      	ldrh	r3, [r7, #4]
 800b4a8:	b2d9      	uxtb	r1, r3
 800b4aa:	88fb      	ldrh	r3, [r7, #6]
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	887b      	ldrh	r3, [r7, #2]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	4413      	add	r3, r2
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b2dc      	uxtb	r4, r3
 800b4ba:	88bb      	ldrh	r3, [r7, #4]
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	883b      	ldrh	r3, [r7, #0]
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	f7ff fe69 	bl	800b1a2 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800b4d0:	8c3b      	ldrh	r3, [r7, #32]
 800b4d2:	0a1b      	lsrs	r3, r3, #8
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	733b      	strb	r3, [r7, #12]
 800b4da:	8c3b      	ldrh	r3, [r7, #32]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	2110      	movs	r1, #16
 800b4e4:	4811      	ldr	r0, [pc, #68]	@ (800b52c <ST7735_FillRectangle+0xdc>)
 800b4e6:	f7f7 fb3b 	bl	8002b60 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800b4ea:	883b      	ldrh	r3, [r7, #0]
 800b4ec:	80bb      	strh	r3, [r7, #4]
 800b4ee:	e013      	b.n	800b518 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	80fb      	strh	r3, [r7, #6]
 800b4f4:	e00a      	b.n	800b50c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800b4f6:	f107 010c 	add.w	r1, r7, #12
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fe:	2202      	movs	r2, #2
 800b500:	480b      	ldr	r0, [pc, #44]	@ (800b530 <ST7735_FillRectangle+0xe0>)
 800b502:	f7fa fc03 	bl	8005d0c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	3b01      	subs	r3, #1
 800b50a:	80fb      	strh	r3, [r7, #6]
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1f1      	bne.n	800b4f6 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800b512:	88bb      	ldrh	r3, [r7, #4]
 800b514:	3b01      	subs	r3, #1
 800b516:	80bb      	strh	r3, [r7, #4]
 800b518:	88bb      	ldrh	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e8      	bne.n	800b4f0 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800b51e:	f7ff fda1 	bl	800b064 <ST7735_Unselect>
 800b522:	e000      	b.n	800b526 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b524:	bf00      	nop
}
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}
 800b52c:	40020000 	.word	0x40020000
 800b530:	20000700 	.word	0x20000700

0800b534 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af02      	add	r7, sp, #8
 800b53a:	4603      	mov	r3, r0
 800b53c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800b53e:	88fb      	ldrh	r3, [r7, #6]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	2350      	movs	r3, #80	@ 0x50
 800b544:	22a0      	movs	r2, #160	@ 0xa0
 800b546:	2100      	movs	r1, #0
 800b548:	2000      	movs	r0, #0
 800b54a:	f7ff ff81 	bl	800b450 <ST7735_FillRectangle>
}
 800b54e:	bf00      	nop
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t* data) {
 800b556:	b590      	push	{r4, r7, lr}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	4604      	mov	r4, r0
 800b55e:	4608      	mov	r0, r1
 800b560:	4611      	mov	r1, r2
 800b562:	461a      	mov	r2, r3
 800b564:	4623      	mov	r3, r4
 800b566:	80fb      	strh	r3, [r7, #6]
 800b568:	4603      	mov	r3, r0
 800b56a:	80bb      	strh	r3, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	807b      	strh	r3, [r7, #2]
 800b570:	4613      	mov	r3, r2
 800b572:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	2b9f      	cmp	r3, #159	@ 0x9f
 800b578:	d831      	bhi.n	800b5de <ST7735_DrawImage+0x88>
 800b57a:	88bb      	ldrh	r3, [r7, #4]
 800b57c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b57e:	d82e      	bhi.n	800b5de <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800b580:	88fa      	ldrh	r2, [r7, #6]
 800b582:	887b      	ldrh	r3, [r7, #2]
 800b584:	4413      	add	r3, r2
 800b586:	2ba0      	cmp	r3, #160	@ 0xa0
 800b588:	dc2b      	bgt.n	800b5e2 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800b58a:	88ba      	ldrh	r2, [r7, #4]
 800b58c:	883b      	ldrh	r3, [r7, #0]
 800b58e:	4413      	add	r3, r2
 800b590:	2b50      	cmp	r3, #80	@ 0x50
 800b592:	dc28      	bgt.n	800b5e6 <ST7735_DrawImage+0x90>

    ST7735_Select();
 800b594:	f7ff fd5a 	bl	800b04c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	b2d8      	uxtb	r0, r3
 800b59c:	88bb      	ldrh	r3, [r7, #4]
 800b59e:	b2d9      	uxtb	r1, r3
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	887b      	ldrh	r3, [r7, #2]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b2dc      	uxtb	r4, r3
 800b5b0:	88bb      	ldrh	r3, [r7, #4]
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	883b      	ldrh	r3, [r7, #0]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	4413      	add	r3, r2
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	f7ff fdee 	bl	800b1a2 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800b5c6:	887b      	ldrh	r3, [r7, #2]
 800b5c8:	883a      	ldrh	r2, [r7, #0]
 800b5ca:	fb02 f303 	mul.w	r3, r2, r3
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	69b8      	ldr	r0, [r7, #24]
 800b5d4:	f7ff fd82 	bl	800b0dc <ST7735_WriteData>
    ST7735_Unselect();
 800b5d8:	f7ff fd44 	bl	800b064 <ST7735_Unselect>
 800b5dc:	e004      	b.n	800b5e8 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b5de:	bf00      	nop
 800b5e0:	e002      	b.n	800b5e8 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800b5e2:	bf00      	nop
 800b5e4:	e000      	b.n	800b5e8 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800b5e6:	bf00      	nop
}
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd90      	pop	{r4, r7, pc}

0800b5ee <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert) {
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800b5f8:	f7ff fd28 	bl	800b04c <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <ST7735_InvertColors+0x18>
 800b602:	2321      	movs	r3, #33	@ 0x21
 800b604:	e000      	b.n	800b608 <ST7735_InvertColors+0x1a>
 800b606:	2320      	movs	r3, #32
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fd4d 	bl	800b0a8 <ST7735_WriteCommand>
    ST7735_Unselect();
 800b60e:	f7ff fd29 	bl	800b064 <ST7735_Unselect>
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b620:	2200      	movs	r2, #0
 800b622:	4912      	ldr	r1, [pc, #72]	@ (800b66c <MX_USB_DEVICE_Init+0x50>)
 800b624:	4812      	ldr	r0, [pc, #72]	@ (800b670 <MX_USB_DEVICE_Init+0x54>)
 800b626:	f7fe fa21 	bl	8009a6c <USBD_Init>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b630:	f7f5 fe1e 	bl	8001270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b634:	490f      	ldr	r1, [pc, #60]	@ (800b674 <MX_USB_DEVICE_Init+0x58>)
 800b636:	480e      	ldr	r0, [pc, #56]	@ (800b670 <MX_USB_DEVICE_Init+0x54>)
 800b638:	f7fe fa48 	bl	8009acc <USBD_RegisterClass>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b642:	f7f5 fe15 	bl	8001270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b646:	490c      	ldr	r1, [pc, #48]	@ (800b678 <MX_USB_DEVICE_Init+0x5c>)
 800b648:	4809      	ldr	r0, [pc, #36]	@ (800b670 <MX_USB_DEVICE_Init+0x54>)
 800b64a:	f7fe f97f 	bl	800994c <USBD_CDC_RegisterInterface>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b654:	f7f5 fe0c 	bl	8001270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b658:	4805      	ldr	r0, [pc, #20]	@ (800b670 <MX_USB_DEVICE_Init+0x54>)
 800b65a:	f7fe fa6d 	bl	8009b38 <USBD_Start>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b664:	f7f5 fe04 	bl	8001270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b668:	bf00      	nop
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20000588 	.word	0x20000588
 800b670:	20000950 	.word	0x20000950
 800b674:	200004dc 	.word	0x200004dc
 800b678:	20000574 	.word	0x20000574

0800b67c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b680:	2200      	movs	r2, #0
 800b682:	4905      	ldr	r1, [pc, #20]	@ (800b698 <CDC_Init_FS+0x1c>)
 800b684:	4805      	ldr	r0, [pc, #20]	@ (800b69c <CDC_Init_FS+0x20>)
 800b686:	f7fe f97b 	bl	8009980 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b68a:	4905      	ldr	r1, [pc, #20]	@ (800b6a0 <CDC_Init_FS+0x24>)
 800b68c:	4803      	ldr	r0, [pc, #12]	@ (800b69c <CDC_Init_FS+0x20>)
 800b68e:	f7fe f999 	bl	80099c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b692:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b694:	4618      	mov	r0, r3
 800b696:	bd80      	pop	{r7, pc}
 800b698:	2000102c 	.word	0x2000102c
 800b69c:	20000950 	.word	0x20000950
 800b6a0:	20000c2c 	.word	0x20000c2c

0800b6a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	2b23      	cmp	r3, #35	@ 0x23
 800b6c8:	d84a      	bhi.n	800b760 <CDC_Control_FS+0xac>
 800b6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <CDC_Control_FS+0x1c>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b761 	.word	0x0800b761
 800b6d4:	0800b761 	.word	0x0800b761
 800b6d8:	0800b761 	.word	0x0800b761
 800b6dc:	0800b761 	.word	0x0800b761
 800b6e0:	0800b761 	.word	0x0800b761
 800b6e4:	0800b761 	.word	0x0800b761
 800b6e8:	0800b761 	.word	0x0800b761
 800b6ec:	0800b761 	.word	0x0800b761
 800b6f0:	0800b761 	.word	0x0800b761
 800b6f4:	0800b761 	.word	0x0800b761
 800b6f8:	0800b761 	.word	0x0800b761
 800b6fc:	0800b761 	.word	0x0800b761
 800b700:	0800b761 	.word	0x0800b761
 800b704:	0800b761 	.word	0x0800b761
 800b708:	0800b761 	.word	0x0800b761
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b761 	.word	0x0800b761
 800b714:	0800b761 	.word	0x0800b761
 800b718:	0800b761 	.word	0x0800b761
 800b71c:	0800b761 	.word	0x0800b761
 800b720:	0800b761 	.word	0x0800b761
 800b724:	0800b761 	.word	0x0800b761
 800b728:	0800b761 	.word	0x0800b761
 800b72c:	0800b761 	.word	0x0800b761
 800b730:	0800b761 	.word	0x0800b761
 800b734:	0800b761 	.word	0x0800b761
 800b738:	0800b761 	.word	0x0800b761
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b761 	.word	0x0800b761
 800b744:	0800b761 	.word	0x0800b761
 800b748:	0800b761 	.word	0x0800b761
 800b74c:	0800b761 	.word	0x0800b761
 800b750:	0800b761 	.word	0x0800b761
 800b754:	0800b761 	.word	0x0800b761
 800b758:	0800b761 	.word	0x0800b761
 800b75c:	0800b761 	.word	0x0800b761
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b760:	bf00      	nop
  }

  return (USBD_OK);
 800b762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	4805      	ldr	r0, [pc, #20]	@ (800b794 <CDC_Receive_FS+0x24>)
 800b77e:	f7fe f921 	bl	80099c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b782:	4804      	ldr	r0, [pc, #16]	@ (800b794 <CDC_Receive_FS+0x24>)
 800b784:	f7fe f93c 	bl	8009a00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b788:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20000950 	.word	0x20000950

0800b798 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2212      	movs	r2, #18
 800b7cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7ce:	4b03      	ldr	r3, [pc, #12]	@ (800b7dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	200005a4 	.word	0x200005a4

0800b7e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7f2:	4b03      	ldr	r3, [pc, #12]	@ (800b800 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	200005b8 	.word	0x200005b8

0800b804 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	6039      	str	r1, [r7, #0]
 800b80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	4907      	ldr	r1, [pc, #28]	@ (800b838 <USBD_FS_ProductStrDescriptor+0x34>)
 800b81a:	4808      	ldr	r0, [pc, #32]	@ (800b83c <USBD_FS_ProductStrDescriptor+0x38>)
 800b81c:	f7ff fb36 	bl	800ae8c <USBD_GetString>
 800b820:	e004      	b.n	800b82c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	4904      	ldr	r1, [pc, #16]	@ (800b838 <USBD_FS_ProductStrDescriptor+0x34>)
 800b826:	4805      	ldr	r0, [pc, #20]	@ (800b83c <USBD_FS_ProductStrDescriptor+0x38>)
 800b828:	f7ff fb30 	bl	800ae8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b82c:	4b02      	ldr	r3, [pc, #8]	@ (800b838 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	2000142c 	.word	0x2000142c
 800b83c:	0800da64 	.word	0x0800da64

0800b840 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	6039      	str	r1, [r7, #0]
 800b84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	4904      	ldr	r1, [pc, #16]	@ (800b860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b850:	4804      	ldr	r0, [pc, #16]	@ (800b864 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b852:	f7ff fb1b 	bl	800ae8c <USBD_GetString>
  return USBD_StrDesc;
 800b856:	4b02      	ldr	r3, [pc, #8]	@ (800b860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	2000142c 	.word	0x2000142c
 800b864:	0800da7c 	.word	0x0800da7c

0800b868 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	6039      	str	r1, [r7, #0]
 800b872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	221a      	movs	r2, #26
 800b878:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b87a:	f000 f843 	bl	800b904 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b87e:	4b02      	ldr	r3, [pc, #8]	@ (800b888 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	200005bc 	.word	0x200005bc

0800b88c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	6039      	str	r1, [r7, #0]
 800b896:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d105      	bne.n	800b8aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	4907      	ldr	r1, [pc, #28]	@ (800b8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8a2:	4808      	ldr	r0, [pc, #32]	@ (800b8c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8a4:	f7ff faf2 	bl	800ae8c <USBD_GetString>
 800b8a8:	e004      	b.n	800b8b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	4904      	ldr	r1, [pc, #16]	@ (800b8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8ae:	4805      	ldr	r0, [pc, #20]	@ (800b8c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8b0:	f7ff faec 	bl	800ae8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8b4:	4b02      	ldr	r3, [pc, #8]	@ (800b8c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	2000142c 	.word	0x2000142c
 800b8c4:	0800da90 	.word	0x0800da90

0800b8c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d105      	bne.n	800b8e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	4907      	ldr	r1, [pc, #28]	@ (800b8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8de:	4808      	ldr	r0, [pc, #32]	@ (800b900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8e0:	f7ff fad4 	bl	800ae8c <USBD_GetString>
 800b8e4:	e004      	b.n	800b8f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	4904      	ldr	r1, [pc, #16]	@ (800b8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8ea:	4805      	ldr	r0, [pc, #20]	@ (800b900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8ec:	f7ff face 	bl	800ae8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8f0:	4b02      	ldr	r3, [pc, #8]	@ (800b8fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	2000142c 	.word	0x2000142c
 800b900:	0800da9c 	.word	0x0800da9c

0800b904 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b90a:	4b0f      	ldr	r3, [pc, #60]	@ (800b948 <Get_SerialNum+0x44>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b910:	4b0e      	ldr	r3, [pc, #56]	@ (800b94c <Get_SerialNum+0x48>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b916:	4b0e      	ldr	r3, [pc, #56]	@ (800b950 <Get_SerialNum+0x4c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4413      	add	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b92a:	2208      	movs	r2, #8
 800b92c:	4909      	ldr	r1, [pc, #36]	@ (800b954 <Get_SerialNum+0x50>)
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f000 f814 	bl	800b95c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b934:	2204      	movs	r2, #4
 800b936:	4908      	ldr	r1, [pc, #32]	@ (800b958 <Get_SerialNum+0x54>)
 800b938:	68b8      	ldr	r0, [r7, #8]
 800b93a:	f000 f80f 	bl	800b95c <IntToUnicode>
  }
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	1fff7a10 	.word	0x1fff7a10
 800b94c:	1fff7a14 	.word	0x1fff7a14
 800b950:	1fff7a18 	.word	0x1fff7a18
 800b954:	200005be 	.word	0x200005be
 800b958:	200005ce 	.word	0x200005ce

0800b95c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	4613      	mov	r3, r2
 800b968:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b96e:	2300      	movs	r3, #0
 800b970:	75fb      	strb	r3, [r7, #23]
 800b972:	e027      	b.n	800b9c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	0f1b      	lsrs	r3, r3, #28
 800b978:	2b09      	cmp	r3, #9
 800b97a:	d80b      	bhi.n	800b994 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	0f1b      	lsrs	r3, r3, #28
 800b980:	b2da      	uxtb	r2, r3
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	4619      	mov	r1, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	440b      	add	r3, r1
 800b98c:	3230      	adds	r2, #48	@ 0x30
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	e00a      	b.n	800b9aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	0f1b      	lsrs	r3, r3, #28
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3237      	adds	r2, #55	@ 0x37
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	75fb      	strb	r3, [r7, #23]
 800b9c4:	7dfa      	ldrb	r2, [r7, #23]
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d3d3      	bcc.n	800b974 <IntToUnicode+0x18>
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	bf00      	nop
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
	...

0800b9dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08a      	sub	sp, #40	@ 0x28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e4:	f107 0314 	add.w	r3, r7, #20
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	605a      	str	r2, [r3, #4]
 800b9ee:	609a      	str	r2, [r3, #8]
 800b9f0:	60da      	str	r2, [r3, #12]
 800b9f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9fc:	d13a      	bne.n	800ba74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9fe:	2300      	movs	r3, #0
 800ba00:	613b      	str	r3, [r7, #16]
 800ba02:	4b1e      	ldr	r3, [pc, #120]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba06:	4a1d      	ldr	r2, [pc, #116]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba08:	f043 0301 	orr.w	r3, r3, #1
 800ba0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ba1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba20:	2302      	movs	r3, #2
 800ba22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba2c:	230a      	movs	r3, #10
 800ba2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba30:	f107 0314 	add.w	r3, r7, #20
 800ba34:	4619      	mov	r1, r3
 800ba36:	4812      	ldr	r0, [pc, #72]	@ (800ba80 <HAL_PCD_MspInit+0xa4>)
 800ba38:	f7f6 ff0e 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	4a0e      	ldr	r2, [pc, #56]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba46:	6353      	str	r3, [r2, #52]	@ 0x34
 800ba48:	2300      	movs	r3, #0
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ba56:	6453      	str	r3, [r2, #68]	@ 0x44
 800ba58:	4b08      	ldr	r3, [pc, #32]	@ (800ba7c <HAL_PCD_MspInit+0xa0>)
 800ba5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba64:	2200      	movs	r2, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	2043      	movs	r0, #67	@ 0x43
 800ba6a:	f7f6 fbd4 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba6e:	2043      	movs	r0, #67	@ 0x43
 800ba70:	f7f6 fbed 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba74:	bf00      	nop
 800ba76:	3728      	adds	r7, #40	@ 0x28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	40023800 	.word	0x40023800
 800ba80:	40020000 	.word	0x40020000

0800ba84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fe f899 	bl	8009bd2 <USBD_LL_SetupStage>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	4613      	mov	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	440b      	add	r3, r1
 800bac8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	4619      	mov	r1, r3
 800bad2:	f7fe f8d3 	bl	8009c7c <USBD_LL_DataOutStage>
}
 800bad6:	bf00      	nop
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800baf0:	78fa      	ldrb	r2, [r7, #3]
 800baf2:	6879      	ldr	r1, [r7, #4]
 800baf4:	4613      	mov	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	4413      	add	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	440b      	add	r3, r1
 800bafe:	334c      	adds	r3, #76	@ 0x4c
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7fe f96c 	bl	8009de2 <USBD_LL_DataInStage>
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fe faa0 	bl	800a066 <USBD_LL_SOF>
}
 800bb26:	bf00      	nop
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb36:	2301      	movs	r3, #1
 800bb38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d001      	beq.n	800bb46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb42:	f7f5 fb95 	bl	8001270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb4c:	7bfa      	ldrb	r2, [r7, #15]
 800bb4e:	4611      	mov	r1, r2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe fa4a 	bl	8009fea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe f9f2 	bl	8009f46 <USBD_LL_Reset>
}
 800bb62:	bf00      	nop
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fa45 	bl	800a00a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	6812      	ldr	r2, [r2, #0]
 800bb8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bba0:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <HAL_PCD_SuspendCallback+0x48>)
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	4a03      	ldr	r2, [pc, #12]	@ (800bbb4 <HAL_PCD_SuspendCallback+0x48>)
 800bba6:	f043 0306 	orr.w	r3, r3, #6
 800bbaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	e000ed00 	.word	0xe000ed00

0800bbb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe fa35 	bl	800a036 <USBD_LL_Resume>
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bbe6:	78fa      	ldrb	r2, [r7, #3]
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fa8d 	bl	800a10a <USBD_LL_IsoOUTIncomplete>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bc0a:	78fa      	ldrb	r2, [r7, #3]
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe fa49 	bl	800a0a6 <USBD_LL_IsoINIncomplete>
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe fa9f 	bl	800a16e <USBD_LL_DevConnected>
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fa9c 	bl	800a184 <USBD_LL_DevDisconnected>
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d13c      	bne.n	800bcde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc64:	4a20      	ldr	r2, [pc, #128]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc70:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc74:	4b1c      	ldr	r3, [pc, #112]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc7e:	2204      	movs	r2, #4
 800bc80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bc82:	4b19      	ldr	r3, [pc, #100]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc84:	2202      	movs	r2, #2
 800bc86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc88:	4b17      	ldr	r3, [pc, #92]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc8e:	4b16      	ldr	r3, [pc, #88]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc90:	2202      	movs	r2, #2
 800bc92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc94:	4b14      	ldr	r3, [pc, #80]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc9a:	4b13      	ldr	r3, [pc, #76]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bca0:	4b11      	ldr	r3, [pc, #68]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bca6:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bcac:	4b0e      	ldr	r3, [pc, #56]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bcb2:	480d      	ldr	r0, [pc, #52]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bcb4:	f7f7 fbe1 	bl	800347a <HAL_PCD_Init>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bcbe:	f7f5 fad7 	bl	8001270 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcc2:	2180      	movs	r1, #128	@ 0x80
 800bcc4:	4808      	ldr	r0, [pc, #32]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bcc6:	f7f8 fe38 	bl	800493a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcca:	2240      	movs	r2, #64	@ 0x40
 800bccc:	2100      	movs	r1, #0
 800bcce:	4806      	ldr	r0, [pc, #24]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bcd0:	f7f8 fdec 	bl	80048ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bcd4:	2280      	movs	r2, #128	@ 0x80
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	4803      	ldr	r0, [pc, #12]	@ (800bce8 <USBD_LL_Init+0x94>)
 800bcda:	f7f8 fde7 	bl	80048ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	2000162c 	.word	0x2000162c

0800bcec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f7 fcd6 	bl	80036b4 <HAL_PCD_Start>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 f942 	bl	800bf98 <USBD_Get_USB_Status>
 800bd14:	4603      	mov	r3, r0
 800bd16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b084      	sub	sp, #16
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	4608      	mov	r0, r1
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4603      	mov	r3, r0
 800bd32:	70fb      	strb	r3, [r7, #3]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70bb      	strb	r3, [r7, #2]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd4a:	78bb      	ldrb	r3, [r7, #2]
 800bd4c:	883a      	ldrh	r2, [r7, #0]
 800bd4e:	78f9      	ldrb	r1, [r7, #3]
 800bd50:	f7f8 f9a7 	bl	80040a2 <HAL_PCD_EP_Open>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 f91c 	bl	800bf98 <USBD_Get_USB_Status>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	460b      	mov	r3, r1
 800bd78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd88:	78fa      	ldrb	r2, [r7, #3]
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7f8 f9f0 	bl	8004172 <HAL_PCD_EP_Close>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 f8fd 	bl	800bf98 <USBD_Get_USB_Status>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f8 fac8 	bl	8004360 <HAL_PCD_EP_SetStall>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 f8de 	bl	800bf98 <USBD_Get_USB_Status>
 800bddc:	4603      	mov	r3, r0
 800bdde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be04:	78fa      	ldrb	r2, [r7, #3]
 800be06:	4611      	mov	r1, r2
 800be08:	4618      	mov	r0, r3
 800be0a:	f7f8 fb0d 	bl	8004428 <HAL_PCD_EP_ClrStall>
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f8bf 	bl	800bf98 <USBD_Get_USB_Status>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be40:	2b00      	cmp	r3, #0
 800be42:	da0b      	bge.n	800be5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	333e      	adds	r3, #62	@ 0x3e
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	e00b      	b.n	800be74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	4613      	mov	r3, r2
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800be72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be9a:	78fa      	ldrb	r2, [r7, #3]
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f8 f8da 	bl	8004058 <HAL_PCD_SetAddress>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f874 	bl	800bf98 <USBD_Get_USB_Status>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b086      	sub	sp, #24
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
 800beca:	460b      	mov	r3, r1
 800becc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bedc:	7af9      	ldrb	r1, [r7, #11]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	f7f8 f9f3 	bl	80042cc <HAL_PCD_EP_Transmit>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f853 	bl	800bf98 <USBD_Get_USB_Status>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bef6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf1e:	7af9      	ldrb	r1, [r7, #11]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	f7f8 f96f 	bl	8004206 <HAL_PCD_EP_Receive>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f832 	bl	800bf98 <USBD_Get_USB_Status>
 800bf34:	4603      	mov	r3, r0
 800bf36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf38:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf54:	78fa      	ldrb	r2, [r7, #3]
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f8 f99f 	bl	800429c <HAL_PCD_EP_GetRxCount>
 800bf5e:	4603      	mov	r3, r0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf70:	4b03      	ldr	r3, [pc, #12]	@ (800bf80 <USBD_static_malloc+0x18>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	20001b38 	.word	0x20001b38

0800bf84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]

}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d817      	bhi.n	800bfdc <USBD_Get_USB_Status+0x44>
 800bfac:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb4 <USBD_Get_USB_Status+0x1c>)
 800bfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb2:	bf00      	nop
 800bfb4:	0800bfc5 	.word	0x0800bfc5
 800bfb8:	0800bfcb 	.word	0x0800bfcb
 800bfbc:	0800bfd1 	.word	0x0800bfd1
 800bfc0:	0800bfd7 	.word	0x0800bfd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc8:	e00b      	b.n	800bfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bfce:	e008      	b.n	800bfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd4:	e005      	b.n	800bfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfda:	e002      	b.n	800bfe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe0:	bf00      	nop
  }
  return usb_status;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <led_off>:
uint8_t gl_loading_bar_stop_flag = 0;



void led_off()
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_ANOD_GPIO_Port, LED_ANOD_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800bff4:	2201      	movs	r2, #1
 800bff6:	2104      	movs	r1, #4
 800bff8:	4827      	ldr	r0, [pc, #156]	@ (800c098 <led_off+0xa8>)
 800bffa:	f7f6 fdb1 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800bffe:	2201      	movs	r2, #1
 800c000:	2120      	movs	r1, #32
 800c002:	4825      	ldr	r0, [pc, #148]	@ (800c098 <led_off+0xa8>)
 800c004:	f7f6 fdac 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800c008:	2201      	movs	r2, #1
 800c00a:	2110      	movs	r1, #16
 800c00c:	4823      	ldr	r0, [pc, #140]	@ (800c09c <led_off+0xac>)
 800c00e:	f7f6 fda7 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800c012:	2201      	movs	r2, #1
 800c014:	2180      	movs	r1, #128	@ 0x80
 800c016:	4821      	ldr	r0, [pc, #132]	@ (800c09c <led_off+0xac>)
 800c018:	f7f6 fda2 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_SET);
 800c01c:	2201      	movs	r2, #1
 800c01e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c022:	481e      	ldr	r0, [pc, #120]	@ (800c09c <led_off+0xac>)
 800c024:	f7f6 fd9c 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c028:	2201      	movs	r2, #1
 800c02a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c02e:	481a      	ldr	r0, [pc, #104]	@ (800c098 <led_off+0xa8>)
 800c030:	f7f6 fd96 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c034:	2201      	movs	r2, #1
 800c036:	2108      	movs	r1, #8
 800c038:	4817      	ldr	r0, [pc, #92]	@ (800c098 <led_off+0xa8>)
 800c03a:	f7f6 fd91 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800c03e:	2201      	movs	r2, #1
 800c040:	2101      	movs	r1, #1
 800c042:	4816      	ldr	r0, [pc, #88]	@ (800c09c <led_off+0xac>)
 800c044:	f7f6 fd8c 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800c048:	2201      	movs	r2, #1
 800c04a:	2120      	movs	r1, #32
 800c04c:	4813      	ldr	r0, [pc, #76]	@ (800c09c <led_off+0xac>)
 800c04e:	f7f6 fd87 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_SET);
 800c052:	2201      	movs	r2, #1
 800c054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c058:	4810      	ldr	r0, [pc, #64]	@ (800c09c <led_off+0xac>)
 800c05a:	f7f6 fd81 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c05e:	2201      	movs	r2, #1
 800c060:	2102      	movs	r1, #2
 800c062:	480d      	ldr	r0, [pc, #52]	@ (800c098 <led_off+0xa8>)
 800c064:	f7f6 fd7c 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c068:	2201      	movs	r2, #1
 800c06a:	2110      	movs	r1, #16
 800c06c:	480a      	ldr	r0, [pc, #40]	@ (800c098 <led_off+0xa8>)
 800c06e:	f7f6 fd77 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800c072:	2201      	movs	r2, #1
 800c074:	2102      	movs	r1, #2
 800c076:	4809      	ldr	r0, [pc, #36]	@ (800c09c <led_off+0xac>)
 800c078:	f7f6 fd72 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800c07c:	2201      	movs	r2, #1
 800c07e:	2140      	movs	r1, #64	@ 0x40
 800c080:	4806      	ldr	r0, [pc, #24]	@ (800c09c <led_off+0xac>)
 800c082:	f7f6 fd6d 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_SET);
 800c086:	2201      	movs	r2, #1
 800c088:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c08c:	4803      	ldr	r0, [pc, #12]	@ (800c09c <led_off+0xac>)
 800c08e:	f7f6 fd67 	bl	8002b60 <HAL_GPIO_WritePin>
};
 800c092:	bf00      	nop
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	40020400 	.word	0x40020400
 800c09c:	40020800 	.word	0x40020800

0800c0a0 <led_measuring_results_reflection>:
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
};

void led_measuring_results_reflection(uint8_t status) //conduct or acidity measuarement result
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]

	led_off();
 800c0aa:	f7ff ffa1 	bl	800bff0 <led_off>



	if(status == MEAS_RESULTS_IS_GOOD)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d11a      	bne.n	800c0ea <led_measuring_results_reflection+0x4a>
	{
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2102      	movs	r1, #2
 800c0b8:	4839      	ldr	r0, [pc, #228]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c0ba:	f7f6 fd51 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2110      	movs	r1, #16
 800c0c2:	4837      	ldr	r0, [pc, #220]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c0c4:	f7f6 fd4c 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2102      	movs	r1, #2
 800c0cc:	4835      	ldr	r0, [pc, #212]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c0ce:	f7f6 fd47 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2140      	movs	r1, #64	@ 0x40
 800c0d6:	4833      	ldr	r0, [pc, #204]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c0d8:	f7f6 fd42 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c0e2:	4830      	ldr	r0, [pc, #192]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c0e4:	f7f6 fd3c 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
	}

}
 800c0e8:	e056      	b.n	800c198 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d135      	bne.n	800c15c <led_measuring_results_reflection+0xbc>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2102      	movs	r1, #2
 800c0f4:	482a      	ldr	r0, [pc, #168]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c0f6:	f7f6 fd33 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2110      	movs	r1, #16
 800c0fe:	4828      	ldr	r0, [pc, #160]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c100:	f7f6 fd2e 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c104:	2200      	movs	r2, #0
 800c106:	2102      	movs	r1, #2
 800c108:	4826      	ldr	r0, [pc, #152]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c10a:	f7f6 fd29 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c10e:	2200      	movs	r2, #0
 800c110:	2140      	movs	r1, #64	@ 0x40
 800c112:	4824      	ldr	r0, [pc, #144]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c114:	f7f6 fd24 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800c118:	2200      	movs	r2, #0
 800c11a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c11e:	4821      	ldr	r0, [pc, #132]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c120:	f7f6 fd1e 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c124:	2200      	movs	r2, #0
 800c126:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c12a:	481d      	ldr	r0, [pc, #116]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c12c:	f7f6 fd18 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c130:	2200      	movs	r2, #0
 800c132:	2108      	movs	r1, #8
 800c134:	481a      	ldr	r0, [pc, #104]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c136:	f7f6 fd13 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c13a:	2200      	movs	r2, #0
 800c13c:	2101      	movs	r1, #1
 800c13e:	4819      	ldr	r0, [pc, #100]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c140:	f7f6 fd0e 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c144:	2200      	movs	r2, #0
 800c146:	2120      	movs	r1, #32
 800c148:	4816      	ldr	r0, [pc, #88]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c14a:	f7f6 fd09 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800c14e:	2200      	movs	r2, #0
 800c150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c154:	4813      	ldr	r0, [pc, #76]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c156:	f7f6 fd03 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800c15a:	e01d      	b.n	800c198 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_BAD)
 800c15c:	79fb      	ldrb	r3, [r7, #7]
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d11a      	bne.n	800c198 <led_measuring_results_reflection+0xf8>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c162:	2200      	movs	r2, #0
 800c164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c168:	480d      	ldr	r0, [pc, #52]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c16a:	f7f6 fcf9 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c16e:	2200      	movs	r2, #0
 800c170:	2108      	movs	r1, #8
 800c172:	480b      	ldr	r0, [pc, #44]	@ (800c1a0 <led_measuring_results_reflection+0x100>)
 800c174:	f7f6 fcf4 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c178:	2200      	movs	r2, #0
 800c17a:	2101      	movs	r1, #1
 800c17c:	4809      	ldr	r0, [pc, #36]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c17e:	f7f6 fcef 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c182:	2200      	movs	r2, #0
 800c184:	2120      	movs	r1, #32
 800c186:	4807      	ldr	r0, [pc, #28]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c188:	f7f6 fcea 	bl	8002b60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800c18c:	2200      	movs	r2, #0
 800c18e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c192:	4804      	ldr	r0, [pc, #16]	@ (800c1a4 <led_measuring_results_reflection+0x104>)
 800c194:	f7f6 fce4 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	40020400 	.word	0x40020400
 800c1a4:	40020800 	.word	0x40020800

0800c1a8 <led_accumulation>:

void led_accumulation()
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0



	if(gl_int_5hz_tim2)
 800c1ac:	4bc0      	ldr	r3, [pc, #768]	@ (800c4b0 <led_accumulation+0x308>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 8212 	beq.w	800c5da <led_accumulation+0x432>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 800c1b6:	48bf      	ldr	r0, [pc, #764]	@ (800c4b4 <led_accumulation+0x30c>)
 800c1b8:	f7fa fb18 	bl	80067ec <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800c1bc:	2108      	movs	r1, #8
 800c1be:	48bd      	ldr	r0, [pc, #756]	@ (800c4b4 <led_accumulation+0x30c>)
 800c1c0:	f7fa fbfe 	bl	80069c0 <HAL_TIM_PWM_Start>
		TIM2->CCR3 = 350;
 800c1c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c1c8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c1cc:	63da      	str	r2, [r3, #60]	@ 0x3c
		gl_int_5hz_tim2 = 0;
 800c1ce:	4bb8      	ldr	r3, [pc, #736]	@ (800c4b0 <led_accumulation+0x308>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]

		if(gl_led_increment < 15 && gl_led_increment > 0)
 800c1d4:	4bb8      	ldr	r3, [pc, #736]	@ (800c4b8 <led_accumulation+0x310>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b0e      	cmp	r3, #14
 800c1da:	d809      	bhi.n	800c1f0 <led_accumulation+0x48>
 800c1dc:	4bb6      	ldr	r3, [pc, #728]	@ (800c4b8 <led_accumulation+0x310>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <led_accumulation+0x48>
		{
			gl_led_increment++;
 800c1e4:	4bb4      	ldr	r3, [pc, #720]	@ (800c4b8 <led_accumulation+0x310>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	4bb2      	ldr	r3, [pc, #712]	@ (800c4b8 <led_accumulation+0x310>)
 800c1ee:	701a      	strb	r2, [r3, #0]
		}

		switch(gl_led_increment)
 800c1f0:	4bb1      	ldr	r3, [pc, #708]	@ (800c4b8 <led_accumulation+0x310>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b0f      	cmp	r3, #15
 800c1f6:	f200 81f0 	bhi.w	800c5da <led_accumulation+0x432>
 800c1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c200 <led_accumulation+0x58>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c241 	.word	0x0800c241
 800c204:	0800c5db 	.word	0x0800c5db
 800c208:	0800c253 	.word	0x0800c253
 800c20c:	0800c275 	.word	0x0800c275
 800c210:	0800c2b5 	.word	0x0800c2b5
 800c214:	0800c2f3 	.word	0x0800c2f3
 800c218:	0800c351 	.word	0x0800c351
 800c21c:	0800c3d3 	.word	0x0800c3d3
 800c220:	0800c411 	.word	0x0800c411
 800c224:	0800c46f 	.word	0x0800c46f
 800c228:	0800c4c5 	.word	0x0800c4c5
 800c22c:	0800c503 	.word	0x0800c503
 800c230:	0800c525 	.word	0x0800c525
 800c234:	0800c565 	.word	0x0800c565
 800c238:	0800c5a5 	.word	0x0800c5a5
 800c23c:	0800c5c7 	.word	0x0800c5c7
		{
		case 0:

			led_off();
 800c240:	f7ff fed6 	bl	800bff0 <led_off>
			gl_led_increment++;
 800c244:	4b9c      	ldr	r3, [pc, #624]	@ (800c4b8 <led_accumulation+0x310>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	4b9a      	ldr	r3, [pc, #616]	@ (800c4b8 <led_accumulation+0x310>)
 800c24e:	701a      	strb	r2, [r3, #0]
			break;
 800c250:	e1c3      	b.n	800c5da <led_accumulation+0x432>
		case 2:


			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c252:	2200      	movs	r2, #0
 800c254:	2104      	movs	r1, #4
 800c256:	4899      	ldr	r0, [pc, #612]	@ (800c4bc <led_accumulation+0x314>)
 800c258:	f7f6 fc82 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c25c:	2200      	movs	r2, #0
 800c25e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c262:	4896      	ldr	r0, [pc, #600]	@ (800c4bc <led_accumulation+0x314>)
 800c264:	f7f6 fc7c 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c268:	2200      	movs	r2, #0
 800c26a:	2102      	movs	r1, #2
 800c26c:	4893      	ldr	r0, [pc, #588]	@ (800c4bc <led_accumulation+0x314>)
 800c26e:	f7f6 fc77 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c272:	e1b2      	b.n	800c5da <led_accumulation+0x432>
		case 3:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c274:	2201      	movs	r2, #1
 800c276:	2104      	movs	r1, #4
 800c278:	4890      	ldr	r0, [pc, #576]	@ (800c4bc <led_accumulation+0x314>)
 800c27a:	f7f6 fc71 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c27e:	2201      	movs	r2, #1
 800c280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c284:	488d      	ldr	r0, [pc, #564]	@ (800c4bc <led_accumulation+0x314>)
 800c286:	f7f6 fc6b 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c28a:	2201      	movs	r2, #1
 800c28c:	2102      	movs	r1, #2
 800c28e:	488b      	ldr	r0, [pc, #556]	@ (800c4bc <led_accumulation+0x314>)
 800c290:	f7f6 fc66 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c294:	2200      	movs	r2, #0
 800c296:	2120      	movs	r1, #32
 800c298:	4888      	ldr	r0, [pc, #544]	@ (800c4bc <led_accumulation+0x314>)
 800c29a:	f7f6 fc61 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2108      	movs	r1, #8
 800c2a2:	4886      	ldr	r0, [pc, #536]	@ (800c4bc <led_accumulation+0x314>)
 800c2a4:	f7f6 fc5c 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2110      	movs	r1, #16
 800c2ac:	4883      	ldr	r0, [pc, #524]	@ (800c4bc <led_accumulation+0x314>)
 800c2ae:	f7f6 fc57 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c2b2:	e192      	b.n	800c5da <led_accumulation+0x432>
		case 4:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	2120      	movs	r1, #32
 800c2b8:	4880      	ldr	r0, [pc, #512]	@ (800c4bc <led_accumulation+0x314>)
 800c2ba:	f7f6 fc51 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c2be:	2201      	movs	r2, #1
 800c2c0:	2108      	movs	r1, #8
 800c2c2:	487e      	ldr	r0, [pc, #504]	@ (800c4bc <led_accumulation+0x314>)
 800c2c4:	f7f6 fc4c 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	2110      	movs	r1, #16
 800c2cc:	487b      	ldr	r0, [pc, #492]	@ (800c4bc <led_accumulation+0x314>)
 800c2ce:	f7f6 fc47 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	2110      	movs	r1, #16
 800c2d6:	487a      	ldr	r0, [pc, #488]	@ (800c4c0 <led_accumulation+0x318>)
 800c2d8:	f7f6 fc42 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2101      	movs	r1, #1
 800c2e0:	4877      	ldr	r0, [pc, #476]	@ (800c4c0 <led_accumulation+0x318>)
 800c2e2:	f7f6 fc3d 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	2102      	movs	r1, #2
 800c2ea:	4875      	ldr	r0, [pc, #468]	@ (800c4c0 <led_accumulation+0x318>)
 800c2ec:	f7f6 fc38 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c2f0:	e173      	b.n	800c5da <led_accumulation+0x432>
		case 5:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	2110      	movs	r1, #16
 800c2f6:	4872      	ldr	r0, [pc, #456]	@ (800c4c0 <led_accumulation+0x318>)
 800c2f8:	f7f6 fc32 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	2101      	movs	r1, #1
 800c300:	486f      	ldr	r0, [pc, #444]	@ (800c4c0 <led_accumulation+0x318>)
 800c302:	f7f6 fc2d 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800c306:	2201      	movs	r2, #1
 800c308:	2102      	movs	r1, #2
 800c30a:	486d      	ldr	r0, [pc, #436]	@ (800c4c0 <led_accumulation+0x318>)
 800c30c:	f7f6 fc28 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800c310:	2200      	movs	r2, #0
 800c312:	2180      	movs	r1, #128	@ 0x80
 800c314:	486a      	ldr	r0, [pc, #424]	@ (800c4c0 <led_accumulation+0x318>)
 800c316:	f7f6 fc23 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c31a:	2200      	movs	r2, #0
 800c31c:	2120      	movs	r1, #32
 800c31e:	4868      	ldr	r0, [pc, #416]	@ (800c4c0 <led_accumulation+0x318>)
 800c320:	f7f6 fc1e 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c324:	2200      	movs	r2, #0
 800c326:	2140      	movs	r1, #64	@ 0x40
 800c328:	4865      	ldr	r0, [pc, #404]	@ (800c4c0 <led_accumulation+0x318>)
 800c32a:	f7f6 fc19 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c32e:	2200      	movs	r2, #0
 800c330:	2104      	movs	r1, #4
 800c332:	4862      	ldr	r0, [pc, #392]	@ (800c4bc <led_accumulation+0x314>)
 800c334:	f7f6 fc14 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c338:	2200      	movs	r2, #0
 800c33a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c33e:	485f      	ldr	r0, [pc, #380]	@ (800c4bc <led_accumulation+0x314>)
 800c340:	f7f6 fc0e 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c344:	2200      	movs	r2, #0
 800c346:	2102      	movs	r1, #2
 800c348:	485c      	ldr	r0, [pc, #368]	@ (800c4bc <led_accumulation+0x314>)
 800c34a:	f7f6 fc09 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c34e:	e144      	b.n	800c5da <led_accumulation+0x432>
		case 6:
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800c350:	2201      	movs	r2, #1
 800c352:	2180      	movs	r1, #128	@ 0x80
 800c354:	485a      	ldr	r0, [pc, #360]	@ (800c4c0 <led_accumulation+0x318>)
 800c356:	f7f6 fc03 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800c35a:	2201      	movs	r2, #1
 800c35c:	2120      	movs	r1, #32
 800c35e:	4858      	ldr	r0, [pc, #352]	@ (800c4c0 <led_accumulation+0x318>)
 800c360:	f7f6 fbfe 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800c364:	2201      	movs	r2, #1
 800c366:	2140      	movs	r1, #64	@ 0x40
 800c368:	4855      	ldr	r0, [pc, #340]	@ (800c4c0 <led_accumulation+0x318>)
 800c36a:	f7f6 fbf9 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_RESET);
 800c36e:	2200      	movs	r2, #0
 800c370:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c374:	4852      	ldr	r0, [pc, #328]	@ (800c4c0 <led_accumulation+0x318>)
 800c376:	f7f6 fbf3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800c37a:	2200      	movs	r2, #0
 800c37c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c380:	484f      	ldr	r0, [pc, #316]	@ (800c4c0 <led_accumulation+0x318>)
 800c382:	f7f6 fbed 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800c386:	2200      	movs	r2, #0
 800c388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c38c:	484c      	ldr	r0, [pc, #304]	@ (800c4c0 <led_accumulation+0x318>)
 800c38e:	f7f6 fbe7 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c392:	2200      	movs	r2, #0
 800c394:	2120      	movs	r1, #32
 800c396:	4849      	ldr	r0, [pc, #292]	@ (800c4bc <led_accumulation+0x314>)
 800c398:	f7f6 fbe2 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c39c:	2200      	movs	r2, #0
 800c39e:	2108      	movs	r1, #8
 800c3a0:	4846      	ldr	r0, [pc, #280]	@ (800c4bc <led_accumulation+0x314>)
 800c3a2:	f7f6 fbdd 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2110      	movs	r1, #16
 800c3aa:	4844      	ldr	r0, [pc, #272]	@ (800c4bc <led_accumulation+0x314>)
 800c3ac:	f7f6 fbd8 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	2104      	movs	r1, #4
 800c3b4:	4841      	ldr	r0, [pc, #260]	@ (800c4bc <led_accumulation+0x314>)
 800c3b6:	f7f6 fbd3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c3c0:	483e      	ldr	r0, [pc, #248]	@ (800c4bc <led_accumulation+0x314>)
 800c3c2:	f7f6 fbcd 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	2102      	movs	r1, #2
 800c3ca:	483c      	ldr	r0, [pc, #240]	@ (800c4bc <led_accumulation+0x314>)
 800c3cc:	f7f6 fbc8 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c3d0:	e103      	b.n	800c5da <led_accumulation+0x432>
		case 7:

			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	2120      	movs	r1, #32
 800c3d6:	4839      	ldr	r0, [pc, #228]	@ (800c4bc <led_accumulation+0x314>)
 800c3d8:	f7f6 fbc2 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c3dc:	2201      	movs	r2, #1
 800c3de:	2108      	movs	r1, #8
 800c3e0:	4836      	ldr	r0, [pc, #216]	@ (800c4bc <led_accumulation+0x314>)
 800c3e2:	f7f6 fbbd 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	2110      	movs	r1, #16
 800c3ea:	4834      	ldr	r0, [pc, #208]	@ (800c4bc <led_accumulation+0x314>)
 800c3ec:	f7f6 fbb8 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2110      	movs	r1, #16
 800c3f4:	4832      	ldr	r0, [pc, #200]	@ (800c4c0 <led_accumulation+0x318>)
 800c3f6:	f7f6 fbb3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	4830      	ldr	r0, [pc, #192]	@ (800c4c0 <led_accumulation+0x318>)
 800c400:	f7f6 fbae 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c404:	2200      	movs	r2, #0
 800c406:	2102      	movs	r1, #2
 800c408:	482d      	ldr	r0, [pc, #180]	@ (800c4c0 <led_accumulation+0x318>)
 800c40a:	f7f6 fba9 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c40e:	e0e4      	b.n	800c5da <led_accumulation+0x432>
		case 8:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800c410:	2201      	movs	r2, #1
 800c412:	2110      	movs	r1, #16
 800c414:	482a      	ldr	r0, [pc, #168]	@ (800c4c0 <led_accumulation+0x318>)
 800c416:	f7f6 fba3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800c41a:	2201      	movs	r2, #1
 800c41c:	2101      	movs	r1, #1
 800c41e:	4828      	ldr	r0, [pc, #160]	@ (800c4c0 <led_accumulation+0x318>)
 800c420:	f7f6 fb9e 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800c424:	2201      	movs	r2, #1
 800c426:	2102      	movs	r1, #2
 800c428:	4825      	ldr	r0, [pc, #148]	@ (800c4c0 <led_accumulation+0x318>)
 800c42a:	f7f6 fb99 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800c42e:	2200      	movs	r2, #0
 800c430:	2180      	movs	r1, #128	@ 0x80
 800c432:	4823      	ldr	r0, [pc, #140]	@ (800c4c0 <led_accumulation+0x318>)
 800c434:	f7f6 fb94 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c438:	2200      	movs	r2, #0
 800c43a:	2120      	movs	r1, #32
 800c43c:	4820      	ldr	r0, [pc, #128]	@ (800c4c0 <led_accumulation+0x318>)
 800c43e:	f7f6 fb8f 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c442:	2200      	movs	r2, #0
 800c444:	2140      	movs	r1, #64	@ 0x40
 800c446:	481e      	ldr	r0, [pc, #120]	@ (800c4c0 <led_accumulation+0x318>)
 800c448:	f7f6 fb8a 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c44c:	2200      	movs	r2, #0
 800c44e:	2104      	movs	r1, #4
 800c450:	481a      	ldr	r0, [pc, #104]	@ (800c4bc <led_accumulation+0x314>)
 800c452:	f7f6 fb85 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c456:	2200      	movs	r2, #0
 800c458:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c45c:	4817      	ldr	r0, [pc, #92]	@ (800c4bc <led_accumulation+0x314>)
 800c45e:	f7f6 fb7f 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c462:	2200      	movs	r2, #0
 800c464:	2102      	movs	r1, #2
 800c466:	4815      	ldr	r0, [pc, #84]	@ (800c4bc <led_accumulation+0x314>)
 800c468:	f7f6 fb7a 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c46c:	e0b5      	b.n	800c5da <led_accumulation+0x432>
		case 9:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c46e:	2201      	movs	r2, #1
 800c470:	2104      	movs	r1, #4
 800c472:	4812      	ldr	r0, [pc, #72]	@ (800c4bc <led_accumulation+0x314>)
 800c474:	f7f6 fb74 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c478:	2201      	movs	r2, #1
 800c47a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c47e:	480f      	ldr	r0, [pc, #60]	@ (800c4bc <led_accumulation+0x314>)
 800c480:	f7f6 fb6e 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c484:	2201      	movs	r2, #1
 800c486:	2102      	movs	r1, #2
 800c488:	480c      	ldr	r0, [pc, #48]	@ (800c4bc <led_accumulation+0x314>)
 800c48a:	f7f6 fb69 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c48e:	2200      	movs	r2, #0
 800c490:	2120      	movs	r1, #32
 800c492:	480a      	ldr	r0, [pc, #40]	@ (800c4bc <led_accumulation+0x314>)
 800c494:	f7f6 fb64 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c498:	2200      	movs	r2, #0
 800c49a:	2108      	movs	r1, #8
 800c49c:	4807      	ldr	r0, [pc, #28]	@ (800c4bc <led_accumulation+0x314>)
 800c49e:	f7f6 fb5f 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	2110      	movs	r1, #16
 800c4a6:	4805      	ldr	r0, [pc, #20]	@ (800c4bc <led_accumulation+0x314>)
 800c4a8:	f7f6 fb5a 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c4ac:	e095      	b.n	800c5da <led_accumulation+0x432>
 800c4ae:	bf00      	nop
 800c4b0:	20000940 	.word	0x20000940
 800c4b4:	20000860 	.word	0x20000860
 800c4b8:	20001d58 	.word	0x20001d58
 800c4bc:	40020400 	.word	0x40020400
 800c4c0:	40020800 	.word	0x40020800
		case 10:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	2120      	movs	r1, #32
 800c4c8:	4845      	ldr	r0, [pc, #276]	@ (800c5e0 <led_accumulation+0x438>)
 800c4ca:	f7f6 fb49 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	2108      	movs	r1, #8
 800c4d2:	4843      	ldr	r0, [pc, #268]	@ (800c5e0 <led_accumulation+0x438>)
 800c4d4:	f7f6 fb44 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c4d8:	2201      	movs	r2, #1
 800c4da:	2110      	movs	r1, #16
 800c4dc:	4840      	ldr	r0, [pc, #256]	@ (800c5e0 <led_accumulation+0x438>)
 800c4de:	f7f6 fb3f 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2110      	movs	r1, #16
 800c4e6:	483f      	ldr	r0, [pc, #252]	@ (800c5e4 <led_accumulation+0x43c>)
 800c4e8:	f7f6 fb3a 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	483c      	ldr	r0, [pc, #240]	@ (800c5e4 <led_accumulation+0x43c>)
 800c4f2:	f7f6 fb35 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2102      	movs	r1, #2
 800c4fa:	483a      	ldr	r0, [pc, #232]	@ (800c5e4 <led_accumulation+0x43c>)
 800c4fc:	f7f6 fb30 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c500:	e06b      	b.n	800c5da <led_accumulation+0x432>
		case 11:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c502:	2200      	movs	r2, #0
 800c504:	2104      	movs	r1, #4
 800c506:	4836      	ldr	r0, [pc, #216]	@ (800c5e0 <led_accumulation+0x438>)
 800c508:	f7f6 fb2a 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c50c:	2200      	movs	r2, #0
 800c50e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c512:	4833      	ldr	r0, [pc, #204]	@ (800c5e0 <led_accumulation+0x438>)
 800c514:	f7f6 fb24 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c518:	2200      	movs	r2, #0
 800c51a:	2102      	movs	r1, #2
 800c51c:	4830      	ldr	r0, [pc, #192]	@ (800c5e0 <led_accumulation+0x438>)
 800c51e:	f7f6 fb1f 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c522:	e05a      	b.n	800c5da <led_accumulation+0x432>
		case 12:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c524:	2201      	movs	r2, #1
 800c526:	2104      	movs	r1, #4
 800c528:	482d      	ldr	r0, [pc, #180]	@ (800c5e0 <led_accumulation+0x438>)
 800c52a:	f7f6 fb19 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c52e:	2201      	movs	r2, #1
 800c530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c534:	482a      	ldr	r0, [pc, #168]	@ (800c5e0 <led_accumulation+0x438>)
 800c536:	f7f6 fb13 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c53a:	2201      	movs	r2, #1
 800c53c:	2102      	movs	r1, #2
 800c53e:	4828      	ldr	r0, [pc, #160]	@ (800c5e0 <led_accumulation+0x438>)
 800c540:	f7f6 fb0e 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c544:	2200      	movs	r2, #0
 800c546:	2120      	movs	r1, #32
 800c548:	4825      	ldr	r0, [pc, #148]	@ (800c5e0 <led_accumulation+0x438>)
 800c54a:	f7f6 fb09 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c54e:	2200      	movs	r2, #0
 800c550:	2108      	movs	r1, #8
 800c552:	4823      	ldr	r0, [pc, #140]	@ (800c5e0 <led_accumulation+0x438>)
 800c554:	f7f6 fb04 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c558:	2200      	movs	r2, #0
 800c55a:	2110      	movs	r1, #16
 800c55c:	4820      	ldr	r0, [pc, #128]	@ (800c5e0 <led_accumulation+0x438>)
 800c55e:	f7f6 faff 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c562:	e03a      	b.n	800c5da <led_accumulation+0x432>
		case 13:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c564:	2201      	movs	r2, #1
 800c566:	2104      	movs	r1, #4
 800c568:	481d      	ldr	r0, [pc, #116]	@ (800c5e0 <led_accumulation+0x438>)
 800c56a:	f7f6 faf9 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c56e:	2201      	movs	r2, #1
 800c570:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c574:	481a      	ldr	r0, [pc, #104]	@ (800c5e0 <led_accumulation+0x438>)
 800c576:	f7f6 faf3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c57a:	2201      	movs	r2, #1
 800c57c:	2102      	movs	r1, #2
 800c57e:	4818      	ldr	r0, [pc, #96]	@ (800c5e0 <led_accumulation+0x438>)
 800c580:	f7f6 faee 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c584:	2200      	movs	r2, #0
 800c586:	2120      	movs	r1, #32
 800c588:	4815      	ldr	r0, [pc, #84]	@ (800c5e0 <led_accumulation+0x438>)
 800c58a:	f7f6 fae9 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c58e:	2200      	movs	r2, #0
 800c590:	2108      	movs	r1, #8
 800c592:	4813      	ldr	r0, [pc, #76]	@ (800c5e0 <led_accumulation+0x438>)
 800c594:	f7f6 fae4 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c598:	2200      	movs	r2, #0
 800c59a:	2110      	movs	r1, #16
 800c59c:	4810      	ldr	r0, [pc, #64]	@ (800c5e0 <led_accumulation+0x438>)
 800c59e:	f7f6 fadf 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c5a2:	e01a      	b.n	800c5da <led_accumulation+0x432>
		case 14:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	480d      	ldr	r0, [pc, #52]	@ (800c5e0 <led_accumulation+0x438>)
 800c5aa:	f7f6 fad9 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c5b4:	480a      	ldr	r0, [pc, #40]	@ (800c5e0 <led_accumulation+0x438>)
 800c5b6:	f7f6 fad3 	bl	8002b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2102      	movs	r1, #2
 800c5be:	4808      	ldr	r0, [pc, #32]	@ (800c5e0 <led_accumulation+0x438>)
 800c5c0:	f7f6 face 	bl	8002b60 <HAL_GPIO_WritePin>
			break;
 800c5c4:	e009      	b.n	800c5da <led_accumulation+0x432>

		case 15:
			led_1hz_counter = 0;
 800c5c6:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <led_accumulation+0x440>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	701a      	strb	r2, [r3, #0]
			gl_led_pwm_state = LED_PWM_CCR_CHANGEBALE;
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <led_accumulation+0x444>)
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 800c5d2:	4807      	ldr	r0, [pc, #28]	@ (800c5f0 <led_accumulation+0x448>)
 800c5d4:	f7fa f96c 	bl	80068b0 <HAL_TIM_Base_Stop_IT>
			break;
 800c5d8:	bf00      	nop
		}
	}
};
 800c5da:	bf00      	nop
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	40020400 	.word	0x40020400
 800c5e4:	40020800 	.word	0x40020800
 800c5e8:	20000942 	.word	0x20000942
 800c5ec:	200005d6 	.word	0x200005d6
 800c5f0:	20000860 	.word	0x20000860

0800c5f4 <conduct_acidity_loading_bar_calculation>:

int conduct_acidity_loading_bar_calculation(uint16_t reference_acidity_conductivity,  uint8_t temperature_correction_coef , uint16_t measured_acidity_conductivity )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	80fb      	strh	r3, [r7, #6]
 800c5fe:	460b      	mov	r3, r1
 800c600:	717b      	strb	r3, [r7, #5]
 800c602:	4613      	mov	r3, r2
 800c604:	807b      	strh	r3, [r7, #2]

	//Кол-во секций(уровней) заполенения бара загрузки = 13 . От 0 до 100 с щагом 10 и от 100 до 200 с шагом 50(100,150,200).

	uint32_t reference_acidity_conductivity_mul_100 = reference_acidity_conductivity * REF_TEMP_COEFF;  // Референсный
 800c606:	88fb      	ldrh	r3, [r7, #6]
 800c608:	2264      	movs	r2, #100	@ 0x64
 800c60a:	fb02 f303 	mul.w	r3, r2, r3
 800c60e:	613b      	str	r3, [r7, #16]
	uint32_t measured_value_with_temp_coeff = measured_acidity_conductivity * temperature_correction_coef;
 800c610:	887b      	ldrh	r3, [r7, #2]
 800c612:	797a      	ldrb	r2, [r7, #5]
 800c614:	fb02 f303 	mul.w	r3, r2, r3
 800c618:	60fb      	str	r3, [r7, #12]
	uint16_t ref_value_10th_part = reference_acidity_conductivity_mul_100 /10;  // десятая часть
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	4a1d      	ldr	r2, [pc, #116]	@ (800c694 <conduct_acidity_loading_bar_calculation+0xa0>)
 800c61e:	fba2 2303 	umull	r2, r3, r2, r3
 800c622:	08db      	lsrs	r3, r3, #3
 800c624:	817b      	strh	r3, [r7, #10]

	uint8_t bar_index_value = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]

	if (ref_value_10th_part > measured_value_with_temp_coeff)
 800c62a:	897b      	ldrh	r3, [r7, #10]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d202      	bcs.n	800c638 <conduct_acidity_loading_bar_calculation+0x44>
		{
			bar_index_value = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]
 800c636:	e026      	b.n	800c686 <conduct_acidity_loading_bar_calculation+0x92>
		}
	else if (ref_value_10th_part <= measured_value_with_temp_coeff)
 800c638:	897b      	ldrh	r3, [r7, #10]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d322      	bcc.n	800c686 <conduct_acidity_loading_bar_calculation+0x92>
	{
		if(measured_value_with_temp_coeff/ref_value_10th_part<=10)
 800c640:	897b      	ldrh	r3, [r7, #10]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	fbb2 f3f3 	udiv	r3, r2, r3
 800c648:	2b0a      	cmp	r3, #10
 800c64a:	d805      	bhi.n	800c658 <conduct_acidity_loading_bar_calculation+0x64>
		{
			bar_index_value = measured_value_with_temp_coeff/ref_value_10th_part;
 800c64c:	897b      	ldrh	r3, [r7, #10]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	fbb2 f3f3 	udiv	r3, r2, r3
 800c654:	75fb      	strb	r3, [r7, #23]
 800c656:	e016      	b.n	800c686 <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part >10 && measured_value_with_temp_coeff/ref_value_10th_part<=15)
 800c658:	897b      	ldrh	r3, [r7, #10]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c660:	2b0a      	cmp	r3, #10
 800c662:	d908      	bls.n	800c676 <conduct_acidity_loading_bar_calculation+0x82>
 800c664:	897b      	ldrh	r3, [r7, #10]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66c:	2b0f      	cmp	r3, #15
 800c66e:	d802      	bhi.n	800c676 <conduct_acidity_loading_bar_calculation+0x82>
		{
			bar_index_value = 11;
 800c670:	230b      	movs	r3, #11
 800c672:	75fb      	strb	r3, [r7, #23]
 800c674:	e007      	b.n	800c686 <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part > 15 )
 800c676:	897b      	ldrh	r3, [r7, #10]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c67e:	2b0f      	cmp	r3, #15
 800c680:	d901      	bls.n	800c686 <conduct_acidity_loading_bar_calculation+0x92>
		{
			bar_index_value = 12;
 800c682:	230c      	movs	r3, #12
 800c684:	75fb      	strb	r3, [r7, #23]
		}
	}

	return bar_index_value;
 800c686:	7dfb      	ldrb	r3, [r7, #23]


}
 800c688:	4618      	mov	r0, r3
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	cccccccd 	.word	0xcccccccd

0800c698 <display_loading_status>:

int display_loading_status(uint8_t bar_index,uint8_t id )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	4603      	mov	r3, r0
 800c6a0:	460a      	mov	r2, r1
 800c6a2:	71fb      	strb	r3, [r7, #7]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	71bb      	strb	r3, [r7, #6]
	SPI_Flash_to_LCD(LOADING_BAR,16224 + 1800 * bar_index, 100, 9, 48, 55);
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
 800c6b2:	f503 517d 	add.w	r1, r3, #16192	@ 0x3f40
 800c6b6:	3120      	adds	r1, #32
 800c6b8:	2337      	movs	r3, #55	@ 0x37
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	2330      	movs	r3, #48	@ 0x30
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	2309      	movs	r3, #9
 800c6c2:	2264      	movs	r2, #100	@ 0x64
 800c6c4:	2008      	movs	r0, #8
 800c6c6:	f7f3 ff67 	bl	8000598 <SPI_Flash_to_LCD>
	for(int i = 54 ;i<76; i++)
 800c6ca:	2336      	movs	r3, #54	@ 0x36
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e00a      	b.n	800c6e6 <display_loading_status+0x4e>
	{
		ST7735_DrawPixel(127, i, ST7735_RED);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c6d8:	4619      	mov	r1, r3
 800c6da:	207f      	movs	r0, #127	@ 0x7f
 800c6dc:	f7fe fdb4 	bl	800b248 <ST7735_DrawPixel>
	for(int i = 54 ;i<76; i++)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b4b      	cmp	r3, #75	@ 0x4b
 800c6ea:	ddf1      	ble.n	800c6d0 <display_loading_status+0x38>
	}
	//uint16_t symbol_status_offset = 0;
	if(bar_index<=8)
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b08      	cmp	r3, #8
 800c6f0:	d80c      	bhi.n	800c70c <display_loading_status+0x74>
	{
		SPI_Flash_to_LCD(CHECK_MARK_M, 8, 44);
 800c6f2:	232c      	movs	r3, #44	@ 0x2c
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	2308      	movs	r3, #8
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	231e      	movs	r3, #30
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f649 315e 	movw	r1, #39774	@ 0x9b5e
 800c702:	2008      	movs	r0, #8
 800c704:	f7f3 ff48 	bl	8000598 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_GOOD;
 800c708:	2301      	movs	r3, #1
 800c70a:	e01f      	b.n	800c74c <display_loading_status+0xb4>
	}
	else if(bar_index==9)
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b09      	cmp	r3, #9
 800c710:	d10c      	bne.n	800c72c <display_loading_status+0x94>
	{
		SPI_Flash_to_LCD(EXCLAMATION_MARK_M, 8, 44);
 800c712:	232c      	movs	r3, #44	@ 0x2c
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	2308      	movs	r3, #8
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	231e      	movs	r3, #30
 800c71c:	2220      	movs	r2, #32
 800c71e:	f24a 21c0 	movw	r1, #41664	@ 0xa2c0
 800c722:	2008      	movs	r0, #8
 800c724:	f7f3 ff38 	bl	8000598 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_MEDIUM;
 800c728:	2302      	movs	r3, #2
 800c72a:	e00f      	b.n	800c74c <display_loading_status+0xb4>
	}
	else if(bar_index>9)
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d90c      	bls.n	800c74c <display_loading_status+0xb4>
	{
		SPI_Flash_to_LCD(CROSS_MARK_M, 8, 44);
 800c732:	232c      	movs	r3, #44	@ 0x2c
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	2308      	movs	r3, #8
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	231e      	movs	r3, #30
 800c73c:	2220      	movs	r2, #32
 800c73e:	f64a 2140 	movw	r1, #43584	@ 0xaa40
 800c742:	2008      	movs	r0, #8
 800c744:	f7f3 ff28 	bl	8000598 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_BAD;
 800c748:	2303      	movs	r3, #3
 800c74a:	e7ff      	b.n	800c74c <display_loading_status+0xb4>
	}
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <display_measuring_product>:
void display_measuring_product(const uint8_t block, const uint16_t offset, uint8_t w, uint8_t h, uint8_t x, uint8_t y)
{
 800c754:	b5b0      	push	{r4, r5, r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af02      	add	r7, sp, #8
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	461a      	mov	r2, r3
 800c762:	4623      	mov	r3, r4
 800c764:	71fb      	strb	r3, [r7, #7]
 800c766:	4603      	mov	r3, r0
 800c768:	80bb      	strh	r3, [r7, #4]
 800c76a:	460b      	mov	r3, r1
 800c76c:	71bb      	strb	r3, [r7, #6]
 800c76e:	4613      	mov	r3, r2
 800c770:	70fb      	strb	r3, [r7, #3]
	SPI_Flash_to_LCD(block, offset, w, h, x, y);
 800c772:	79f8      	ldrb	r0, [r7, #7]
 800c774:	88b9      	ldrh	r1, [r7, #4]
 800c776:	79bc      	ldrb	r4, [r7, #6]
 800c778:	78fd      	ldrb	r5, [r7, #3]
 800c77a:	7e3b      	ldrb	r3, [r7, #24]
 800c77c:	7f3a      	ldrb	r2, [r7, #28]
 800c77e:	9201      	str	r2, [sp, #4]
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	462b      	mov	r3, r5
 800c784:	4622      	mov	r2, r4
 800c786:	f7f3 ff07 	bl	8000598 <SPI_Flash_to_LCD>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c794 <display_measuring_text>:
void display_measuring_text(char*name ,uint16_t reference_value, uint16_t measured_value, uint8_t status, uint8_t language)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b08a      	sub	sp, #40	@ 0x28
 800c798:	af04      	add	r7, sp, #16
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	4608      	mov	r0, r1
 800c79e:	4611      	mov	r1, r2
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	817b      	strh	r3, [r7, #10]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	813b      	strh	r3, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(50, 4,  name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800c7ae:	4b48      	ldr	r3, [pc, #288]	@ (800c8d0 <display_measuring_text+0x13c>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	9202      	str	r2, [sp, #8]
 800c7b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7b8:	9201      	str	r2, [sp, #4]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	9200      	str	r2, [sp, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	2104      	movs	r1, #4
 800c7c4:	2032      	movs	r0, #50	@ 0x32
 800c7c6:	f7fe fdf8 	bl	800b3ba <ST7735_WriteString>

	char char_buffer[5] = {};
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	753b      	strb	r3, [r7, #20]



	sprintf(char_buffer, "%d", reference_value );
 800c7d2:	897a      	ldrh	r2, [r7, #10]
 800c7d4:	f107 0310 	add.w	r3, r7, #16
 800c7d8:	493e      	ldr	r1, [pc, #248]	@ (800c8d4 <display_measuring_text+0x140>)
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fb34 	bl	800ce48 <siprintf>
	ST7735_WriteString(130, 67, char_buffer, Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800c7e0:	4b3d      	ldr	r3, [pc, #244]	@ (800c8d8 <display_measuring_text+0x144>)
 800c7e2:	f107 0110 	add.w	r1, r7, #16
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	9202      	str	r2, [sp, #8]
 800c7ea:	f249 426e 	movw	r2, #37998	@ 0x946e
 800c7ee:	9201      	str	r2, [sp, #4]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	9200      	str	r2, [sp, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	460a      	mov	r2, r1
 800c7f8:	2143      	movs	r1, #67	@ 0x43
 800c7fa:	2082      	movs	r0, #130	@ 0x82
 800c7fc:	f7fe fddd 	bl	800b3ba <ST7735_WriteString>

	sprintf(char_buffer, "%d", measured_value );
 800c800:	893a      	ldrh	r2, [r7, #8]
 800c802:	f107 0310 	add.w	r3, r7, #16
 800c806:	4933      	ldr	r1, [pc, #204]	@ (800c8d4 <display_measuring_text+0x140>)
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fb1d 	bl	800ce48 <siprintf>
	ST7735_WriteString(50, 26, char_buffer, Font_16x26, ST7735_GREEN, ST7735_BLACK);
 800c80e:	4b33      	ldr	r3, [pc, #204]	@ (800c8dc <display_measuring_text+0x148>)
 800c810:	f107 0110 	add.w	r1, r7, #16
 800c814:	2200      	movs	r2, #0
 800c816:	9202      	str	r2, [sp, #8]
 800c818:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c81c:	9201      	str	r2, [sp, #4]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	9200      	str	r2, [sp, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	460a      	mov	r2, r1
 800c826:	211a      	movs	r1, #26
 800c828:	2032      	movs	r0, #50	@ 0x32
 800c82a:	f7fe fdc6 	bl	800b3ba <ST7735_WriteString>
	if(status == MEAS_RESULTS_IS_GOOD)
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d110      	bne.n	800c856 <display_measuring_text+0xc2>
	{
		ST7735_WriteString(50, 26, char_buffer, Font_16x26, ST7735_GREEN, ST7735_BLACK);
 800c834:	4b29      	ldr	r3, [pc, #164]	@ (800c8dc <display_measuring_text+0x148>)
 800c836:	f107 0110 	add.w	r1, r7, #16
 800c83a:	2200      	movs	r2, #0
 800c83c:	9202      	str	r2, [sp, #8]
 800c83e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c842:	9201      	str	r2, [sp, #4]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	9200      	str	r2, [sp, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	460a      	mov	r2, r1
 800c84c:	211a      	movs	r1, #26
 800c84e:	2032      	movs	r0, #50	@ 0x32
 800c850:	f7fe fdb3 	bl	800b3ba <ST7735_WriteString>
 800c854:	e026      	b.n	800c8a4 <display_measuring_text+0x110>
	}
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d110      	bne.n	800c87e <display_measuring_text+0xea>
	{
		ST7735_WriteString(50, 26, char_buffer, Font_16x26, ST7735_YELLOW, ST7735_BLACK);
 800c85c:	4b1f      	ldr	r3, [pc, #124]	@ (800c8dc <display_measuring_text+0x148>)
 800c85e:	f107 0110 	add.w	r1, r7, #16
 800c862:	2200      	movs	r2, #0
 800c864:	9202      	str	r2, [sp, #8]
 800c866:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	9200      	str	r2, [sp, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	460a      	mov	r2, r1
 800c874:	211a      	movs	r1, #26
 800c876:	2032      	movs	r0, #50	@ 0x32
 800c878:	f7fe fd9f 	bl	800b3ba <ST7735_WriteString>
 800c87c:	e012      	b.n	800c8a4 <display_measuring_text+0x110>
	}
	else if(status == MEAS_RESULTS_IS_BAD)
 800c87e:	79fb      	ldrb	r3, [r7, #7]
 800c880:	2b03      	cmp	r3, #3
 800c882:	d10f      	bne.n	800c8a4 <display_measuring_text+0x110>
	{
		ST7735_WriteString(50, 26, char_buffer, Font_16x26, ST7735_RED, ST7735_BLACK);
 800c884:	4b15      	ldr	r3, [pc, #84]	@ (800c8dc <display_measuring_text+0x148>)
 800c886:	f107 0110 	add.w	r1, r7, #16
 800c88a:	2200      	movs	r2, #0
 800c88c:	9202      	str	r2, [sp, #8]
 800c88e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c892:	9201      	str	r2, [sp, #4]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	9200      	str	r2, [sp, #0]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	460a      	mov	r2, r1
 800c89c:	211a      	movs	r1, #26
 800c89e:	2032      	movs	r0, #50	@ 0x32
 800c8a0:	f7fe fd8b 	bl	800b3ba <ST7735_WriteString>
	}

	if(language == ENGLISH)
 800c8a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d10d      	bne.n	800c8c8 <display_measuring_text+0x134>
	{
		ST7735_WriteString(50, 67, "ppm", Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <display_measuring_text+0x144>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	9202      	str	r2, [sp, #8]
 800c8b2:	f249 426e 	movw	r2, #37998	@ 0x946e
 800c8b6:	9201      	str	r2, [sp, #4]
 800c8b8:	685a      	ldr	r2, [r3, #4]
 800c8ba:	9200      	str	r2, [sp, #0]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a08      	ldr	r2, [pc, #32]	@ (800c8e0 <display_measuring_text+0x14c>)
 800c8c0:	2143      	movs	r1, #67	@ 0x43
 800c8c2:	2032      	movs	r0, #50	@ 0x32
 800c8c4:	f7fe fd79 	bl	800b3ba <ST7735_WriteString>
	}

}
 800c8c8:	bf00      	nop
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20000564 	.word	0x20000564
 800c8d4:	0800daac 	.word	0x0800daac
 800c8d8:	2000055c 	.word	0x2000055c
 800c8dc:	2000056c 	.word	0x2000056c
 800c8e0:	0800dab0 	.word	0x0800dab0

0800c8e4 <MPR121_setregister>:
void MPR121_get_filtered_data() //Baseline Value Register (0x1E~0x2A
{

}
void MPR121_setregister(uint16_t regaddress, uint8_t value)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af04      	add	r7, sp, #16
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	460a      	mov	r2, r1
 800c8ee:	80fb      	strh	r3, [r7, #6]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800c8f4:	88fa      	ldrh	r2, [r7, #6]
 800c8f6:	2364      	movs	r3, #100	@ 0x64
 800c8f8:	9302      	str	r3, [sp, #8]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	1d7b      	adds	r3, r7, #5
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	2301      	movs	r3, #1
 800c904:	21b4      	movs	r1, #180	@ 0xb4
 800c906:	4803      	ldr	r0, [pc, #12]	@ (800c914 <MPR121_setregister+0x30>)
 800c908:	f7f6 faa0 	bl	8002e4c <HAL_I2C_Mem_Write>
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	2000068c 	.word	0x2000068c

0800c918 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	4603      	mov	r3, r0
 800c920:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800c922:	f107 020f 	add.w	r2, r7, #15
 800c926:	1df9      	adds	r1, r7, #7
 800c928:	2364      	movs	r3, #100	@ 0x64
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	2301      	movs	r3, #1
 800c92e:	4804      	ldr	r0, [pc, #16]	@ (800c940 <W25qxx_Spi+0x28>)
 800c930:	f7f9 fc39 	bl	80061a6 <HAL_SPI_TransmitReceive>
	return ret;
 800c934:	7bfb      	ldrb	r3, [r7, #15]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20000700 	.word	0x20000700

0800c944 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60fb      	str	r3, [r7, #12]
 800c94e:	2300      	movs	r3, #0
 800c950:	60bb      	str	r3, [r7, #8]
 800c952:	2300      	movs	r3, #0
 800c954:	607b      	str	r3, [r7, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800c95a:	2200      	movs	r2, #0
 800c95c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c960:	4813      	ldr	r0, [pc, #76]	@ (800c9b0 <W25qxx_ReadID+0x6c>)
 800c962:	f7f6 f8fd 	bl	8002b60 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800c966:	209f      	movs	r0, #159	@ 0x9f
 800c968:	f7ff ffd6 	bl	800c918 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800c96c:	20a5      	movs	r0, #165	@ 0xa5
 800c96e:	f7ff ffd3 	bl	800c918 <W25qxx_Spi>
 800c972:	4603      	mov	r3, r0
 800c974:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800c976:	20a5      	movs	r0, #165	@ 0xa5
 800c978:	f7ff ffce 	bl	800c918 <W25qxx_Spi>
 800c97c:	4603      	mov	r3, r0
 800c97e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800c980:	20a5      	movs	r0, #165	@ 0xa5
 800c982:	f7ff ffc9 	bl	800c918 <W25qxx_Spi>
 800c986:	4603      	mov	r3, r0
 800c988:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800c98a:	2201      	movs	r2, #1
 800c98c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c990:	4807      	ldr	r0, [pc, #28]	@ (800c9b0 <W25qxx_ReadID+0x6c>)
 800c992:	f7f6 f8e5 	bl	8002b60 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	041a      	lsls	r2, r3, #16
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]
	return Temp;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	40020800 	.word	0x40020800

0800c9b4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800c9b4:	b590      	push	{r4, r7, lr}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c9c0:	4816      	ldr	r0, [pc, #88]	@ (800ca1c <W25qxx_ReadUniqID+0x68>)
 800c9c2:	f7f6 f8cd 	bl	8002b60 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800c9c6:	204b      	movs	r0, #75	@ 0x4b
 800c9c8:	f7ff ffa6 	bl	800c918 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	71fb      	strb	r3, [r7, #7]
 800c9d0:	e005      	b.n	800c9de <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800c9d2:	20a5      	movs	r0, #165	@ 0xa5
 800c9d4:	f7ff ffa0 	bl	800c918 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	71fb      	strb	r3, [r7, #7]
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d9f6      	bls.n	800c9d2 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	71bb      	strb	r3, [r7, #6]
 800c9e8:	e00b      	b.n	800ca02 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800c9ea:	79bc      	ldrb	r4, [r7, #6]
 800c9ec:	20a5      	movs	r0, #165	@ 0xa5
 800c9ee:	f7ff ff93 	bl	800c918 <W25qxx_Spi>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800ca20 <W25qxx_ReadUniqID+0x6c>)
 800c9f8:	4423      	add	r3, r4
 800c9fa:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800c9fc:	79bb      	ldrb	r3, [r7, #6]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	71bb      	strb	r3, [r7, #6]
 800ca02:	79bb      	ldrb	r3, [r7, #6]
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	d9f0      	bls.n	800c9ea <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ca0e:	4803      	ldr	r0, [pc, #12]	@ (800ca1c <W25qxx_ReadUniqID+0x68>)
 800ca10:	f7f6 f8a6 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd90      	pop	{r4, r7, pc}
 800ca1c:	40020800 	.word	0x40020800
 800ca20:	20001d5c 	.word	0x20001d5c

0800ca24 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800ca32:	2200      	movs	r2, #0
 800ca34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ca38:	481c      	ldr	r0, [pc, #112]	@ (800caac <W25qxx_ReadStatusRegister+0x88>)
 800ca3a:	f7f6 f891 	bl	8002b60 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800ca3e:	79fb      	ldrb	r3, [r7, #7]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d10c      	bne.n	800ca5e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800ca44:	2005      	movs	r0, #5
 800ca46:	f7ff ff67 	bl	800c918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ca4a:	20a5      	movs	r0, #165	@ 0xa5
 800ca4c:	f7ff ff64 	bl	800c918 <W25qxx_Spi>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800ca54:	4a16      	ldr	r2, [pc, #88]	@ (800cab0 <W25qxx_ReadStatusRegister+0x8c>)
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800ca5c:	e01b      	b.n	800ca96 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d10c      	bne.n	800ca7e <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800ca64:	2035      	movs	r0, #53	@ 0x35
 800ca66:	f7ff ff57 	bl	800c918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ca6a:	20a5      	movs	r0, #165	@ 0xa5
 800ca6c:	f7ff ff54 	bl	800c918 <W25qxx_Spi>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800ca74:	4a0e      	ldr	r2, [pc, #56]	@ (800cab0 <W25qxx_ReadStatusRegister+0x8c>)
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 800ca7c:	e00b      	b.n	800ca96 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800ca7e:	2015      	movs	r0, #21
 800ca80:	f7ff ff4a 	bl	800c918 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ca84:	20a5      	movs	r0, #165	@ 0xa5
 800ca86:	f7ff ff47 	bl	800c918 <W25qxx_Spi>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800ca8e:	4a08      	ldr	r2, [pc, #32]	@ (800cab0 <W25qxx_ReadStatusRegister+0x8c>)
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ca96:	2201      	movs	r2, #1
 800ca98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ca9c:	4803      	ldr	r0, [pc, #12]	@ (800caac <W25qxx_ReadStatusRegister+0x88>)
 800ca9e:	f7f6 f85f 	bl	8002b60 <HAL_GPIO_WritePin>
	return status;
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	40020800 	.word	0x40020800
 800cab0:	20001d5c 	.word	0x20001d5c

0800cab4 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800caba:	4b65      	ldr	r3, [pc, #404]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800cac2:	e002      	b.n	800caca <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800cac4:	2001      	movs	r0, #1
 800cac6:	f7f5 f845 	bl	8001b54 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800caca:	f7f5 f837 	bl	8001b3c <HAL_GetTick>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b63      	cmp	r3, #99	@ 0x63
 800cad2:	d9f7      	bls.n	800cac4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800cad4:	2201      	movs	r2, #1
 800cad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cada:	485e      	ldr	r0, [pc, #376]	@ (800cc54 <W25qxx_Init+0x1a0>)
 800cadc:	f7f6 f840 	bl	8002b60 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800cae0:	2064      	movs	r0, #100	@ 0x64
 800cae2:	f7f5 f837 	bl	8001b54 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800cae6:	f7ff ff2d 	bl	800c944 <W25qxx_ReadID>
 800caea:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	3b11      	subs	r3, #17
 800caf2:	2b0f      	cmp	r3, #15
 800caf4:	d86b      	bhi.n	800cbce <W25qxx_Init+0x11a>
 800caf6:	a201      	add	r2, pc, #4	@ (adr r2, 800cafc <W25qxx_Init+0x48>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cbc1 	.word	0x0800cbc1
 800cb00:	0800cbb3 	.word	0x0800cbb3
 800cb04:	0800cba5 	.word	0x0800cba5
 800cb08:	0800cb97 	.word	0x0800cb97
 800cb0c:	0800cb89 	.word	0x0800cb89
 800cb10:	0800cb7b 	.word	0x0800cb7b
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb5d 	.word	0x0800cb5d
 800cb1c:	0800cb4d 	.word	0x0800cb4d
 800cb20:	0800cbcf 	.word	0x0800cbcf
 800cb24:	0800cbcf 	.word	0x0800cbcf
 800cb28:	0800cbcf 	.word	0x0800cbcf
 800cb2c:	0800cbcf 	.word	0x0800cbcf
 800cb30:	0800cbcf 	.word	0x0800cbcf
 800cb34:	0800cbcf 	.word	0x0800cbcf
 800cb38:	0800cb3d 	.word	0x0800cb3d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800cb3c:	4b44      	ldr	r3, [pc, #272]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb3e:	220a      	movs	r2, #10
 800cb40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800cb42:	4b43      	ldr	r3, [pc, #268]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cb48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800cb4a:	e046      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800cb4c:	4b40      	ldr	r3, [pc, #256]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb4e:	2209      	movs	r2, #9
 800cb50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800cb52:	4b3f      	ldr	r3, [pc, #252]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800cb5a:	e03e      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800cb5c:	4b3c      	ldr	r3, [pc, #240]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb5e:	2208      	movs	r2, #8
 800cb60:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800cb62:	4b3b      	ldr	r3, [pc, #236]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb68:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800cb6a:	e036      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800cb6c:	4b38      	ldr	r3, [pc, #224]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb6e:	2207      	movs	r2, #7
 800cb70:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800cb72:	4b37      	ldr	r3, [pc, #220]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb74:	2280      	movs	r2, #128	@ 0x80
 800cb76:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800cb78:	e02f      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800cb7a:	4b35      	ldr	r3, [pc, #212]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800cb80:	4b33      	ldr	r3, [pc, #204]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb82:	2240      	movs	r2, #64	@ 0x40
 800cb84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800cb86:	e028      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800cb88:	4b31      	ldr	r3, [pc, #196]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb8a:	2205      	movs	r2, #5
 800cb8c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800cb8e:	4b30      	ldr	r3, [pc, #192]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb90:	2220      	movs	r2, #32
 800cb92:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800cb94:	e021      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800cb96:	4b2e      	ldr	r3, [pc, #184]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb98:	2204      	movs	r2, #4
 800cb9a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800cb9c:	4b2c      	ldr	r3, [pc, #176]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cb9e:	2210      	movs	r2, #16
 800cba0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800cba2:	e01a      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800cba4:	4b2a      	ldr	r3, [pc, #168]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cba6:	2203      	movs	r2, #3
 800cba8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800cbaa:	4b29      	ldr	r3, [pc, #164]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbac:	2208      	movs	r2, #8
 800cbae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800cbb0:	e013      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800cbb2:	4b27      	ldr	r3, [pc, #156]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800cbb8:	4b25      	ldr	r3, [pc, #148]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbba:	2204      	movs	r2, #4
 800cbbc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800cbbe:	e00c      	b.n	800cbda <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800cbc0:	4b23      	ldr	r3, [pc, #140]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800cbc6:	4b22      	ldr	r3, [pc, #136]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbc8:	2202      	movs	r2, #2
 800cbca:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800cbcc:	e005      	b.n	800cbda <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800cbce:	4b20      	ldr	r3, [pc, #128]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e036      	b.n	800cc48 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800cbda:	4b1d      	ldr	r3, [pc, #116]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbe0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cbe8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800cbea:	4b19      	ldr	r3, [pc, #100]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	4a17      	ldr	r2, [pc, #92]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbf2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800cbf4:	4b16      	ldr	r3, [pc, #88]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	4a15      	ldr	r2, [pc, #84]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cbfa:	6912      	ldr	r2, [r2, #16]
 800cbfc:	fb02 f303 	mul.w	r3, r2, r3
 800cc00:	4a13      	ldr	r2, [pc, #76]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc02:	8952      	ldrh	r2, [r2, #10]
 800cc04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc08:	4a11      	ldr	r2, [pc, #68]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc0a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800cc0c:	4b10      	ldr	r3, [pc, #64]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	4a0f      	ldr	r2, [pc, #60]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc14:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800cc16:	4b0e      	ldr	r3, [pc, #56]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	4a0d      	ldr	r2, [pc, #52]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc1c:	6912      	ldr	r2, [r2, #16]
 800cc1e:	fb02 f303 	mul.w	r3, r2, r3
 800cc22:	0a9b      	lsrs	r3, r3, #10
 800cc24:	4a0a      	ldr	r2, [pc, #40]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc26:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800cc28:	f7ff fec4 	bl	800c9b4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f7ff fef9 	bl	800ca24 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800cc32:	2002      	movs	r0, #2
 800cc34:	f7ff fef6 	bl	800ca24 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800cc38:	2003      	movs	r0, #3
 800cc3a:	f7ff fef3 	bl	800ca24 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800cc3e:	4b04      	ldr	r3, [pc, #16]	@ (800cc50 <W25qxx_Init+0x19c>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 800cc46:	2301      	movs	r3, #1
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	20001d5c 	.word	0x20001d5c
 800cc54:	40020800 	.word	0x40020800

0800cc58 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800cc60:	4b07      	ldr	r3, [pc, #28]	@ (800cc80 <W25qxx_BlockToPage+0x28>)
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	fb02 f303 	mul.w	r3, r2, r3
 800cc6a:	4a05      	ldr	r2, [pc, #20]	@ (800cc80 <W25qxx_BlockToPage+0x28>)
 800cc6c:	8952      	ldrh	r2, [r2, #10]
 800cc6e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	20001d5c 	.word	0x20001d5c

0800cc84 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800cc92:	e002      	b.n	800cc9a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800cc94:	2001      	movs	r0, #1
 800cc96:	f7f4 ff5d 	bl	8001b54 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800cc9a:	4b37      	ldr	r3, [pc, #220]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800cc9c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d0f7      	beq.n	800cc94 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800cca4:	4b34      	ldr	r3, [pc, #208]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800ccac:	4b32      	ldr	r3, [pc, #200]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800ccae:	895b      	ldrh	r3, [r3, #10]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d802      	bhi.n	800ccbe <W25qxx_ReadPage+0x3a>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d102      	bne.n	800ccc4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800ccbe:	4b2e      	ldr	r3, [pc, #184]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	4413      	add	r3, r2
 800ccca:	4a2b      	ldr	r2, [pc, #172]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800cccc:	8952      	ldrh	r2, [r2, #10]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d905      	bls.n	800ccde <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800ccd2:	4b29      	ldr	r3, [pc, #164]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800ccd4:	895b      	ldrh	r3, [r3, #10]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800ccde:	4b26      	ldr	r3, [pc, #152]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800cce0:	895b      	ldrh	r3, [r3, #10]
 800cce2:	461a      	mov	r2, r3
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	fb02 f303 	mul.w	r3, r2, r3
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	4413      	add	r3, r2
 800ccee:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ccf6:	4821      	ldr	r0, [pc, #132]	@ (800cd7c <W25qxx_ReadPage+0xf8>)
 800ccf8:	f7f5 ff32 	bl	8002b60 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800ccfc:	4b1e      	ldr	r3, [pc, #120]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	2b08      	cmp	r3, #8
 800cd02:	d909      	bls.n	800cd18 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800cd04:	200c      	movs	r0, #12
 800cd06:	f7ff fe07 	bl	800c918 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	0e1b      	lsrs	r3, r3, #24
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fe01 	bl	800c918 <W25qxx_Spi>
 800cd16:	e002      	b.n	800cd1e <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800cd18:	200b      	movs	r0, #11
 800cd1a:	f7ff fdfd 	bl	800c918 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	0c1b      	lsrs	r3, r3, #16
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff fdf7 	bl	800c918 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fdf1 	bl	800c918 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fdec 	bl	800c918 <W25qxx_Spi>
	W25qxx_Spi(0);
 800cd40:	2000      	movs	r0, #0
 800cd42:	f7ff fde9 	bl	800c918 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	2364      	movs	r3, #100	@ 0x64
 800cd4c:	68f9      	ldr	r1, [r7, #12]
 800cd4e:	480c      	ldr	r0, [pc, #48]	@ (800cd80 <W25qxx_ReadPage+0xfc>)
 800cd50:	f7f9 f918 	bl	8005f84 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800cd54:	2201      	movs	r2, #1
 800cd56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd5a:	4808      	ldr	r0, [pc, #32]	@ (800cd7c <W25qxx_ReadPage+0xf8>)
 800cd5c:	f7f5 ff00 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800cd60:	2001      	movs	r0, #1
 800cd62:	f7f4 fef7 	bl	8001b54 <HAL_Delay>
	w25qxx.Lock = 0;
 800cd66:	4b04      	ldr	r3, [pc, #16]	@ (800cd78 <W25qxx_ReadPage+0xf4>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20001d5c 	.word	0x20001d5c
 800cd7c:	40020800 	.word	0x40020800
 800cd80:	20000700 	.word	0x20000700

0800cd84 <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800cd92:	4b2c      	ldr	r3, [pc, #176]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d802      	bhi.n	800cda2 <W25qxx_ReadBlock+0x1e>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800cda2:	4b28      	ldr	r3, [pc, #160]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800cda8:	4b26      	ldr	r3, [pc, #152]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d243      	bcs.n	800ce3a <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	441a      	add	r2, r3
 800cdb8:	4b22      	ldr	r3, [pc, #136]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d905      	bls.n	800cdcc <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800cdc0:	4b20      	ldr	r3, [pc, #128]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cdc2:	699a      	ldr	r2, [r3, #24]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	61bb      	str	r3, [r7, #24]
 800cdca:	e001      	b.n	800cdd0 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800cdd0:	68b8      	ldr	r0, [r7, #8]
 800cdd2:	f7ff ff41 	bl	800cc58 <W25qxx_BlockToPage>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cdda:	895b      	ldrh	r3, [r3, #10]
 800cddc:	4619      	mov	r1, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cde4:	4413      	add	r3, r2
 800cde6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800cde8:	4b16      	ldr	r3, [pc, #88]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800cdea:	895b      	ldrh	r3, [r3, #10]
 800cdec:	461a      	mov	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdf4:	fb01 f202 	mul.w	r2, r1, r2
 800cdf8:	1a9b      	subs	r3, r3, r2
 800cdfa:	617b      	str	r3, [r7, #20]
	do
	{

		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	69f9      	ldr	r1, [r7, #28]
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7ff ff3e 	bl	800cc84 <W25qxx_ReadPage>
		StartPage++;
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800ce0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800ce10:	895b      	ldrh	r3, [r3, #10]
 800ce12:	461a      	mov	r2, r3
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	1a9a      	subs	r2, r3, r2
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800ce1e:	4b09      	ldr	r3, [pc, #36]	@ (800ce44 <W25qxx_ReadBlock+0xc0>)
 800ce20:	895b      	ldrh	r3, [r3, #10]
 800ce22:	461a      	mov	r2, r3
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	dce1      	bgt.n	800cdfc <W25qxx_ReadBlock+0x78>
 800ce38:	e000      	b.n	800ce3c <W25qxx_ReadBlock+0xb8>
		return;
 800ce3a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20001d5c 	.word	0x20001d5c

0800ce48 <siprintf>:
 800ce48:	b40e      	push	{r1, r2, r3}
 800ce4a:	b500      	push	{lr}
 800ce4c:	b09c      	sub	sp, #112	@ 0x70
 800ce4e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce50:	9002      	str	r0, [sp, #8]
 800ce52:	9006      	str	r0, [sp, #24]
 800ce54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce58:	4809      	ldr	r0, [pc, #36]	@ (800ce80 <siprintf+0x38>)
 800ce5a:	9107      	str	r1, [sp, #28]
 800ce5c:	9104      	str	r1, [sp, #16]
 800ce5e:	4909      	ldr	r1, [pc, #36]	@ (800ce84 <siprintf+0x3c>)
 800ce60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce64:	9105      	str	r1, [sp, #20]
 800ce66:	6800      	ldr	r0, [r0, #0]
 800ce68:	9301      	str	r3, [sp, #4]
 800ce6a:	a902      	add	r1, sp, #8
 800ce6c:	f000 f994 	bl	800d198 <_svfiprintf_r>
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	2200      	movs	r2, #0
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	b01c      	add	sp, #112	@ 0x70
 800ce78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce7c:	b003      	add	sp, #12
 800ce7e:	4770      	bx	lr
 800ce80:	200005d8 	.word	0x200005d8
 800ce84:	ffff0208 	.word	0xffff0208

0800ce88 <memset>:
 800ce88:	4402      	add	r2, r0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d100      	bne.n	800ce92 <memset+0xa>
 800ce90:	4770      	bx	lr
 800ce92:	f803 1b01 	strb.w	r1, [r3], #1
 800ce96:	e7f9      	b.n	800ce8c <memset+0x4>

0800ce98 <__errno>:
 800ce98:	4b01      	ldr	r3, [pc, #4]	@ (800cea0 <__errno+0x8>)
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	200005d8 	.word	0x200005d8

0800cea4 <__libc_init_array>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4d0d      	ldr	r5, [pc, #52]	@ (800cedc <__libc_init_array+0x38>)
 800cea8:	4c0d      	ldr	r4, [pc, #52]	@ (800cee0 <__libc_init_array+0x3c>)
 800ceaa:	1b64      	subs	r4, r4, r5
 800ceac:	10a4      	asrs	r4, r4, #2
 800ceae:	2600      	movs	r6, #0
 800ceb0:	42a6      	cmp	r6, r4
 800ceb2:	d109      	bne.n	800cec8 <__libc_init_array+0x24>
 800ceb4:	4d0b      	ldr	r5, [pc, #44]	@ (800cee4 <__libc_init_array+0x40>)
 800ceb6:	4c0c      	ldr	r4, [pc, #48]	@ (800cee8 <__libc_init_array+0x44>)
 800ceb8:	f000 fc66 	bl	800d788 <_init>
 800cebc:	1b64      	subs	r4, r4, r5
 800cebe:	10a4      	asrs	r4, r4, #2
 800cec0:	2600      	movs	r6, #0
 800cec2:	42a6      	cmp	r6, r4
 800cec4:	d105      	bne.n	800ced2 <__libc_init_array+0x2e>
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cecc:	4798      	blx	r3
 800cece:	3601      	adds	r6, #1
 800ced0:	e7ee      	b.n	800ceb0 <__libc_init_array+0xc>
 800ced2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced6:	4798      	blx	r3
 800ced8:	3601      	adds	r6, #1
 800ceda:	e7f2      	b.n	800cec2 <__libc_init_array+0x1e>
 800cedc:	0801039c 	.word	0x0801039c
 800cee0:	0801039c 	.word	0x0801039c
 800cee4:	0801039c 	.word	0x0801039c
 800cee8:	080103a0 	.word	0x080103a0

0800ceec <__retarget_lock_acquire_recursive>:
 800ceec:	4770      	bx	lr

0800ceee <__retarget_lock_release_recursive>:
 800ceee:	4770      	bx	lr

0800cef0 <_free_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4605      	mov	r5, r0
 800cef4:	2900      	cmp	r1, #0
 800cef6:	d041      	beq.n	800cf7c <_free_r+0x8c>
 800cef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cefc:	1f0c      	subs	r4, r1, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	bfb8      	it	lt
 800cf02:	18e4      	addlt	r4, r4, r3
 800cf04:	f000 f8e0 	bl	800d0c8 <__malloc_lock>
 800cf08:	4a1d      	ldr	r2, [pc, #116]	@ (800cf80 <_free_r+0x90>)
 800cf0a:	6813      	ldr	r3, [r2, #0]
 800cf0c:	b933      	cbnz	r3, 800cf1c <_free_r+0x2c>
 800cf0e:	6063      	str	r3, [r4, #4]
 800cf10:	6014      	str	r4, [r2, #0]
 800cf12:	4628      	mov	r0, r5
 800cf14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf18:	f000 b8dc 	b.w	800d0d4 <__malloc_unlock>
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	d908      	bls.n	800cf32 <_free_r+0x42>
 800cf20:	6820      	ldr	r0, [r4, #0]
 800cf22:	1821      	adds	r1, r4, r0
 800cf24:	428b      	cmp	r3, r1
 800cf26:	bf01      	itttt	eq
 800cf28:	6819      	ldreq	r1, [r3, #0]
 800cf2a:	685b      	ldreq	r3, [r3, #4]
 800cf2c:	1809      	addeq	r1, r1, r0
 800cf2e:	6021      	streq	r1, [r4, #0]
 800cf30:	e7ed      	b.n	800cf0e <_free_r+0x1e>
 800cf32:	461a      	mov	r2, r3
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	b10b      	cbz	r3, 800cf3c <_free_r+0x4c>
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	d9fa      	bls.n	800cf32 <_free_r+0x42>
 800cf3c:	6811      	ldr	r1, [r2, #0]
 800cf3e:	1850      	adds	r0, r2, r1
 800cf40:	42a0      	cmp	r0, r4
 800cf42:	d10b      	bne.n	800cf5c <_free_r+0x6c>
 800cf44:	6820      	ldr	r0, [r4, #0]
 800cf46:	4401      	add	r1, r0
 800cf48:	1850      	adds	r0, r2, r1
 800cf4a:	4283      	cmp	r3, r0
 800cf4c:	6011      	str	r1, [r2, #0]
 800cf4e:	d1e0      	bne.n	800cf12 <_free_r+0x22>
 800cf50:	6818      	ldr	r0, [r3, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	6053      	str	r3, [r2, #4]
 800cf56:	4408      	add	r0, r1
 800cf58:	6010      	str	r0, [r2, #0]
 800cf5a:	e7da      	b.n	800cf12 <_free_r+0x22>
 800cf5c:	d902      	bls.n	800cf64 <_free_r+0x74>
 800cf5e:	230c      	movs	r3, #12
 800cf60:	602b      	str	r3, [r5, #0]
 800cf62:	e7d6      	b.n	800cf12 <_free_r+0x22>
 800cf64:	6820      	ldr	r0, [r4, #0]
 800cf66:	1821      	adds	r1, r4, r0
 800cf68:	428b      	cmp	r3, r1
 800cf6a:	bf04      	itt	eq
 800cf6c:	6819      	ldreq	r1, [r3, #0]
 800cf6e:	685b      	ldreq	r3, [r3, #4]
 800cf70:	6063      	str	r3, [r4, #4]
 800cf72:	bf04      	itt	eq
 800cf74:	1809      	addeq	r1, r1, r0
 800cf76:	6021      	streq	r1, [r4, #0]
 800cf78:	6054      	str	r4, [r2, #4]
 800cf7a:	e7ca      	b.n	800cf12 <_free_r+0x22>
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	bf00      	nop
 800cf80:	20001ec8 	.word	0x20001ec8

0800cf84 <sbrk_aligned>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	4e0f      	ldr	r6, [pc, #60]	@ (800cfc4 <sbrk_aligned+0x40>)
 800cf88:	460c      	mov	r4, r1
 800cf8a:	6831      	ldr	r1, [r6, #0]
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	b911      	cbnz	r1, 800cf96 <sbrk_aligned+0x12>
 800cf90:	f000 fba6 	bl	800d6e0 <_sbrk_r>
 800cf94:	6030      	str	r0, [r6, #0]
 800cf96:	4621      	mov	r1, r4
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f000 fba1 	bl	800d6e0 <_sbrk_r>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	d103      	bne.n	800cfaa <sbrk_aligned+0x26>
 800cfa2:	f04f 34ff 	mov.w	r4, #4294967295
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	1cc4      	adds	r4, r0, #3
 800cfac:	f024 0403 	bic.w	r4, r4, #3
 800cfb0:	42a0      	cmp	r0, r4
 800cfb2:	d0f8      	beq.n	800cfa6 <sbrk_aligned+0x22>
 800cfb4:	1a21      	subs	r1, r4, r0
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f000 fb92 	bl	800d6e0 <_sbrk_r>
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	d1f2      	bne.n	800cfa6 <sbrk_aligned+0x22>
 800cfc0:	e7ef      	b.n	800cfa2 <sbrk_aligned+0x1e>
 800cfc2:	bf00      	nop
 800cfc4:	20001ec4 	.word	0x20001ec4

0800cfc8 <_malloc_r>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	1ccd      	adds	r5, r1, #3
 800cfce:	f025 0503 	bic.w	r5, r5, #3
 800cfd2:	3508      	adds	r5, #8
 800cfd4:	2d0c      	cmp	r5, #12
 800cfd6:	bf38      	it	cc
 800cfd8:	250c      	movcc	r5, #12
 800cfda:	2d00      	cmp	r5, #0
 800cfdc:	4606      	mov	r6, r0
 800cfde:	db01      	blt.n	800cfe4 <_malloc_r+0x1c>
 800cfe0:	42a9      	cmp	r1, r5
 800cfe2:	d904      	bls.n	800cfee <_malloc_r+0x26>
 800cfe4:	230c      	movs	r3, #12
 800cfe6:	6033      	str	r3, [r6, #0]
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0c4 <_malloc_r+0xfc>
 800cff2:	f000 f869 	bl	800d0c8 <__malloc_lock>
 800cff6:	f8d8 3000 	ldr.w	r3, [r8]
 800cffa:	461c      	mov	r4, r3
 800cffc:	bb44      	cbnz	r4, 800d050 <_malloc_r+0x88>
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff ffbf 	bl	800cf84 <sbrk_aligned>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	4604      	mov	r4, r0
 800d00a:	d158      	bne.n	800d0be <_malloc_r+0xf6>
 800d00c:	f8d8 4000 	ldr.w	r4, [r8]
 800d010:	4627      	mov	r7, r4
 800d012:	2f00      	cmp	r7, #0
 800d014:	d143      	bne.n	800d09e <_malloc_r+0xd6>
 800d016:	2c00      	cmp	r4, #0
 800d018:	d04b      	beq.n	800d0b2 <_malloc_r+0xea>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	4639      	mov	r1, r7
 800d01e:	4630      	mov	r0, r6
 800d020:	eb04 0903 	add.w	r9, r4, r3
 800d024:	f000 fb5c 	bl	800d6e0 <_sbrk_r>
 800d028:	4581      	cmp	r9, r0
 800d02a:	d142      	bne.n	800d0b2 <_malloc_r+0xea>
 800d02c:	6821      	ldr	r1, [r4, #0]
 800d02e:	1a6d      	subs	r5, r5, r1
 800d030:	4629      	mov	r1, r5
 800d032:	4630      	mov	r0, r6
 800d034:	f7ff ffa6 	bl	800cf84 <sbrk_aligned>
 800d038:	3001      	adds	r0, #1
 800d03a:	d03a      	beq.n	800d0b2 <_malloc_r+0xea>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	442b      	add	r3, r5
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	f8d8 3000 	ldr.w	r3, [r8]
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	bb62      	cbnz	r2, 800d0a4 <_malloc_r+0xdc>
 800d04a:	f8c8 7000 	str.w	r7, [r8]
 800d04e:	e00f      	b.n	800d070 <_malloc_r+0xa8>
 800d050:	6822      	ldr	r2, [r4, #0]
 800d052:	1b52      	subs	r2, r2, r5
 800d054:	d420      	bmi.n	800d098 <_malloc_r+0xd0>
 800d056:	2a0b      	cmp	r2, #11
 800d058:	d917      	bls.n	800d08a <_malloc_r+0xc2>
 800d05a:	1961      	adds	r1, r4, r5
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	6025      	str	r5, [r4, #0]
 800d060:	bf18      	it	ne
 800d062:	6059      	strne	r1, [r3, #4]
 800d064:	6863      	ldr	r3, [r4, #4]
 800d066:	bf08      	it	eq
 800d068:	f8c8 1000 	streq.w	r1, [r8]
 800d06c:	5162      	str	r2, [r4, r5]
 800d06e:	604b      	str	r3, [r1, #4]
 800d070:	4630      	mov	r0, r6
 800d072:	f000 f82f 	bl	800d0d4 <__malloc_unlock>
 800d076:	f104 000b 	add.w	r0, r4, #11
 800d07a:	1d23      	adds	r3, r4, #4
 800d07c:	f020 0007 	bic.w	r0, r0, #7
 800d080:	1ac2      	subs	r2, r0, r3
 800d082:	bf1c      	itt	ne
 800d084:	1a1b      	subne	r3, r3, r0
 800d086:	50a3      	strne	r3, [r4, r2]
 800d088:	e7af      	b.n	800cfea <_malloc_r+0x22>
 800d08a:	6862      	ldr	r2, [r4, #4]
 800d08c:	42a3      	cmp	r3, r4
 800d08e:	bf0c      	ite	eq
 800d090:	f8c8 2000 	streq.w	r2, [r8]
 800d094:	605a      	strne	r2, [r3, #4]
 800d096:	e7eb      	b.n	800d070 <_malloc_r+0xa8>
 800d098:	4623      	mov	r3, r4
 800d09a:	6864      	ldr	r4, [r4, #4]
 800d09c:	e7ae      	b.n	800cffc <_malloc_r+0x34>
 800d09e:	463c      	mov	r4, r7
 800d0a0:	687f      	ldr	r7, [r7, #4]
 800d0a2:	e7b6      	b.n	800d012 <_malloc_r+0x4a>
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	42a3      	cmp	r3, r4
 800d0aa:	d1fb      	bne.n	800d0a4 <_malloc_r+0xdc>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	6053      	str	r3, [r2, #4]
 800d0b0:	e7de      	b.n	800d070 <_malloc_r+0xa8>
 800d0b2:	230c      	movs	r3, #12
 800d0b4:	6033      	str	r3, [r6, #0]
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f000 f80c 	bl	800d0d4 <__malloc_unlock>
 800d0bc:	e794      	b.n	800cfe8 <_malloc_r+0x20>
 800d0be:	6005      	str	r5, [r0, #0]
 800d0c0:	e7d6      	b.n	800d070 <_malloc_r+0xa8>
 800d0c2:	bf00      	nop
 800d0c4:	20001ec8 	.word	0x20001ec8

0800d0c8 <__malloc_lock>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	@ (800d0d0 <__malloc_lock+0x8>)
 800d0ca:	f7ff bf0f 	b.w	800ceec <__retarget_lock_acquire_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20001ec0 	.word	0x20001ec0

0800d0d4 <__malloc_unlock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	@ (800d0dc <__malloc_unlock+0x8>)
 800d0d6:	f7ff bf0a 	b.w	800ceee <__retarget_lock_release_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20001ec0 	.word	0x20001ec0

0800d0e0 <__ssputs_r>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	688e      	ldr	r6, [r1, #8]
 800d0e6:	461f      	mov	r7, r3
 800d0e8:	42be      	cmp	r6, r7
 800d0ea:	680b      	ldr	r3, [r1, #0]
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4690      	mov	r8, r2
 800d0f2:	d82d      	bhi.n	800d150 <__ssputs_r+0x70>
 800d0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0fc:	d026      	beq.n	800d14c <__ssputs_r+0x6c>
 800d0fe:	6965      	ldr	r5, [r4, #20]
 800d100:	6909      	ldr	r1, [r1, #16]
 800d102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d106:	eba3 0901 	sub.w	r9, r3, r1
 800d10a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d10e:	1c7b      	adds	r3, r7, #1
 800d110:	444b      	add	r3, r9
 800d112:	106d      	asrs	r5, r5, #1
 800d114:	429d      	cmp	r5, r3
 800d116:	bf38      	it	cc
 800d118:	461d      	movcc	r5, r3
 800d11a:	0553      	lsls	r3, r2, #21
 800d11c:	d527      	bpl.n	800d16e <__ssputs_r+0x8e>
 800d11e:	4629      	mov	r1, r5
 800d120:	f7ff ff52 	bl	800cfc8 <_malloc_r>
 800d124:	4606      	mov	r6, r0
 800d126:	b360      	cbz	r0, 800d182 <__ssputs_r+0xa2>
 800d128:	6921      	ldr	r1, [r4, #16]
 800d12a:	464a      	mov	r2, r9
 800d12c:	f000 fae8 	bl	800d700 <memcpy>
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d13a:	81a3      	strh	r3, [r4, #12]
 800d13c:	6126      	str	r6, [r4, #16]
 800d13e:	6165      	str	r5, [r4, #20]
 800d140:	444e      	add	r6, r9
 800d142:	eba5 0509 	sub.w	r5, r5, r9
 800d146:	6026      	str	r6, [r4, #0]
 800d148:	60a5      	str	r5, [r4, #8]
 800d14a:	463e      	mov	r6, r7
 800d14c:	42be      	cmp	r6, r7
 800d14e:	d900      	bls.n	800d152 <__ssputs_r+0x72>
 800d150:	463e      	mov	r6, r7
 800d152:	6820      	ldr	r0, [r4, #0]
 800d154:	4632      	mov	r2, r6
 800d156:	4641      	mov	r1, r8
 800d158:	f000 faa8 	bl	800d6ac <memmove>
 800d15c:	68a3      	ldr	r3, [r4, #8]
 800d15e:	1b9b      	subs	r3, r3, r6
 800d160:	60a3      	str	r3, [r4, #8]
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	4433      	add	r3, r6
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	2000      	movs	r0, #0
 800d16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d16e:	462a      	mov	r2, r5
 800d170:	f000 fad4 	bl	800d71c <_realloc_r>
 800d174:	4606      	mov	r6, r0
 800d176:	2800      	cmp	r0, #0
 800d178:	d1e0      	bne.n	800d13c <__ssputs_r+0x5c>
 800d17a:	6921      	ldr	r1, [r4, #16]
 800d17c:	4650      	mov	r0, sl
 800d17e:	f7ff feb7 	bl	800cef0 <_free_r>
 800d182:	230c      	movs	r3, #12
 800d184:	f8ca 3000 	str.w	r3, [sl]
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	f04f 30ff 	mov.w	r0, #4294967295
 800d194:	e7e9      	b.n	800d16a <__ssputs_r+0x8a>
	...

0800d198 <_svfiprintf_r>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	4698      	mov	r8, r3
 800d19e:	898b      	ldrh	r3, [r1, #12]
 800d1a0:	061b      	lsls	r3, r3, #24
 800d1a2:	b09d      	sub	sp, #116	@ 0x74
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	4614      	mov	r4, r2
 800d1aa:	d510      	bpl.n	800d1ce <_svfiprintf_r+0x36>
 800d1ac:	690b      	ldr	r3, [r1, #16]
 800d1ae:	b973      	cbnz	r3, 800d1ce <_svfiprintf_r+0x36>
 800d1b0:	2140      	movs	r1, #64	@ 0x40
 800d1b2:	f7ff ff09 	bl	800cfc8 <_malloc_r>
 800d1b6:	6028      	str	r0, [r5, #0]
 800d1b8:	6128      	str	r0, [r5, #16]
 800d1ba:	b930      	cbnz	r0, 800d1ca <_svfiprintf_r+0x32>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	b01d      	add	sp, #116	@ 0x74
 800d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	2340      	movs	r3, #64	@ 0x40
 800d1cc:	616b      	str	r3, [r5, #20]
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d2:	2320      	movs	r3, #32
 800d1d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1dc:	2330      	movs	r3, #48	@ 0x30
 800d1de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d37c <_svfiprintf_r+0x1e4>
 800d1e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1e6:	f04f 0901 	mov.w	r9, #1
 800d1ea:	4623      	mov	r3, r4
 800d1ec:	469a      	mov	sl, r3
 800d1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1f2:	b10a      	cbz	r2, 800d1f8 <_svfiprintf_r+0x60>
 800d1f4:	2a25      	cmp	r2, #37	@ 0x25
 800d1f6:	d1f9      	bne.n	800d1ec <_svfiprintf_r+0x54>
 800d1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d1fc:	d00b      	beq.n	800d216 <_svfiprintf_r+0x7e>
 800d1fe:	465b      	mov	r3, fp
 800d200:	4622      	mov	r2, r4
 800d202:	4629      	mov	r1, r5
 800d204:	4638      	mov	r0, r7
 800d206:	f7ff ff6b 	bl	800d0e0 <__ssputs_r>
 800d20a:	3001      	adds	r0, #1
 800d20c:	f000 80a7 	beq.w	800d35e <_svfiprintf_r+0x1c6>
 800d210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d212:	445a      	add	r2, fp
 800d214:	9209      	str	r2, [sp, #36]	@ 0x24
 800d216:	f89a 3000 	ldrb.w	r3, [sl]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 809f 	beq.w	800d35e <_svfiprintf_r+0x1c6>
 800d220:	2300      	movs	r3, #0
 800d222:	f04f 32ff 	mov.w	r2, #4294967295
 800d226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d22a:	f10a 0a01 	add.w	sl, sl, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	9307      	str	r3, [sp, #28]
 800d232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d236:	931a      	str	r3, [sp, #104]	@ 0x68
 800d238:	4654      	mov	r4, sl
 800d23a:	2205      	movs	r2, #5
 800d23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d240:	484e      	ldr	r0, [pc, #312]	@ (800d37c <_svfiprintf_r+0x1e4>)
 800d242:	f7f2 ffcd 	bl	80001e0 <memchr>
 800d246:	9a04      	ldr	r2, [sp, #16]
 800d248:	b9d8      	cbnz	r0, 800d282 <_svfiprintf_r+0xea>
 800d24a:	06d0      	lsls	r0, r2, #27
 800d24c:	bf44      	itt	mi
 800d24e:	2320      	movmi	r3, #32
 800d250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d254:	0711      	lsls	r1, r2, #28
 800d256:	bf44      	itt	mi
 800d258:	232b      	movmi	r3, #43	@ 0x2b
 800d25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d25e:	f89a 3000 	ldrb.w	r3, [sl]
 800d262:	2b2a      	cmp	r3, #42	@ 0x2a
 800d264:	d015      	beq.n	800d292 <_svfiprintf_r+0xfa>
 800d266:	9a07      	ldr	r2, [sp, #28]
 800d268:	4654      	mov	r4, sl
 800d26a:	2000      	movs	r0, #0
 800d26c:	f04f 0c0a 	mov.w	ip, #10
 800d270:	4621      	mov	r1, r4
 800d272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d276:	3b30      	subs	r3, #48	@ 0x30
 800d278:	2b09      	cmp	r3, #9
 800d27a:	d94b      	bls.n	800d314 <_svfiprintf_r+0x17c>
 800d27c:	b1b0      	cbz	r0, 800d2ac <_svfiprintf_r+0x114>
 800d27e:	9207      	str	r2, [sp, #28]
 800d280:	e014      	b.n	800d2ac <_svfiprintf_r+0x114>
 800d282:	eba0 0308 	sub.w	r3, r0, r8
 800d286:	fa09 f303 	lsl.w	r3, r9, r3
 800d28a:	4313      	orrs	r3, r2
 800d28c:	9304      	str	r3, [sp, #16]
 800d28e:	46a2      	mov	sl, r4
 800d290:	e7d2      	b.n	800d238 <_svfiprintf_r+0xa0>
 800d292:	9b03      	ldr	r3, [sp, #12]
 800d294:	1d19      	adds	r1, r3, #4
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	9103      	str	r1, [sp, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	bfbb      	ittet	lt
 800d29e:	425b      	neglt	r3, r3
 800d2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d2a4:	9307      	strge	r3, [sp, #28]
 800d2a6:	9307      	strlt	r3, [sp, #28]
 800d2a8:	bfb8      	it	lt
 800d2aa:	9204      	strlt	r2, [sp, #16]
 800d2ac:	7823      	ldrb	r3, [r4, #0]
 800d2ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2b0:	d10a      	bne.n	800d2c8 <_svfiprintf_r+0x130>
 800d2b2:	7863      	ldrb	r3, [r4, #1]
 800d2b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2b6:	d132      	bne.n	800d31e <_svfiprintf_r+0x186>
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	1d1a      	adds	r2, r3, #4
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	9203      	str	r2, [sp, #12]
 800d2c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2c4:	3402      	adds	r4, #2
 800d2c6:	9305      	str	r3, [sp, #20]
 800d2c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d38c <_svfiprintf_r+0x1f4>
 800d2cc:	7821      	ldrb	r1, [r4, #0]
 800d2ce:	2203      	movs	r2, #3
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	f7f2 ff85 	bl	80001e0 <memchr>
 800d2d6:	b138      	cbz	r0, 800d2e8 <_svfiprintf_r+0x150>
 800d2d8:	9b04      	ldr	r3, [sp, #16]
 800d2da:	eba0 000a 	sub.w	r0, r0, sl
 800d2de:	2240      	movs	r2, #64	@ 0x40
 800d2e0:	4082      	lsls	r2, r0
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	3401      	adds	r4, #1
 800d2e6:	9304      	str	r3, [sp, #16]
 800d2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ec:	4824      	ldr	r0, [pc, #144]	@ (800d380 <_svfiprintf_r+0x1e8>)
 800d2ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2f2:	2206      	movs	r2, #6
 800d2f4:	f7f2 ff74 	bl	80001e0 <memchr>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d036      	beq.n	800d36a <_svfiprintf_r+0x1d2>
 800d2fc:	4b21      	ldr	r3, [pc, #132]	@ (800d384 <_svfiprintf_r+0x1ec>)
 800d2fe:	bb1b      	cbnz	r3, 800d348 <_svfiprintf_r+0x1b0>
 800d300:	9b03      	ldr	r3, [sp, #12]
 800d302:	3307      	adds	r3, #7
 800d304:	f023 0307 	bic.w	r3, r3, #7
 800d308:	3308      	adds	r3, #8
 800d30a:	9303      	str	r3, [sp, #12]
 800d30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d30e:	4433      	add	r3, r6
 800d310:	9309      	str	r3, [sp, #36]	@ 0x24
 800d312:	e76a      	b.n	800d1ea <_svfiprintf_r+0x52>
 800d314:	fb0c 3202 	mla	r2, ip, r2, r3
 800d318:	460c      	mov	r4, r1
 800d31a:	2001      	movs	r0, #1
 800d31c:	e7a8      	b.n	800d270 <_svfiprintf_r+0xd8>
 800d31e:	2300      	movs	r3, #0
 800d320:	3401      	adds	r4, #1
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	4619      	mov	r1, r3
 800d326:	f04f 0c0a 	mov.w	ip, #10
 800d32a:	4620      	mov	r0, r4
 800d32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d330:	3a30      	subs	r2, #48	@ 0x30
 800d332:	2a09      	cmp	r2, #9
 800d334:	d903      	bls.n	800d33e <_svfiprintf_r+0x1a6>
 800d336:	2b00      	cmp	r3, #0
 800d338:	d0c6      	beq.n	800d2c8 <_svfiprintf_r+0x130>
 800d33a:	9105      	str	r1, [sp, #20]
 800d33c:	e7c4      	b.n	800d2c8 <_svfiprintf_r+0x130>
 800d33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d342:	4604      	mov	r4, r0
 800d344:	2301      	movs	r3, #1
 800d346:	e7f0      	b.n	800d32a <_svfiprintf_r+0x192>
 800d348:	ab03      	add	r3, sp, #12
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	462a      	mov	r2, r5
 800d34e:	4b0e      	ldr	r3, [pc, #56]	@ (800d388 <_svfiprintf_r+0x1f0>)
 800d350:	a904      	add	r1, sp, #16
 800d352:	4638      	mov	r0, r7
 800d354:	f3af 8000 	nop.w
 800d358:	1c42      	adds	r2, r0, #1
 800d35a:	4606      	mov	r6, r0
 800d35c:	d1d6      	bne.n	800d30c <_svfiprintf_r+0x174>
 800d35e:	89ab      	ldrh	r3, [r5, #12]
 800d360:	065b      	lsls	r3, r3, #25
 800d362:	f53f af2d 	bmi.w	800d1c0 <_svfiprintf_r+0x28>
 800d366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d368:	e72c      	b.n	800d1c4 <_svfiprintf_r+0x2c>
 800d36a:	ab03      	add	r3, sp, #12
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	462a      	mov	r2, r5
 800d370:	4b05      	ldr	r3, [pc, #20]	@ (800d388 <_svfiprintf_r+0x1f0>)
 800d372:	a904      	add	r1, sp, #16
 800d374:	4638      	mov	r0, r7
 800d376:	f000 f879 	bl	800d46c <_printf_i>
 800d37a:	e7ed      	b.n	800d358 <_svfiprintf_r+0x1c0>
 800d37c:	0801035f 	.word	0x0801035f
 800d380:	08010369 	.word	0x08010369
 800d384:	00000000 	.word	0x00000000
 800d388:	0800d0e1 	.word	0x0800d0e1
 800d38c:	08010365 	.word	0x08010365

0800d390 <_printf_common>:
 800d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d394:	4616      	mov	r6, r2
 800d396:	4698      	mov	r8, r3
 800d398:	688a      	ldr	r2, [r1, #8]
 800d39a:	690b      	ldr	r3, [r1, #16]
 800d39c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	bfb8      	it	lt
 800d3a4:	4613      	movlt	r3, r2
 800d3a6:	6033      	str	r3, [r6, #0]
 800d3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	b10a      	cbz	r2, 800d3b6 <_printf_common+0x26>
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	6033      	str	r3, [r6, #0]
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	0699      	lsls	r1, r3, #26
 800d3ba:	bf42      	ittt	mi
 800d3bc:	6833      	ldrmi	r3, [r6, #0]
 800d3be:	3302      	addmi	r3, #2
 800d3c0:	6033      	strmi	r3, [r6, #0]
 800d3c2:	6825      	ldr	r5, [r4, #0]
 800d3c4:	f015 0506 	ands.w	r5, r5, #6
 800d3c8:	d106      	bne.n	800d3d8 <_printf_common+0x48>
 800d3ca:	f104 0a19 	add.w	sl, r4, #25
 800d3ce:	68e3      	ldr	r3, [r4, #12]
 800d3d0:	6832      	ldr	r2, [r6, #0]
 800d3d2:	1a9b      	subs	r3, r3, r2
 800d3d4:	42ab      	cmp	r3, r5
 800d3d6:	dc26      	bgt.n	800d426 <_printf_common+0x96>
 800d3d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3dc:	6822      	ldr	r2, [r4, #0]
 800d3de:	3b00      	subs	r3, #0
 800d3e0:	bf18      	it	ne
 800d3e2:	2301      	movne	r3, #1
 800d3e4:	0692      	lsls	r2, r2, #26
 800d3e6:	d42b      	bmi.n	800d440 <_printf_common+0xb0>
 800d3e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3ec:	4641      	mov	r1, r8
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	47c8      	blx	r9
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	d01e      	beq.n	800d434 <_printf_common+0xa4>
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	6922      	ldr	r2, [r4, #16]
 800d3fa:	f003 0306 	and.w	r3, r3, #6
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	bf02      	ittt	eq
 800d402:	68e5      	ldreq	r5, [r4, #12]
 800d404:	6833      	ldreq	r3, [r6, #0]
 800d406:	1aed      	subeq	r5, r5, r3
 800d408:	68a3      	ldr	r3, [r4, #8]
 800d40a:	bf0c      	ite	eq
 800d40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d410:	2500      	movne	r5, #0
 800d412:	4293      	cmp	r3, r2
 800d414:	bfc4      	itt	gt
 800d416:	1a9b      	subgt	r3, r3, r2
 800d418:	18ed      	addgt	r5, r5, r3
 800d41a:	2600      	movs	r6, #0
 800d41c:	341a      	adds	r4, #26
 800d41e:	42b5      	cmp	r5, r6
 800d420:	d11a      	bne.n	800d458 <_printf_common+0xc8>
 800d422:	2000      	movs	r0, #0
 800d424:	e008      	b.n	800d438 <_printf_common+0xa8>
 800d426:	2301      	movs	r3, #1
 800d428:	4652      	mov	r2, sl
 800d42a:	4641      	mov	r1, r8
 800d42c:	4638      	mov	r0, r7
 800d42e:	47c8      	blx	r9
 800d430:	3001      	adds	r0, #1
 800d432:	d103      	bne.n	800d43c <_printf_common+0xac>
 800d434:	f04f 30ff 	mov.w	r0, #4294967295
 800d438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43c:	3501      	adds	r5, #1
 800d43e:	e7c6      	b.n	800d3ce <_printf_common+0x3e>
 800d440:	18e1      	adds	r1, r4, r3
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	2030      	movs	r0, #48	@ 0x30
 800d446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d44a:	4422      	add	r2, r4
 800d44c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d454:	3302      	adds	r3, #2
 800d456:	e7c7      	b.n	800d3e8 <_printf_common+0x58>
 800d458:	2301      	movs	r3, #1
 800d45a:	4622      	mov	r2, r4
 800d45c:	4641      	mov	r1, r8
 800d45e:	4638      	mov	r0, r7
 800d460:	47c8      	blx	r9
 800d462:	3001      	adds	r0, #1
 800d464:	d0e6      	beq.n	800d434 <_printf_common+0xa4>
 800d466:	3601      	adds	r6, #1
 800d468:	e7d9      	b.n	800d41e <_printf_common+0x8e>
	...

0800d46c <_printf_i>:
 800d46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	7e0f      	ldrb	r7, [r1, #24]
 800d472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d474:	2f78      	cmp	r7, #120	@ 0x78
 800d476:	4691      	mov	r9, r2
 800d478:	4680      	mov	r8, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	469a      	mov	sl, r3
 800d47e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d482:	d807      	bhi.n	800d494 <_printf_i+0x28>
 800d484:	2f62      	cmp	r7, #98	@ 0x62
 800d486:	d80a      	bhi.n	800d49e <_printf_i+0x32>
 800d488:	2f00      	cmp	r7, #0
 800d48a:	f000 80d2 	beq.w	800d632 <_printf_i+0x1c6>
 800d48e:	2f58      	cmp	r7, #88	@ 0x58
 800d490:	f000 80b9 	beq.w	800d606 <_printf_i+0x19a>
 800d494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d49c:	e03a      	b.n	800d514 <_printf_i+0xa8>
 800d49e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d4a2:	2b15      	cmp	r3, #21
 800d4a4:	d8f6      	bhi.n	800d494 <_printf_i+0x28>
 800d4a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d4ac <_printf_i+0x40>)
 800d4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4ac:	0800d505 	.word	0x0800d505
 800d4b0:	0800d519 	.word	0x0800d519
 800d4b4:	0800d495 	.word	0x0800d495
 800d4b8:	0800d495 	.word	0x0800d495
 800d4bc:	0800d495 	.word	0x0800d495
 800d4c0:	0800d495 	.word	0x0800d495
 800d4c4:	0800d519 	.word	0x0800d519
 800d4c8:	0800d495 	.word	0x0800d495
 800d4cc:	0800d495 	.word	0x0800d495
 800d4d0:	0800d495 	.word	0x0800d495
 800d4d4:	0800d495 	.word	0x0800d495
 800d4d8:	0800d619 	.word	0x0800d619
 800d4dc:	0800d543 	.word	0x0800d543
 800d4e0:	0800d5d3 	.word	0x0800d5d3
 800d4e4:	0800d495 	.word	0x0800d495
 800d4e8:	0800d495 	.word	0x0800d495
 800d4ec:	0800d63b 	.word	0x0800d63b
 800d4f0:	0800d495 	.word	0x0800d495
 800d4f4:	0800d543 	.word	0x0800d543
 800d4f8:	0800d495 	.word	0x0800d495
 800d4fc:	0800d495 	.word	0x0800d495
 800d500:	0800d5db 	.word	0x0800d5db
 800d504:	6833      	ldr	r3, [r6, #0]
 800d506:	1d1a      	adds	r2, r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6032      	str	r2, [r6, #0]
 800d50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d514:	2301      	movs	r3, #1
 800d516:	e09d      	b.n	800d654 <_printf_i+0x1e8>
 800d518:	6833      	ldr	r3, [r6, #0]
 800d51a:	6820      	ldr	r0, [r4, #0]
 800d51c:	1d19      	adds	r1, r3, #4
 800d51e:	6031      	str	r1, [r6, #0]
 800d520:	0606      	lsls	r6, r0, #24
 800d522:	d501      	bpl.n	800d528 <_printf_i+0xbc>
 800d524:	681d      	ldr	r5, [r3, #0]
 800d526:	e003      	b.n	800d530 <_printf_i+0xc4>
 800d528:	0645      	lsls	r5, r0, #25
 800d52a:	d5fb      	bpl.n	800d524 <_printf_i+0xb8>
 800d52c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d530:	2d00      	cmp	r5, #0
 800d532:	da03      	bge.n	800d53c <_printf_i+0xd0>
 800d534:	232d      	movs	r3, #45	@ 0x2d
 800d536:	426d      	negs	r5, r5
 800d538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d53c:	4859      	ldr	r0, [pc, #356]	@ (800d6a4 <_printf_i+0x238>)
 800d53e:	230a      	movs	r3, #10
 800d540:	e011      	b.n	800d566 <_printf_i+0xfa>
 800d542:	6821      	ldr	r1, [r4, #0]
 800d544:	6833      	ldr	r3, [r6, #0]
 800d546:	0608      	lsls	r0, r1, #24
 800d548:	f853 5b04 	ldr.w	r5, [r3], #4
 800d54c:	d402      	bmi.n	800d554 <_printf_i+0xe8>
 800d54e:	0649      	lsls	r1, r1, #25
 800d550:	bf48      	it	mi
 800d552:	b2ad      	uxthmi	r5, r5
 800d554:	2f6f      	cmp	r7, #111	@ 0x6f
 800d556:	4853      	ldr	r0, [pc, #332]	@ (800d6a4 <_printf_i+0x238>)
 800d558:	6033      	str	r3, [r6, #0]
 800d55a:	bf14      	ite	ne
 800d55c:	230a      	movne	r3, #10
 800d55e:	2308      	moveq	r3, #8
 800d560:	2100      	movs	r1, #0
 800d562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d566:	6866      	ldr	r6, [r4, #4]
 800d568:	60a6      	str	r6, [r4, #8]
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	bfa2      	ittt	ge
 800d56e:	6821      	ldrge	r1, [r4, #0]
 800d570:	f021 0104 	bicge.w	r1, r1, #4
 800d574:	6021      	strge	r1, [r4, #0]
 800d576:	b90d      	cbnz	r5, 800d57c <_printf_i+0x110>
 800d578:	2e00      	cmp	r6, #0
 800d57a:	d04b      	beq.n	800d614 <_printf_i+0x1a8>
 800d57c:	4616      	mov	r6, r2
 800d57e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d582:	fb03 5711 	mls	r7, r3, r1, r5
 800d586:	5dc7      	ldrb	r7, [r0, r7]
 800d588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d58c:	462f      	mov	r7, r5
 800d58e:	42bb      	cmp	r3, r7
 800d590:	460d      	mov	r5, r1
 800d592:	d9f4      	bls.n	800d57e <_printf_i+0x112>
 800d594:	2b08      	cmp	r3, #8
 800d596:	d10b      	bne.n	800d5b0 <_printf_i+0x144>
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	07df      	lsls	r7, r3, #31
 800d59c:	d508      	bpl.n	800d5b0 <_printf_i+0x144>
 800d59e:	6923      	ldr	r3, [r4, #16]
 800d5a0:	6861      	ldr	r1, [r4, #4]
 800d5a2:	4299      	cmp	r1, r3
 800d5a4:	bfde      	ittt	le
 800d5a6:	2330      	movle	r3, #48	@ 0x30
 800d5a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d5ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d5b0:	1b92      	subs	r2, r2, r6
 800d5b2:	6122      	str	r2, [r4, #16]
 800d5b4:	f8cd a000 	str.w	sl, [sp]
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	aa03      	add	r2, sp, #12
 800d5bc:	4621      	mov	r1, r4
 800d5be:	4640      	mov	r0, r8
 800d5c0:	f7ff fee6 	bl	800d390 <_printf_common>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d14a      	bne.n	800d65e <_printf_i+0x1f2>
 800d5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5cc:	b004      	add	sp, #16
 800d5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	f043 0320 	orr.w	r3, r3, #32
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	4833      	ldr	r0, [pc, #204]	@ (800d6a8 <_printf_i+0x23c>)
 800d5dc:	2778      	movs	r7, #120	@ 0x78
 800d5de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	6831      	ldr	r1, [r6, #0]
 800d5e6:	061f      	lsls	r7, r3, #24
 800d5e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5ec:	d402      	bmi.n	800d5f4 <_printf_i+0x188>
 800d5ee:	065f      	lsls	r7, r3, #25
 800d5f0:	bf48      	it	mi
 800d5f2:	b2ad      	uxthmi	r5, r5
 800d5f4:	6031      	str	r1, [r6, #0]
 800d5f6:	07d9      	lsls	r1, r3, #31
 800d5f8:	bf44      	itt	mi
 800d5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d5fe:	6023      	strmi	r3, [r4, #0]
 800d600:	b11d      	cbz	r5, 800d60a <_printf_i+0x19e>
 800d602:	2310      	movs	r3, #16
 800d604:	e7ac      	b.n	800d560 <_printf_i+0xf4>
 800d606:	4827      	ldr	r0, [pc, #156]	@ (800d6a4 <_printf_i+0x238>)
 800d608:	e7e9      	b.n	800d5de <_printf_i+0x172>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	f023 0320 	bic.w	r3, r3, #32
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	e7f6      	b.n	800d602 <_printf_i+0x196>
 800d614:	4616      	mov	r6, r2
 800d616:	e7bd      	b.n	800d594 <_printf_i+0x128>
 800d618:	6833      	ldr	r3, [r6, #0]
 800d61a:	6825      	ldr	r5, [r4, #0]
 800d61c:	6961      	ldr	r1, [r4, #20]
 800d61e:	1d18      	adds	r0, r3, #4
 800d620:	6030      	str	r0, [r6, #0]
 800d622:	062e      	lsls	r6, r5, #24
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	d501      	bpl.n	800d62c <_printf_i+0x1c0>
 800d628:	6019      	str	r1, [r3, #0]
 800d62a:	e002      	b.n	800d632 <_printf_i+0x1c6>
 800d62c:	0668      	lsls	r0, r5, #25
 800d62e:	d5fb      	bpl.n	800d628 <_printf_i+0x1bc>
 800d630:	8019      	strh	r1, [r3, #0]
 800d632:	2300      	movs	r3, #0
 800d634:	6123      	str	r3, [r4, #16]
 800d636:	4616      	mov	r6, r2
 800d638:	e7bc      	b.n	800d5b4 <_printf_i+0x148>
 800d63a:	6833      	ldr	r3, [r6, #0]
 800d63c:	1d1a      	adds	r2, r3, #4
 800d63e:	6032      	str	r2, [r6, #0]
 800d640:	681e      	ldr	r6, [r3, #0]
 800d642:	6862      	ldr	r2, [r4, #4]
 800d644:	2100      	movs	r1, #0
 800d646:	4630      	mov	r0, r6
 800d648:	f7f2 fdca 	bl	80001e0 <memchr>
 800d64c:	b108      	cbz	r0, 800d652 <_printf_i+0x1e6>
 800d64e:	1b80      	subs	r0, r0, r6
 800d650:	6060      	str	r0, [r4, #4]
 800d652:	6863      	ldr	r3, [r4, #4]
 800d654:	6123      	str	r3, [r4, #16]
 800d656:	2300      	movs	r3, #0
 800d658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d65c:	e7aa      	b.n	800d5b4 <_printf_i+0x148>
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	4632      	mov	r2, r6
 800d662:	4649      	mov	r1, r9
 800d664:	4640      	mov	r0, r8
 800d666:	47d0      	blx	sl
 800d668:	3001      	adds	r0, #1
 800d66a:	d0ad      	beq.n	800d5c8 <_printf_i+0x15c>
 800d66c:	6823      	ldr	r3, [r4, #0]
 800d66e:	079b      	lsls	r3, r3, #30
 800d670:	d413      	bmi.n	800d69a <_printf_i+0x22e>
 800d672:	68e0      	ldr	r0, [r4, #12]
 800d674:	9b03      	ldr	r3, [sp, #12]
 800d676:	4298      	cmp	r0, r3
 800d678:	bfb8      	it	lt
 800d67a:	4618      	movlt	r0, r3
 800d67c:	e7a6      	b.n	800d5cc <_printf_i+0x160>
 800d67e:	2301      	movs	r3, #1
 800d680:	4632      	mov	r2, r6
 800d682:	4649      	mov	r1, r9
 800d684:	4640      	mov	r0, r8
 800d686:	47d0      	blx	sl
 800d688:	3001      	adds	r0, #1
 800d68a:	d09d      	beq.n	800d5c8 <_printf_i+0x15c>
 800d68c:	3501      	adds	r5, #1
 800d68e:	68e3      	ldr	r3, [r4, #12]
 800d690:	9903      	ldr	r1, [sp, #12]
 800d692:	1a5b      	subs	r3, r3, r1
 800d694:	42ab      	cmp	r3, r5
 800d696:	dcf2      	bgt.n	800d67e <_printf_i+0x212>
 800d698:	e7eb      	b.n	800d672 <_printf_i+0x206>
 800d69a:	2500      	movs	r5, #0
 800d69c:	f104 0619 	add.w	r6, r4, #25
 800d6a0:	e7f5      	b.n	800d68e <_printf_i+0x222>
 800d6a2:	bf00      	nop
 800d6a4:	08010370 	.word	0x08010370
 800d6a8:	08010381 	.word	0x08010381

0800d6ac <memmove>:
 800d6ac:	4288      	cmp	r0, r1
 800d6ae:	b510      	push	{r4, lr}
 800d6b0:	eb01 0402 	add.w	r4, r1, r2
 800d6b4:	d902      	bls.n	800d6bc <memmove+0x10>
 800d6b6:	4284      	cmp	r4, r0
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	d807      	bhi.n	800d6cc <memmove+0x20>
 800d6bc:	1e43      	subs	r3, r0, #1
 800d6be:	42a1      	cmp	r1, r4
 800d6c0:	d008      	beq.n	800d6d4 <memmove+0x28>
 800d6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6ca:	e7f8      	b.n	800d6be <memmove+0x12>
 800d6cc:	4402      	add	r2, r0
 800d6ce:	4601      	mov	r1, r0
 800d6d0:	428a      	cmp	r2, r1
 800d6d2:	d100      	bne.n	800d6d6 <memmove+0x2a>
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6de:	e7f7      	b.n	800d6d0 <memmove+0x24>

0800d6e0 <_sbrk_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d06      	ldr	r5, [pc, #24]	@ (800d6fc <_sbrk_r+0x1c>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f4 f94e 	bl	800198c <_sbrk>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_sbrk_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_sbrk_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	20001ebc 	.word	0x20001ebc

0800d700 <memcpy>:
 800d700:	440a      	add	r2, r1
 800d702:	4291      	cmp	r1, r2
 800d704:	f100 33ff 	add.w	r3, r0, #4294967295
 800d708:	d100      	bne.n	800d70c <memcpy+0xc>
 800d70a:	4770      	bx	lr
 800d70c:	b510      	push	{r4, lr}
 800d70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d716:	4291      	cmp	r1, r2
 800d718:	d1f9      	bne.n	800d70e <memcpy+0xe>
 800d71a:	bd10      	pop	{r4, pc}

0800d71c <_realloc_r>:
 800d71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d720:	4680      	mov	r8, r0
 800d722:	4615      	mov	r5, r2
 800d724:	460c      	mov	r4, r1
 800d726:	b921      	cbnz	r1, 800d732 <_realloc_r+0x16>
 800d728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d72c:	4611      	mov	r1, r2
 800d72e:	f7ff bc4b 	b.w	800cfc8 <_malloc_r>
 800d732:	b92a      	cbnz	r2, 800d740 <_realloc_r+0x24>
 800d734:	f7ff fbdc 	bl	800cef0 <_free_r>
 800d738:	2400      	movs	r4, #0
 800d73a:	4620      	mov	r0, r4
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d740:	f000 f81a 	bl	800d778 <_malloc_usable_size_r>
 800d744:	4285      	cmp	r5, r0
 800d746:	4606      	mov	r6, r0
 800d748:	d802      	bhi.n	800d750 <_realloc_r+0x34>
 800d74a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d74e:	d8f4      	bhi.n	800d73a <_realloc_r+0x1e>
 800d750:	4629      	mov	r1, r5
 800d752:	4640      	mov	r0, r8
 800d754:	f7ff fc38 	bl	800cfc8 <_malloc_r>
 800d758:	4607      	mov	r7, r0
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d0ec      	beq.n	800d738 <_realloc_r+0x1c>
 800d75e:	42b5      	cmp	r5, r6
 800d760:	462a      	mov	r2, r5
 800d762:	4621      	mov	r1, r4
 800d764:	bf28      	it	cs
 800d766:	4632      	movcs	r2, r6
 800d768:	f7ff ffca 	bl	800d700 <memcpy>
 800d76c:	4621      	mov	r1, r4
 800d76e:	4640      	mov	r0, r8
 800d770:	f7ff fbbe 	bl	800cef0 <_free_r>
 800d774:	463c      	mov	r4, r7
 800d776:	e7e0      	b.n	800d73a <_realloc_r+0x1e>

0800d778 <_malloc_usable_size_r>:
 800d778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d77c:	1f18      	subs	r0, r3, #4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	bfbc      	itt	lt
 800d782:	580b      	ldrlt	r3, [r1, r0]
 800d784:	18c0      	addlt	r0, r0, r3
 800d786:	4770      	bx	lr

0800d788 <_init>:
 800d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78a:	bf00      	nop
 800d78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78e:	bc08      	pop	{r3}
 800d790:	469e      	mov	lr, r3
 800d792:	4770      	bx	lr

0800d794 <_fini>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	bf00      	nop
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr
