
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0800de30  0800de30  0000ee30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a60  08010a60  00012628  2**0
                  CONTENTS
  4 .ARM          00000008  08010a60  08010a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a68  08010a68  00012628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a68  08010a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a6c  08010a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000628  20000000  08010a70  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  20000628  08011098  00012628  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  08011098  00012ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012628  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f57c  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d8e  00000000  00000000  00031bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f1  00000000  00000000  000385a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6e  00000000  00000000  00039b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b87  00000000  00000000  000577ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8f3d  00000000  00000000  0007d386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001262c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba8  00000000  00000000  00126308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000628 	.word	0x20000628
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de18 	.word	0x0800de18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000062c 	.word	0x2000062c
 80001dc:	0800de18 	.word	0x0800de18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
		{59,1000,2000,100, 3, 2592*11, 7, 4232*13, "FRESH FISH"} ,//FRESH FISH
		{60,1000,2000,100, 3, 2592*12, 7, 4232*14, "CHILDREN'NORM"} //CHILDREN'S NORM
    };


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d102      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x24>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000938 	.word	0x20000938

08000598 <ADC_Select_Channel>:



void ADC_Select_Channel(uint32_t ch) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef conf = {
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	2301      	movs	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	2304      	movs	r3, #4
 80005b8:	613b      	str	r3, [r7, #16]
        .Channel = ch,
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_84CYCLES,
    };
    if (HAL_ADC_ConfigChannel(&hadc1, &conf) != HAL_OK) {
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <ADC_Select_Channel+0x40>)
 80005c2:	f001 fe7d 	bl	80022c0 <HAL_ADC_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <ADC_Select_Channel+0x38>
        Error_Handler();
 80005cc:	f001 f81e 	bl	800160c <Error_Handler>
    }
}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000644 	.word	0x20000644

080005dc <SPI_Flash_to_LCD>:
void SPI_Flash_to_LCD(uint16_t block, uint32_t offset, uint16_t w, uint16_t h, uint16_t x, uint16_t y)

{
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	b08b      	sub	sp, #44	@ 0x2c
 80005e2:	af02      	add	r7, sp, #8
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4603      	mov	r3, r0
 80005ec:	81fb      	strh	r3, [r7, #14]
 80005ee:	460b      	mov	r3, r1
 80005f0:	81bb      	strh	r3, [r7, #12]
 80005f2:	4613      	mov	r3, r2
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	466b      	mov	r3, sp
 80005f8:	461e      	mov	r6, r3
	uint32_t img_byte_amount = w*h*2;
 80005fa:	89bb      	ldrh	r3, [r7, #12]
 80005fc:	88fa      	ldrh	r2, [r7, #6]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
	uint16_t img_buffer[img_byte_amount/2];
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	0859      	lsrs	r1, r3, #1
 800060a:	460b      	mov	r3, r1
 800060c:	3b01      	subs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	2300      	movs	r3, #0
 8000612:	4688      	mov	r8, r1
 8000614:	4699      	mov	r9, r3
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	f04f 0300 	mov.w	r3, #0
 800061e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000622:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000626:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800062a:	2300      	movs	r3, #0
 800062c:	460c      	mov	r4, r1
 800062e:	461d      	mov	r5, r3
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	012b      	lsls	r3, r5, #4
 800063a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800063e:	0122      	lsls	r2, r4, #4
 8000640:	004b      	lsls	r3, r1, #1
 8000642:	3307      	adds	r3, #7
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	ebad 0d03 	sub.w	sp, sp, r3
 800064c:	ab02      	add	r3, sp, #8
 800064e:	3301      	adds	r3, #1
 8000650:	085b      	lsrs	r3, r3, #1
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	617b      	str	r3, [r7, #20]
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
 8000656:	89f9      	ldrh	r1, [r7, #14]
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	6978      	ldr	r0, [r7, #20]
 800065e:	f00c fed9 	bl	800d414 <W25qxx_ReadBlock>
	ST7735_DrawImage(x, y, w, h, img_buffer);
 8000662:	88fc      	ldrh	r4, [r7, #6]
 8000664:	89ba      	ldrh	r2, [r7, #12]
 8000666:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800066a:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4623      	mov	r3, r4
 8000674:	f00b fabd 	bl	800bbf2 <ST7735_DrawImage>
 8000678:	46b5      	mov	sp, r6
}
 800067a:	bf00      	nop
 800067c:	3724      	adds	r7, #36	@ 0x24
 800067e:	46bd      	mov	sp, r7
 8000680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000684 <touch_init>:
	    but_state_right = BUT_RESET;
}


void touch_init()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	MPR121_setregister(MHD_R,0x01);
 8000688:	2101      	movs	r1, #1
 800068a:	202b      	movs	r0, #43	@ 0x2b
 800068c:	f00c fc72 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(NHD_R,0x01);
 8000690:	2101      	movs	r1, #1
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f00c fc6e 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(NCL_R,0x00);
 8000698:	2100      	movs	r1, #0
 800069a:	202d      	movs	r0, #45	@ 0x2d
 800069c:	f00c fc6a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(FDL_R,0x00);
 80006a0:	2100      	movs	r1, #0
 80006a2:	202e      	movs	r0, #46	@ 0x2e
 80006a4:	f00c fc66 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(MHD_F,0x01);
 80006a8:	2101      	movs	r1, #1
 80006aa:	202f      	movs	r0, #47	@ 0x2f
 80006ac:	f00c fc62 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(NHD_F,0x01);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2030      	movs	r0, #48	@ 0x30
 80006b4:	f00c fc5e 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(NCL_F,0xFF);
 80006b8:	21ff      	movs	r1, #255	@ 0xff
 80006ba:	2031      	movs	r0, #49	@ 0x31
 80006bc:	f00c fc5a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(FDL_F,0x02);
 80006c0:	2102      	movs	r1, #2
 80006c2:	2032      	movs	r0, #50	@ 0x32
 80006c4:	f00c fc56 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE0_T,TOU_THRESH);
 80006c8:	2106      	movs	r1, #6
 80006ca:	2041      	movs	r0, #65	@ 0x41
 80006cc:	f00c fc52 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE0_R,TOU_THRESH);
 80006d0:	2106      	movs	r1, #6
 80006d2:	2042      	movs	r0, #66	@ 0x42
 80006d4:	f00c fc4e 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE1_T,TOU_THRESH);
 80006d8:	2106      	movs	r1, #6
 80006da:	2043      	movs	r0, #67	@ 0x43
 80006dc:	f00c fc4a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE1_R,TOU_THRESH);
 80006e0:	2106      	movs	r1, #6
 80006e2:	2044      	movs	r0, #68	@ 0x44
 80006e4:	f00c fc46 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE2_T,TOU_THRESH);
 80006e8:	2106      	movs	r1, #6
 80006ea:	2045      	movs	r0, #69	@ 0x45
 80006ec:	f00c fc42 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE2_R,TOU_THRESH);
 80006f0:	2106      	movs	r1, #6
 80006f2:	2046      	movs	r0, #70	@ 0x46
 80006f4:	f00c fc3e 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE3_T,TOU_THRESH);
 80006f8:	2106      	movs	r1, #6
 80006fa:	2047      	movs	r0, #71	@ 0x47
 80006fc:	f00c fc3a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE3_R,TOU_THRESH);
 8000700:	2106      	movs	r1, #6
 8000702:	2048      	movs	r0, #72	@ 0x48
 8000704:	f00c fc36 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE4_T,TOU_THRESH);
 8000708:	2106      	movs	r1, #6
 800070a:	2049      	movs	r0, #73	@ 0x49
 800070c:	f00c fc32 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE4_R,TOU_THRESH);
 8000710:	2106      	movs	r1, #6
 8000712:	204a      	movs	r0, #74	@ 0x4a
 8000714:	f00c fc2e 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE5_T,TOU_THRESH);
 8000718:	2106      	movs	r1, #6
 800071a:	204b      	movs	r0, #75	@ 0x4b
 800071c:	f00c fc2a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE5_R,TOU_THRESH);
 8000720:	2106      	movs	r1, #6
 8000722:	204c      	movs	r0, #76	@ 0x4c
 8000724:	f00c fc26 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE6_T,TOU_THRESH);
 8000728:	2106      	movs	r1, #6
 800072a:	204d      	movs	r0, #77	@ 0x4d
 800072c:	f00c fc22 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE6_R,TOU_THRESH);
 8000730:	2106      	movs	r1, #6
 8000732:	204e      	movs	r0, #78	@ 0x4e
 8000734:	f00c fc1e 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE7_T,TOU_THRESH);
 8000738:	2106      	movs	r1, #6
 800073a:	204f      	movs	r0, #79	@ 0x4f
 800073c:	f00c fc1a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE7_R,TOU_THRESH);
 8000740:	2106      	movs	r1, #6
 8000742:	2050      	movs	r0, #80	@ 0x50
 8000744:	f00c fc16 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE8_T,TOU_THRESH);
 8000748:	2106      	movs	r1, #6
 800074a:	2051      	movs	r0, #81	@ 0x51
 800074c:	f00c fc12 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE8_R,TOU_THRESH);
 8000750:	2106      	movs	r1, #6
 8000752:	2052      	movs	r0, #82	@ 0x52
 8000754:	f00c fc0e 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE9_T,TOU_THRESH);
 8000758:	2106      	movs	r1, #6
 800075a:	2053      	movs	r0, #83	@ 0x53
 800075c:	f00c fc0a 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE9_R,TOU_THRESH);
 8000760:	2106      	movs	r1, #6
 8000762:	2054      	movs	r0, #84	@ 0x54
 8000764:	f00c fc06 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE10_T,TOU_THRESH);
 8000768:	2106      	movs	r1, #6
 800076a:	2055      	movs	r0, #85	@ 0x55
 800076c:	f00c fc02 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE10_R,TOU_THRESH);
 8000770:	2106      	movs	r1, #6
 8000772:	2056      	movs	r0, #86	@ 0x56
 8000774:	f00c fbfe 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(ELE11_T,TOU_THRESH);
 8000778:	2106      	movs	r1, #6
 800077a:	2057      	movs	r0, #87	@ 0x57
 800077c:	f00c fbfa 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE11_R,TOU_THRESH);
 8000780:	2106      	movs	r1, #6
 8000782:	2058      	movs	r0, #88	@ 0x58
 8000784:	f00c fbf6 	bl	800cf74 <MPR121_setregister>

	MPR121_setregister(FIL_CFG,0x04);
 8000788:	2104      	movs	r1, #4
 800078a:	205d      	movs	r0, #93	@ 0x5d
 800078c:	f00c fbf2 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 8000790:	210c      	movs	r1, #12
 8000792:	205e      	movs	r0, #94	@ 0x5e
 8000794:	f00c fbee 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 8000798:	210c      	movs	r1, #12
 800079a:	205e      	movs	r0, #94	@ 0x5e
 800079c:	f00c fbea 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ATO_CFG0,0x0F);
 80007a0:	210f      	movs	r1, #15
 80007a2:	207b      	movs	r0, #123	@ 0x7b
 80007a4:	f00c fbe6 	bl	800cf74 <MPR121_setregister>
	MPR121_setregister(ATO_CFGU,0xC8);
 80007a8:	21c8      	movs	r1, #200	@ 0xc8
 80007aa:	207d      	movs	r0, #125	@ 0x7d
 80007ac:	f00c fbe2 	bl	800cf74 <MPR121_setregister>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b092      	sub	sp, #72	@ 0x48
 80007b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f001 fb27 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f9c1 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 fd49 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c6:	f000 fd1f 	bl	8001208 <MX_DMA_Init>
  MX_I2C1_Init();
 80007ca:	f000 fa79 	bl	8000cc0 <MX_I2C1_Init>
  MX_RTC_Init();
 80007ce:	f000 faa5 	bl	8000d1c <MX_RTC_Init>
  MX_SPI1_Init();
 80007d2:	f000 fb31 	bl	8000e38 <MX_SPI1_Init>
  MX_ADC1_Init();
 80007d6:	f000 fa21 	bl	8000c1c <MX_ADC1_Init>
  MX_TIM3_Init();
 80007da:	f000 fc79 	bl	80010d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80007de:	f000 fc01 	bl	8000fe4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007e2:	f000 fcc3 	bl	800116c <MX_TIM4_Init>
  MX_TIM1_Init();
 80007e6:	f000 fb5d 	bl	8000ea4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007ea:	f00b fa65 	bl	800bcb8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */




  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007f4:	489b      	ldr	r0, [pc, #620]	@ (8000a64 <main+0x2b0>)
 80007f6:	f002 fd01 	bl	80031fc <HAL_GPIO_WritePin>
  ST7735_Init();
 80007fa:	f00b f859 	bl	800b8b0 <ST7735_Init>
  ST7735_InvertColors(0);
 80007fe:	2000      	movs	r0, #0
 8000800:	f00b fa43 	bl	800bc8a <ST7735_InvertColors>
  ST7735_FillScreen(ST7735_BLACK);
 8000804:	2000      	movs	r0, #0
 8000806:	f00b f9e3 	bl	800bbd0 <ST7735_FillScreen>
  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000810:	4894      	ldr	r0, [pc, #592]	@ (8000a64 <main+0x2b0>)
 8000812:	f002 fcf3 	bl	80031fc <HAL_GPIO_WritePin>

  W25qxx_Init();
 8000816:	f00c fc95 	bl	800d144 <W25qxx_Init>
  MX_I2C1_Init();
 800081a:	f000 fa51 	bl	8000cc0 <MX_I2C1_Init>
  touch_init();
 800081e:	f7ff ff31 	bl	8000684 <touch_init>

  HAL_TIM_Base_Start_IT(&htim4);
 8000822:	4891      	ldr	r0, [pc, #580]	@ (8000a68 <main+0x2b4>)
 8000824:	f006 fb30 	bl	8006e88 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800082e:	488f      	ldr	r0, [pc, #572]	@ (8000a6c <main+0x2b8>)
 8000830:	f002 fce4 	bl	80031fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	488c      	ldr	r0, [pc, #560]	@ (8000a6c <main+0x2b8>)
 800083c:	f002 fcde 	bl	80031fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000846:	4889      	ldr	r0, [pc, #548]	@ (8000a6c <main+0x2b8>)
 8000848:	f002 fcd8 	bl	80031fc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 800084c:	4888      	ldr	r0, [pc, #544]	@ (8000a70 <main+0x2bc>)
 800084e:	f006 fb1b 	bl	8006e88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000852:	2100      	movs	r1, #0
 8000854:	4887      	ldr	r0, [pc, #540]	@ (8000a74 <main+0x2c0>)
 8000856:	f006 fc01 	bl	800705c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 50;
 800085a:	4b87      	ldr	r3, [pc, #540]	@ (8000a78 <main+0x2c4>)
 800085c:	2232      	movs	r2, #50	@ 0x32
 800085e:	635a      	str	r2, [r3, #52]	@ 0x34

  char char_buffer[10];

   uint16_t conduct0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	857b      	strh	r3, [r7, #42]	@ 0x2a
   uint16_t conduct1 = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	853b      	strh	r3, [r7, #40]	@ 0x28
   uint16_t conduct2 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	84fb      	strh	r3, [r7, #38]	@ 0x26
   uint16_t conduct_avg = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint16_t measuring_result = 800;
 8000870:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000874:	847b      	strh	r3, [r7, #34]	@ 0x22
	  uint8_t id_product_to_display = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	  display_all_measuring_process_and_led(measuring_result, id_product_to_display);
 800087c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fdd5 	bl	8001434 <display_all_measuring_process_and_led>


	  uint16_t adc_values[3];
	  	  uint32_t channels[] = {
 800088a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a7c <main+0x2c8>)
 800088c:	463b      	mov	r3, r7
 800088e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  			  ADC_CHANNEL_0,
	  			  ADC_CHANNEL_1,
	  			  ADC_CHANNEL_2,
	  	  };

	  	  ST7735_WriteString(5, 3,  "CH0:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 8000894:	4b7a      	ldr	r3, [pc, #488]	@ (8000a80 <main+0x2cc>)
 8000896:	f641 1225 	movw	r2, #6437	@ 0x1925
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a76      	ldr	r2, [pc, #472]	@ (8000a84 <main+0x2d0>)
 80008aa:	2103      	movs	r1, #3
 80008ac:	2005      	movs	r0, #5
 80008ae:	f00b f8d2 	bl	800ba56 <ST7735_WriteString>
	  	  ST7735_WriteString(5, 23, "CH1:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 80008b2:	4b73      	ldr	r3, [pc, #460]	@ (8000a80 <main+0x2cc>)
 80008b4:	f641 1225 	movw	r2, #6437	@ 0x1925
 80008b8:	9202      	str	r2, [sp, #8]
 80008ba:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80008be:	9201      	str	r2, [sp, #4]
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	9200      	str	r2, [sp, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a70      	ldr	r2, [pc, #448]	@ (8000a88 <main+0x2d4>)
 80008c8:	2117      	movs	r1, #23
 80008ca:	2005      	movs	r0, #5
 80008cc:	f00b f8c3 	bl	800ba56 <ST7735_WriteString>
	  	  ST7735_WriteString(5, 43, "CH2:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 80008d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a80 <main+0x2cc>)
 80008d2:	f641 1225 	movw	r2, #6437	@ 0x1925
 80008d6:	9202      	str	r2, [sp, #8]
 80008d8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80008dc:	9201      	str	r2, [sp, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	9200      	str	r2, [sp, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a69      	ldr	r2, [pc, #420]	@ (8000a8c <main+0x2d8>)
 80008e6:	212b      	movs	r1, #43	@ 0x2b
 80008e8:	2005      	movs	r0, #5
 80008ea:	f00b f8b4 	bl	800ba56 <ST7735_WriteString>
	  	  ST7735_WriteString(5, 63, "AVG:", Font_11x18, ST7735_MAGENTA, ST7735_BG_DEF);
 80008ee:	4b64      	ldr	r3, [pc, #400]	@ (8000a80 <main+0x2cc>)
 80008f0:	f641 1225 	movw	r2, #6437	@ 0x1925
 80008f4:	9202      	str	r2, [sp, #8]
 80008f6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80008fa:	9201      	str	r2, [sp, #4]
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	9200      	str	r2, [sp, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a63      	ldr	r2, [pc, #396]	@ (8000a90 <main+0x2dc>)
 8000904:	213f      	movs	r1, #63	@ 0x3f
 8000906:	2005      	movs	r0, #5
 8000908:	f00b f8a5 	bl	800ba56 <ST7735_WriteString>


	  	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000912:	4856      	ldr	r0, [pc, #344]	@ (8000a6c <main+0x2b8>)
 8000914:	f002 fc72 	bl	80031fc <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4853      	ldr	r0, [pc, #332]	@ (8000a6c <main+0x2b8>)
 8000920:	f002 fc6c 	bl	80031fc <HAL_GPIO_WritePin>

	  	  for(int i = 0; i < 3; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
 8000928:	e021      	b.n	800096e <main+0x1ba>
	  		  ADC_Select_Channel(channels[i]);
 800092a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	3338      	adds	r3, #56	@ 0x38
 8000930:	443b      	add	r3, r7
 8000932:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe2e 	bl	8000598 <ADC_Select_Channel>
	  		  HAL_ADC_Start(&hadc1);
 800093c:	4855      	ldr	r0, [pc, #340]	@ (8000a94 <main+0x2e0>)
 800093e:	f001 fb3f 	bl	8001fc0 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000942:	f04f 31ff 	mov.w	r1, #4294967295
 8000946:	4853      	ldr	r0, [pc, #332]	@ (8000a94 <main+0x2e0>)
 8000948:	f001 fc21 	bl	800218e <HAL_ADC_PollForConversion>
	  		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 800094c:	4851      	ldr	r0, [pc, #324]	@ (8000a94 <main+0x2e0>)
 800094e:	f001 fca9 	bl	80022a4 <HAL_ADC_GetValue>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	3338      	adds	r3, #56	@ 0x38
 800095c:	443b      	add	r3, r7
 800095e:	f823 2c2c 	strh.w	r2, [r3, #-44]
	  		  HAL_ADC_Stop(&hadc1);
 8000962:	484c      	ldr	r0, [pc, #304]	@ (8000a94 <main+0x2e0>)
 8000964:	f001 fbe0 	bl	8002128 <HAL_ADC_Stop>
	  	  for(int i = 0; i < 3; i++) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096a:	3301      	adds	r3, #1
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
 800096e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000970:	2b02      	cmp	r3, #2
 8000972:	ddda      	ble.n	800092a <main+0x176>
	  	  }

	  	  conduct0 = adc_values[1];
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	857b      	strh	r3, [r7, #42]	@ 0x2a
	  	  sprintf(char_buffer, "%04d", conduct0);
 8000978:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4946      	ldr	r1, [pc, #280]	@ (8000a98 <main+0x2e4>)
 8000980:	4618      	mov	r0, r3
 8000982:	f00c fda9 	bl	800d4d8 <siprintf>
	  	  ST7735_WriteString(55, 3, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000986:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <main+0x2cc>)
 8000988:	f107 0114 	add.w	r1, r7, #20
 800098c:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000990:	9202      	str	r2, [sp, #8]
 8000992:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000996:	9201      	str	r2, [sp, #4]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	9200      	str	r2, [sp, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	460a      	mov	r2, r1
 80009a0:	2103      	movs	r1, #3
 80009a2:	2037      	movs	r0, #55	@ 0x37
 80009a4:	f00b f857 	bl	800ba56 <ST7735_WriteString>


	  	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ae:	482f      	ldr	r0, [pc, #188]	@ (8000a6c <main+0x2b8>)
 80009b0:	f002 fc24 	bl	80031fc <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ba:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <main+0x2b8>)
 80009bc:	f002 fc1e 	bl	80031fc <HAL_GPIO_WritePin>

	  	  for(int i = 0; i < 3; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80009c4:	e021      	b.n	8000a0a <main+0x256>
	  	  		  ADC_Select_Channel(channels[i]);
 80009c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	3338      	adds	r3, #56	@ 0x38
 80009cc:	443b      	add	r3, r7
 80009ce:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fde0 	bl	8000598 <ADC_Select_Channel>
	  	  		  HAL_ADC_Start(&hadc1);
 80009d8:	482e      	ldr	r0, [pc, #184]	@ (8000a94 <main+0x2e0>)
 80009da:	f001 faf1 	bl	8001fc0 <HAL_ADC_Start>
	  	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009de:	f04f 31ff 	mov.w	r1, #4294967295
 80009e2:	482c      	ldr	r0, [pc, #176]	@ (8000a94 <main+0x2e0>)
 80009e4:	f001 fbd3 	bl	800218e <HAL_ADC_PollForConversion>
	  	  		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 80009e8:	482a      	ldr	r0, [pc, #168]	@ (8000a94 <main+0x2e0>)
 80009ea:	f001 fc5b 	bl	80022a4 <HAL_ADC_GetValue>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3338      	adds	r3, #56	@ 0x38
 80009f8:	443b      	add	r3, r7
 80009fa:	f823 2c2c 	strh.w	r2, [r3, #-44]
	  	  		  HAL_ADC_Stop(&hadc1);
 80009fe:	4825      	ldr	r0, [pc, #148]	@ (8000a94 <main+0x2e0>)
 8000a00:	f001 fb92 	bl	8002128 <HAL_ADC_Stop>
	  	  for(int i = 0; i < 3; i++) {
 8000a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a06:	3301      	adds	r3, #1
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	ddda      	ble.n	80009c6 <main+0x212>
	  	  }
	  	  conduct1 = adc_values[1];
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	853b      	strh	r3, [r7, #40]	@ 0x28
	  	  sprintf(char_buffer, "%04d", conduct1);
 8000a14:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	491f      	ldr	r1, [pc, #124]	@ (8000a98 <main+0x2e4>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00c fd5b 	bl	800d4d8 <siprintf>
	  	  ST7735_WriteString(55, 23, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <main+0x2cc>)
 8000a24:	f107 0114 	add.w	r1, r7, #20
 8000a28:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000a2c:	9202      	str	r2, [sp, #8]
 8000a2e:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	2117      	movs	r1, #23
 8000a3e:	2037      	movs	r0, #55	@ 0x37
 8000a40:	f00b f809 	bl	800ba56 <ST7735_WriteString>


	  	  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4a:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <main+0x2b8>)
 8000a4c:	f002 fbd6 	bl	80031fc <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <main+0x2b8>)
 8000a58:	f002 fbd0 	bl	80031fc <HAL_GPIO_WritePin>

	  	  for(int i = 0; i < 3; i++) {
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a60:	e03e      	b.n	8000ae0 <main+0x32c>
 8000a62:	bf00      	nop
 8000a64:	40020800 	.word	0x40020800
 8000a68:	200008f0 	.word	0x200008f0
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	20000860 	.word	0x20000860
 8000a74:	20000818 	.word	0x20000818
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	0800e11c 	.word	0x0800e11c
 8000a80:	20000564 	.word	0x20000564
 8000a84:	0800e0f4 	.word	0x0800e0f4
 8000a88:	0800e0fc 	.word	0x0800e0fc
 8000a8c:	0800e104 	.word	0x0800e104
 8000a90:	0800e10c 	.word	0x0800e10c
 8000a94:	20000644 	.word	0x20000644
 8000a98:	0800e114 	.word	0x0800e114
	  	  		  ADC_Select_Channel(channels[i]);
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3338      	adds	r3, #56	@ 0x38
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd75 	bl	8000598 <ADC_Select_Channel>
	  	  		  HAL_ADC_Start(&hadc1);
 8000aae:	4821      	ldr	r0, [pc, #132]	@ (8000b34 <main+0x380>)
 8000ab0:	f001 fa86 	bl	8001fc0 <HAL_ADC_Start>
	  	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <main+0x380>)
 8000aba:	f001 fb68 	bl	800218e <HAL_ADC_PollForConversion>
	  	  		  adc_values[i] = HAL_ADC_GetValue(&hadc1);
 8000abe:	481d      	ldr	r0, [pc, #116]	@ (8000b34 <main+0x380>)
 8000ac0:	f001 fbf0 	bl	80022a4 <HAL_ADC_GetValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	3338      	adds	r3, #56	@ 0x38
 8000ace:	443b      	add	r3, r7
 8000ad0:	f823 2c2c 	strh.w	r2, [r3, #-44]
	  	  		  HAL_ADC_Stop(&hadc1);
 8000ad4:	4817      	ldr	r0, [pc, #92]	@ (8000b34 <main+0x380>)
 8000ad6:	f001 fb27 	bl	8002128 <HAL_ADC_Stop>
	  	  for(int i = 0; i < 3; i++) {
 8000ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000adc:	3301      	adds	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	ddda      	ble.n	8000a9c <main+0x2e8>
	  	  }
	  	  conduct2 = adc_values[1];
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  	  sprintf(char_buffer, "%04d", conduct2);
 8000aea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4911      	ldr	r1, [pc, #68]	@ (8000b38 <main+0x384>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00c fcf0 	bl	800d4d8 <siprintf>
	  	  ST7735_WriteString(55, 43, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <main+0x388>)
 8000afa:	f107 0114 	add.w	r1, r7, #20
 8000afe:	f641 1225 	movw	r2, #6437	@ 0x1925
 8000b02:	9202      	str	r2, [sp, #8]
 8000b04:	f249 426e 	movw	r2, #37998	@ 0x946e
 8000b08:	9201      	str	r2, [sp, #4]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	460a      	mov	r2, r1
 8000b12:	212b      	movs	r1, #43	@ 0x2b
 8000b14:	2037      	movs	r0, #55	@ 0x37
 8000b16:	f00a ff9e 	bl	800ba56 <ST7735_WriteString>

	  	  conduct_avg = (conduct0+conduct1+conduct2)/3;
 8000b1a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000b1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b1e:	441a      	add	r2, r3
 8000b20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b22:	4413      	add	r3, r2
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <main+0x38c>)
 8000b26:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2a:	17db      	asrs	r3, r3, #31
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  {
 8000b30:	e69e      	b.n	8000870 <main+0xbc>
 8000b32:	bf00      	nop
 8000b34:	20000644 	.word	0x20000644
 8000b38:	0800e114 	.word	0x0800e114
 8000b3c:	20000564 	.word	0x20000564
 8000b40:	55555556 	.word	0x55555556

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	@ 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	@ 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00c fce0 	bl	800d518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a28      	ldr	r2, [pc, #160]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b90:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc0:	23a8      	movs	r3, #168	@ 0xa8
 8000bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fa1d 	bl	8005010 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bdc:	f000 fd16 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fc7f 	bl	8005500 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c08:	f000 fd00 	bl	800160c <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3750      	adds	r7, #80	@ 0x50
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <MX_ADC1_Init+0x9c>)
 8000c32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <MX_ADC1_Init+0xa0>)
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c7e:	f001 f95b 	bl	8001f38 <HAL_ADC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c88:	f000 fcc0 	bl	800160c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000c94:	2305      	movs	r3, #5
 8000c96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_ADC1_Init+0x98>)
 8000c9e:	f001 fb0f 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ca8:	f000 fcb0 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000644 	.word	0x20000644
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	0f000001 	.word	0x0f000001

08000cc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <MX_I2C1_Init+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ccc:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_I2C1_Init+0x58>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ce2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cfe:	f002 faaf 	bl	8003260 <HAL_I2C_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d08:	f000 fc80 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000068c 	.word	0x2000068c
 8000d14:	40005400 	.word	0x40005400
 8000d18:	000186a0 	.word	0x000186a0

08000d1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2228      	movs	r2, #40	@ 0x28
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00c fbeb 	bl	800d518 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d42:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d44:	4a3b      	ldr	r2, [pc, #236]	@ (8000e34 <MX_RTC_Init+0x118>)
 8000d46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d48:	4b39      	ldr	r3, [pc, #228]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d4e:	4b38      	ldr	r3, [pc, #224]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d50:	227f      	movs	r2, #127	@ 0x7f
 8000d52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d54:	4b36      	ldr	r3, [pc, #216]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d56:	22ff      	movs	r2, #255	@ 0xff
 8000d58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d5a:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d66:	4b32      	ldr	r3, [pc, #200]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6c:	4830      	ldr	r0, [pc, #192]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000d6e:	f004 fec1 	bl	8005af4 <HAL_RTC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d78:	f000 fc48 	bl	800160c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4824      	ldr	r0, [pc, #144]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000da0:	f004 ff1e 	bl	8005be0 <HAL_RTC_SetTime>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000daa:	f000 fc2f 	bl	800160c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000dd0:	f004 ffa0 	bl	8005d14 <HAL_RTC_SetDate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000dda:	f000 fc17 	bl	800160c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000df6:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8000dfa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	2201      	movs	r2, #1
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <MX_RTC_Init+0x114>)
 8000e18:	f005 f800 	bl	8005e1c <HAL_RTC_SetAlarm_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000e22:	f000 fbf3 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	@ 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200006e0 	.word	0x200006e0
 8000e34:	40002800 	.word	0x40002800

08000e38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ea0 <MX_SPI1_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e84:	220a      	movs	r2, #10
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_SPI1_Init+0x64>)
 8000e8a:	f005 fa04 	bl	8006296 <HAL_SPI_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e94:	f000 fbba 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000700 	.word	0x20000700
 8000ea0:	40013000 	.word	0x40013000

08000ea4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b096      	sub	sp, #88	@ 0x58
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2220      	movs	r2, #32
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00c fb1b 	bl	800d518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8000fe0 <MX_TIM1_Init+0x13c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000eea:	f240 3233 	movw	r2, #819	@ 0x333
 8000eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ef6:	4b39      	ldr	r3, [pc, #228]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000ef8:	2263      	movs	r2, #99	@ 0x63
 8000efa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f02:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f0e:	4833      	ldr	r0, [pc, #204]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f10:	f005 ff6a 	bl	8006de8 <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f1a:	f000 fb77 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482c      	ldr	r0, [pc, #176]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f2c:	f006 fb74 	bl	8007618 <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f36:	f000 fb69 	bl	800160c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f3a:	4828      	ldr	r0, [pc, #160]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f3c:	f006 f835 	bl	8006faa <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f46:	f000 fb61 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f56:	4619      	mov	r1, r3
 8000f58:	4820      	ldr	r0, [pc, #128]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f5a:	f006 ff23 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f64:	f000 fb52 	bl	800160c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4813      	ldr	r0, [pc, #76]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000f8e:	f006 fa81 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f98:	f000 fb38 	bl	800160c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000fc0:	f006 ff5e 	bl	8007e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000fca:	f000 fb1f 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM1_Init+0x138>)
 8000fd0:	f000 fd36 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3758      	adds	r7, #88	@ 0x58
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000818 	.word	0x20000818
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	@ 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <MX_TIM2_Init+0xe8>)
 8001016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <MX_TIM2_Init+0xe8>)
 800101e:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <MX_TIM2_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <MX_TIM2_Init+0xe8>)
 800102c:	2263      	movs	r2, #99	@ 0x63
 800102e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_TIM2_Init+0xe8>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <MX_TIM2_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103c:	4823      	ldr	r0, [pc, #140]	@ (80010cc <MX_TIM2_Init+0xe8>)
 800103e:	f005 fed3 	bl	8006de8 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001048:	f000 fae0 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001056:	4619      	mov	r1, r3
 8001058:	481c      	ldr	r0, [pc, #112]	@ (80010cc <MX_TIM2_Init+0xe8>)
 800105a:	f006 fadd 	bl	8007618 <HAL_TIM_ConfigClockSource>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001064:	f000 fad2 	bl	800160c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001068:	4818      	ldr	r0, [pc, #96]	@ (80010cc <MX_TIM2_Init+0xe8>)
 800106a:	f005 ff9e 	bl	8006faa <HAL_TIM_PWM_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001074:	f000 faca 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4619      	mov	r1, r3
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_TIM2_Init+0xe8>)
 8001088:	f006 fe8c 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001092:	f000 fabb 	bl	800160c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001096:	2360      	movs	r3, #96	@ 0x60
 8001098:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2208      	movs	r2, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM2_Init+0xe8>)
 80010ae:	f006 f9f1 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80010b8:	f000 faa8 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM2_Init+0xe8>)
 80010be:	f000 fcbf 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	@ 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000860 	.word	0x20000860

080010d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_TIM3_Init+0x94>)
 80010ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <MX_TIM3_Init+0x98>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_TIM3_Init+0x94>)
 80010f4:	f240 628f 	movw	r2, #1679	@ 0x68f
 80010f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_TIM3_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_TIM3_Init+0x94>)
 8001102:	2263      	movs	r2, #99	@ 0x63
 8001104:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_TIM3_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_TIM3_Init+0x94>)
 800110e:	2280      	movs	r2, #128	@ 0x80
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001112:	4814      	ldr	r0, [pc, #80]	@ (8001164 <MX_TIM3_Init+0x94>)
 8001114:	f005 fe68 	bl	8006de8 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 fa75 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <MX_TIM3_Init+0x94>)
 8001130:	f006 fa72 	bl	8007618 <HAL_TIM_ConfigClockSource>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fa67 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_TIM3_Init+0x94>)
 800114c:	f006 fe2a 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001156:	f000 fa59 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200008a8 	.word	0x200008a8
 8001168:	40000400 	.word	0x40000400

0800116c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_TIM4_Init+0x94>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <MX_TIM4_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM4_Init+0x94>)
 8001190:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8001194:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_TIM4_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25-1;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_TIM4_Init+0x94>)
 800119e:	2218      	movs	r2, #24
 80011a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_TIM4_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM4_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <MX_TIM4_Init+0x94>)
 80011b0:	f005 fe1a 	bl	8006de8 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011ba:	f000 fa27 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM4_Init+0x94>)
 80011cc:	f006 fa24 	bl	8007618 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 fa19 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_TIM4_Init+0x94>)
 80011e8:	f006 fddc 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011f2:	f000 fa0b 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200008f0 	.word	0x200008f0
 8001204:	40000800 	.word	0x40000800

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <MX_DMA_Init+0x4c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2038      	movs	r0, #56	@ 0x38
 8001230:	f001 fb3f 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001234:	2038      	movs	r0, #56	@ 0x38
 8001236:	f001 fb58 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	203b      	movs	r0, #59	@ 0x3b
 8001240:	f001 fb37 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001244:	203b      	movs	r0, #59	@ 0x3b
 8001246:	f001 fb50 	bl	80028ea <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b6b      	ldr	r3, [pc, #428]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a6a      	ldr	r2, [pc, #424]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b68      	ldr	r3, [pc, #416]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b64      	ldr	r3, [pc, #400]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a63      	ldr	r2, [pc, #396]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b61      	ldr	r3, [pc, #388]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b56      	ldr	r3, [pc, #344]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a55      	ldr	r2, [pc, #340]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001420 <MX_GPIO_Init+0x1c8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8001300:	4848      	ldr	r0, [pc, #288]	@ (8001424 <MX_GPIO_Init+0x1cc>)
 8001302:	f001 ff7b 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 8001306:	2201      	movs	r2, #1
 8001308:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 800130c:	4845      	ldr	r0, [pc, #276]	@ (8001424 <MX_GPIO_Init+0x1cc>)
 800130e:	f001 ff75 	bl	80031fc <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001318:	4843      	ldr	r0, [pc, #268]	@ (8001428 <MX_GPIO_Init+0x1d0>)
 800131a:	f001 ff6f 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8001324:	4841      	ldr	r0, [pc, #260]	@ (800142c <MX_GPIO_Init+0x1d4>)
 8001326:	f001 ff69 	bl	80031fc <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_Pin|OE_Pin|DFU_FORCE_Pin|S0_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4152 	mov.w	r1, #53760	@ 0xd200
 8001330:	483e      	ldr	r0, [pc, #248]	@ (800142c <MX_GPIO_Init+0x1d4>)
 8001332:	f001 ff63 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 8001336:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 800133a:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4835      	ldr	r0, [pc, #212]	@ (8001424 <MX_GPIO_Init+0x1cc>)
 8001350:	f001 fdd0 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 8001354:	230c      	movs	r3, #12
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	482f      	ldr	r0, [pc, #188]	@ (8001424 <MX_GPIO_Init+0x1cc>)
 8001368:	f001 fdc4 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 800136c:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4828      	ldr	r0, [pc, #160]	@ (8001428 <MX_GPIO_Init+0x1d0>)
 8001386:	f001 fdb5 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin OE_Pin
                           DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin LED_BLUE_1_Pin
                           LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin|OE_Pin
 800138a:	f24d 333e 	movw	r3, #54078	@ 0xd33e
 800138e:	617b      	str	r3, [r7, #20]
                          |DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin|LED_BLUE_1_Pin
                          |LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4822      	ldr	r0, [pc, #136]	@ (800142c <MX_GPIO_Init+0x1d4>)
 80013a4:	f001 fda6 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 80013a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	481b      	ldr	r0, [pc, #108]	@ (800142c <MX_GPIO_Init+0x1d4>)
 80013be:	f001 fd99 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 80013c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_GPIO_Init+0x1d0>)
 80013da:	f001 fd8b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 80013de:	2304      	movs	r3, #4
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <MX_GPIO_Init+0x1d8>)
 80013f4:	f001 fd7e 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2008      	movs	r0, #8
 80013fe:	f001 fa58 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001402:	2008      	movs	r0, #8
 8001404:	f001 fa71 	bl	80028ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2028      	movs	r0, #40	@ 0x28
 800140e:	f001 fa50 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001412:	2028      	movs	r0, #40	@ 0x28
 8001414:	f001 fa69 	bl	80028ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	@ 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020c00 	.word	0x40020c00

08001434 <display_all_measuring_process_and_led>:

/* USER CODE BEGIN 4 */
void display_all_measuring_process_and_led(uint16_t measured_value, uint8_t id)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af02      	add	r7, sp, #8
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4613      	mov	r3, r2
 8001442:	717b      	strb	r3, [r7, #5]

	  if(gl_led_pwm_state==LED_PWM_CCR_STABLE)
 8001444:	4b6b      	ldr	r3, [pc, #428]	@ (80015f4 <display_all_measuring_process_and_led+0x1c0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13f      	bne.n	80014cc <display_all_measuring_process_and_led+0x98>
	  {
		  SPI_Flash_to_LCD(LOADING_1,28,14);
 800144c:	230e      	movs	r3, #14
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	231c      	movs	r3, #28
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2334      	movs	r3, #52	@ 0x34
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	2008      	movs	r0, #8
 800145c:	f7ff f8be 	bl	80005dc <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,80,14);
 8001460:	230e      	movs	r3, #14
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2350      	movs	r3, #80	@ 0x50
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2334      	movs	r3, #52	@ 0x34
 800146a:	2234      	movs	r2, #52	@ 0x34
 800146c:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8001470:	2008      	movs	r0, #8
 8001472:	f7ff f8b3 	bl	80005dc <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,28,14);
 8001476:	230e      	movs	r3, #14
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	231c      	movs	r3, #28
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2334      	movs	r3, #52	@ 0x34
 8001480:	2234      	movs	r2, #52	@ 0x34
 8001482:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 8001486:	2008      	movs	r0, #8
 8001488:	f7ff f8a8 	bl	80005dc <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,28,14);
 800148c:	230e      	movs	r3, #14
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	231c      	movs	r3, #28
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2334      	movs	r3, #52	@ 0x34
 8001496:	2234      	movs	r2, #52	@ 0x34
 8001498:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800149c:	2008      	movs	r0, #8
 800149e:	f7ff f89d 	bl	80005dc <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_1,80,14);
 80014a2:	230e      	movs	r3, #14
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2350      	movs	r3, #80	@ 0x50
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2334      	movs	r3, #52	@ 0x34
 80014ac:	2234      	movs	r2, #52	@ 0x34
 80014ae:	2100      	movs	r1, #0
 80014b0:	2008      	movs	r0, #8
 80014b2:	f7ff f893 	bl	80005dc <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,80,14);
 80014b6:	230e      	movs	r3, #14
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	2350      	movs	r3, #80	@ 0x50
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2334      	movs	r3, #52	@ 0x34
 80014c0:	2234      	movs	r2, #52	@ 0x34
 80014c2:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 80014c6:	2008      	movs	r0, #8
 80014c8:	f7ff f888 	bl	80005dc <SPI_Flash_to_LCD>
	  }
	  if(gl_led_pwm_state ==  LED_PWM_CCR_STABLE)
 80014cc:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <display_all_measuring_process_and_led+0x1c0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <display_all_measuring_process_and_led+0xa6>
	  {
		  led_accumulation();
 80014d4:	f00b f9b6 	bl	800c844 <led_accumulation>
		  HAL_TIM_Base_Stop_IT(&htim2);
		  led_off();
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
		  TIM2->CCR3 = 0;
	  }
}
 80014d8:	e088      	b.n	80015ec <display_all_measuring_process_and_led+0x1b8>
	  else if(gl_led_pwm_state ==  LED_PWM_CCR_CHANGEBALE && led_1hz_counter && gl_led_color_result_blink_counter <= 3 && !gl_loading_bar_stop_flag )
 80014da:	4b46      	ldr	r3, [pc, #280]	@ (80015f4 <display_all_measuring_process_and_led+0x1c0>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d173      	bne.n	80015ca <display_all_measuring_process_and_led+0x196>
 80014e2:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <display_all_measuring_process_and_led+0x1c4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d06f      	beq.n	80015ca <display_all_measuring_process_and_led+0x196>
 80014ea:	4b44      	ldr	r3, [pc, #272]	@ (80015fc <display_all_measuring_process_and_led+0x1c8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d86b      	bhi.n	80015ca <display_all_measuring_process_and_led+0x196>
 80014f2:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <display_all_measuring_process_and_led+0x1cc>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d167      	bne.n	80015ca <display_all_measuring_process_and_led+0x196>
		  ST7735_FillScreen(ST7735_BLACK);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f00a fb68 	bl	800bbd0 <ST7735_FillScreen>
		  HAL_TIM_Base_Start_IT(&htim2);
 8001500:	4840      	ldr	r0, [pc, #256]	@ (8001604 <display_all_measuring_process_and_led+0x1d0>)
 8001502:	f005 fcc1 	bl	8006e88 <HAL_TIM_Base_Start_IT>
		  uint8_t load_bar_index = (conduct_acidity_loading_bar_calculation(product_array[id].conductivity, product_array[id].temperature_coeff, measured_value));
 8001506:	797a      	ldrb	r2, [r7, #5]
 8001508:	493f      	ldr	r1, [pc, #252]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3302      	adds	r3, #2
 8001516:	8818      	ldrh	r0, [r3, #0]
 8001518:	797a      	ldrb	r2, [r7, #5]
 800151a:	493b      	ldr	r1, [pc, #236]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3306      	adds	r3, #6
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	4619      	mov	r1, r3
 800152e:	f00b fbaf 	bl	800cc90 <conduct_acidity_loading_bar_calculation>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
		  uint8_t result_status = display_loading_status(load_bar_index, product_array[id].id);
 8001536:	797a      	ldrb	r2, [r7, #5]
 8001538:	4933      	ldr	r1, [pc, #204]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f00b fbf2 	bl	800cd34 <display_loading_status>
 8001550:	4603      	mov	r3, r0
 8001552:	73bb      	strb	r3, [r7, #14]
		  display_measuring_product(product_array[id].addr_block_S, product_array[id].addr_offset_S, HORIZ_AFTER_MEASURING);
 8001554:	797a      	ldrb	r2, [r7, #5]
 8001556:	492c      	ldr	r1, [pc, #176]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3307      	adds	r3, #7
 8001564:	7818      	ldrb	r0, [r3, #0]
 8001566:	797a      	ldrb	r2, [r7, #5]
 8001568:	4927      	ldr	r1, [pc, #156]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3308      	adds	r3, #8
 8001576:	8819      	ldrh	r1, [r3, #0]
 8001578:	2303      	movs	r3, #3
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	2307      	movs	r3, #7
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2324      	movs	r3, #36	@ 0x24
 8001582:	2224      	movs	r2, #36	@ 0x24
 8001584:	f00b fc34 	bl	800cdf0 <display_measuring_product>
		  display_measuring_text(product_array[id].name , product_array[id].conductivity, measured_value, result_status, ENGLISH);
 8001588:	797a      	ldrb	r2, [r7, #5]
 800158a:	491f      	ldr	r1, [pc, #124]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3310      	adds	r3, #16
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	797a      	ldrb	r2, [r7, #5]
 800159c:	491a      	ldr	r1, [pc, #104]	@ (8001608 <display_all_measuring_process_and_led+0x1d4>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3302      	adds	r3, #2
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	2401      	movs	r4, #1
 80015b2:	9400      	str	r4, [sp, #0]
 80015b4:	f00b fc46 	bl	800ce44 <display_measuring_text>
		  led_measuring_results_reflection(result_status);
 80015b8:	7bbb      	ldrb	r3, [r7, #14]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b f8be 	bl	800c73c <led_measuring_results_reflection>
		  gl_loading_bar_stop_flag = 1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <display_all_measuring_process_and_led+0x1cc>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
	  {
 80015c6:	bf00      	nop
}
 80015c8:	e010      	b.n	80015ec <display_all_measuring_process_and_led+0x1b8>
	  else if (gl_led_color_result_blink_counter > 3)
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <display_all_measuring_process_and_led+0x1c8>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d90c      	bls.n	80015ec <display_all_measuring_process_and_led+0x1b8>
		  HAL_TIM_Base_Stop_IT(&htim2);
 80015d2:	480c      	ldr	r0, [pc, #48]	@ (8001604 <display_all_measuring_process_and_led+0x1d0>)
 80015d4:	f005 fcba 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
		  led_off();
 80015d8:	f00b f858 	bl	800c68c <led_off>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80015dc:	2108      	movs	r1, #8
 80015de:	4809      	ldr	r0, [pc, #36]	@ (8001604 <display_all_measuring_process_and_led+0x1d0>)
 80015e0:	f005 fdec 	bl	80071bc <HAL_TIM_PWM_Stop>
		  TIM2->CCR3 = 0;
 80015e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}
 80015f4:	200005d6 	.word	0x200005d6
 80015f8:	20000942 	.word	0x20000942
 80015fc:	20000943 	.word	0x20000943
 8001600:	20001d59 	.word	0x20001d59
 8001604:	20000860 	.word	0x20000860
 8001608:	20000000 	.word	0x20000000

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <Error_Handler+0x8>

08001618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_ADC_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d127      	bne.n	80016da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_ADC_MspInit+0x80>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 80016c2:	230e      	movs	r3, #14
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_ADC_MspInit+0x84>)
 80016d6:	f001 fc0d 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <HAL_I2C_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172e:	23c0      	movs	r3, #192	@ 0xc0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173e:	2304      	movs	r3, #4
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <HAL_I2C_MspInit+0x8c>)
 800174a:	f001 fbd3 	bl	8002ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_I2C_MspInit+0x88>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_RTC_MspInit+0x60>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d119      	bne.n	80017d6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a2:	2302      	movs	r3, #2
 80017a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 f8b1 	bl	8005918 <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017bc:	f7ff ff26 	bl	800160c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_RTC_MspInit+0x64>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2029      	movs	r0, #41	@ 0x29
 80017cc:	f001 f871 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017d0:	2029      	movs	r0, #41	@ 0x29
 80017d2:	f001 f88a 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40002800 	.word	0x40002800
 80017e4:	42470e3c 	.word	0x42470e3c

080017e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a47      	ldr	r2, [pc, #284]	@ (8001924 <HAL_SPI_MspInit+0x13c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f040 8088 	bne.w	800191c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	4a44      	ldr	r2, [pc, #272]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 8001816:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800181a:	6453      	str	r3, [r2, #68]	@ 0x44
 800181c:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	4a3d      	ldr	r2, [pc, #244]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6313      	str	r3, [r2, #48]	@ 0x30
 8001838:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <HAL_SPI_MspInit+0x140>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001844:	23e0      	movs	r3, #224	@ 0xe0
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001854:	2305      	movs	r3, #5
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4833      	ldr	r0, [pc, #204]	@ (800192c <HAL_SPI_MspInit+0x144>)
 8001860:	f001 fb48 	bl	8002ef4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 8001866:	4a33      	ldr	r2, [pc, #204]	@ (8001934 <HAL_SPI_MspInit+0x14c>)
 8001868:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800186a:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 800186c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001870:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001878:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 8001880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001884:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80018a4:	4822      	ldr	r0, [pc, #136]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 80018a6:	f001 f83b 	bl	8002920 <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80018b0:	f7ff feac 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 80018b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <HAL_SPI_MspInit+0x148>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018c2:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_SPI_MspInit+0x154>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018c8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018d0:	2240      	movs	r2, #64	@ 0x40
 80018d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 8001902:	f001 f80d 	bl	8002920 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800190c:	f7ff fe7e 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 8001914:	649a      	str	r2, [r3, #72]	@ 0x48
 8001916:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <HAL_SPI_MspInit+0x150>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	@ 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	20000758 	.word	0x20000758
 8001934:	40026410 	.word	0x40026410
 8001938:	200007b8 	.word	0x200007b8
 800193c:	40026458 	.word	0x40026458

08001940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	@ (8001a30 <HAL_TIM_Base_MspInit+0xf0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d11e      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a36      	ldr	r2, [pc, #216]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b34      	ldr	r3, [pc, #208]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2019      	movs	r0, #25
 8001974:	f000 ff9d 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001978:	2019      	movs	r0, #25
 800197a:	f000 ffb6 	bl	80028ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	201a      	movs	r0, #26
 8001984:	f000 ff95 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001988:	201a      	movs	r0, #26
 800198a:	f000 ffae 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800198e:	e04a      	b.n	8001a26 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001998:	d116      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	201c      	movs	r0, #28
 80019bc:	f000 ff79 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c0:	201c      	movs	r0, #28
 80019c2:	f000 ff92 	bl	80028ea <HAL_NVIC_EnableIRQ>
}
 80019c6:	e02e      	b.n	8001a26 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_TIM_Base_MspInit+0xf8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10e      	bne.n	80019f0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	e01a      	b.n	8001a26 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_TIM_Base_MspInit+0xfc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_TIM_Base_MspInit+0xf4>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	201e      	movs	r0, #30
 8001a1c:	f000 ff49 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a20:	201e      	movs	r0, #30
 8001a22:	f000 ff62 	bl	80028ea <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <HAL_TIM_MspPostInit+0xb4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11f      	bne.n	8001aa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4818      	ldr	r0, [pc, #96]	@ (8001afc <HAL_TIM_MspPostInit+0xbc>)
 8001a9c:	f001 fa2a 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aa0:	e023      	b.n	8001aea <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aaa:	d11e      	bne.n	8001aea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_TIM_MspPostInit+0xb8>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ada:	2301      	movs	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <HAL_TIM_MspPostInit+0xc0>)
 8001ae6:	f001 fa05 	bl	8002ef4 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <NMI_Handler+0x4>

08001b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f000 f9a9 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 8001b66:	2004      	movs	r0, #4
 8001b68:	f001 fb62 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b76:	f005 fb85 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000818 	.word	0x20000818

08001b84 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b8a:	f005 fb7b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000818 	.word	0x20000818

08001b98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	gl_counter_1000hz_tim2++;
 8001b9c:	4b37      	ldr	r3, [pc, #220]	@ (8001c7c <TIM2_IRQHandler+0xe4>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <TIM2_IRQHandler+0xe4>)
 8001ba6:	801a      	strh	r2, [r3, #0]

	if(gl_counter_1000hz_tim2 % 500 == 0)
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <TIM2_IRQHandler+0xe4>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4a34      	ldr	r2, [pc, #208]	@ (8001c80 <TIM2_IRQHandler+0xe8>)
 8001bae:	fba2 1203 	umull	r1, r2, r2, r3
 8001bb2:	0952      	lsrs	r2, r2, #5
 8001bb4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001bb8:	fb01 f202 	mul.w	r2, r1, r2
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d108      	bne.n	8001bd6 <TIM2_IRQHandler+0x3e>
	{
		gl_int_5hz_tim2 = 1;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <TIM2_IRQHandler+0xec>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
		gl_int_5hz_tim2_for_pic ++;
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <TIM2_IRQHandler+0xf0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <TIM2_IRQHandler+0xf0>)
 8001bd4:	701a      	strb	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 50 == 0 && gl_led_pwm_state == LED_PWM_CCR_CHANGEBALE )
 8001bd6:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <TIM2_IRQHandler+0xe4>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	4a2c      	ldr	r2, [pc, #176]	@ (8001c8c <TIM2_IRQHandler+0xf4>)
 8001bdc:	fba2 1203 	umull	r1, r2, r2, r3
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	2132      	movs	r1, #50	@ 0x32
 8001be4:	fb01 f202 	mul.w	r2, r1, r2
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d13f      	bne.n	8001c70 <TIM2_IRQHandler+0xd8>
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <TIM2_IRQHandler+0xf8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d13b      	bne.n	8001c70 <TIM2_IRQHandler+0xd8>
	{
		ch3_counter += 3;
 8001bf8:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001c02:	801a      	strh	r2, [r3, #0]
		if(ch3_counter < 300)
 8001c04:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c0c:	d20b      	bcs.n	8001c26 <TIM2_IRQHandler+0x8e>
		{
			CH3_DC = ch3_counter;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c16:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = CH3_DC;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c24:	e024      	b.n	8001c70 <TIM2_IRQHandler+0xd8>
		}
		else if(ch3_counter >= 300)
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c2e:	d31f      	bcc.n	8001c70 <TIM2_IRQHandler+0xd8>
		{
			TIM2->CCR3 = CH3_DC;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
			CH3_DC -= 3;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b03      	subs	r3, #3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c4c:	801a      	strh	r2, [r3, #0]
			if(CH3_DC <=0)
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dc0b      	bgt.n	8001c70 <TIM2_IRQHandler+0xd8>
			{
				CH3_DC = 0;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <TIM2_IRQHandler+0x100>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
				ch3_counter = 0;
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <TIM2_IRQHandler+0xfc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
				gl_led_color_result_blink_counter++;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <TIM2_IRQHandler+0x104>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <TIM2_IRQHandler+0x104>)
 8001c6e:	701a      	strb	r2, [r3, #0]
		}


	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <TIM2_IRQHandler+0x108>)
 8001c72:	f005 fb07 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000093e 	.word	0x2000093e
 8001c80:	10624dd3 	.word	0x10624dd3
 8001c84:	20000940 	.word	0x20000940
 8001c88:	20000941 	.word	0x20000941
 8001c8c:	51eb851f 	.word	0x51eb851f
 8001c90:	200005d6 	.word	0x200005d6
 8001c94:	2000093c 	.word	0x2000093c
 8001c98:	2000093a 	.word	0x2000093a
 8001c9c:	20000943 	.word	0x20000943
 8001ca0:	20000860 	.word	0x20000860

08001ca4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM4_IRQHandler+0x10>)
 8001caa:	f005 faeb 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200008f0 	.word	0x200008f0

08001cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8001cbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001cc0:	f001 fab6 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	led_1hz_counter++;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <RTC_Alarm_IRQHandler+0x1c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <RTC_Alarm_IRQHandler+0x1c>)
 8001cd6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001cd8:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <RTC_Alarm_IRQHandler+0x20>)
 8001cda:	f004 f9e1 	bl	80060a0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000942 	.word	0x20000942
 8001ce8:	200006e0 	.word	0x200006e0

08001cec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <DMA2_Stream0_IRQHandler+0x10>)
 8001cf2:	f000 fec3 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000758 	.word	0x20000758

08001d00 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <DMA2_Stream3_IRQHandler+0x10>)
 8001d06:	f000 feb9 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200007b8 	.word	0x200007b8

08001d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <OTG_FS_IRQHandler+0x10>)
 8001d1a:	f002 f84c 	bl	8003db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000162c 	.word	0x2000162c

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f00b fbe6 	bl	800d528 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20010000 	.word	0x20010000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000944 	.word	0x20000944
 8001d90:	20001ed0 	.word	0x20001ed0

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff ffd7 	bl	8001d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f00b fba5 	bl	800d534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7fe fce3 	bl	80007b4 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000628 	.word	0x20000628
  ldr r2, =_sidata
 8001dfc:	08010a70 	.word	0x08010a70
  ldr r2, =_sbss
 8001e00:	20000628 	.word	0x20000628
  ldr r4, =_ebss
 8001e04:	20001ecc 	.word	0x20001ecc

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fd31 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fbea 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd49 	bl	8002906 <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 fd11 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200004c4 	.word	0x200004c4
 8001ea8:	200004cc 	.word	0x200004cc
 8001eac:	200004c8 	.word	0x200004c8

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200004cc 	.word	0x200004cc
 8001ed4:	20000948 	.word	0x20000948

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000948 	.word	0x20000948

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200004cc 	.word	0x200004cc

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fb86 	bl	8001668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 faba 	bl	8002504 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Start+0x1a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e097      	b.n	800210a <HAL_ADC_Start+0x14a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d018      	beq.n	8002022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002000:	4b45      	ldr	r3, [pc, #276]	@ (8002118 <HAL_ADC_Start+0x158>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a45      	ldr	r2, [pc, #276]	@ (800211c <HAL_ADC_Start+0x15c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9a      	lsrs	r2, r3, #18
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002014:	e002      	b.n	800201c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3b01      	subs	r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d15f      	bne.n	80020f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800206e:	d106      	bne.n	800207e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208c:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <HAL_ADC_Start+0x160>)
 800208e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d129      	bne.n	8002108 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e020      	b.n	8002108 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_ADC_Start+0x164>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d11b      	bne.n	8002108 <HAL_ADC_Start+0x148>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d114      	bne.n	8002108 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	e00b      	b.n	8002108 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200004c4 	.word	0x200004c4
 800211c:	431bde83 	.word	0x431bde83
 8002120:	40012300 	.word	0x40012300
 8002124:	40012000 	.word	0x40012000

08002128 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_Stop+0x16>
 800213a:	2302      	movs	r3, #2
 800213c:	e021      	b.n	8002182 <HAL_ADC_Stop+0x5a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021aa:	d113      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e063      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021d4:	f7ff fe80 	bl	8001ed8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021da:	e021      	b.n	8002220 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d01d      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_PollForConversion+0x6c>
 80021ea:	f7ff fe75 	bl	8001ed8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d212      	bcs.n	8002220 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00b      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03d      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d1d6      	bne.n	80021dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0212 	mvn.w	r2, #18
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11f      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d111      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e105      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x228>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b09      	cmp	r3, #9
 80022ea:	d925      	bls.n	8002338 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	3b1e      	subs	r3, #30
 8002302:	2207      	movs	r2, #7
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	4603      	mov	r3, r0
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4403      	add	r3, r0
 800232a:	3b1e      	subs	r3, #30
 800232c:	409a      	lsls	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	e022      	b.n	800237e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	2207      	movs	r2, #7
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	4603      	mov	r3, r0
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4403      	add	r3, r0
 8002374:	409a      	lsls	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b06      	cmp	r3, #6
 8002384:	d824      	bhi.n	80023d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b05      	subs	r3, #5
 8002398:	221f      	movs	r2, #31
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b05      	subs	r3, #5
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ce:	e04c      	b.n	800246a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d824      	bhi.n	8002422 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b23      	subs	r3, #35	@ 0x23
 80023ea:	221f      	movs	r2, #31
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43da      	mvns	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	400a      	ands	r2, r1
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b23      	subs	r3, #35	@ 0x23
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002420:	e023      	b.n	800246a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b41      	subs	r3, #65	@ 0x41
 8002434:	221f      	movs	r2, #31
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	3b41      	subs	r3, #65	@ 0x41
 800245e:	fa00 f203 	lsl.w	r2, r0, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246a:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <HAL_ADC_ConfigChannel+0x234>)
 800246c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <HAL_ADC_ConfigChannel+0x238>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d109      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1cc>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b12      	cmp	r3, #18
 800247e:	d105      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_ADC_ConfigChannel+0x238>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d123      	bne.n	80024de <HAL_ADC_ConfigChannel+0x21e>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d003      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x1e6>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b11      	cmp	r3, #17
 80024a4:	d11b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d111      	bne.n	80024de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_ADC_ConfigChannel+0x23c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_ADC_ConfigChannel+0x240>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9a      	lsrs	r2, r3, #18
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012300 	.word	0x40012300
 80024f8:	40012000 	.word	0x40012000
 80024fc:	200004c4 	.word	0x200004c4
 8002500:	431bde83 	.word	0x431bde83

08002504 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800250c:	4b79      	ldr	r3, [pc, #484]	@ (80026f4 <ADC_Init+0x1f0>)
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	021a      	lsls	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800255c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	4a58      	ldr	r2, [pc, #352]	@ (80026f8 <ADC_Init+0x1f4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6899      	ldr	r1, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e00f      	b.n	8002602 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002600:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0202 	bic.w	r2, r2, #2
 8002610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7e1b      	ldrb	r3, [r3, #24]
 800261c:	005a      	lsls	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800263e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800264e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	3b01      	subs	r3, #1
 800265c:	035a      	lsls	r2, r3, #13
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	e007      	b.n	8002678 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002676:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	3b01      	subs	r3, #1
 8002694:	051a      	lsls	r2, r3, #20
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ba:	025a      	lsls	r2, r3, #9
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6899      	ldr	r1, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	029a      	lsls	r2, r3, #10
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40012300 	.word	0x40012300
 80026f8:	0f000001 	.word	0x0f000001

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	@ (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	@ (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	@ (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff fad4 	bl	8001ed8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e099      	b.n	8002a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295c:	e00f      	b.n	800297e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295e:	f7ff fabb 	bl	8001ed8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	d908      	bls.n	800297e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e078      	b.n	8002a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e8      	bne.n	800295e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <HAL_DMA_Init+0x158>)
 8002998:	4013      	ands	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d117      	bne.n	8002a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f9e9 	bl	8002dfc <DMA_CheckFifoParam>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e016      	b.n	8002a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9a0 	bl	8002d90 <DMA_CalcBaseAndBitshift>
 8002a50:	4603      	mov	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	223f      	movs	r2, #63	@ 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	f010803f 	.word	0xf010803f

08002a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a88:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc4 <HAL_DMA_IRQHandler+0x248>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc8 <HAL_DMA_IRQHandler+0x24c>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0204 	bic.w	r2, r2, #4
 8002ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	2204      	movs	r2, #4
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	2204      	movs	r2, #4
 8002b42:	409a      	lsls	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	2210      	movs	r2, #16
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d043      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03c      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	2210      	movs	r2, #16
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e01f      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e016      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0208 	bic.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 808f 	beq.w	8002d1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8087 	beq.w	8002d1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	2220      	movs	r2, #32
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d136      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0216 	bic.w	r2, r2, #22
 8002c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x1da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0208 	bic.w	r2, r2, #8
 8002c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	223f      	movs	r2, #63	@ 0x3f
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d07e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
        }
        return;
 8002c92:	e079      	b.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e02c      	b.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
 8002cc2:	bf00      	nop
 8002cc4:	200004c4 	.word	0x200004c4
 8002cc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d023      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
 8002cdc:	e01e      	b.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10f      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0210 	bic.w	r2, r2, #16
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d032      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2205      	movs	r2, #5
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d307      	bcc.n	8002d64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f2      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x2cc>
 8002d62:	e000      	b.n	8002d66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
 8002d86:	e000      	b.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d88:	bf00      	nop
    }
  }
}
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3b10      	subs	r3, #16
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x64>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002daa:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x68>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d909      	bls.n	8002dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd0:	e007      	b.n	8002de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	aaaaaaab 	.word	0xaaaaaaab
 8002df8:	0800e198 	.word	0x0800e198

08002dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d856      	bhi.n	8002eca <DMA_CheckFifoParam+0xce>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <DMA_CheckFifoParam+0x28>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002ecb 	.word	0x08002ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d046      	beq.n	8002ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e043      	b.n	8002ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4e:	d140      	bne.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e03d      	b.n	8002ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	d121      	bne.n	8002ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d837      	bhi.n	8002ed6 <DMA_CheckFifoParam+0xda>
 8002e66:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e83 	.word	0x08002e83
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002e95 	.word	0x08002e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e030      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d025      	beq.n	8002eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e92:	e022      	b.n	8002eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ea2:	e01c      	b.n	8002ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d903      	bls.n	8002eb2 <DMA_CheckFifoParam+0xb6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb0:	e018      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e015      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e00b      	b.n	8002ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e00a      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e008      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e006      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e004      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e159      	b.n	80031c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 8148 	bne.w	80031be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d005      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d130      	bne.n	8002fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a2 	beq.w	80031be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_GPIO_Init+0x2e8>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a56      	ldr	r2, [pc, #344]	@ (80031dc <HAL_GPIO_Init+0x2e8>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <HAL_GPIO_Init+0x2e8>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_GPIO_Init+0x2ec>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a49      	ldr	r2, [pc, #292]	@ (80031e4 <HAL_GPIO_Init+0x2f0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d019      	beq.n	80030f6 <HAL_GPIO_Init+0x202>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a48      	ldr	r2, [pc, #288]	@ (80031e8 <HAL_GPIO_Init+0x2f4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x1fe>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a47      	ldr	r2, [pc, #284]	@ (80031ec <HAL_GPIO_Init+0x2f8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00d      	beq.n	80030ee <HAL_GPIO_Init+0x1fa>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a46      	ldr	r2, [pc, #280]	@ (80031f0 <HAL_GPIO_Init+0x2fc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x1f6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a45      	ldr	r2, [pc, #276]	@ (80031f4 <HAL_GPIO_Init+0x300>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_GPIO_Init+0x1f2>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e008      	b.n	80030f8 <HAL_GPIO_Init+0x204>
 80030e6:	2307      	movs	r3, #7
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x204>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e004      	b.n	80030f8 <HAL_GPIO_Init+0x204>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0x204>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x204>
 80030f6:	2300      	movs	r3, #0
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f002 0203 	and.w	r2, r2, #3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	4093      	lsls	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003108:	4935      	ldr	r1, [pc, #212]	@ (80031e0 <HAL_GPIO_Init+0x2ec>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b38      	ldr	r3, [pc, #224]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a2f      	ldr	r2, [pc, #188]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b2d      	ldr	r3, [pc, #180]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a24      	ldr	r2, [pc, #144]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316a:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318e:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b8:	4a0f      	ldr	r2, [pc, #60]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	f67f aea2 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3724      	adds	r7, #36	@ 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003246:	4a05      	ldr	r2, [pc, #20]	@ (800325c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f98e 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e12b      	b.n	80034ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe fa32 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	@ 0x24
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c4:	f002 fb14 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
 80032c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a81      	ldr	r2, [pc, #516]	@ (80034d4 <HAL_I2C_Init+0x274>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d807      	bhi.n	80032e4 <HAL_I2C_Init+0x84>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a80      	ldr	r2, [pc, #512]	@ (80034d8 <HAL_I2C_Init+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	bf94      	ite	ls
 80032dc:	2301      	movls	r3, #1
 80032de:	2300      	movhi	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e006      	b.n	80032f2 <HAL_I2C_Init+0x92>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a7d      	ldr	r2, [pc, #500]	@ (80034dc <HAL_I2C_Init+0x27c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bf94      	ite	ls
 80032ec:	2301      	movls	r3, #1
 80032ee:	2300      	movhi	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0e7      	b.n	80034ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a78      	ldr	r2, [pc, #480]	@ (80034e0 <HAL_I2C_Init+0x280>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a6a      	ldr	r2, [pc, #424]	@ (80034d4 <HAL_I2C_Init+0x274>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d802      	bhi.n	8003334 <HAL_I2C_Init+0xd4>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3301      	adds	r3, #1
 8003332:	e009      	b.n	8003348 <HAL_I2C_Init+0xe8>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a69      	ldr	r2, [pc, #420]	@ (80034e4 <HAL_I2C_Init+0x284>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	3301      	adds	r3, #1
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800335a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	495c      	ldr	r1, [pc, #368]	@ (80034d4 <HAL_I2C_Init+0x274>)
 8003364:	428b      	cmp	r3, r1
 8003366:	d819      	bhi.n	800339c <HAL_I2C_Init+0x13c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e59      	subs	r1, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fbb1 f3f3 	udiv	r3, r1, r3
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800337c:	400b      	ands	r3, r1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_I2C_Init+0x138>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e59      	subs	r1, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003390:	3301      	adds	r3, #1
 8003392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003396:	e051      	b.n	800343c <HAL_I2C_Init+0x1dc>
 8003398:	2304      	movs	r3, #4
 800339a:	e04f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <HAL_I2C_Init+0x168>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e012      	b.n	80033ee <HAL_I2C_Init+0x18e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Init+0x196>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e022      	b.n	800343c <HAL_I2C_Init+0x1dc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <HAL_I2C_Init+0x1bc>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e58      	subs	r0, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	440b      	add	r3, r1
 800340c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800341a:	e00f      	b.n	800343c <HAL_I2C_Init+0x1dc>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6809      	ldr	r1, [r1, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800346a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6911      	ldr	r1, [r2, #16]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	430b      	orrs	r3, r1
 800347e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	000186a0 	.word	0x000186a0
 80034d8:	001e847f 	.word	0x001e847f
 80034dc:	003d08ff 	.word	0x003d08ff
 80034e0:	431bde83 	.word	0x431bde83
 80034e4:	10624dd3 	.word	0x10624dd3

080034e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	460b      	mov	r3, r1
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003502:	f7fe fce9 	bl	8001ed8 <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	f040 80d9 	bne.w	80036c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2319      	movs	r3, #25
 800351c:	2201      	movs	r2, #1
 800351e:	496d      	ldr	r1, [pc, #436]	@ (80036d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f971 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	e0cc      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_I2C_Mem_Write+0x56>
 800353a:	2302      	movs	r3, #2
 800353c:	e0c5      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d007      	beq.n	8003564 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2221      	movs	r2, #33	@ 0x21
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	@ 0x40
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a4d      	ldr	r2, [pc, #308]	@ (80036d8 <HAL_I2C_Mem_Write+0x1f0>)
 80035a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035a6:	88f8      	ldrh	r0, [r7, #6]
 80035a8:	893a      	ldrh	r2, [r7, #8]
 80035aa:	8979      	ldrh	r1, [r7, #10]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4603      	mov	r3, r0
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f890 	bl	80036dc <I2C_RequestMemoryWrite>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d052      	beq.n	8003668 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e081      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f9f2 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d11b      	bne.n	8003668 <HAL_I2C_Mem_Write+0x180>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d017      	beq.n	8003668 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1aa      	bne.n	80035c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f9de 	bl	8003a36 <I2C_WaitOnBTFFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2b04      	cmp	r3, #4
 8003686:	d107      	bne.n	8003698 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e016      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	00100002 	.word	0x00100002
 80036d8:	ffff0000 	.word	0xffff0000

080036dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	817b      	strh	r3, [r7, #10]
 80036ee:	460b      	mov	r3, r1
 80036f0:	813b      	strh	r3, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2200      	movs	r2, #0
 800370e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f878 	bl	8003808 <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372c:	d103      	bne.n	8003736 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e05f      	b.n	80037fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	492d      	ldr	r1, [pc, #180]	@ (8003804 <I2C_RequestMemoryWrite+0x128>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8b0 	bl	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04c      	b.n	80037fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f91a 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e02b      	b.n	80037fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e021      	b.n	80037f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b4:	893b      	ldrh	r3, [r7, #8]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	6a39      	ldr	r1, [r7, #32]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f8f4 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d107      	bne.n	80037ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e005      	b.n	80037fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ee:	893b      	ldrh	r3, [r7, #8]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003818:	e025      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d021      	beq.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fb59 	bl	8001ed8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e023      	b.n	80038ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10d      	bne.n	800388c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	e00c      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0b6      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c4:	e051      	b.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d4:	d123      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e046      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d021      	beq.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fad7 	bl	8001ed8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e020      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf14      	ite	ne
 8003986:	2301      	movne	r3, #1
 8003988:	2300      	moveq	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e00b      	b.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d18d      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c0:	e02d      	b.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f878 	bl	8003ab8 <I2C_IsAcknowledgeFailed>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e02d      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d021      	beq.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe fa7d 	bl	8001ed8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d1ca      	bne.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a42:	e02d      	b.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f837 	bl	8003ab8 <I2C_IsAcknowledgeFailed>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e02d      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d021      	beq.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fa3c 	bl	8001ed8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e007      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d1ca      	bne.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ace:	d11b      	bne.n	8003b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b18:	b08f      	sub	sp, #60	@ 0x3c
 8003b1a:	af0a      	add	r7, sp, #40	@ 0x28
 8003b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e10f      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f008 fa98 	bl	800c078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fb05 	bl	8008176 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	687e      	ldr	r6, [r7, #4]
 8003b74:	466d      	mov	r5, sp
 8003b76:	f106 0410 	add.w	r4, r6, #16
 8003b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8a:	1d33      	adds	r3, r6, #4
 8003b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f004 f9dc 	bl	8007f4c <USB_CoreInit>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0d0      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 faf3 	bl	8008198 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e04a      	b.n	8003c4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	333d      	adds	r3, #61	@ 0x3d
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	333c      	adds	r3, #60	@ 0x3c
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	b298      	uxth	r0, r3
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	@ 0x44
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3340      	adds	r3, #64	@ 0x40
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3348      	adds	r3, #72	@ 0x48
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334c      	adds	r3, #76	@ 0x4c
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3354      	adds	r3, #84	@ 0x54
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3af      	bcc.n	8003bb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e044      	b.n	8003ce8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb6:	7bfa      	ldrb	r2, [r7, #15]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3b5      	bcc.n	8003c5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	687e      	ldr	r6, [r7, #4]
 8003cfa:	466d      	mov	r5, sp
 8003cfc:	f106 0410 	add.w	r4, r6, #16
 8003d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d10:	1d33      	adds	r3, r6, #4
 8003d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d14:	6838      	ldr	r0, [r7, #0]
 8003d16:	f004 fa8b 	bl	8008230 <USB_DevInit>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e00d      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 fbda 	bl	80094fa <USB_DevDisconnect>

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_Start+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e020      	b.n	8003dae <HAL_PCD_Start+0x5e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d005      	beq.n	8003d90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f004 f9dd 	bl	8008154 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f005 fb8a 	bl	80094b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003db6:	b590      	push	{r4, r7, lr}
 8003db8:	b08d      	sub	sp, #52	@ 0x34
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 fc48 	bl	8009662 <USB_GetMode>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 848a 	bne.w	80046ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 fbac 	bl	800953c <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8480 	beq.w	80046ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 fb99 	bl	800953c <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d107      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f002 0202 	and.w	r2, r2, #2
 8003e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f005 fb87 	bl	800953c <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d161      	bne.n	8003efc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0210 	bic.w	r2, r2, #16
 8003e46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	0c5b      	lsrs	r3, r3, #17
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d124      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d035      	beq.n	8003eec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6a38      	ldr	r0, [r7, #32]
 8003e94:	f005 f9be 	bl	8009214 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea4:	441a      	add	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb6:	441a      	add	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
 8003ebc:	e016      	b.n	8003eec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	0c5b      	lsrs	r3, r3, #17
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d110      	bne.n	8003eec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6a38      	ldr	r0, [r7, #32]
 8003ed6:	f005 f99d 	bl	8009214 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee6:	441a      	add	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0210 	orr.w	r2, r2, #16
 8003efa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 fb1b 	bl	800953c <USB_ReadInterrupts>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f10:	f040 80a7 	bne.w	8004062 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f005 fb20 	bl	8009562 <USB_ReadDevAllOutEpInterrupt>
 8003f22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f24:	e099      	b.n	800405a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808e 	beq.w	800404e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 fb44 	bl	80095ca <USB_ReadDevOutEPInterrupt>
 8003f42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fec2 	bl	8004cec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2308      	movs	r3, #8
 8003f82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 ff98 	bl	8004ebc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d030      	beq.n	8004014 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d109      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f008 f937 	bl	800c270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	2302      	movs	r3, #2
 8004012:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402a:	461a      	mov	r2, r3
 800402c:	2320      	movs	r3, #32
 800402e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004046:	461a      	mov	r2, r3
 8004048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800404c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	3301      	adds	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f af62 	bne.w	8003f26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f005 fa68 	bl	800953c <USB_ReadInterrupts>
 800406c:	4603      	mov	r3, r0
 800406e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004072:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004076:	f040 80db 	bne.w	8004230 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f005 fa89 	bl	8009596 <USB_ReadDevAllInEpInterrupt>
 8004084:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800408a:	e0cd      	b.n	8004228 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80c2 	beq.w	800421c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 faaf 	bl	8009606 <USB_ReadDevInEPInterrupt>
 80040a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d057      	beq.n	8004164 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d4:	4013      	ands	r3, r2
 80040d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e4:	461a      	mov	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d132      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334c      	adds	r3, #76	@ 0x4c
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	3348      	adds	r3, #72	@ 0x48
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4419      	add	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	334c      	adds	r3, #76	@ 0x4c
 8004128:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3354      	adds	r3, #84	@ 0x54
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004150:	461a      	mov	r2, r3
 8004152:	2101      	movs	r1, #1
 8004154:	f005 fab6 	bl	80096c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f008 f80b 	bl	800c17a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417a:	461a      	mov	r2, r3
 800417c:	2308      	movs	r3, #8
 800417e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2310      	movs	r3, #16
 800419a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b2:	461a      	mov	r2, r3
 80041b4:	2340      	movs	r3, #64	@ 0x40
 80041b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d023      	beq.n	800420a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041c4:	6a38      	ldr	r0, [r7, #32]
 80041c6:	f004 f997 	bl	80084f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3338      	adds	r3, #56	@ 0x38
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f008 f84e 	bl	800c294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004204:	461a      	mov	r2, r3
 8004206:	2302      	movs	r3, #2
 8004208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fcdb 	bl	8004bd2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	3301      	adds	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f af2e 	bne.w	800408c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f005 f981 	bl	800953c <USB_ReadInterrupts>
 800423a:	4603      	mov	r3, r0
 800423c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004244:	d122      	bne.n	800428c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fec2 	bl	8004ff8 <HAL_PCDEx_LPM_Callback>
 8004274:	e002      	b.n	800427c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f007 ffec 	bl	800c254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800428a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f005 f953 	bl	800953c <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a0:	d112      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f007 ffa8 	bl	800c208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f005 f935 	bl	800953c <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	f040 80b7 	bne.w	800444e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2110      	movs	r1, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f004 f8fc 	bl	80084f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004304:	e046      	b.n	8004394 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004318:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004334:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004338:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800434c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004368:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800436c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800438c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	3301      	adds	r3, #1
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800439a:	429a      	cmp	r2, r3
 800439c:	d3b3      	bcc.n	8004306 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ca:	f043 030b 	orr.w	r3, r3, #11
 80043ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e0:	f043 030b 	orr.w	r3, r3, #11
 80043e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043e6:	e015      	b.n	8004414 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043fa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80043fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800440e:	f043 030b 	orr.w	r3, r3, #11
 8004412:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004422:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004426:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004438:	461a      	mov	r2, r3
 800443a:	f005 f943 	bl	80096c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800444c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f005 f872 	bl	800953c <USB_ReadInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004462:	d124      	bne.n	80044ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 f908 	bl	800967e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 f8bd 	bl	80085f2 <USB_GetDevSpeed>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681c      	ldr	r4, [r3, #0]
 8004484:	f001 fa28 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 8004488:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	4620      	mov	r0, r4
 8004494:	f003 fdbc 	bl	8008010 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f007 fe96 	bl	800c1ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 f842 	bl	800953c <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10a      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f007 fe73 	bl	800c1ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 0208 	and.w	r2, r2, #8
 80044d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f005 f82d 	bl	800953c <USB_ReadInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e8:	2b80      	cmp	r3, #128	@ 0x80
 80044ea:	d122      	bne.n	8004532 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f8:	2301      	movs	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fc:	e014      	b.n	8004528 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fb27 	bl	8004b70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	3301      	adds	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	429a      	cmp	r2, r3
 8004530:	d3e5      	bcc.n	80044fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f005 f800 	bl	800953c <USB_ReadInterrupts>
 800453c:	4603      	mov	r3, r0
 800453e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004546:	d13b      	bne.n	80045c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
 800454c:	e02b      	b.n	80045a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3340      	adds	r3, #64	@ 0x40
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d115      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004576:	2b00      	cmp	r3, #0
 8004578:	da12      	bge.n	80045a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	333f      	adds	r3, #63	@ 0x3f
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fae8 	bl	8004b70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	3301      	adds	r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3ce      	bcc.n	800454e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 ffb9 	bl	800953c <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d4:	d155      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045d6:	2301      	movs	r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045da:	e045      	b.n	8004668 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d12e      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004604:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004606:	2b00      	cmp	r3, #0
 8004608:	da2b      	bge.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004616:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800461a:	429a      	cmp	r2, r3
 800461c:	d121      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800465a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465e:	6053      	str	r3, [r2, #4]
            break;
 8004660:	e007      	b.n	8004672 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d3b4      	bcc.n	80045dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f004 ff58 	bl	800953c <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d10a      	bne.n	80046ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f007 fe0d 	bl	800c2b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f004 ff42 	bl	800953c <USB_ReadInterrupts>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d115      	bne.n	80046ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f007 fdfd 	bl	800c2d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e000      	b.n	80046ee <HAL_PCD_IRQHandler+0x938>
      return;
 80046ec:	bf00      	nop
    }
  }
}
 80046ee:	3734      	adds	r7, #52	@ 0x34
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_PCD_SetAddress+0x1a>
 800470a:	2302      	movs	r3, #2
 800470c:	e013      	b.n	8004736 <HAL_PCD_SetAddress+0x42>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fea0 	bl	800946c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	461a      	mov	r2, r3
 800474c:	4603      	mov	r3, r0
 800474e:	70fb      	strb	r3, [r7, #3]
 8004750:	460b      	mov	r3, r1
 8004752:	803b      	strh	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800475c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da0f      	bge.n	8004784 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	3338      	adds	r3, #56	@ 0x38
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	705a      	strb	r2, [r3, #1]
 8004782:	e00f      	b.n	80047a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b0:	883a      	ldrh	r2, [r7, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	78ba      	ldrb	r2, [r7, #2]
 80047ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047ce:	78bb      	ldrb	r3, [r7, #2]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d102      	bne.n	80047da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_PCD_EP_Open+0xaa>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e00e      	b.n	8004806 <HAL_PCD_EP_Open+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 ff20 	bl	800863c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004804:	7afb      	ldrb	r3, [r7, #11]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800481a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da0f      	bge.n	8004842 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	@ 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	705a      	strb	r2, [r3, #1]
 8004840:	e00f      	b.n	8004862 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	3304      	adds	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_PCD_EP_Close+0x6e>
 8004878:	2302      	movs	r3, #2
 800487a:	e00e      	b.n	800489a <HAL_PCD_EP_Close+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	4618      	mov	r0, r3
 800488c:	f003 ff5e 	bl	800874c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	460b      	mov	r3, r1
 80048b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	f004 fa3d 	bl	8008d94 <USB_EP0StartXfer>
 800491a:	e008      	b.n	800492e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6979      	ldr	r1, [r7, #20]
 800492a:	f003 ffeb 	bl	8008904 <USB_EPStartXfer>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	460b      	mov	r3, r1
 8004976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004978:	7afb      	ldrb	r3, [r7, #11]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	3338      	adds	r3, #56	@ 0x38
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	3304      	adds	r3, #4
 800498e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2201      	movs	r2, #1
 80049a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049c2:	7afb      	ldrb	r3, [r7, #11]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	f004 f9db 	bl	8008d94 <USB_EP0StartXfer>
 80049de:	e008      	b.n	80049f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	f003 ff89 	bl	8008904 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 020f 	and.w	r2, r3, #15
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d901      	bls.n	8004a1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e050      	b.n	8004abc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da0f      	bge.n	8004a42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 020f 	and.w	r2, r3, #15
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3338      	adds	r3, #56	@ 0x38
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	705a      	strb	r2, [r3, #1]
 8004a40:	e00d      	b.n	8004a5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_PCD_EP_SetStall+0x82>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e01e      	b.n	8004abc <HAL_PCD_EP_SetStall+0xc0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f004 fc19 	bl	80092c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	b2d9      	uxtb	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004aac:	461a      	mov	r2, r3
 8004aae:	f004 fe09 	bl	80096c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d901      	bls.n	8004ae2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e042      	b.n	8004b68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da0f      	bge.n	8004b0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	3338      	adds	r3, #56	@ 0x38
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	3304      	adds	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	705a      	strb	r2, [r3, #1]
 8004b08:	e00f      	b.n	8004b2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_EP_ClrStall+0x86>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e00e      	b.n	8004b68 <HAL_PCD_EP_ClrStall+0xa4>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f004 fc21 	bl	80093a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	da0c      	bge.n	8004b9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	f003 020f 	and.w	r2, r3, #15
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	3338      	adds	r3, #56	@ 0x38
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4413      	add	r3, r2
 8004b98:	3304      	adds	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e00c      	b.n	8004bb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 fa40 	bl	8009044 <USB_EPStopXfer>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b08a      	sub	sp, #40	@ 0x28
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	3338      	adds	r3, #56	@ 0x38
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d901      	bls.n	8004c0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06c      	b.n	8004ce4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d902      	bls.n	8004c26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3303      	adds	r3, #3
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2e:	e02b      	b.n	8004c88 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d902      	bls.n	8004c4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3303      	adds	r3, #3
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6919      	ldr	r1, [r3, #16]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f004 fa94 	bl	8009198 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d809      	bhi.n	8004cb2 <PCD_WriteEmptyTxFifo+0xe0>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d203      	bcs.n	8004cb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1be      	bne.n	8004c30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d811      	bhi.n	8004ce2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	6939      	ldr	r1, [r7, #16]
 8004cda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cde:	4013      	ands	r3, r2
 8004ce0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	333c      	adds	r3, #60	@ 0x3c
 8004d04:	3304      	adds	r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d17b      	bne.n	8004e1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4a61      	ldr	r2, [pc, #388]	@ (8004eb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f240 80b9 	bls.w	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80b3 	beq.w	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d54:	6093      	str	r3, [r2, #8]
 8004d56:	e0a7      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2320      	movs	r3, #32
 8004d72:	6093      	str	r3, [r2, #8]
 8004d74:	e098      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8093 	bne.w	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d90f      	bls.n	8004daa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da6:	6093      	str	r3, [r2, #8]
 8004da8:	e07e      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	440b      	add	r3, r1
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d114      	bne.n	8004e0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004df4:	461a      	mov	r2, r3
 8004df6:	2101      	movs	r1, #1
 8004df8:	f004 fc64 	bl	80096c4 <USB_EP0_OutStart>
 8004dfc:	e006      	b.n	8004e0c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	441a      	add	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f007 f996 	bl	800c144 <HAL_PCD_DataOutStageCallback>
 8004e18:	e046      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d124      	bne.n	8004e6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3e:	6093      	str	r3, [r2, #8]
 8004e40:	e032      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f007 f96d 	bl	800c144 <HAL_PCD_DataOutStageCallback>
 8004e6a:	e01d      	b.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d114      	bne.n	8004e9c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d108      	bne.n	8004e9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004e94:	461a      	mov	r2, r3
 8004e96:	2100      	movs	r1, #0
 8004e98:	f004 fc14 	bl	80096c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f007 f94e 	bl	800c144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	4f54300a 	.word	0x4f54300a
 8004eb8:	4f54310a 	.word	0x4f54310a

08004ebc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	333c      	adds	r3, #60	@ 0x3c
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d90e      	bls.n	8004f10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f007 f905 	bl	800c120 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90c      	bls.n	8004f38 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d108      	bne.n	8004f38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004f30:	461a      	mov	r2, r3
 8004f32:	2101      	movs	r1, #1
 8004f34:	f004 fbc6 	bl	80096c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	4f54300a 	.word	0x4f54300a

08004f48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
 8004f54:	4613      	mov	r3, r2
 8004f56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f66:	883b      	ldrh	r3, [r7, #0]
 8004f68:	0419      	lsls	r1, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f74:	e028      	b.n	8004fc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e00d      	b.n	8004fa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	3340      	adds	r3, #64	@ 0x40
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	7bfa      	ldrb	r2, [r7, #15]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d3ec      	bcc.n	8004f8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb0:	883b      	ldrh	r3, [r7, #0]
 8004fb2:	0418      	lsls	r0, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4302      	orrs	r2, r0
 8004fc0:	3340      	adds	r3, #64	@ 0x40
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e267      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d075      	beq.n	800511a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502e:	4b88      	ldr	r3, [pc, #544]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00c      	beq.n	8005054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503a:	4b85      	ldr	r3, [pc, #532]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005042:	2b08      	cmp	r3, #8
 8005044:	d112      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b82      	ldr	r3, [pc, #520]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005052:	d10b      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	4b7e      	ldr	r3, [pc, #504]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05b      	beq.n	8005118 <HAL_RCC_OscConfig+0x108>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d157      	bne.n	8005118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e242      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005074:	d106      	bne.n	8005084 <HAL_RCC_OscConfig+0x74>
 8005076:	4b76      	ldr	r3, [pc, #472]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a75      	ldr	r2, [pc, #468]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e01d      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x98>
 800508e:	4b70      	ldr	r3, [pc, #448]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a6f      	ldr	r2, [pc, #444]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b6d      	ldr	r3, [pc, #436]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6c      	ldr	r2, [pc, #432]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 80050a8:	4b69      	ldr	r3, [pc, #420]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a68      	ldr	r2, [pc, #416]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b66      	ldr	r3, [pc, #408]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a65      	ldr	r2, [pc, #404]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc ff06 	bl	8001ed8 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fc ff02 	bl	8001ed8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	@ 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e207      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0xc0>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fc fef2 	bl	8001ed8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fc feee 	bl	8001ed8 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1f3      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	4b51      	ldr	r3, [pc, #324]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0xe8>
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005126:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513a:	2b08      	cmp	r3, #8
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b44      	ldr	r3, [pc, #272]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b41      	ldr	r3, [pc, #260]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1c7      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b3b      	ldr	r3, [pc, #236]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4937      	ldr	r1, [pc, #220]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b34      	ldr	r3, [pc, #208]	@ (8005254 <HAL_RCC_OscConfig+0x244>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc fea7 	bl	8001ed8 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518e:	f7fc fea3 	bl	8001ed8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1a8      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b28      	ldr	r3, [pc, #160]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4925      	ldr	r1, [pc, #148]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b24      	ldr	r3, [pc, #144]	@ (8005254 <HAL_RCC_OscConfig+0x244>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fc fe86 	bl	8001ed8 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fc fe82 	bl	8001ed8 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e187      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b15      	ldr	r3, [pc, #84]	@ (8005258 <HAL_RCC_OscConfig+0x248>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fc fe66 	bl	8001ed8 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fc fe62 	bl	8001ed8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e167      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_OscConfig+0x240>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x200>
 800522e:	e01b      	b.n	8005268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005230:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <HAL_RCC_OscConfig+0x248>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005236:	f7fc fe4f 	bl	8001ed8 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	e00e      	b.n	800525c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523e:	f7fc fe4b 	bl	8001ed8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d907      	bls.n	800525c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e150      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
 8005250:	40023800 	.word	0x40023800
 8005254:	42470000 	.word	0x42470000
 8005258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b88      	ldr	r3, [pc, #544]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ea      	bne.n	800523e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8097 	beq.w	80053a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b81      	ldr	r3, [pc, #516]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	4b7d      	ldr	r3, [pc, #500]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	4a7c      	ldr	r2, [pc, #496]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	@ 0x40
 8005296:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a6:	4b77      	ldr	r3, [pc, #476]	@ (8005484 <HAL_RCC_OscConfig+0x474>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d118      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b2:	4b74      	ldr	r3, [pc, #464]	@ (8005484 <HAL_RCC_OscConfig+0x474>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a73      	ldr	r2, [pc, #460]	@ (8005484 <HAL_RCC_OscConfig+0x474>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052be:	f7fc fe0b 	bl	8001ed8 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c6:	f7fc fe07 	bl	8001ed8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e10c      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005484 <HAL_RCC_OscConfig+0x474>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <HAL_RCC_OscConfig+0x2ea>
 80052ec:	4b64      	ldr	r3, [pc, #400]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	4a63      	ldr	r2, [pc, #396]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f8:	e01c      	b.n	8005334 <HAL_RCC_OscConfig+0x324>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x30c>
 8005302:	4b5f      	ldr	r3, [pc, #380]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	4a5e      	ldr	r2, [pc, #376]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	6713      	str	r3, [r2, #112]	@ 0x70
 800530e:	4b5c      	ldr	r3, [pc, #368]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	4a5b      	ldr	r2, [pc, #364]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6713      	str	r3, [r2, #112]	@ 0x70
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0x324>
 800531c:	4b58      	ldr	r3, [pc, #352]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005320:	4a57      	ldr	r2, [pc, #348]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	@ 0x70
 8005328:	4b55      	ldr	r3, [pc, #340]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532c:	4a54      	ldr	r2, [pc, #336]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0304 	bic.w	r3, r3, #4
 8005332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fc fdcc 	bl	8001ed8 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fc fdc8 	bl	8001ed8 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0cb      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ee      	beq.n	8005344 <HAL_RCC_OscConfig+0x334>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fc fdb6 	bl	8001ed8 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fc fdb2 	bl	8001ed8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0b5      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005386:	4b3e      	ldr	r3, [pc, #248]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ee      	bne.n	8005370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b39      	ldr	r3, [pc, #228]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	4a38      	ldr	r2, [pc, #224]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a1 	beq.w	80054f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ae:	4b34      	ldr	r3, [pc, #208]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d05c      	beq.n	8005474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d141      	bne.n	8005446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b31      	ldr	r3, [pc, #196]	@ (8005488 <HAL_RCC_OscConfig+0x478>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fc fd86 	bl	8001ed8 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fc fd82 	bl	8001ed8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e087      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	4b27      	ldr	r3, [pc, #156]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	3b01      	subs	r3, #1
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	491b      	ldr	r1, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005418:	4b1b      	ldr	r3, [pc, #108]	@ (8005488 <HAL_RCC_OscConfig+0x478>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541e:	f7fc fd5b 	bl	8001ed8 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005426:	f7fc fd57 	bl	8001ed8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e05c      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005438:	4b11      	ldr	r3, [pc, #68]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x416>
 8005444:	e054      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005446:	4b10      	ldr	r3, [pc, #64]	@ (8005488 <HAL_RCC_OscConfig+0x478>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fc fd44 	bl	8001ed8 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005454:	f7fc fd40 	bl	8001ed8 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e045      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <HAL_RCC_OscConfig+0x470>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x444>
 8005472:	e03d      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e038      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
 8005480:	40023800 	.word	0x40023800
 8005484:	40007000 	.word	0x40007000
 8005488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x4ec>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d028      	beq.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d121      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d11a      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d111      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	3b01      	subs	r3, #1
 80054d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d107      	bne.n	80054ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800

08005500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0cc      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005514:	4b68      	ldr	r3, [pc, #416]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d90c      	bls.n	800553c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005522:	4b65      	ldr	r3, [pc, #404]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b63      	ldr	r3, [pc, #396]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d001      	beq.n	800553c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0b8      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005554:	4b59      	ldr	r3, [pc, #356]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a58      	ldr	r2, [pc, #352]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800555e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800556c:	4b53      	ldr	r3, [pc, #332]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a52      	ldr	r2, [pc, #328]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005578:	4b50      	ldr	r3, [pc, #320]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	494d      	ldr	r1, [pc, #308]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d044      	beq.n	8005620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559e:	4b47      	ldr	r3, [pc, #284]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d119      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d003      	beq.n	80055be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055be:	4b3f      	ldr	r3, [pc, #252]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ce:	4b3b      	ldr	r3, [pc, #236]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e067      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055de:	4b37      	ldr	r3, [pc, #220]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f023 0203 	bic.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4934      	ldr	r1, [pc, #208]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fc fc72 	bl	8001ed8 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f6:	e00a      	b.n	800560e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f8:	f7fc fc6e 	bl	8001ed8 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e04f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560e:	4b2b      	ldr	r3, [pc, #172]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 020c 	and.w	r2, r3, #12
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	429a      	cmp	r2, r3
 800561e:	d1eb      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005620:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20c      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b22      	ldr	r3, [pc, #136]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e032      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005654:	4b19      	ldr	r3, [pc, #100]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4916      	ldr	r1, [pc, #88]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	490e      	ldr	r1, [pc, #56]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005686:	f000 f821 	bl	80056cc <HAL_RCC_GetSysClockFreq>
 800568a:	4602      	mov	r2, r0
 800568c:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	490a      	ldr	r1, [pc, #40]	@ (80056c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	5ccb      	ldrb	r3, [r1, r3]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056a2:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fc fbd2 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40023c00 	.word	0x40023c00
 80056bc:	40023800 	.word	0x40023800
 80056c0:	0800e180 	.word	0x0800e180
 80056c4:	200004c4 	.word	0x200004c4
 80056c8:	200004c8 	.word	0x200004c8

080056cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d0:	b094      	sub	sp, #80	@ 0x50
 80056d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d8:	2300      	movs	r3, #0
 80056da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056dc:	2300      	movs	r3, #0
 80056de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e4:	4b79      	ldr	r3, [pc, #484]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d00d      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x40>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	f200 80e1 	bhi.w	80058b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x34>
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fe:	e0db      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b73      	ldr	r3, [pc, #460]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005704:	e0db      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b73      	ldr	r3, [pc, #460]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005708:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570a:	e0d8      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800570c:	4b6f      	ldr	r3, [pc, #444]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005714:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005716:	4b6d      	ldr	r3, [pc, #436]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d063      	beq.n	80057ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b6a      	ldr	r3, [pc, #424]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	2200      	movs	r2, #0
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800572c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005734:	633b      	str	r3, [r7, #48]	@ 0x30
 8005736:	2300      	movs	r3, #0
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
 800573a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	0159      	lsls	r1, r3, #5
 800574c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005750:	0150      	lsls	r0, r2, #5
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4621      	mov	r1, r4
 8005758:	1a51      	subs	r1, r2, r1
 800575a:	6139      	str	r1, [r7, #16]
 800575c:	4629      	mov	r1, r5
 800575e:	eb63 0301 	sbc.w	r3, r3, r1
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005770:	4659      	mov	r1, fp
 8005772:	018b      	lsls	r3, r1, #6
 8005774:	4651      	mov	r1, sl
 8005776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800577a:	4651      	mov	r1, sl
 800577c:	018a      	lsls	r2, r1, #6
 800577e:	4651      	mov	r1, sl
 8005780:	ebb2 0801 	subs.w	r8, r2, r1
 8005784:	4659      	mov	r1, fp
 8005786:	eb63 0901 	sbc.w	r9, r3, r1
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800579a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800579e:	4690      	mov	r8, r2
 80057a0:	4699      	mov	r9, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	eb18 0303 	adds.w	r3, r8, r3
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	462b      	mov	r3, r5
 80057ac:	eb49 0303 	adc.w	r3, r9, r3
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057be:	4629      	mov	r1, r5
 80057c0:	024b      	lsls	r3, r1, #9
 80057c2:	4621      	mov	r1, r4
 80057c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057c8:	4621      	mov	r1, r4
 80057ca:	024a      	lsls	r2, r1, #9
 80057cc:	4610      	mov	r0, r2
 80057ce:	4619      	mov	r1, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	2200      	movs	r2, #0
 80057d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057dc:	f7fa fd50 	bl	8000280 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4613      	mov	r3, r2
 80057e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e8:	e058      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ea:	4b38      	ldr	r3, [pc, #224]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	099b      	lsrs	r3, r3, #6
 80057f0:	2200      	movs	r2, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	4611      	mov	r1, r2
 80057f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	2300      	movs	r3, #0
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005800:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	f04f 0000 	mov.w	r0, #0
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	0159      	lsls	r1, r3, #5
 8005812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005816:	0150      	lsls	r0, r2, #5
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4641      	mov	r1, r8
 800581e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005822:	4649      	mov	r1, r9
 8005824:	eb63 0b01 	sbc.w	fp, r3, r1
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005834:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005838:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800583c:	ebb2 040a 	subs.w	r4, r2, sl
 8005840:	eb63 050b 	sbc.w	r5, r3, fp
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	00eb      	lsls	r3, r5, #3
 800584e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005852:	00e2      	lsls	r2, r4, #3
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	4643      	mov	r3, r8
 800585a:	18e3      	adds	r3, r4, r3
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	464b      	mov	r3, r9
 8005860:	eb45 0303 	adc.w	r3, r5, r3
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005872:	4629      	mov	r1, r5
 8005874:	028b      	lsls	r3, r1, #10
 8005876:	4621      	mov	r1, r4
 8005878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800587c:	4621      	mov	r1, r4
 800587e:	028a      	lsls	r2, r1, #10
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005886:	2200      	movs	r2, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	61fa      	str	r2, [r7, #28]
 800588c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005890:	f7fa fcf6 	bl	8000280 <__aeabi_uldivmod>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4613      	mov	r3, r2
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x200>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	3301      	adds	r3, #1
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80058ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058b6:	e002      	b.n	80058be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3750      	adds	r7, #80	@ 0x50
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	00f42400 	.word	0x00f42400
 80058d4:	007a1200 	.word	0x007a1200

080058d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058dc:	4b03      	ldr	r3, [pc, #12]	@ (80058ec <HAL_RCC_GetHCLKFreq+0x14>)
 80058de:	681b      	ldr	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	200004c4 	.word	0x200004c4

080058f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f4:	f7ff fff0 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0a9b      	lsrs	r3, r3, #10
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4903      	ldr	r1, [pc, #12]	@ (8005914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40023800 	.word	0x40023800
 8005914:	0800e190 	.word	0x0800e190

08005918 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800593c:	2b00      	cmp	r3, #0
 800593e:	d035      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005940:	4b67      	ldr	r3, [pc, #412]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005946:	f7fc fac7 	bl	8001ed8 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800594e:	f7fc fac3 	bl	8001ed8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0ba      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005960:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	019a      	lsls	r2, r3, #6
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	071b      	lsls	r3, r3, #28
 8005978:	495a      	ldr	r1, [pc, #360]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005980:	4b57      	ldr	r3, [pc, #348]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005986:	f7fc faa7 	bl	8001ed8 <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800598e:	f7fc faa3 	bl	8001ed8 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e09a      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059a0:	4b50      	ldr	r3, [pc, #320]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8083 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	4b49      	ldr	r3, [pc, #292]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	4a48      	ldr	r2, [pc, #288]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ca:	4b46      	ldr	r3, [pc, #280]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059d6:	4b44      	ldr	r3, [pc, #272]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a43      	ldr	r2, [pc, #268]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059e2:	f7fc fa79 	bl	8001ed8 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059ea:	f7fc fa75 	bl	8001ed8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e06c      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059fc:	4b3a      	ldr	r3, [pc, #232]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a08:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02f      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d028      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a26:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a30:	4b2e      	ldr	r3, [pc, #184]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a36:	4b2d      	ldr	r3, [pc, #180]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a42:	4b28      	ldr	r3, [pc, #160]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d114      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fc fa43 	bl	8001ed8 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc fa3f 	bl	8001ed8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e034      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ee      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a84:	d10d      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a86:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9a:	4912      	ldr	r1, [pc, #72]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]
 8005aa0:	e005      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aa2:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aa8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005aac:	6093      	str	r3, [r2, #8]
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ab0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aba:	490a      	ldr	r1, [pc, #40]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7c1a      	ldrb	r2, [r3, #16]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ad2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	42470068 	.word	0x42470068
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40007000 	.word	0x40007000
 8005aec:	42470e40 	.word	0x42470e40
 8005af0:	424711e0 	.word	0x424711e0

08005af4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e066      	b.n	8005bd8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7f5b      	ldrb	r3, [r3, #29]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb fe30 	bl	8001780 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	22ca      	movs	r2, #202	@ 0xca
 8005b2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2253      	movs	r2, #83	@ 0x53
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb2a 	bl	8006190 <RTC_EnterInitMode>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d12c      	bne.n	8005ba0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b58:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6899      	ldr	r1, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68d2      	ldr	r2, [r2, #12]
 8005b80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6919      	ldr	r1, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	041a      	lsls	r2, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fb31 	bl	80061fe <RTC_ExitInitMode>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d113      	bne.n	8005bce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	7f1b      	ldrb	r3, [r3, #28]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_RTC_SetTime+0x1c>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e087      	b.n	8005d0c <HAL_RTC_SetTime+0x12c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2202      	movs	r2, #2
 8005c06:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d126      	bne.n	8005c5c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fb0e 	bl	8006248 <RTC_ByteToBcd2>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fb07 	bl	8006248 <RTC_ByteToBcd2>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c3e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	789b      	ldrb	r3, [r3, #2]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 faff 	bl	8006248 <RTC_ByteToBcd2>
 8005c4a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e018      	b.n	8005c8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c7c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	78db      	ldrb	r3, [r3, #3]
 8005c88:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	22ca      	movs	r2, #202	@ 0xca
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2253      	movs	r2, #83	@ 0x53
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa76 	bl	8006190 <RTC_EnterInitMode>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d120      	bne.n	8005cf0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005cb8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005cbc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ccc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa89 	bl	80061fe <RTC_ExitInitMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	22ff      	movs	r2, #255	@ 0xff
 8005d02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	771a      	strb	r2, [r3, #28]

  return status;
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd90      	pop	{r4, r7, pc}

08005d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d14:	b590      	push	{r4, r7, lr}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	7f1b      	ldrb	r3, [r3, #28]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_RTC_SetDate+0x1c>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e071      	b.n	8005e14 <HAL_RTC_SetDate+0x100>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_RTC_SetDate+0x4c>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	330a      	adds	r3, #10
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11c      	bne.n	8005da0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	78db      	ldrb	r3, [r3, #3]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa6c 	bl	8006248 <RTC_ByteToBcd2>
 8005d70:	4603      	mov	r3, r0
 8005d72:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fa65 	bl	8006248 <RTC_ByteToBcd2>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d82:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	789b      	ldrb	r3, [r3, #2]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fa5d 	bl	8006248 <RTC_ByteToBcd2>
 8005d8e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d90:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e00e      	b.n	8005dbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005db2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	22ca      	movs	r2, #202	@ 0xca
 8005dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2253      	movs	r2, #83	@ 0x53
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f9de 	bl	8006190 <RTC_EnterInitMode>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005de8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa05 	bl	80061fe <RTC_ExitInitMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005df8:	7cfb      	ldrb	r3, [r7, #19]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	22ff      	movs	r2, #255	@ 0xff
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]

  return status;
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b089      	sub	sp, #36	@ 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005e28:	4b9a      	ldr	r3, [pc, #616]	@ (8006094 <HAL_RTC_SetAlarm_IT+0x278>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a9a      	ldr	r2, [pc, #616]	@ (8006098 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	0adb      	lsrs	r3, r3, #11
 8005e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	7f1b      	ldrb	r3, [r3, #28]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_RTC_SetAlarm_IT+0x36>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e11c      	b.n	800608c <HAL_RTC_SetAlarm_IT+0x270>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d137      	bne.n	8005ed4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f9e3 	bl	8006248 <RTC_ByteToBcd2>
 8005e82:	4603      	mov	r3, r0
 8005e84:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f9dc 	bl	8006248 <RTC_ByteToBcd2>
 8005e90:	4603      	mov	r3, r0
 8005e92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e94:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	789b      	ldrb	r3, [r3, #2]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f9d4 	bl	8006248 <RTC_ByteToBcd2>
 8005ea0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ea2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005eac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f9c6 	bl	8006248 <RTC_ByteToBcd2>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ec0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ec8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	e023      	b.n	8005f1c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ef4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005efa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005f02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005f0c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005f12:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	22ca      	movs	r2, #202	@ 0xca
 8005f2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2253      	movs	r2, #83	@ 0x53
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f40:	d141      	bne.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005f62:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	617a      	str	r2, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	22ff      	movs	r2, #255	@ 0xff
 8005f74:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2203      	movs	r2, #3
 8005f7a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e082      	b.n	800608c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0e7      	beq.n	8005f64 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	e04b      	b.n	800605e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005fd4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005fe6:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8006094 <HAL_RTC_SetAlarm_IT+0x278>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2a      	ldr	r2, [pc, #168]	@ (8006098 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0adb      	lsrs	r3, r3, #11
 8005ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	1e5a      	subs	r2, r3, #1
 8006002:	617a      	str	r2, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	22ff      	movs	r2, #255	@ 0xff
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2203      	movs	r2, #3
 8006014:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e035      	b.n	800608c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0e7      	beq.n	8005ffe <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800605e:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <HAL_RTC_SetAlarm_IT+0x280>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a0e      	ldr	r2, [pc, #56]	@ (800609c <HAL_RTC_SetAlarm_IT+0x280>)
 8006064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006068:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800606a:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_RTC_SetAlarm_IT+0x280>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4a0b      	ldr	r2, [pc, #44]	@ (800609c <HAL_RTC_SetAlarm_IT+0x280>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006074:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	22ff      	movs	r2, #255	@ 0xff
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3724      	adds	r7, #36	@ 0x24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}
 8006094:	200004c4 	.word	0x200004c4
 8006098:	10624dd3 	.word	0x10624dd3
 800609c:	40013c00 	.word	0x40013c00

080060a0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d012      	beq.n	80060dc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f831 	bl	800612c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80060da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d012      	beq.n	8006110 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8c2 	bl	8006282 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800610e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006110:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006112:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006116:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	775a      	strb	r2, [r3, #29]
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40013c00 	.word	0x40013c00

0800612c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800615a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800615c:	f7fb febc 	bl	8001ed8 <HAL_GetTick>
 8006160:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006162:	e009      	b.n	8006178 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006164:	f7fb feb8 	bl	8001ed8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006172:	d901      	bls.n	8006178 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e007      	b.n	8006188 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d122      	bne.n	80061f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061be:	f7fb fe8b 	bl	8001ed8 <HAL_GetTick>
 80061c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061c4:	e00c      	b.n	80061e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061c6:	f7fb fe87 	bl	8001ed8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d4:	d904      	bls.n	80061e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2204      	movs	r2, #4
 80061da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <RTC_EnterInitMode+0x64>
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d1e8      	bne.n	80061c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006218:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff89 	bl	8006140 <HAL_RTC_WaitForSynchro>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2204      	movs	r2, #4
 8006238:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006256:	e005      	b.n	8006264 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	3301      	adds	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	3b0a      	subs	r3, #10
 8006262:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b09      	cmp	r3, #9
 8006268:	d8f6      	bhi.n	8006258 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	b2da      	uxtb	r2, r3
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	4313      	orrs	r3, r2
 8006274:	b2db      	uxtb	r3, r3
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e07b      	b.n	80063a0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d108      	bne.n	80062c2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b8:	d009      	beq.n	80062ce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	61da      	str	r2, [r3, #28]
 80062c0:	e005      	b.n	80062ce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb fa7d 	bl	80017e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006304:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006352:	ea42 0103 	orr.w	r1, r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	0c1b      	lsrs	r3, r3, #16
 800636c:	f003 0104 	and.w	r1, r3, #4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	f003 0210 	and.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_SPI_Transmit+0x22>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e126      	b.n	8006618 <HAL_SPI_Transmit+0x270>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d2:	f7fb fd81 	bl	8001ed8 <HAL_GetTick>
 80063d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
 80063ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ec:	e10b      	b.n	8006606 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_SPI_Transmit+0x52>
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fe:	e102      	b.n	8006606 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2203      	movs	r2, #3
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006446:	d10f      	bne.n	8006468 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006456:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006466:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b40      	cmp	r3, #64	@ 0x40
 8006474:	d007      	beq.n	8006486 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006484:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648e:	d14b      	bne.n	8006528 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_SPI_Transmit+0xf6>
 8006498:	8afb      	ldrh	r3, [r7, #22]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d13e      	bne.n	800651c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	881a      	ldrh	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	1c9a      	adds	r2, r3, #2
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064c2:	e02b      	b.n	800651c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d112      	bne.n	80064f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	881a      	ldrh	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	1c9a      	adds	r2, r3, #2
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064f6:	e011      	b.n	800651c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f8:	f7fb fcee 	bl	8001ed8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d803      	bhi.n	8006510 <HAL_SPI_Transmit+0x168>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d102      	bne.n	8006516 <HAL_SPI_Transmit+0x16e>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	77fb      	strb	r3, [r7, #31]
          goto error;
 800651a:	e074      	b.n	8006606 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ce      	bne.n	80064c4 <HAL_SPI_Transmit+0x11c>
 8006526:	e04c      	b.n	80065c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_SPI_Transmit+0x18e>
 8006530:	8afb      	ldrh	r3, [r7, #22]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d140      	bne.n	80065b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800655c:	e02c      	b.n	80065b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d113      	bne.n	8006594 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006592:	e011      	b.n	80065b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006594:	f7fb fca0 	bl	8001ed8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d803      	bhi.n	80065ac <HAL_SPI_Transmit+0x204>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d102      	bne.n	80065b2 <HAL_SPI_Transmit+0x20a>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065b6:	e026      	b.n	8006606 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1cd      	bne.n	800655e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fbcc 	bl	8006d64 <SPI_EndRxTxTransaction>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e000      	b.n	8006606 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006604:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006616:	7ffb      	ldrb	r3, [r7, #31]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800663c:	d112      	bne.n	8006664 <HAL_SPI_Receive+0x44>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10e      	bne.n	8006664 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2204      	movs	r2, #4
 800664a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800664e:	88fa      	ldrh	r2, [r7, #6]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8f1 	bl	8006842 <HAL_SPI_TransmitReceive>
 8006660:	4603      	mov	r3, r0
 8006662:	e0ea      	b.n	800683a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_SPI_Receive+0x52>
 800666e:	2302      	movs	r3, #2
 8006670:	e0e3      	b.n	800683a <HAL_SPI_Receive+0x21a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800667a:	f7fb fc2d 	bl	8001ed8 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d002      	beq.n	8006692 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800668c:	2302      	movs	r3, #2
 800668e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006690:	e0ca      	b.n	8006828 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_SPI_Receive+0x7e>
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066a2:	e0c1      	b.n	8006828 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2204      	movs	r2, #4
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ea:	d10f      	bne.n	800670c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800670a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d007      	beq.n	800672a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006728:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d162      	bne.n	80067f8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006732:	e02e      	b.n	8006792 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d115      	bne.n	800676e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f103 020c 	add.w	r2, r3, #12
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800676c:	e011      	b.n	8006792 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800676e:	f7fb fbb3 	bl	8001ed8 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d803      	bhi.n	8006786 <HAL_SPI_Receive+0x166>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d102      	bne.n	800678c <HAL_SPI_Receive+0x16c>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006790:	e04a      	b.n	8006828 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1cb      	bne.n	8006734 <HAL_SPI_Receive+0x114>
 800679c:	e031      	b.n	8006802 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d113      	bne.n	80067d4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b6:	b292      	uxth	r2, r2
 80067b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067d2:	e011      	b.n	80067f8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d4:	f7fb fb80 	bl	8001ed8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d803      	bhi.n	80067ec <HAL_SPI_Receive+0x1cc>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d102      	bne.n	80067f2 <HAL_SPI_Receive+0x1d2>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067f6:	e017      	b.n	8006828 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1cd      	bne.n	800679e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fa46 	bl	8006c98 <SPI_EndRxTransaction>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
 8006824:	e000      	b.n	8006828 <HAL_SPI_Receive+0x208>
  }

error :
 8006826:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08c      	sub	sp, #48	@ 0x30
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006850:	2301      	movs	r3, #1
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x26>
 8006864:	2302      	movs	r3, #2
 8006866:	e18a      	b.n	8006b7e <HAL_SPI_TransmitReceive+0x33c>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006870:	f7fb fb32 	bl	8001ed8 <HAL_GetTick>
 8006874:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800687c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800688a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800688e:	2b01      	cmp	r3, #1
 8006890:	d00f      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x70>
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006898:	d107      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x68>
 80068a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d003      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80068b0:	e15b      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x82>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x82>
 80068be:	887b      	ldrh	r3, [r7, #2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80068ca:	e14e      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d003      	beq.n	80068e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2205      	movs	r2, #5
 80068dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	887a      	ldrh	r2, [r7, #2]
 80068f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	887a      	ldrh	r2, [r7, #2]
 8006902:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	887a      	ldrh	r2, [r7, #2]
 8006908:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d007      	beq.n	8006934 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800693c:	d178      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_TransmitReceive+0x10a>
 8006946:	8b7b      	ldrh	r3, [r7, #26]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d166      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006970:	e053      	b.n	8006a1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d11b      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x176>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x176>
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d113      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	881a      	ldrh	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d119      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x1b8>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d014      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	b292      	uxth	r2, r2
 80069dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e2:	1c9a      	adds	r2, r3, #2
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f6:	2301      	movs	r3, #1
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069fa:	f7fb fa6d 	bl	8001ed8 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d807      	bhi.n	8006a1a <HAL_SPI_TransmitReceive+0x1d8>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d003      	beq.n	8006a1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006a18:	e0a7      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1a6      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x130>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1a1      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x130>
 8006a2e:	e07c      	b.n	8006b2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x1fc>
 8006a38:	8b7b      	ldrh	r3, [r7, #26]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d16b      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a64:	e057      	b.n	8006b16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d11c      	bne.n	8006aae <HAL_SPI_TransmitReceive+0x26c>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <HAL_SPI_TransmitReceive+0x26c>
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d114      	bne.n	8006aae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d119      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x2ae>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d014      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aec:	2301      	movs	r3, #1
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006af0:	f7fb f9f2 	bl	8001ed8 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d803      	bhi.n	8006b08 <HAL_SPI_TransmitReceive+0x2c6>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d102      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x2cc>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006b14:	e029      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1a2      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x224>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d19d      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f918 	bl	8006d64 <SPI_EndRxTxTransaction>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006b46:	e010      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	e000      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3730      	adds	r7, #48	@ 0x30
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b98:	f7fb f99e 	bl	8001ed8 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ba8:	f7fb f996 	bl	8001ed8 <HAL_GetTick>
 8006bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bae:	4b39      	ldr	r3, [pc, #228]	@ (8006c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bbe:	e054      	b.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d050      	beq.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc8:	f7fb f986 	bl	8001ed8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d902      	bls.n	8006bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d13d      	bne.n	8006c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bf6:	d111      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c00:	d004      	beq.n	8006c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0a:	d107      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c24:	d10f      	bne.n	8006c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e017      	b.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4013      	ands	r3, r2
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d19b      	bne.n	8006bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200004c4 	.word	0x200004c4

08006c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cac:	d111      	bne.n	8006cd2 <SPI_EndRxTransaction+0x3a>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb6:	d004      	beq.n	8006cc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc0:	d107      	bne.n	8006cd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cda:	d12a      	bne.n	8006d32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce4:	d012      	beq.n	8006d0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2180      	movs	r1, #128	@ 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff ff49 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d02d      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e026      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2200      	movs	r2, #0
 8006d14:	2101      	movs	r1, #1
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff ff36 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01a      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f043 0220 	orr.w	r2, r3, #32
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e013      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff ff23 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e000      	b.n	8006d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d70:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <SPI_EndRxTxTransaction+0x7c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <SPI_EndRxTxTransaction+0x80>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0d5b      	lsrs	r3, r3, #21
 8006d7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d8e:	d112      	bne.n	8006db6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2180      	movs	r1, #128	@ 0x80
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff fef4 	bl	8006b88 <SPI_WaitFlagStateUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006daa:	f043 0220 	orr.w	r2, r3, #32
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00f      	b.n	8006dd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d0f2      	beq.n	8006db6 <SPI_EndRxTxTransaction+0x52>
 8006dd0:	e000      	b.n	8006dd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dd2:	bf00      	nop
  }

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200004c4 	.word	0x200004c4
 8006de4:	165e9f81 	.word	0x165e9f81

08006de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e041      	b.n	8006e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fa fd96 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f000 fcf0 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e044      	b.n	8006f2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f38 <HAL_TIM_Base_Start_IT+0xb0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d018      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eca:	d013      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f3c <HAL_TIM_Base_Start_IT+0xb4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a19      	ldr	r2, [pc, #100]	@ (8006f40 <HAL_TIM_Base_Start_IT+0xb8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a17      	ldr	r2, [pc, #92]	@ (8006f44 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a16      	ldr	r2, [pc, #88]	@ (8006f48 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d111      	bne.n	8006f18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d010      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0201 	orr.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f16:	e007      	b.n	8006f28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000c00 	.word	0x40000c00
 8006f48:	40014000 	.word	0x40014000

08006f4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e041      	b.n	8007040 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f839 	bl	8007048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f000 fc0f 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_TIM_PWM_Start+0x24>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e022      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d109      	bne.n	800709a <HAL_TIM_PWM_Start+0x3e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e015      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d109      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x58>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e008      	b.n	80070c6 <HAL_TIM_PWM_Start+0x6a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e068      	b.n	80071a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <HAL_TIM_PWM_Start+0x82>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070dc:	e013      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_PWM_Start+0x92>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ec:	e00b      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_PWM_Start+0xa2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070fc:	e003      	b.n	8007106 <HAL_TIM_PWM_Start+0xaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2201      	movs	r2, #1
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fe22 	bl	8007d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a23      	ldr	r2, [pc, #140]	@ (80071a8 <HAL_TIM_PWM_Start+0x14c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d107      	bne.n	800712e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <HAL_TIM_PWM_Start+0x14c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d018      	beq.n	800716a <HAL_TIM_PWM_Start+0x10e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007140:	d013      	beq.n	800716a <HAL_TIM_PWM_Start+0x10e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a19      	ldr	r2, [pc, #100]	@ (80071ac <HAL_TIM_PWM_Start+0x150>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_TIM_PWM_Start+0x10e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a17      	ldr	r2, [pc, #92]	@ (80071b0 <HAL_TIM_PWM_Start+0x154>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_TIM_PWM_Start+0x10e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a16      	ldr	r2, [pc, #88]	@ (80071b4 <HAL_TIM_PWM_Start+0x158>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_TIM_PWM_Start+0x10e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a14      	ldr	r2, [pc, #80]	@ (80071b8 <HAL_TIM_PWM_Start+0x15c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d111      	bne.n	800718e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d010      	beq.n	800719e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718c:	e007      	b.n	800719e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40014000 	.word	0x40014000

080071bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fdc2 	bl	8007d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a29      	ldr	r2, [pc, #164]	@ (8007280 <HAL_TIM_PWM_Stop+0xc4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d117      	bne.n	800720e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10f      	bne.n	800720e <HAL_TIM_PWM_Stop+0x52>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d107      	bne.n	800720e <HAL_TIM_PWM_Stop+0x52>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007218:	4013      	ands	r3, r2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10f      	bne.n	800723e <HAL_TIM_PWM_Stop+0x82>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	f240 4344 	movw	r3, #1092	@ 0x444
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <HAL_TIM_PWM_Stop+0x82>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_TIM_PWM_Stop+0x92>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800724c:	e013      	b.n	8007276 <HAL_TIM_PWM_Stop+0xba>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d104      	bne.n	800725e <HAL_TIM_PWM_Stop+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800725c:	e00b      	b.n	8007276 <HAL_TIM_PWM_Stop+0xba>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d104      	bne.n	800726e <HAL_TIM_PWM_Stop+0xb2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800726c:	e003      	b.n	8007276 <HAL_TIM_PWM_Stop+0xba>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40010000 	.word	0x40010000

08007284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b02      	cmp	r3, #2
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0202 	mvn.w	r2, #2
 80072b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa81 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa73 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa84 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0204 	mvn.w	r2, #4
 8007304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa57 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa49 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa5a 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b08      	cmp	r3, #8
 8007340:	d122      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d11b      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0208 	mvn.w	r2, #8
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2204      	movs	r2, #4
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa2d 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa1f 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa30 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	2b10      	cmp	r3, #16
 8007394:	d122      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d11b      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0210 	mvn.w	r2, #16
 80073ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2208      	movs	r2, #8
 80073b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa03 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
 80073c8:	e005      	b.n	80073d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9f5 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa06 	bl	80077e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0201 	mvn.w	r2, #1
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9cf 	bl	80077a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007420:	2b80      	cmp	r3, #128	@ 0x80
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fd82 	bl	8007f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f9cb 	bl	80077f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b20      	cmp	r3, #32
 800746c:	d10e      	bne.n	800748c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b20      	cmp	r3, #32
 800747a:	d107      	bne.n	800748c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0220 	mvn.w	r2, #32
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd4c 	bl	8007f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e0ae      	b.n	8007610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b0c      	cmp	r3, #12
 80074be:	f200 809f 	bhi.w	8007600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074fd 	.word	0x080074fd
 80074cc:	08007601 	.word	0x08007601
 80074d0:	08007601 	.word	0x08007601
 80074d4:	08007601 	.word	0x08007601
 80074d8:	0800753d 	.word	0x0800753d
 80074dc:	08007601 	.word	0x08007601
 80074e0:	08007601 	.word	0x08007601
 80074e4:	08007601 	.word	0x08007601
 80074e8:	0800757f 	.word	0x0800757f
 80074ec:	08007601 	.word	0x08007601
 80074f0:	08007601 	.word	0x08007601
 80074f4:	08007601 	.word	0x08007601
 80074f8:	080075bf 	.word	0x080075bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fa02 	bl	800790c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0208 	orr.w	r2, r2, #8
 8007516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0204 	bic.w	r2, r2, #4
 8007526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6999      	ldr	r1, [r3, #24]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	619a      	str	r2, [r3, #24]
      break;
 800753a:	e064      	b.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fa48 	bl	80079d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6999      	ldr	r1, [r3, #24]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	619a      	str	r2, [r3, #24]
      break;
 800757c:	e043      	b.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fa93 	bl	8007ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0208 	orr.w	r2, r2, #8
 8007598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0204 	bic.w	r2, r2, #4
 80075a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69d9      	ldr	r1, [r3, #28]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	61da      	str	r2, [r3, #28]
      break;
 80075bc:	e023      	b.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fadd 	bl	8007b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69d9      	ldr	r1, [r3, #28]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	021a      	lsls	r2, r3, #8
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	61da      	str	r2, [r3, #28]
      break;
 80075fe:	e002      	b.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
      break;
 8007604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIM_ConfigClockSource+0x1c>
 8007630:	2302      	movs	r3, #2
 8007632:	e0b4      	b.n	800779e <HAL_TIM_ConfigClockSource+0x186>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800765a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800766c:	d03e      	beq.n	80076ec <HAL_TIM_ConfigClockSource+0xd4>
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007672:	f200 8087 	bhi.w	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 8007676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767a:	f000 8086 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x172>
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007682:	d87f      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b70      	cmp	r3, #112	@ 0x70
 8007686:	d01a      	beq.n	80076be <HAL_TIM_ConfigClockSource+0xa6>
 8007688:	2b70      	cmp	r3, #112	@ 0x70
 800768a:	d87b      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 800768c:	2b60      	cmp	r3, #96	@ 0x60
 800768e:	d050      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x11a>
 8007690:	2b60      	cmp	r3, #96	@ 0x60
 8007692:	d877      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 8007694:	2b50      	cmp	r3, #80	@ 0x50
 8007696:	d03c      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0xfa>
 8007698:	2b50      	cmp	r3, #80	@ 0x50
 800769a:	d873      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 800769c:	2b40      	cmp	r3, #64	@ 0x40
 800769e:	d058      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0x13a>
 80076a0:	2b40      	cmp	r3, #64	@ 0x40
 80076a2:	d86f      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 80076a4:	2b30      	cmp	r3, #48	@ 0x30
 80076a6:	d064      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x15a>
 80076a8:	2b30      	cmp	r3, #48	@ 0x30
 80076aa:	d86b      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d060      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x15a>
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d867      	bhi.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d05c      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x15a>
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d05a      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x15a>
 80076bc:	e062      	b.n	8007784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	6899      	ldr	r1, [r3, #8]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f000 fb23 	bl	8007d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	609a      	str	r2, [r3, #8]
      break;
 80076ea:	e04f      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6899      	ldr	r1, [r3, #8]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f000 fb0c 	bl	8007d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800770e:	609a      	str	r2, [r3, #8]
      break;
 8007710:	e03c      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	461a      	mov	r2, r3
 8007720:	f000 fa80 	bl	8007c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2150      	movs	r1, #80	@ 0x50
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fad9 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 8007730:	e02c      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6859      	ldr	r1, [r3, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	461a      	mov	r2, r3
 8007740:	f000 fa9f 	bl	8007c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2160      	movs	r1, #96	@ 0x60
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fac9 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 8007750:	e01c      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	6859      	ldr	r1, [r3, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	461a      	mov	r2, r3
 8007760:	f000 fa60 	bl	8007c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2140      	movs	r1, #64	@ 0x40
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fab9 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 8007770:	e00c      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f000 fab0 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 8007782:	e003      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
      break;
 8007788:	e000      	b.n	800778c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800778a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a34      	ldr	r2, [pc, #208]	@ (80078f0 <TIM_Base_SetConfig+0xe4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00f      	beq.n	8007844 <TIM_Base_SetConfig+0x38>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800782a:	d00b      	beq.n	8007844 <TIM_Base_SetConfig+0x38>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a31      	ldr	r2, [pc, #196]	@ (80078f4 <TIM_Base_SetConfig+0xe8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <TIM_Base_SetConfig+0x38>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a30      	ldr	r2, [pc, #192]	@ (80078f8 <TIM_Base_SetConfig+0xec>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_Base_SetConfig+0x38>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a2f      	ldr	r2, [pc, #188]	@ (80078fc <TIM_Base_SetConfig+0xf0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d108      	bne.n	8007856 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800784a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a25      	ldr	r2, [pc, #148]	@ (80078f0 <TIM_Base_SetConfig+0xe4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01b      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007864:	d017      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <TIM_Base_SetConfig+0xe8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <TIM_Base_SetConfig+0xec>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00f      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a20      	ldr	r2, [pc, #128]	@ (80078fc <TIM_Base_SetConfig+0xf0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00b      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a1f      	ldr	r2, [pc, #124]	@ (8007900 <TIM_Base_SetConfig+0xf4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1e      	ldr	r2, [pc, #120]	@ (8007904 <TIM_Base_SetConfig+0xf8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_Base_SetConfig+0x8a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1d      	ldr	r2, [pc, #116]	@ (8007908 <TIM_Base_SetConfig+0xfc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a08      	ldr	r2, [pc, #32]	@ (80078f0 <TIM_Base_SetConfig+0xe4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d103      	bne.n	80078dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	615a      	str	r2, [r3, #20]
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40000c00 	.word	0x40000c00
 8007900:	40014000 	.word	0x40014000
 8007904:	40014400 	.word	0x40014400
 8007908:	40014800 	.word	0x40014800

0800790c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f023 0201 	bic.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f023 0302 	bic.w	r3, r3, #2
 8007954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <TIM_OC1_SetConfig+0xc8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10c      	bne.n	8007982 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0308 	bic.w	r3, r3, #8
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a13      	ldr	r2, [pc, #76]	@ (80079d4 <TIM_OC1_SetConfig+0xc8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d111      	bne.n	80079ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	621a      	str	r2, [r3, #32]
}
 80079c8:	bf00      	nop
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	40010000 	.word	0x40010000

080079d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0210 	bic.w	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0320 	bic.w	r3, r3, #32
 8007a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <TIM_OC2_SetConfig+0xd4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d10d      	bne.n	8007a54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a15      	ldr	r2, [pc, #84]	@ (8007aac <TIM_OC2_SetConfig+0xd4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d113      	bne.n	8007a84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000

08007ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1d      	ldr	r2, [pc, #116]	@ (8007b80 <TIM_OC3_SetConfig+0xd0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d10d      	bne.n	8007b2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	@ (8007b80 <TIM_OC3_SetConfig+0xd0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d113      	bne.n	8007b5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40010000 	.word	0x40010000

08007b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a10      	ldr	r2, [pc, #64]	@ (8007c20 <TIM_OC4_SetConfig+0x9c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d109      	bne.n	8007bf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	019b      	lsls	r3, r3, #6
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000

08007c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f023 0201 	bic.w	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f023 030a 	bic.w	r3, r3, #10
 8007c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b087      	sub	sp, #28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f023 0210 	bic.w	r2, r3, #16
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	031b      	lsls	r3, r3, #12
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f043 0307 	orr.w	r3, r3, #7
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]
}
 8007d0c:	bf00      	nop
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	021a      	lsls	r2, r3, #8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	609a      	str	r2, [r3, #8]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 031f 	and.w	r3, r3, #31
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a1a      	ldr	r2, [r3, #32]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a1a      	ldr	r2, [r3, #32]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
	...

08007da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e050      	b.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d018      	beq.n	8007e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e08:	d013      	beq.n	8007e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00e      	beq.n	8007e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a16      	ldr	r2, [pc, #88]	@ (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d009      	beq.n	8007e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a15      	ldr	r2, [pc, #84]	@ (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d004      	beq.n	8007e32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d10c      	bne.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40014000 	.word	0x40014000

08007e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e03d      	b.n	8007f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	f107 001c 	add.w	r0, r7, #28
 8007f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d122      	bne.n	8007faa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fbee 	bl	8009780 <USB_CoreReset>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e01a      	b.n	8007fe0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fbe2 	bl	8009780 <USB_CoreReset>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fd2:	e005      	b.n	8007fe0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d10b      	bne.n	8007ffe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f043 0206 	orr.w	r2, r3, #6
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800800a:	b004      	add	sp, #16
 800800c:	4770      	bx	lr
	...

08008010 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d165      	bne.n	80080f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a41      	ldr	r2, [pc, #260]	@ (800812c <USB_SetTurnaroundTime+0x11c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d906      	bls.n	800803a <USB_SetTurnaroundTime+0x2a>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4a40      	ldr	r2, [pc, #256]	@ (8008130 <USB_SetTurnaroundTime+0x120>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d202      	bcs.n	800803a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008034:	230f      	movs	r3, #15
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e062      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4a3c      	ldr	r2, [pc, #240]	@ (8008130 <USB_SetTurnaroundTime+0x120>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d306      	bcc.n	8008050 <USB_SetTurnaroundTime+0x40>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4a3b      	ldr	r2, [pc, #236]	@ (8008134 <USB_SetTurnaroundTime+0x124>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d202      	bcs.n	8008050 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800804a:	230e      	movs	r3, #14
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	e057      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4a38      	ldr	r2, [pc, #224]	@ (8008134 <USB_SetTurnaroundTime+0x124>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d306      	bcc.n	8008066 <USB_SetTurnaroundTime+0x56>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4a37      	ldr	r2, [pc, #220]	@ (8008138 <USB_SetTurnaroundTime+0x128>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d202      	bcs.n	8008066 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008060:	230d      	movs	r3, #13
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	e04c      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4a33      	ldr	r2, [pc, #204]	@ (8008138 <USB_SetTurnaroundTime+0x128>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d306      	bcc.n	800807c <USB_SetTurnaroundTime+0x6c>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4a32      	ldr	r2, [pc, #200]	@ (800813c <USB_SetTurnaroundTime+0x12c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d802      	bhi.n	800807c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008076:	230c      	movs	r3, #12
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e041      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a2f      	ldr	r2, [pc, #188]	@ (800813c <USB_SetTurnaroundTime+0x12c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d906      	bls.n	8008092 <USB_SetTurnaroundTime+0x82>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4a2e      	ldr	r2, [pc, #184]	@ (8008140 <USB_SetTurnaroundTime+0x130>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d802      	bhi.n	8008092 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800808c:	230b      	movs	r3, #11
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e036      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a2a      	ldr	r2, [pc, #168]	@ (8008140 <USB_SetTurnaroundTime+0x130>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d906      	bls.n	80080a8 <USB_SetTurnaroundTime+0x98>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	4a29      	ldr	r2, [pc, #164]	@ (8008144 <USB_SetTurnaroundTime+0x134>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d802      	bhi.n	80080a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080a2:	230a      	movs	r3, #10
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e02b      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4a26      	ldr	r2, [pc, #152]	@ (8008144 <USB_SetTurnaroundTime+0x134>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d906      	bls.n	80080be <USB_SetTurnaroundTime+0xae>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4a25      	ldr	r2, [pc, #148]	@ (8008148 <USB_SetTurnaroundTime+0x138>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d202      	bcs.n	80080be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080b8:	2309      	movs	r3, #9
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e020      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4a21      	ldr	r2, [pc, #132]	@ (8008148 <USB_SetTurnaroundTime+0x138>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d306      	bcc.n	80080d4 <USB_SetTurnaroundTime+0xc4>
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4a20      	ldr	r2, [pc, #128]	@ (800814c <USB_SetTurnaroundTime+0x13c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d802      	bhi.n	80080d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080ce:	2308      	movs	r3, #8
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	e015      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a1d      	ldr	r2, [pc, #116]	@ (800814c <USB_SetTurnaroundTime+0x13c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d906      	bls.n	80080ea <USB_SetTurnaroundTime+0xda>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <USB_SetTurnaroundTime+0x140>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d202      	bcs.n	80080ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80080e4:	2307      	movs	r3, #7
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e00a      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80080ea:	2306      	movs	r3, #6
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	e007      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80080f6:	2309      	movs	r3, #9
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e001      	b.n	8008100 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80080fc:	2309      	movs	r3, #9
 80080fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	029b      	lsls	r3, r3, #10
 8008114:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008118:	431a      	orrs	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	00d8acbf 	.word	0x00d8acbf
 8008130:	00e4e1c0 	.word	0x00e4e1c0
 8008134:	00f42400 	.word	0x00f42400
 8008138:	01067380 	.word	0x01067380
 800813c:	011a499f 	.word	0x011a499f
 8008140:	01312cff 	.word	0x01312cff
 8008144:	014ca43f 	.word	0x014ca43f
 8008148:	016e3600 	.word	0x016e3600
 800814c:	01a6ab1f 	.word	0x01a6ab1f
 8008150:	01e84800 	.word	0x01e84800

08008154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f043 0201 	orr.w	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 0201 	bic.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d115      	bne.n	80081e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081c6:	2001      	movs	r0, #1
 80081c8:	f7f9 fe92 	bl	8001ef0 <HAL_Delay>
      ms++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fa45 	bl	8009662 <USB_GetMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d01e      	beq.n	800821c <USB_SetCurrentMode+0x84>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b31      	cmp	r3, #49	@ 0x31
 80081e2:	d9f0      	bls.n	80081c6 <USB_SetCurrentMode+0x2e>
 80081e4:	e01a      	b.n	800821c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d115      	bne.n	8008218 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081f8:	2001      	movs	r0, #1
 80081fa:	f7f9 fe79 	bl	8001ef0 <HAL_Delay>
      ms++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fa2c 	bl	8009662 <USB_GetMode>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <USB_SetCurrentMode+0x84>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b31      	cmp	r3, #49	@ 0x31
 8008214:	d9f0      	bls.n	80081f8 <USB_SetCurrentMode+0x60>
 8008216:	e001      	b.n	800821c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e005      	b.n	8008228 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b32      	cmp	r3, #50	@ 0x32
 8008220:	d101      	bne.n	8008226 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008230:	b084      	sub	sp, #16
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800823e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	e009      	b.n	8008264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	3340      	adds	r3, #64	@ 0x40
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	3301      	adds	r3, #1
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b0e      	cmp	r3, #14
 8008268:	d9f2      	bls.n	8008250 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800826a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11c      	bne.n	80082aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80082a8:	e00b      	b.n	80082c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082c8:	461a      	mov	r2, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d4:	4619      	mov	r1, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082dc:	461a      	mov	r2, r3
 80082de:	680b      	ldr	r3, [r1, #0]
 80082e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d10c      	bne.n	8008302 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f965 	bl	80085c0 <USB_SetDevSpeed>
 80082f6:	e008      	b.n	800830a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082f8:	2101      	movs	r1, #1
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f960 	bl	80085c0 <USB_SetDevSpeed>
 8008300:	e003      	b.n	800830a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008302:	2103      	movs	r1, #3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f95b 	bl	80085c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800830a:	2110      	movs	r1, #16
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f8f3 	bl	80084f8 <USB_FlushTxFifo>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f91f 	bl	8008560 <USB_FlushRxFifo>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008332:	461a      	mov	r2, r3
 8008334:	2300      	movs	r3, #0
 8008336:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800833e:	461a      	mov	r2, r3
 8008340:	2300      	movs	r3, #0
 8008342:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834a:	461a      	mov	r2, r3
 800834c:	2300      	movs	r3, #0
 800834e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	e043      	b.n	80083de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800836c:	d118      	bne.n	80083a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008380:	461a      	mov	r2, r3
 8008382:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e013      	b.n	80083b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008396:	461a      	mov	r2, r3
 8008398:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	e008      	b.n	80083b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ac:	461a      	mov	r2, r3
 80083ae:	2300      	movs	r3, #0
 80083b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d0:	461a      	mov	r2, r3
 80083d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d3b7      	bcc.n	8008356 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	e043      	b.n	8008474 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008402:	d118      	bne.n	8008436 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008416:	461a      	mov	r2, r3
 8008418:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	e013      	b.n	8008448 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842c:	461a      	mov	r2, r3
 800842e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e008      	b.n	8008448 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008442:	461a      	mov	r2, r3
 8008444:	2300      	movs	r3, #0
 8008446:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008454:	461a      	mov	r2, r3
 8008456:	2300      	movs	r3, #0
 8008458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008466:	461a      	mov	r2, r3
 8008468:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800846c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3301      	adds	r3, #1
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	429a      	cmp	r2, r3
 800847a:	d3b7      	bcc.n	80083ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800848a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800848e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800849c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f043 0210 	orr.w	r2, r3, #16
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699a      	ldr	r2, [r3, #24]
 80084b4:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <USB_DevInit+0x2c4>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	f043 0208 	orr.w	r2, r3, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084f0:	b004      	add	sp, #16
 80084f2:	4770      	bx	lr
 80084f4:	803c3800 	.word	0x803c3800

080084f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4a13      	ldr	r2, [pc, #76]	@ (800855c <USB_FlushTxFifo+0x64>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d901      	bls.n	8008518 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e01b      	b.n	8008550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	daf2      	bge.n	8008506 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	019b      	lsls	r3, r3, #6
 8008528:	f043 0220 	orr.w	r2, r3, #32
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a08      	ldr	r2, [pc, #32]	@ (800855c <USB_FlushTxFifo+0x64>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d901      	bls.n	8008542 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e006      	b.n	8008550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b20      	cmp	r3, #32
 800854c:	d0f0      	beq.n	8008530 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	00030d40 	.word	0x00030d40

08008560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4a11      	ldr	r2, [pc, #68]	@ (80085bc <USB_FlushRxFifo+0x5c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d901      	bls.n	800857e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e018      	b.n	80085b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	daf2      	bge.n	800856c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2210      	movs	r2, #16
 800858e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4a08      	ldr	r2, [pc, #32]	@ (80085bc <USB_FlushRxFifo+0x5c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e006      	b.n	80085b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d0f0      	beq.n	8008590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085e0:	4313      	orrs	r3, r2
 80085e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b087      	sub	sp, #28
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 0306 	and.w	r3, r3, #6
 800860a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
 8008616:	e00a      	b.n	800862e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d002      	beq.n	8008624 <USB_GetDevSpeed+0x32>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b06      	cmp	r3, #6
 8008622:	d102      	bne.n	800862a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008624:	2302      	movs	r3, #2
 8008626:	75fb      	strb	r3, [r7, #23]
 8008628:	e001      	b.n	800862e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800862a:	230f      	movs	r3, #15
 800862c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d13a      	bne.n	80086ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	2101      	movs	r1, #1
 800866a:	fa01 f303 	lsl.w	r3, r1, r3
 800866e:	b29b      	uxth	r3, r3
 8008670:	68f9      	ldr	r1, [r7, #12]
 8008672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008676:	4313      	orrs	r3, r2
 8008678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d155      	bne.n	800873c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	059b      	lsls	r3, r3, #22
 80086b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086b4:	4313      	orrs	r3, r2
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e036      	b.n	800873c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d4:	69da      	ldr	r2, [r3, #28]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	2101      	movs	r1, #1
 80086e0:	fa01 f303 	lsl.w	r3, r1, r3
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086ec:	4313      	orrs	r3, r2
 80086ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11a      	bne.n	800873c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	791b      	ldrb	r3, [r3, #4]
 8008720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008722:	430b      	orrs	r3, r1
 8008724:	4313      	orrs	r3, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	440a      	add	r2, r1
 800872e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800873a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d161      	bne.n	800882c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800877a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800877e:	d11f      	bne.n	80087c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800879e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	2101      	movs	r1, #1
 80087d2:	fa01 f303 	lsl.w	r3, r1, r3
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087e0:	4013      	ands	r3, r2
 80087e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	2101      	movs	r1, #1
 80087f6:	fa01 f303 	lsl.w	r3, r1, r3
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	43db      	mvns	r3, r3
 80087fe:	68f9      	ldr	r1, [r7, #12]
 8008800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008804:	4013      	ands	r3, r2
 8008806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	0159      	lsls	r1, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	440b      	add	r3, r1
 800881e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008822:	4619      	mov	r1, r3
 8008824:	4b35      	ldr	r3, [pc, #212]	@ (80088fc <USB_DeactivateEndpoint+0x1b0>)
 8008826:	4013      	ands	r3, r2
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	e060      	b.n	80088ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800883e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008842:	d11f      	bne.n	8008884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	440a      	add	r2, r1
 800885a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800885e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800887e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800888a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	2101      	movs	r1, #1
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	041b      	lsls	r3, r3, #16
 800889c:	43db      	mvns	r3, r3
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088a4:	4013      	ands	r3, r2
 80088a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	2101      	movs	r1, #1
 80088ba:	fa01 f303 	lsl.w	r3, r1, r3
 80088be:	041b      	lsls	r3, r3, #16
 80088c0:	43db      	mvns	r3, r3
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c8:	4013      	ands	r3, r2
 80088ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	0159      	lsls	r1, r3, #5
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	440b      	add	r3, r1
 80088e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e6:	4619      	mov	r1, r3
 80088e8:	4b05      	ldr	r3, [pc, #20]	@ (8008900 <USB_DeactivateEndpoint+0x1b4>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	ec337800 	.word	0xec337800
 8008900:	eff37800 	.word	0xeff37800

08008904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	@ 0x28
 8008908:	af02      	add	r7, sp, #8
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b01      	cmp	r3, #1
 8008922:	f040 815c 	bne.w	8008bde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d132      	bne.n	8008994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008948:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800894c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800896c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898c:	0cdb      	lsrs	r3, r3, #19
 800898e:	04db      	lsls	r3, r3, #19
 8008990:	6113      	str	r3, [r2, #16]
 8008992:	e074      	b.n	8008a7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ae:	0cdb      	lsrs	r3, r3, #19
 80089b0:	04db      	lsls	r3, r3, #19
 80089b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	440b      	add	r3, r1
 80089f0:	1e59      	subs	r1, r3, #1
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80089fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089fc:	4b9d      	ldr	r3, [pc, #628]	@ (8008c74 <USB_EPStartXfer+0x370>)
 80089fe:	400b      	ands	r3, r1
 8008a00:	69b9      	ldr	r1, [r7, #24]
 8008a02:	0148      	lsls	r0, r1, #5
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	4401      	add	r1, r0
 8008a08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a26:	69b9      	ldr	r1, [r7, #24]
 8008a28:	0148      	lsls	r0, r1, #5
 8008a2a:	69f9      	ldr	r1, [r7, #28]
 8008a2c:	4401      	add	r1, r0
 8008a2e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a32:	4313      	orrs	r3, r2
 8008a34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	791b      	ldrb	r3, [r3, #4]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d11f      	bne.n	8008a7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a58:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008a5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d14b      	bne.n	8008b1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	461a      	mov	r2, r3
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d128      	bne.n	8008afa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d110      	bne.n	8008ada <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e00f      	b.n	8008afa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008af8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	0151      	lsls	r1, r2, #5
 8008b0c:	69fa      	ldr	r2, [r7, #28]
 8008b0e:	440a      	add	r2, r1
 8008b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e133      	b.n	8008d84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	791b      	ldrb	r3, [r3, #4]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d015      	beq.n	8008b70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 811b 	beq.w	8008d84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	2101      	movs	r1, #1
 8008b60:	fa01 f303 	lsl.w	r3, r1, r3
 8008b64:	69f9      	ldr	r1, [r7, #28]
 8008b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	634b      	str	r3, [r1, #52]	@ 0x34
 8008b6e:	e109      	b.n	8008d84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d110      	bne.n	8008ba2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e00f      	b.n	8008bc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6919      	ldr	r1, [r3, #16]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781a      	ldrb	r2, [r3, #0]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	b298      	uxth	r0, r3
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fade 	bl	8009198 <USB_WritePacket>
 8008bdc:	e0d2      	b.n	8008d84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf8:	0cdb      	lsrs	r3, r3, #19
 8008bfa:	04db      	lsls	r3, r3, #19
 8008bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c18:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c1c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d126      	bne.n	8008c78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c36:	691a      	ldr	r2, [r3, #16]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	0148      	lsls	r0, r1, #5
 8008c44:	69f9      	ldr	r1, [r7, #28]
 8008c46:	4401      	add	r1, r0
 8008c48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c6e:	6113      	str	r3, [r2, #16]
 8008c70:	e03a      	b.n	8008ce8 <USB_EPStartXfer+0x3e4>
 8008c72:	bf00      	nop
 8008c74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	1e5a      	subs	r2, r3, #1
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	8afa      	ldrh	r2, [r7, #22]
 8008c94:	fb03 f202 	mul.w	r2, r3, r2
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	8afb      	ldrh	r3, [r7, #22]
 8008cac:	04d9      	lsls	r1, r3, #19
 8008cae:	4b38      	ldr	r3, [pc, #224]	@ (8008d90 <USB_EPStartXfer+0x48c>)
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	69b9      	ldr	r1, [r7, #24]
 8008cb4:	0148      	lsls	r0, r1, #5
 8008cb6:	69f9      	ldr	r1, [r7, #28]
 8008cb8:	4401      	add	r1, r0
 8008cba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	0148      	lsls	r0, r1, #5
 8008cdc:	69f9      	ldr	r1, [r7, #28]
 8008cde:	4401      	add	r1, r0
 8008ce0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d10d      	bne.n	8008d0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6919      	ldr	r1, [r3, #16]
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d06:	460a      	mov	r2, r1
 8008d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	791b      	ldrb	r3, [r3, #4]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d128      	bne.n	8008d64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d110      	bne.n	8008d44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e00f      	b.n	8008d64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	1ff80000 	.word	0x1ff80000

08008d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	f040 80ce 	bne.w	8008f52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d132      	bne.n	8008e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dd8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ddc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1c:	0cdb      	lsrs	r3, r3, #19
 8008e1e:	04db      	lsls	r3, r3, #19
 8008e20:	6113      	str	r3, [r2, #16]
 8008e22:	e04e      	b.n	8008ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e3e:	0cdb      	lsrs	r3, r3, #19
 8008e40:	04db      	lsls	r3, r3, #19
 8008e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d903      	bls.n	8008e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea8:	691a      	ldr	r2, [r3, #16]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eb2:	6939      	ldr	r1, [r7, #16]
 8008eb4:	0148      	lsls	r0, r1, #5
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	4401      	add	r1, r0
 8008eba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d11e      	bne.n	8008f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d009      	beq.n	8008ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008edc:	461a      	mov	r2, r3
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008efe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	e097      	b.n	8009036 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 8083 	beq.w	8009036 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	2101      	movs	r1, #1
 8008f42:	fa01 f303 	lsl.w	r3, r1, r3
 8008f46:	6979      	ldr	r1, [r7, #20]
 8008f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008f50:	e071      	b.n	8009036 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f6c:	0cdb      	lsrs	r3, r3, #19
 8008f6e:	04db      	lsls	r3, r3, #19
 8008f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe4:	6939      	ldr	r1, [r7, #16]
 8008fe6:	0148      	lsls	r0, r1, #5
 8008fe8:	6979      	ldr	r1, [r7, #20]
 8008fea:	4401      	add	r1, r0
 8008fec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d10d      	bne.n	8009016 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6919      	ldr	r1, [r3, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009012:	460a      	mov	r2, r1
 8009014:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009030:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d14a      	bne.n	80090f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800907a:	f040 8086 	bne.w	800918a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	0151      	lsls	r1, r2, #5
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	440a      	add	r2, r1
 8009098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800909c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80090a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	7812      	ldrb	r2, [r2, #0]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d902      	bls.n	80090dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]
          break;
 80090da:	e056      	b.n	800918a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090f4:	d0e7      	beq.n	80090c6 <USB_EPStopXfer+0x82>
 80090f6:	e048      	b.n	800918a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800910c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009110:	d13b      	bne.n	800918a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	7812      	ldrb	r2, [r2, #0]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009130:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009134:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	7812      	ldrb	r2, [r2, #0]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009166:	4293      	cmp	r3, r2
 8009168:	d902      	bls.n	8009170 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
          break;
 800916e:	e00c      	b.n	800918a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009188:	d0e7      	beq.n	800915a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
}
 800918c:	4618      	mov	r0, r3
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009198:	b480      	push	{r7}
 800919a:	b089      	sub	sp, #36	@ 0x24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4611      	mov	r1, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	460b      	mov	r3, r1
 80091a8:	71fb      	strb	r3, [r7, #7]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d123      	bne.n	8009206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091be:	88bb      	ldrh	r3, [r7, #4]
 80091c0:	3303      	adds	r3, #3
 80091c2:	089b      	lsrs	r3, r3, #2
 80091c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e018      	b.n	80091fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	031a      	lsls	r2, r3, #12
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091d8:	461a      	mov	r2, r3
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	3301      	adds	r3, #1
 80091e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	3301      	adds	r3, #1
 80091ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	3301      	adds	r3, #1
 80091f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3301      	adds	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	3301      	adds	r3, #1
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	429a      	cmp	r2, r3
 8009204:	d3e2      	bcc.n	80091cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3724      	adds	r7, #36	@ 0x24
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009214:	b480      	push	{r7}
 8009216:	b08b      	sub	sp, #44	@ 0x2c
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	089b      	lsrs	r3, r3, #2
 800922e:	b29b      	uxth	r3, r3
 8009230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800923a:	2300      	movs	r3, #0
 800923c:	623b      	str	r3, [r7, #32]
 800923e:	e014      	b.n	800926a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	601a      	str	r2, [r3, #0]
    pDest++;
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	3301      	adds	r3, #1
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	3301      	adds	r3, #1
 8009256:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	3301      	adds	r3, #1
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	3301      	adds	r3, #1
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	3301      	adds	r3, #1
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	429a      	cmp	r2, r3
 8009270:	d3e6      	bcc.n	8009240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009272:	8bfb      	ldrh	r3, [r7, #30]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01e      	beq.n	80092b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009282:	461a      	mov	r2, r3
 8009284:	f107 0310 	add.w	r3, r7, #16
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	fa22 f303 	lsr.w	r3, r2, r3
 8009298:	b2da      	uxtb	r2, r3
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	701a      	strb	r2, [r3, #0]
      i++;
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	3301      	adds	r3, #1
 80092a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	3301      	adds	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80092aa:	8bfb      	ldrh	r3, [r7, #30]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092b0:	8bfb      	ldrh	r3, [r7, #30]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1ea      	bne.n	800928c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	372c      	adds	r7, #44	@ 0x2c
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	785b      	ldrb	r3, [r3, #1]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d12c      	bne.n	800933a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	db12      	blt.n	8009318 <USB_EPSetStall+0x54>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009312:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009316:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	440a      	add	r2, r1
 800932e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009332:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e02b      	b.n	8009392 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db12      	blt.n	8009372 <USB_EPSetStall+0xae>
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00f      	beq.n	8009372 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	440a      	add	r2, r1
 8009368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800936c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009370:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	440a      	add	r2, r1
 8009388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800938c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d128      	bne.n	800940e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80093da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	791b      	ldrb	r3, [r3, #4]
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d003      	beq.n	80093ec <USB_EPClearStall+0x4c>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	791b      	ldrb	r3, [r3, #4]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d138      	bne.n	800945e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	e027      	b.n	800945e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009428:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800942c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	2b03      	cmp	r3, #3
 8009434:	d003      	beq.n	800943e <USB_EPClearStall+0x9e>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	791b      	ldrb	r3, [r3, #4]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d10f      	bne.n	800945e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	0151      	lsls	r1, r2, #5
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	440a      	add	r2, r1
 8009454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800945c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800948a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800948e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094a6:	4313      	orrs	r3, r2
 80094a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094e6:	f023 0302 	bic.w	r3, r3, #2
 80094ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009514:	f023 0303 	bic.w	r3, r3, #3
 8009518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4013      	ands	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009554:	68fb      	ldr	r3, [r7, #12]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	4013      	ands	r3, r2
 8009584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	0c1b      	lsrs	r3, r3, #16
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	4013      	ands	r3, r2
 80095b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	b29b      	uxth	r3, r3
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4013      	ands	r3, r2
 80095f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095f8:	68bb      	ldr	r3, [r7, #8]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009628:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	f003 030f 	and.w	r3, r3, #15
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	fa22 f303 	lsr.w	r3, r2, r3
 8009636:	01db      	lsls	r3, r3, #7
 8009638:	b2db      	uxtb	r3, r3
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4013      	ands	r3, r2
 8009652:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009654:	68bb      	ldr	r3, [r7, #8]
}
 8009656:	4618      	mov	r0, r3
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	f003 0301 	and.w	r3, r3, #1
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009698:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800969c:	f023 0307 	bic.w	r3, r3, #7
 80096a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	460b      	mov	r3, r1
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	333c      	adds	r3, #60	@ 0x3c
 80096da:	3304      	adds	r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	4a26      	ldr	r2, [pc, #152]	@ (800977c <USB_EP0_OutStart+0xb8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d90a      	bls.n	80096fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096f8:	d101      	bne.n	80096fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	e037      	b.n	800976e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009704:	461a      	mov	r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009718:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800971c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800972c:	f043 0318 	orr.w	r3, r3, #24
 8009730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009740:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009744:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d10f      	bne.n	800976c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009766:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800976a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	4f54300a 	.word	0x4f54300a

08009780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a13      	ldr	r2, [pc, #76]	@ (80097e4 <USB_CoreReset+0x64>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d901      	bls.n	800979e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e01b      	b.n	80097d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	daf2      	bge.n	800978c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f043 0201 	orr.w	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a09      	ldr	r2, [pc, #36]	@ (80097e4 <USB_CoreReset+0x64>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d901      	bls.n	80097c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e006      	b.n	80097d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d0f0      	beq.n	80097b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	00030d40 	.word	0x00030d40

080097e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80097f8:	f002 ff04 	bl	800c604 <USBD_static_malloc>
 80097fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	32b0      	adds	r2, #176	@ 0xb0
 800980e:	2100      	movs	r1, #0
 8009810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009814:	2302      	movs	r3, #2
 8009816:	e0d4      	b.n	80099c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009818:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800981c:	2100      	movs	r1, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f003 fe7a 	bl	800d518 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	32b0      	adds	r2, #176	@ 0xb0
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32b0      	adds	r2, #176	@ 0xb0
 800983e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c1b      	ldrb	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d138      	bne.n	80098c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009850:	4b5e      	ldr	r3, [pc, #376]	@ (80099cc <USBD_CDC_Init+0x1e4>)
 8009852:	7819      	ldrb	r1, [r3, #0]
 8009854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009858:	2202      	movs	r2, #2
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f002 fdaf 	bl	800c3be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009860:	4b5a      	ldr	r3, [pc, #360]	@ (80099cc <USBD_CDC_Init+0x1e4>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	3324      	adds	r3, #36	@ 0x24
 8009876:	2201      	movs	r2, #1
 8009878:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800987a:	4b55      	ldr	r3, [pc, #340]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 800987c:	7819      	ldrb	r1, [r3, #0]
 800987e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009882:	2202      	movs	r2, #2
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f002 fd9a 	bl	800c3be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800988a:	4b51      	ldr	r3, [pc, #324]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 020f 	and.w	r2, r3, #15
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098a2:	2201      	movs	r2, #1
 80098a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098a6:	4b4b      	ldr	r3, [pc, #300]	@ (80099d4 <USBD_CDC_Init+0x1ec>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	f003 020f 	and.w	r2, r3, #15
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	3326      	adds	r3, #38	@ 0x26
 80098bc:	2210      	movs	r2, #16
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	e035      	b.n	800992e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098c2:	4b42      	ldr	r3, [pc, #264]	@ (80099cc <USBD_CDC_Init+0x1e4>)
 80098c4:	7819      	ldrb	r1, [r3, #0]
 80098c6:	2340      	movs	r3, #64	@ 0x40
 80098c8:	2202      	movs	r2, #2
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f002 fd77 	bl	800c3be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098d0:	4b3e      	ldr	r3, [pc, #248]	@ (80099cc <USBD_CDC_Init+0x1e4>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f003 020f 	and.w	r2, r3, #15
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	440b      	add	r3, r1
 80098e4:	3324      	adds	r3, #36	@ 0x24
 80098e6:	2201      	movs	r2, #1
 80098e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098ea:	4b39      	ldr	r3, [pc, #228]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 80098ec:	7819      	ldrb	r1, [r3, #0]
 80098ee:	2340      	movs	r3, #64	@ 0x40
 80098f0:	2202      	movs	r2, #2
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f002 fd63 	bl	800c3be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098f8:	4b35      	ldr	r3, [pc, #212]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 020f 	and.w	r2, r3, #15
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009910:	2201      	movs	r2, #1
 8009912:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009914:	4b2f      	ldr	r3, [pc, #188]	@ (80099d4 <USBD_CDC_Init+0x1ec>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 020f 	and.w	r2, r3, #15
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3326      	adds	r3, #38	@ 0x26
 800992a:	2210      	movs	r2, #16
 800992c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800992e:	4b29      	ldr	r3, [pc, #164]	@ (80099d4 <USBD_CDC_Init+0x1ec>)
 8009930:	7819      	ldrb	r1, [r3, #0]
 8009932:	2308      	movs	r3, #8
 8009934:	2203      	movs	r2, #3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f002 fd41 	bl	800c3be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800993c:	4b25      	ldr	r3, [pc, #148]	@ (80099d4 <USBD_CDC_Init+0x1ec>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	3324      	adds	r3, #36	@ 0x24
 8009952:	2201      	movs	r2, #1
 8009954:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	33b0      	adds	r3, #176	@ 0xb0
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800998c:	2302      	movs	r3, #2
 800998e:	e018      	b.n	80099c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	7c1b      	ldrb	r3, [r3, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009998:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 800999a:	7819      	ldrb	r1, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f002 fdf8 	bl	800c59c <USBD_LL_PrepareReceive>
 80099ac:	e008      	b.n	80099c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099ae:	4b08      	ldr	r3, [pc, #32]	@ (80099d0 <USBD_CDC_Init+0x1e8>)
 80099b0:	7819      	ldrb	r1, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099b8:	2340      	movs	r3, #64	@ 0x40
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f002 fdee 	bl	800c59c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000557 	.word	0x20000557
 80099d0:	20000558 	.word	0x20000558
 80099d4:	20000559 	.word	0x20000559

080099d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80099e4:	4b3a      	ldr	r3, [pc, #232]	@ (8009ad0 <USBD_CDC_DeInit+0xf8>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 fd0d 	bl	800c40a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80099f0:	4b37      	ldr	r3, [pc, #220]	@ (8009ad0 <USBD_CDC_DeInit+0xf8>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 020f 	and.w	r2, r3, #15
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	3324      	adds	r3, #36	@ 0x24
 8009a06:	2200      	movs	r2, #0
 8009a08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a0a:	4b32      	ldr	r3, [pc, #200]	@ (8009ad4 <USBD_CDC_DeInit+0xfc>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 fcfa 	bl	800c40a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a16:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad4 <USBD_CDC_DeInit+0xfc>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	f003 020f 	and.w	r2, r3, #15
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a2e:	2200      	movs	r2, #0
 8009a30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009a32:	4b29      	ldr	r3, [pc, #164]	@ (8009ad8 <USBD_CDC_DeInit+0x100>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f002 fce6 	bl	800c40a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009a3e:	4b26      	ldr	r3, [pc, #152]	@ (8009ad8 <USBD_CDC_DeInit+0x100>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 020f 	and.w	r2, r3, #15
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	3324      	adds	r3, #36	@ 0x24
 8009a54:	2200      	movs	r2, #0
 8009a56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009a58:	4b1f      	ldr	r3, [pc, #124]	@ (8009ad8 <USBD_CDC_DeInit+0x100>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 020f 	and.w	r2, r3, #15
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	3326      	adds	r3, #38	@ 0x26
 8009a6e:	2200      	movs	r2, #0
 8009a70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	32b0      	adds	r2, #176	@ 0xb0
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01f      	beq.n	8009ac4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	33b0      	adds	r3, #176	@ 0xb0
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	32b0      	adds	r2, #176	@ 0xb0
 8009aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 fdba 	bl	800c620 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32b0      	adds	r2, #176	@ 0xb0
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000557 	.word	0x20000557
 8009ad4:	20000558 	.word	0x20000558
 8009ad8:	20000559 	.word	0x20000559

08009adc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	32b0      	adds	r2, #176	@ 0xb0
 8009af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e0bf      	b.n	8009c8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d050      	beq.n	8009bba <USBD_CDC_Setup+0xde>
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	f040 80af 	bne.w	8009c7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d03a      	beq.n	8009b9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b25b      	sxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da1b      	bge.n	8009b68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	33b0      	adds	r3, #176	@ 0xb0
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009b46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	88d2      	ldrh	r2, [r2, #6]
 8009b4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	88db      	ldrh	r3, [r3, #6]
 8009b52:	2b07      	cmp	r3, #7
 8009b54:	bf28      	it	cs
 8009b56:	2307      	movcs	r3, #7
 8009b58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	89fa      	ldrh	r2, [r7, #14]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fd41 	bl	800b5e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009b66:	e090      	b.n	8009c8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	785a      	ldrb	r2, [r3, #1]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b78:	d803      	bhi.n	8009b82 <USBD_CDC_Setup+0xa6>
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	88db      	ldrh	r3, [r3, #6]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	e000      	b.n	8009b84 <USBD_CDC_Setup+0xa8>
 8009b82:	2240      	movs	r2, #64	@ 0x40
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009b8a:	6939      	ldr	r1, [r7, #16]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009b92:	461a      	mov	r2, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fd53 	bl	800b640 <USBD_CtlPrepareRx>
      break;
 8009b9a:	e076      	b.n	8009c8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	33b0      	adds	r3, #176	@ 0xb0
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	7850      	ldrb	r0, [r2, #1]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	4798      	blx	r3
      break;
 8009bb8:	e067      	b.n	8009c8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b0b      	cmp	r3, #11
 8009bc0:	d851      	bhi.n	8009c66 <USBD_CDC_Setup+0x18a>
 8009bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <USBD_CDC_Setup+0xec>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009c75 	.word	0x08009c75
 8009bd0:	08009c67 	.word	0x08009c67
 8009bd4:	08009c67 	.word	0x08009c67
 8009bd8:	08009c67 	.word	0x08009c67
 8009bdc:	08009c67 	.word	0x08009c67
 8009be0:	08009c67 	.word	0x08009c67
 8009be4:	08009c67 	.word	0x08009c67
 8009be8:	08009c67 	.word	0x08009c67
 8009bec:	08009c67 	.word	0x08009c67
 8009bf0:	08009c23 	.word	0x08009c23
 8009bf4:	08009c4d 	.word	0x08009c4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d107      	bne.n	8009c14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c04:	f107 030a 	add.w	r3, r7, #10
 8009c08:	2202      	movs	r2, #2
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 fceb 	bl	800b5e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c12:	e032      	b.n	8009c7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fc75 	bl	800b506 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	75fb      	strb	r3, [r7, #23]
          break;
 8009c20:	e02b      	b.n	8009c7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d107      	bne.n	8009c3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c2e:	f107 030d 	add.w	r3, r7, #13
 8009c32:	2201      	movs	r2, #1
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fcd6 	bl	800b5e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c3c:	e01d      	b.n	8009c7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 fc60 	bl	800b506 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c46:	2303      	movs	r3, #3
 8009c48:	75fb      	strb	r3, [r7, #23]
          break;
 8009c4a:	e016      	b.n	8009c7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d00f      	beq.n	8009c78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 fc53 	bl	800b506 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c64:	e008      	b.n	8009c78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 fc4c 	bl	800b506 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	75fb      	strb	r3, [r7, #23]
          break;
 8009c72:	e002      	b.n	8009c7a <USBD_CDC_Setup+0x19e>
          break;
 8009c74:	bf00      	nop
 8009c76:	e008      	b.n	8009c8a <USBD_CDC_Setup+0x1ae>
          break;
 8009c78:	bf00      	nop
      }
      break;
 8009c7a:	e006      	b.n	8009c8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 fc41 	bl	800b506 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c84:	2303      	movs	r3, #3
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ca6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	32b0      	adds	r2, #176	@ 0xb0
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e065      	b.n	8009d8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	32b0      	adds	r2, #176	@ 0xb0
 8009cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ccc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	f003 020f 	and.w	r2, r3, #15
 8009cd4:	6879      	ldr	r1, [r7, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	440b      	add	r3, r1
 8009ce0:	3318      	adds	r3, #24
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02f      	beq.n	8009d48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	f003 020f 	and.w	r2, r3, #15
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	3318      	adds	r3, #24
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	f003 010f 	and.w	r1, r3, #15
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	460b      	mov	r3, r1
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	440b      	add	r3, r1
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4403      	add	r3, r0
 8009d10:	3348      	adds	r3, #72	@ 0x48
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d112      	bne.n	8009d48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 020f 	and.w	r2, r3, #15
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	3318      	adds	r3, #24
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d3a:	78f9      	ldrb	r1, [r7, #3]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2200      	movs	r2, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f002 fc0a 	bl	800c55a <USBD_LL_Transmit>
 8009d46:	e01f      	b.n	8009d88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	33b0      	adds	r3, #176	@ 0xb0
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d010      	beq.n	8009d88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	33b0      	adds	r3, #176	@ 0xb0
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	32b0      	adds	r2, #176	@ 0xb0
 8009da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	32b0      	adds	r2, #176	@ 0xb0
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e01a      	b.n	8009dfa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dc4:	78fb      	ldrb	r3, [r7, #3]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f002 fc08 	bl	800c5de <USBD_LL_GetRxDataSize>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	33b0      	adds	r3, #176	@ 0xb0
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009df4:	4611      	mov	r1, r2
 8009df6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	32b0      	adds	r2, #176	@ 0xb0
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e024      	b.n	8009e6e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	33b0      	adds	r3, #176	@ 0xb0
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d019      	beq.n	8009e6c <USBD_CDC_EP0_RxReady+0x6a>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009e3e:	2bff      	cmp	r3, #255	@ 0xff
 8009e40:	d014      	beq.n	8009e6c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	33b0      	adds	r3, #176	@ 0xb0
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009e5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	22ff      	movs	r2, #255	@ 0xff
 8009e68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e80:	2182      	movs	r1, #130	@ 0x82
 8009e82:	4818      	ldr	r0, [pc, #96]	@ (8009ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e84:	f000 fd09 	bl	800a89a <USBD_GetEpDesc>
 8009e88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	4815      	ldr	r0, [pc, #84]	@ (8009ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e8e:	f000 fd04 	bl	800a89a <USBD_GetEpDesc>
 8009e92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e94:	2181      	movs	r1, #129	@ 0x81
 8009e96:	4813      	ldr	r0, [pc, #76]	@ (8009ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e98:	f000 fcff 	bl	800a89a <USBD_GetEpDesc>
 8009e9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d006      	beq.n	8009ebe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009eb8:	711a      	strb	r2, [r3, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d006      	beq.n	8009ed2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ecc:	711a      	strb	r2, [r3, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2243      	movs	r2, #67	@ 0x43
 8009ed6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ed8:	4b02      	ldr	r3, [pc, #8]	@ (8009ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000514 	.word	0x20000514

08009ee8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ef0:	2182      	movs	r1, #130	@ 0x82
 8009ef2:	4818      	ldr	r0, [pc, #96]	@ (8009f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ef4:	f000 fcd1 	bl	800a89a <USBD_GetEpDesc>
 8009ef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009efa:	2101      	movs	r1, #1
 8009efc:	4815      	ldr	r0, [pc, #84]	@ (8009f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009efe:	f000 fccc 	bl	800a89a <USBD_GetEpDesc>
 8009f02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f04:	2181      	movs	r1, #129	@ 0x81
 8009f06:	4813      	ldr	r0, [pc, #76]	@ (8009f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f08:	f000 fcc7 	bl	800a89a <USBD_GetEpDesc>
 8009f0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2210      	movs	r2, #16
 8009f18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2200      	movs	r2, #0
 8009f24:	711a      	strb	r2, [r3, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f042 0202 	orr.w	r2, r2, #2
 8009f2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	711a      	strb	r2, [r3, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f042 0202 	orr.w	r2, r2, #2
 8009f40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2243      	movs	r2, #67	@ 0x43
 8009f46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f48:	4b02      	ldr	r3, [pc, #8]	@ (8009f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000514 	.word	0x20000514

08009f58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f60:	2182      	movs	r1, #130	@ 0x82
 8009f62:	4818      	ldr	r0, [pc, #96]	@ (8009fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f64:	f000 fc99 	bl	800a89a <USBD_GetEpDesc>
 8009f68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4815      	ldr	r0, [pc, #84]	@ (8009fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f6e:	f000 fc94 	bl	800a89a <USBD_GetEpDesc>
 8009f72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f74:	2181      	movs	r1, #129	@ 0x81
 8009f76:	4813      	ldr	r0, [pc, #76]	@ (8009fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f78:	f000 fc8f 	bl	800a89a <USBD_GetEpDesc>
 8009f7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2210      	movs	r2, #16
 8009f88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f98:	711a      	strb	r2, [r3, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fac:	711a      	strb	r2, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2243      	movs	r2, #67	@ 0x43
 8009fb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fb8:	4b02      	ldr	r3, [pc, #8]	@ (8009fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000514 	.word	0x20000514

08009fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	220a      	movs	r2, #10
 8009fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009fd6:	4b03      	ldr	r3, [pc, #12]	@ (8009fe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	200004d0 	.word	0x200004d0

08009fe8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e009      	b.n	800a010 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	33b0      	adds	r3, #176	@ 0xb0
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	32b0      	adds	r2, #176	@ 0xb0
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a03e:	2303      	movs	r3, #3
 800a040:	e008      	b.n	800a054 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	32b0      	adds	r2, #176	@ 0xb0
 800a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a078:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e004      	b.n	800a08e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
	...

0800a09c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32b0      	adds	r2, #176	@ 0xb0
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	32b0      	adds	r2, #176	@ 0xb0
 800a0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e018      	b.n	800a0fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7c1b      	ldrb	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10a      	bne.n	800a0e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a104 <USBD_CDC_ReceivePacket+0x68>)
 800a0d4:	7819      	ldrb	r1, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f002 fa5b 	bl	800c59c <USBD_LL_PrepareReceive>
 800a0e6:	e008      	b.n	800a0fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0e8:	4b06      	ldr	r3, [pc, #24]	@ (800a104 <USBD_CDC_ReceivePacket+0x68>)
 800a0ea:	7819      	ldrb	r1, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0f2:	2340      	movs	r3, #64	@ 0x40
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 fa51 	bl	800c59c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20000558 	.word	0x20000558

0800a108 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e01f      	b.n	800a160 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	79fa      	ldrb	r2, [r7, #7]
 800a152:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f002 f8cb 	bl	800c2f0 <USBD_LL_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e025      	b.n	800a1cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	32ae      	adds	r2, #174	@ 0xae
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00f      	beq.n	800a1bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	32ae      	adds	r2, #174	@ 0xae
 800a1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ac:	f107 020e 	add.w	r2, r7, #14
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f002 f8d3 	bl	800c388 <USBD_LL_Start>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4611      	mov	r1, r2
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
 800a22c:	4603      	mov	r3, r0
 800a22e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a230:	7bfb      	ldrb	r3, [r7, #15]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	4611      	mov	r1, r2
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a260:	2303      	movs	r3, #3
 800a262:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f001 f906 	bl	800b492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a294:	461a      	mov	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a2a2:	f003 031f 	and.w	r3, r3, #31
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d01a      	beq.n	800a2e0 <USBD_LL_SetupStage+0x72>
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d822      	bhi.n	800a2f4 <USBD_LL_SetupStage+0x86>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <USBD_LL_SetupStage+0x4a>
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d00a      	beq.n	800a2cc <USBD_LL_SetupStage+0x5e>
 800a2b6:	e01d      	b.n	800a2f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fb5d 	bl	800a980 <USBD_StdDevReq>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ca:	e020      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fbc5 	bl	800aa64 <USBD_StdItfReq>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2de:	e016      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fc27 	bl	800ab3c <USBD_StdEPReq>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f2:	e00c      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a2fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f002 f8a0 	bl	800c448 <USBD_LL_StallEP>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]
      break;
 800a30c:	bf00      	nop
  }

  return ret;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	460b      	mov	r3, r1
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a32a:	7afb      	ldrb	r3, [r7, #11]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d16e      	bne.n	800a40e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f040 8098 	bne.w	800a474 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d913      	bls.n	800a378 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	4293      	cmp	r3, r2
 800a368:	bf28      	it	cs
 800a36a:	4613      	movcs	r3, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f001 f982 	bl	800b67a <USBD_CtlContinueRx>
 800a376:	e07d      	b.n	800a474 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2b02      	cmp	r3, #2
 800a384:	d014      	beq.n	800a3b0 <USBD_LL_DataOutStage+0x98>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d81d      	bhi.n	800a3c6 <USBD_LL_DataOutStage+0xae>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <USBD_LL_DataOutStage+0x7c>
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d003      	beq.n	800a39a <USBD_LL_DataOutStage+0x82>
 800a392:	e018      	b.n	800a3c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	75bb      	strb	r3, [r7, #22]
            break;
 800a398:	e018      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fa5e 	bl	800a866 <USBD_CoreFindIF>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75bb      	strb	r3, [r7, #22]
            break;
 800a3ae:	e00d      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 fa60 	bl	800a880 <USBD_CoreFindEP>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a3c4:	e002      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75bb      	strb	r3, [r7, #22]
            break;
 800a3ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a3cc:	7dbb      	ldrb	r3, [r7, #22]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d119      	bne.n	800a406 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d113      	bne.n	800a406 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a3de:	7dba      	ldrb	r2, [r7, #22]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	32ae      	adds	r2, #174	@ 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a3ee:	7dba      	ldrb	r2, [r7, #22]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a3f6:	7dba      	ldrb	r2, [r7, #22]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	32ae      	adds	r2, #174	@ 0xae
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f001 f948 	bl	800b69c <USBD_CtlSendStatus>
 800a40c:	e032      	b.n	800a474 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 fa31 	bl	800a880 <USBD_CoreFindEP>
 800a41e:	4603      	mov	r3, r0
 800a420:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a422:	7dbb      	ldrb	r3, [r7, #22]
 800a424:	2bff      	cmp	r3, #255	@ 0xff
 800a426:	d025      	beq.n	800a474 <USBD_LL_DataOutStage+0x15c>
 800a428:	7dbb      	ldrb	r3, [r7, #22]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d122      	bne.n	800a474 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b03      	cmp	r3, #3
 800a438:	d117      	bne.n	800a46a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a43a:	7dba      	ldrb	r2, [r7, #22]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	32ae      	adds	r2, #174	@ 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00f      	beq.n	800a46a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a44a:	7dba      	ldrb	r2, [r7, #22]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a452:	7dba      	ldrb	r2, [r7, #22]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	32ae      	adds	r2, #174	@ 0xae
 800a458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	7afa      	ldrb	r2, [r7, #11]
 800a460:	4611      	mov	r1, r2
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	4798      	blx	r3
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	e000      	b.n	800a476 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	460b      	mov	r3, r1
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d16f      	bne.n	800a572 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3314      	adds	r3, #20
 800a496:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d15a      	bne.n	800a558 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d914      	bls.n	800a4d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f001 f8aa 	bl	800b61e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f002 f863 	bl	800c59c <USBD_LL_PrepareReceive>
 800a4d6:	e03f      	b.n	800a558 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d11c      	bne.n	800a51e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d316      	bcc.n	800a51e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20f      	bcs.n	800a51e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 f88b 	bl	800b61e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a510:	2300      	movs	r3, #0
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f002 f840 	bl	800c59c <USBD_LL_PrepareReceive>
 800a51c:	e01c      	b.n	800a558 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d10f      	bne.n	800a54a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54a:	2180      	movs	r1, #128	@ 0x80
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 ff7b 	bl	800c448 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f001 f8b5 	bl	800b6c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d03a      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff fe42 	bl	800a1ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a570:	e032      	b.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f97f 	bl	800a880 <USBD_CoreFindEP>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	2bff      	cmp	r3, #255	@ 0xff
 800a58a:	d025      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d122      	bne.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d11c      	bne.n	800a5d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a59e:	7dfa      	ldrb	r2, [r7, #23]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	32ae      	adds	r2, #174	@ 0xae
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a5ae:	7dfa      	ldrb	r2, [r7, #23]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a5b6:	7dfa      	ldrb	r2, [r7, #23]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	32ae      	adds	r2, #174	@ 0xae
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	7afa      	ldrb	r2, [r7, #11]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a5ce:	7dbb      	ldrb	r3, [r7, #22]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a5d4:	7dbb      	ldrb	r3, [r7, #22]
 800a5d6:	e000      	b.n	800a5da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d014      	beq.n	800a648 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6852      	ldr	r2, [r2, #4]
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	4611      	mov	r1, r2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a648:	2340      	movs	r3, #64	@ 0x40
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 feb5 	bl	800c3be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2240      	movs	r2, #64	@ 0x40
 800a660:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	2200      	movs	r2, #0
 800a668:	2180      	movs	r1, #128	@ 0x80
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fea7 	bl	800c3be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2240      	movs	r2, #64	@ 0x40
 800a67a:	621a      	str	r2, [r3, #32]

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d106      	bne.n	800a6f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d110      	bne.n	800a738 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	32ae      	adds	r2, #174	@ 0xae
 800a758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a760:	2303      	movs	r3, #3
 800a762:	e01c      	b.n	800a79e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d115      	bne.n	800a79c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	32ae      	adds	r2, #174	@ 0xae
 800a77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	32ae      	adds	r2, #174	@ 0xae
 800a78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	4611      	mov	r1, r2
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	32ae      	adds	r2, #174	@ 0xae
 800a7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e01c      	b.n	800a802 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d115      	bne.n	800a800 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32ae      	adds	r2, #174	@ 0xae
 800a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32ae      	adds	r2, #174	@ 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f8:	78fa      	ldrb	r2, [r7, #3]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00e      	beq.n	800a85c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6852      	ldr	r2, [r2, #4]
 800a84a:	b2d2      	uxtb	r2, r2
 800a84c:	4611      	mov	r1, r2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a858:	2303      	movs	r3, #3
 800a85a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a88c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b086      	sub	sp, #24
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	7812      	ldrb	r2, [r2, #0]
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d91f      	bls.n	800a900 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a8c6:	e013      	b.n	800a8f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a8c8:	f107 030a 	add.w	r3, r7, #10
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6978      	ldr	r0, [r7, #20]
 800a8d0:	f000 f81b 	bl	800a90a <USBD_GetNextDesc>
 800a8d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b05      	cmp	r3, #5
 800a8dc:	d108      	bne.n	800a8f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	789b      	ldrb	r3, [r3, #2]
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d008      	beq.n	800a8fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	885b      	ldrh	r3, [r3, #2]
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	897b      	ldrh	r3, [r7, #10]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d8e5      	bhi.n	800a8c8 <USBD_GetEpDesc+0x2e>
 800a8fc:	e000      	b.n	800a900 <USBD_GetEpDesc+0x66>
          break;
 800a8fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a900:	693b      	ldr	r3, [r7, #16]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	4413      	add	r3, r2
 800a922:	b29a      	uxth	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4413      	add	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a934:	68fb      	ldr	r3, [r7, #12]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a942:	b480      	push	{r7}
 800a944:	b087      	sub	sp, #28
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	3301      	adds	r3, #1
 800a958:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a960:	8a3b      	ldrh	r3, [r7, #16]
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	b21a      	sxth	r2, r3
 800a966:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b21b      	sxth	r3, r3
 800a96e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a970:	89fb      	ldrh	r3, [r7, #14]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
	...

0800a980 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a996:	2b40      	cmp	r3, #64	@ 0x40
 800a998:	d005      	beq.n	800a9a6 <USBD_StdDevReq+0x26>
 800a99a:	2b40      	cmp	r3, #64	@ 0x40
 800a99c:	d857      	bhi.n	800aa4e <USBD_StdDevReq+0xce>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00f      	beq.n	800a9c2 <USBD_StdDevReq+0x42>
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d153      	bne.n	800aa4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	32ae      	adds	r2, #174	@ 0xae
 800a9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c0:	e04a      	b.n	800aa58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d83b      	bhi.n	800aa42 <USBD_StdDevReq+0xc2>
 800a9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <USBD_StdDevReq+0x50>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800aa39 	.word	0x0800aa39
 800a9d8:	0800aa43 	.word	0x0800aa43
 800a9dc:	0800aa2f 	.word	0x0800aa2f
 800a9e0:	0800aa43 	.word	0x0800aa43
 800a9e4:	0800aa03 	.word	0x0800aa03
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800aa43 	.word	0x0800aa43
 800a9f0:	0800aa1b 	.word	0x0800aa1b
 800a9f4:	0800aa0d 	.word	0x0800aa0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa3c 	bl	800ae78 <USBD_GetDescriptor>
          break;
 800aa00:	e024      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fba1 	bl	800b14c <USBD_SetAddress>
          break;
 800aa0a:	e01f      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fbe0 	bl	800b1d4 <USBD_SetConfig>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
          break;
 800aa18:	e018      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc83 	bl	800b328 <USBD_GetConfig>
          break;
 800aa22:	e013      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fcb4 	bl	800b394 <USBD_GetStatus>
          break;
 800aa2c:	e00e      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fce3 	bl	800b3fc <USBD_SetFeature>
          break;
 800aa36:	e009      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fd07 	bl	800b44e <USBD_ClrFeature>
          break;
 800aa40:	e004      	b.n	800aa4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fd5e 	bl	800b506 <USBD_CtlError>
          break;
 800aa4a:	bf00      	nop
      }
      break;
 800aa4c:	e004      	b.n	800aa58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fd58 	bl	800b506 <USBD_CtlError>
      break;
 800aa56:	bf00      	nop
  }

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop

0800aa64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa7a:	2b40      	cmp	r3, #64	@ 0x40
 800aa7c:	d005      	beq.n	800aa8a <USBD_StdItfReq+0x26>
 800aa7e:	2b40      	cmp	r3, #64	@ 0x40
 800aa80:	d852      	bhi.n	800ab28 <USBD_StdItfReq+0xc4>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <USBD_StdItfReq+0x26>
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	d14e      	bne.n	800ab28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d840      	bhi.n	800ab1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	889b      	ldrh	r3, [r3, #4]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d836      	bhi.n	800ab10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	889b      	ldrh	r3, [r3, #4]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff fedb 	bl	800a866 <USBD_CoreFindIF>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
 800aab6:	2bff      	cmp	r3, #255	@ 0xff
 800aab8:	d01d      	beq.n	800aaf6 <USBD_StdItfReq+0x92>
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11a      	bne.n	800aaf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aac0:	7bba      	ldrb	r2, [r7, #14]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	32ae      	adds	r2, #174	@ 0xae
 800aac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00f      	beq.n	800aaf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aad0:	7bba      	ldrb	r2, [r7, #14]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aad8:	7bba      	ldrb	r2, [r7, #14]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	32ae      	adds	r2, #174	@ 0xae
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaee:	e004      	b.n	800aafa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaf4:	e001      	b.n	800aafa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	88db      	ldrh	r3, [r3, #6]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d110      	bne.n	800ab24 <USBD_StdItfReq+0xc0>
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10d      	bne.n	800ab24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fdc7 	bl	800b69c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab0e:	e009      	b.n	800ab24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fcf7 	bl	800b506 <USBD_CtlError>
          break;
 800ab18:	e004      	b.n	800ab24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fcf2 	bl	800b506 <USBD_CtlError>
          break;
 800ab22:	e000      	b.n	800ab26 <USBD_StdItfReq+0xc2>
          break;
 800ab24:	bf00      	nop
      }
      break;
 800ab26:	e004      	b.n	800ab32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fceb 	bl	800b506 <USBD_CtlError>
      break;
 800ab30:	bf00      	nop
  }

  return ret;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	889b      	ldrh	r3, [r3, #4]
 800ab4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab58:	2b40      	cmp	r3, #64	@ 0x40
 800ab5a:	d007      	beq.n	800ab6c <USBD_StdEPReq+0x30>
 800ab5c:	2b40      	cmp	r3, #64	@ 0x40
 800ab5e:	f200 817f 	bhi.w	800ae60 <USBD_StdEPReq+0x324>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d02a      	beq.n	800abbc <USBD_StdEPReq+0x80>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	f040 817a 	bne.w	800ae60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab6c:	7bbb      	ldrb	r3, [r7, #14]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7ff fe85 	bl	800a880 <USBD_CoreFindEP>
 800ab76:	4603      	mov	r3, r0
 800ab78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab7a:	7b7b      	ldrb	r3, [r7, #13]
 800ab7c:	2bff      	cmp	r3, #255	@ 0xff
 800ab7e:	f000 8174 	beq.w	800ae6a <USBD_StdEPReq+0x32e>
 800ab82:	7b7b      	ldrb	r3, [r7, #13]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f040 8170 	bne.w	800ae6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab8a:	7b7a      	ldrb	r2, [r7, #13]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab92:	7b7a      	ldrb	r2, [r7, #13]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	32ae      	adds	r2, #174	@ 0xae
 800ab98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8163 	beq.w	800ae6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aba4:	7b7a      	ldrb	r2, [r7, #13]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	32ae      	adds	r2, #174	@ 0xae
 800abaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800abba:	e156      	b.n	800ae6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d008      	beq.n	800abd6 <USBD_StdEPReq+0x9a>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	f300 8145 	bgt.w	800ae54 <USBD_StdEPReq+0x318>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 809b 	beq.w	800ad06 <USBD_StdEPReq+0x1ca>
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d03c      	beq.n	800ac4e <USBD_StdEPReq+0x112>
 800abd4:	e13e      	b.n	800ae54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d002      	beq.n	800abe8 <USBD_StdEPReq+0xac>
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d016      	beq.n	800ac14 <USBD_StdEPReq+0xd8>
 800abe6:	e02c      	b.n	800ac42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00d      	beq.n	800ac0a <USBD_StdEPReq+0xce>
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b80      	cmp	r3, #128	@ 0x80
 800abf2:	d00a      	beq.n	800ac0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 fc25 	bl	800c448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abfe:	2180      	movs	r1, #128	@ 0x80
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fc21 	bl	800c448 <USBD_LL_StallEP>
 800ac06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac08:	e020      	b.n	800ac4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fc7a 	bl	800b506 <USBD_CtlError>
              break;
 800ac12:	e01b      	b.n	800ac4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	885b      	ldrh	r3, [r3, #2]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10e      	bne.n	800ac3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <USBD_StdEPReq+0xfe>
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b80      	cmp	r3, #128	@ 0x80
 800ac26:	d008      	beq.n	800ac3a <USBD_StdEPReq+0xfe>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	88db      	ldrh	r3, [r3, #6]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d104      	bne.n	800ac3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 fc07 	bl	800c448 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fd2e 	bl	800b69c <USBD_CtlSendStatus>

              break;
 800ac40:	e004      	b.n	800ac4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fc5e 	bl	800b506 <USBD_CtlError>
              break;
 800ac4a:	bf00      	nop
          }
          break;
 800ac4c:	e107      	b.n	800ae5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d002      	beq.n	800ac60 <USBD_StdEPReq+0x124>
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d016      	beq.n	800ac8c <USBD_StdEPReq+0x150>
 800ac5e:	e04b      	b.n	800acf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00d      	beq.n	800ac82 <USBD_StdEPReq+0x146>
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b80      	cmp	r3, #128	@ 0x80
 800ac6a:	d00a      	beq.n	800ac82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 fbe9 	bl	800c448 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac76:	2180      	movs	r1, #128	@ 0x80
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 fbe5 	bl	800c448 <USBD_LL_StallEP>
 800ac7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac80:	e040      	b.n	800ad04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc3e 	bl	800b506 <USBD_CtlError>
              break;
 800ac8a:	e03b      	b.n	800ad04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	885b      	ldrh	r3, [r3, #2]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d136      	bne.n	800ad02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d004      	beq.n	800aca8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fbef 	bl	800c486 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fcf7 	bl	800b69c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fde4 	bl	800a880 <USBD_CoreFindEP>
 800acb8:	4603      	mov	r3, r0
 800acba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acbc:	7b7b      	ldrb	r3, [r7, #13]
 800acbe:	2bff      	cmp	r3, #255	@ 0xff
 800acc0:	d01f      	beq.n	800ad02 <USBD_StdEPReq+0x1c6>
 800acc2:	7b7b      	ldrb	r3, [r7, #13]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d11c      	bne.n	800ad02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800acc8:	7b7a      	ldrb	r2, [r7, #13]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800acd0:	7b7a      	ldrb	r2, [r7, #13]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32ae      	adds	r2, #174	@ 0xae
 800acd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d010      	beq.n	800ad02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace0:	7b7a      	ldrb	r2, [r7, #13]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	32ae      	adds	r2, #174	@ 0xae
 800ace6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
 800acf2:	4603      	mov	r3, r0
 800acf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800acf6:	e004      	b.n	800ad02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fc03 	bl	800b506 <USBD_CtlError>
              break;
 800ad00:	e000      	b.n	800ad04 <USBD_StdEPReq+0x1c8>
              break;
 800ad02:	bf00      	nop
          }
          break;
 800ad04:	e0ab      	b.n	800ae5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d002      	beq.n	800ad18 <USBD_StdEPReq+0x1dc>
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d032      	beq.n	800ad7c <USBD_StdEPReq+0x240>
 800ad16:	e097      	b.n	800ae48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d007      	beq.n	800ad2e <USBD_StdEPReq+0x1f2>
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	2b80      	cmp	r3, #128	@ 0x80
 800ad22:	d004      	beq.n	800ad2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fbed 	bl	800b506 <USBD_CtlError>
                break;
 800ad2c:	e091      	b.n	800ae52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	da0b      	bge.n	800ad4e <USBD_StdEPReq+0x212>
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
 800ad38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	3310      	adds	r3, #16
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	4413      	add	r3, r2
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	e00b      	b.n	800ad66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	3304      	adds	r3, #4
 800ad66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2202      	movs	r2, #2
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fc37 	bl	800b5e8 <USBD_CtlSendData>
              break;
 800ad7a:	e06a      	b.n	800ae52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da11      	bge.n	800ada8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 020f 	and.w	r2, r3, #15
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	3324      	adds	r3, #36	@ 0x24
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d117      	bne.n	800adce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fbb0 	bl	800b506 <USBD_CtlError>
                  break;
 800ada6:	e054      	b.n	800ae52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	440b      	add	r3, r1
 800adba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fb9d 	bl	800b506 <USBD_CtlError>
                  break;
 800adcc:	e041      	b.n	800ae52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da0b      	bge.n	800adee <USBD_StdEPReq+0x2b2>
 800add6:	7bbb      	ldrb	r3, [r7, #14]
 800add8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	3310      	adds	r3, #16
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	3304      	adds	r3, #4
 800adec:	e00b      	b.n	800ae06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	4413      	add	r3, r2
 800ae04:	3304      	adds	r3, #4
 800ae06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <USBD_StdEPReq+0x2d8>
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b80      	cmp	r3, #128	@ 0x80
 800ae12:	d103      	bne.n	800ae1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	e00e      	b.n	800ae3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fb4f 	bl	800c4c4 <USBD_LL_IsStallEP>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fbd1 	bl	800b5e8 <USBD_CtlSendData>
              break;
 800ae46:	e004      	b.n	800ae52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb5b 	bl	800b506 <USBD_CtlError>
              break;
 800ae50:	bf00      	nop
          }
          break;
 800ae52:	e004      	b.n	800ae5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fb55 	bl	800b506 <USBD_CtlError>
          break;
 800ae5c:	bf00      	nop
      }
      break;
 800ae5e:	e005      	b.n	800ae6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fb4f 	bl	800b506 <USBD_CtlError>
      break;
 800ae68:	e000      	b.n	800ae6c <USBD_StdEPReq+0x330>
      break;
 800ae6a:	bf00      	nop
  }

  return ret;
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	885b      	ldrh	r3, [r3, #2]
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	2b06      	cmp	r3, #6
 800ae9a:	f200 8128 	bhi.w	800b0ee <USBD_GetDescriptor+0x276>
 800ae9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <USBD_GetDescriptor+0x2c>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aec1 	.word	0x0800aec1
 800aea8:	0800aed9 	.word	0x0800aed9
 800aeac:	0800af19 	.word	0x0800af19
 800aeb0:	0800b0ef 	.word	0x0800b0ef
 800aeb4:	0800b0ef 	.word	0x0800b0ef
 800aeb8:	0800b08f 	.word	0x0800b08f
 800aebc:	0800b0bb 	.word	0x0800b0bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	7c12      	ldrb	r2, [r2, #16]
 800aecc:	f107 0108 	add.w	r1, r7, #8
 800aed0:	4610      	mov	r0, r2
 800aed2:	4798      	blx	r3
 800aed4:	60f8      	str	r0, [r7, #12]
      break;
 800aed6:	e112      	b.n	800b0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	7c1b      	ldrb	r3, [r3, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10d      	bne.n	800aefc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee8:	f107 0208 	add.w	r2, r7, #8
 800aeec:	4610      	mov	r0, r2
 800aeee:	4798      	blx	r3
 800aef0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	2202      	movs	r2, #2
 800aef8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aefa:	e100      	b.n	800b0fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af04:	f107 0208 	add.w	r2, r7, #8
 800af08:	4610      	mov	r0, r2
 800af0a:	4798      	blx	r3
 800af0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3301      	adds	r3, #1
 800af12:	2202      	movs	r2, #2
 800af14:	701a      	strb	r2, [r3, #0]
      break;
 800af16:	e0f2      	b.n	800b0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	885b      	ldrh	r3, [r3, #2]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b05      	cmp	r3, #5
 800af20:	f200 80ac 	bhi.w	800b07c <USBD_GetDescriptor+0x204>
 800af24:	a201      	add	r2, pc, #4	@ (adr r2, 800af2c <USBD_GetDescriptor+0xb4>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800af45 	.word	0x0800af45
 800af30:	0800af79 	.word	0x0800af79
 800af34:	0800afad 	.word	0x0800afad
 800af38:	0800afe1 	.word	0x0800afe1
 800af3c:	0800b015 	.word	0x0800b015
 800af40:	0800b049 	.word	0x0800b049
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00b      	beq.n	800af68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	7c12      	ldrb	r2, [r2, #16]
 800af5c:	f107 0108 	add.w	r1, r7, #8
 800af60:	4610      	mov	r0, r2
 800af62:	4798      	blx	r3
 800af64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af66:	e091      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 facb 	bl	800b506 <USBD_CtlError>
            err++;
 800af70:	7afb      	ldrb	r3, [r7, #11]
 800af72:	3301      	adds	r3, #1
 800af74:	72fb      	strb	r3, [r7, #11]
          break;
 800af76:	e089      	b.n	800b08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00b      	beq.n	800af9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	7c12      	ldrb	r2, [r2, #16]
 800af90:	f107 0108 	add.w	r1, r7, #8
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3
 800af98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af9a:	e077      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fab1 	bl	800b506 <USBD_CtlError>
            err++;
 800afa4:	7afb      	ldrb	r3, [r7, #11]
 800afa6:	3301      	adds	r3, #1
 800afa8:	72fb      	strb	r3, [r7, #11]
          break;
 800afaa:	e06f      	b.n	800b08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00b      	beq.n	800afd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	7c12      	ldrb	r2, [r2, #16]
 800afc4:	f107 0108 	add.w	r1, r7, #8
 800afc8:	4610      	mov	r0, r2
 800afca:	4798      	blx	r3
 800afcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afce:	e05d      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fa97 	bl	800b506 <USBD_CtlError>
            err++;
 800afd8:	7afb      	ldrb	r3, [r7, #11]
 800afda:	3301      	adds	r3, #1
 800afdc:	72fb      	strb	r3, [r7, #11]
          break;
 800afde:	e055      	b.n	800b08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	7c12      	ldrb	r2, [r2, #16]
 800aff8:	f107 0108 	add.w	r1, r7, #8
 800affc:	4610      	mov	r0, r2
 800affe:	4798      	blx	r3
 800b000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b002:	e043      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa7d 	bl	800b506 <USBD_CtlError>
            err++;
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	3301      	adds	r3, #1
 800b010:	72fb      	strb	r3, [r7, #11]
          break;
 800b012:	e03b      	b.n	800b08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	7c12      	ldrb	r2, [r2, #16]
 800b02c:	f107 0108 	add.w	r1, r7, #8
 800b030:	4610      	mov	r0, r2
 800b032:	4798      	blx	r3
 800b034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b036:	e029      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa63 	bl	800b506 <USBD_CtlError>
            err++;
 800b040:	7afb      	ldrb	r3, [r7, #11]
 800b042:	3301      	adds	r3, #1
 800b044:	72fb      	strb	r3, [r7, #11]
          break;
 800b046:	e021      	b.n	800b08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	7c12      	ldrb	r2, [r2, #16]
 800b060:	f107 0108 	add.w	r1, r7, #8
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b06a:	e00f      	b.n	800b08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa49 	bl	800b506 <USBD_CtlError>
            err++;
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	3301      	adds	r3, #1
 800b078:	72fb      	strb	r3, [r7, #11]
          break;
 800b07a:	e007      	b.n	800b08c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa41 	bl	800b506 <USBD_CtlError>
          err++;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	3301      	adds	r3, #1
 800b088:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b08a:	bf00      	nop
      }
      break;
 800b08c:	e037      	b.n	800b0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	7c1b      	ldrb	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d109      	bne.n	800b0aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b09e:	f107 0208 	add.w	r2, r7, #8
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
 800b0a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a8:	e029      	b.n	800b0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fa2a 	bl	800b506 <USBD_CtlError>
        err++;
 800b0b2:	7afb      	ldrb	r3, [r7, #11]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b8:	e021      	b.n	800b0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	7c1b      	ldrb	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10d      	bne.n	800b0de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ca:	f107 0208 	add.w	r2, r7, #8
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4798      	blx	r3
 800b0d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	2207      	movs	r2, #7
 800b0da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0dc:	e00f      	b.n	800b0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa10 	bl	800b506 <USBD_CtlError>
        err++;
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b0ec:	e007      	b.n	800b0fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fa08 	bl	800b506 <USBD_CtlError>
      err++;
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b0fc:	bf00      	nop
  }

  if (err != 0U)
 800b0fe:	7afb      	ldrb	r3, [r7, #11]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d11e      	bne.n	800b142 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	88db      	ldrh	r3, [r3, #6]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d016      	beq.n	800b13a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b10c:	893b      	ldrh	r3, [r7, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00e      	beq.n	800b130 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	88da      	ldrh	r2, [r3, #6]
 800b116:	893b      	ldrh	r3, [r7, #8]
 800b118:	4293      	cmp	r3, r2
 800b11a:	bf28      	it	cs
 800b11c:	4613      	movcs	r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b122:	893b      	ldrh	r3, [r7, #8]
 800b124:	461a      	mov	r2, r3
 800b126:	68f9      	ldr	r1, [r7, #12]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fa5d 	bl	800b5e8 <USBD_CtlSendData>
 800b12e:	e009      	b.n	800b144 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f9e7 	bl	800b506 <USBD_CtlError>
 800b138:	e004      	b.n	800b144 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 faae 	bl	800b69c <USBD_CtlSendStatus>
 800b140:	e000      	b.n	800b144 <USBD_GetDescriptor+0x2cc>
    return;
 800b142:	bf00      	nop
  }
}
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop

0800b14c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	889b      	ldrh	r3, [r3, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d131      	bne.n	800b1c2 <USBD_SetAddress+0x76>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	88db      	ldrh	r3, [r3, #6]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d12d      	bne.n	800b1c2 <USBD_SetAddress+0x76>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b16c:	d829      	bhi.n	800b1c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	885b      	ldrh	r3, [r3, #2]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b178:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b03      	cmp	r3, #3
 800b184:	d104      	bne.n	800b190 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f9bc 	bl	800b506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18e:	e01d      	b.n	800b1cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7bfa      	ldrb	r2, [r7, #15]
 800b194:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 f9bd 	bl	800c51c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa7a 	bl	800b69c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	e009      	b.n	800b1cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c0:	e004      	b.n	800b1cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f99e 	bl	800b506 <USBD_CtlError>
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	885b      	ldrh	r3, [r3, #2]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b324 <USBD_SetConfig+0x150>)
 800b1ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1ec:	4b4d      	ldr	r3, [pc, #308]	@ (800b324 <USBD_SetConfig+0x150>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d905      	bls.n	800b200 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f985 	bl	800b506 <USBD_CtlError>
    return USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e08c      	b.n	800b31a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d002      	beq.n	800b212 <USBD_SetConfig+0x3e>
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d029      	beq.n	800b264 <USBD_SetConfig+0x90>
 800b210:	e075      	b.n	800b2fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b212:	4b44      	ldr	r3, [pc, #272]	@ (800b324 <USBD_SetConfig+0x150>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d020      	beq.n	800b25c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b21a:	4b42      	ldr	r3, [pc, #264]	@ (800b324 <USBD_SetConfig+0x150>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b224:	4b3f      	ldr	r3, [pc, #252]	@ (800b324 <USBD_SetConfig+0x150>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7fe ffe9 	bl	800a202 <USBD_SetClassConfig>
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f962 	bl	800b506 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2202      	movs	r2, #2
 800b246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b24a:	e065      	b.n	800b318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fa25 	bl	800b69c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2203      	movs	r2, #3
 800b256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b25a:	e05d      	b.n	800b318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fa1d 	bl	800b69c <USBD_CtlSendStatus>
      break;
 800b262:	e059      	b.n	800b318 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b264:	4b2f      	ldr	r3, [pc, #188]	@ (800b324 <USBD_SetConfig+0x150>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d112      	bne.n	800b292 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b274:	4b2b      	ldr	r3, [pc, #172]	@ (800b324 <USBD_SetConfig+0x150>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b27e:	4b29      	ldr	r3, [pc, #164]	@ (800b324 <USBD_SetConfig+0x150>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7fe ffd8 	bl	800a23a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa06 	bl	800b69c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b290:	e042      	b.n	800b318 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b292:	4b24      	ldr	r3, [pc, #144]	@ (800b324 <USBD_SetConfig+0x150>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d02a      	beq.n	800b2f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7fe ffc6 	bl	800a23a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b324 <USBD_SetConfig+0x150>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b324 <USBD_SetConfig+0x150>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7fe ff9f 	bl	800a202 <USBD_SetClassConfig>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00f      	beq.n	800b2ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f918 	bl	800b506 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7fe ffab 	bl	800a23a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2ec:	e014      	b.n	800b318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f9d4 	bl	800b69c <USBD_CtlSendStatus>
      break;
 800b2f4:	e010      	b.n	800b318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f9d0 	bl	800b69c <USBD_CtlSendStatus>
      break;
 800b2fc:	e00c      	b.n	800b318 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f900 	bl	800b506 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b306:	4b07      	ldr	r3, [pc, #28]	@ (800b324 <USBD_SetConfig+0x150>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7fe ff94 	bl	800a23a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b312:	2303      	movs	r3, #3
 800b314:	73fb      	strb	r3, [r7, #15]
      break;
 800b316:	bf00      	nop
  }

  return ret;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	2000094c 	.word	0x2000094c

0800b328 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d004      	beq.n	800b344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f8e2 	bl	800b506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b342:	e023      	b.n	800b38c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	dc02      	bgt.n	800b356 <USBD_GetConfig+0x2e>
 800b350:	2b00      	cmp	r3, #0
 800b352:	dc03      	bgt.n	800b35c <USBD_GetConfig+0x34>
 800b354:	e015      	b.n	800b382 <USBD_GetConfig+0x5a>
 800b356:	2b03      	cmp	r3, #3
 800b358:	d00b      	beq.n	800b372 <USBD_GetConfig+0x4a>
 800b35a:	e012      	b.n	800b382 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3308      	adds	r3, #8
 800b366:	2201      	movs	r2, #1
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f93c 	bl	800b5e8 <USBD_CtlSendData>
        break;
 800b370:	e00c      	b.n	800b38c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	2201      	movs	r2, #1
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f934 	bl	800b5e8 <USBD_CtlSendData>
        break;
 800b380:	e004      	b.n	800b38c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f8be 	bl	800b506 <USBD_CtlError>
        break;
 800b38a:	bf00      	nop
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d81e      	bhi.n	800b3ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	88db      	ldrh	r3, [r3, #6]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d004      	beq.n	800b3be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f8a5 	bl	800b506 <USBD_CtlError>
        break;
 800b3bc:	e01a      	b.n	800b3f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d005      	beq.n	800b3da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	f043 0202 	orr.w	r2, r3, #2
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	2202      	movs	r2, #2
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f900 	bl	800b5e8 <USBD_CtlSendData>
      break;
 800b3e8:	e004      	b.n	800b3f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f88a 	bl	800b506 <USBD_CtlError>
      break;
 800b3f2:	bf00      	nop
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	885b      	ldrh	r3, [r3, #2]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d107      	bne.n	800b41e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f940 	bl	800b69c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b41c:	e013      	b.n	800b446 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	885b      	ldrh	r3, [r3, #2]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d10b      	bne.n	800b43e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	889b      	ldrh	r3, [r3, #4]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f930 	bl	800b69c <USBD_CtlSendStatus>
}
 800b43c:	e003      	b.n	800b446 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f860 	bl	800b506 <USBD_CtlError>
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	3b01      	subs	r3, #1
 800b462:	2b02      	cmp	r3, #2
 800b464:	d80b      	bhi.n	800b47e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d10c      	bne.n	800b488 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f910 	bl	800b69c <USBD_CtlSendStatus>
      }
      break;
 800b47c:	e004      	b.n	800b488 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f840 	bl	800b506 <USBD_CtlError>
      break;
 800b486:	e000      	b.n	800b48a <USBD_ClrFeature+0x3c>
      break;
 800b488:	bf00      	nop
  }
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	781a      	ldrb	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f7ff fa40 	bl	800a942 <SWAPBYTE>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fa33 	bl	800a942 <SWAPBYTE>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f7ff fa26 	bl	800a942 <SWAPBYTE>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	80da      	strh	r2, [r3, #6]
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b510:	2180      	movs	r1, #128	@ 0x80
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 ff98 	bl	800c448 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b518:	2100      	movs	r1, #0
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 ff94 	bl	800c448 <USBD_LL_StallEP>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d036      	beq.n	800b5ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b542:	6938      	ldr	r0, [r7, #16]
 800b544:	f000 f836 	bl	800b5b4 <USBD_GetLen>
 800b548:	4603      	mov	r3, r0
 800b54a:	3301      	adds	r3, #1
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	4413      	add	r3, r2
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	7812      	ldrb	r2, [r2, #0]
 800b560:	701a      	strb	r2, [r3, #0]
  idx++;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	3301      	adds	r3, #1
 800b566:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	4413      	add	r3, r2
 800b56e:	2203      	movs	r2, #3
 800b570:	701a      	strb	r2, [r3, #0]
  idx++;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	3301      	adds	r3, #1
 800b576:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b578:	e013      	b.n	800b5a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	4413      	add	r3, r2
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	7812      	ldrb	r2, [r2, #0]
 800b584:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
    idx++;
 800b58c:	7dfb      	ldrb	r3, [r7, #23]
 800b58e:	3301      	adds	r3, #1
 800b590:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	4413      	add	r3, r2
 800b598:	2200      	movs	r2, #0
 800b59a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e7      	bne.n	800b57a <USBD_GetString+0x52>
 800b5aa:	e000      	b.n	800b5ae <USBD_GetString+0x86>
    return;
 800b5ac:	bf00      	nop
  }
}
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5c4:	e005      	b.n	800b5d2 <USBD_GetLen+0x1e>
  {
    len++;
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f5      	bne.n	800b5c6 <USBD_GetLen+0x12>
  }

  return len;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	2100      	movs	r1, #0
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f000 ffa3 	bl	800c55a <USBD_LL_Transmit>

  return USBD_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	2100      	movs	r1, #0
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 ff92 	bl	800c55a <USBD_LL_Transmit>

  return USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2203      	movs	r2, #3
 800b650:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	2100      	movs	r1, #0
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 ff96 	bl	800c59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	60f8      	str	r0, [r7, #12]
 800b682:	60b9      	str	r1, [r7, #8]
 800b684:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	2100      	movs	r1, #0
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 ff85 	bl	800c59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 ff51 	bl	800c55a <USBD_LL_Transmit>

  return USBD_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2205      	movs	r2, #5
 800b6ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 ff5f 	bl	800c59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b6f2:	4802      	ldr	r0, [pc, #8]	@ (800b6fc <ST7735_Select+0x14>)
 800b6f4:	f7f7 fd82 	bl	80031fc <HAL_GPIO_WritePin>
}
 800b6f8:	bf00      	nop
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	40020000 	.word	0x40020000

0800b700 <ST7735_Unselect>:

void ST7735_Unselect() {
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800b704:	2201      	movs	r2, #1
 800b706:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b70a:	4802      	ldr	r0, [pc, #8]	@ (800b714 <ST7735_Unselect+0x14>)
 800b70c:	f7f7 fd76 	bl	80031fc <HAL_GPIO_WritePin>
}
 800b710:	bf00      	nop
 800b712:	bd80      	pop	{r7, pc}
 800b714:	40020000 	.word	0x40020000

0800b718 <ST7735_Reset>:

void ST7735_Reset() {
 800b718:	b580      	push	{r7, lr}
 800b71a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800b71c:	2200      	movs	r2, #0
 800b71e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b722:	4807      	ldr	r0, [pc, #28]	@ (800b740 <ST7735_Reset+0x28>)
 800b724:	f7f7 fd6a 	bl	80031fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800b728:	2005      	movs	r0, #5
 800b72a:	f7f6 fbe1 	bl	8001ef0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800b72e:	2201      	movs	r2, #1
 800b730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b734:	4802      	ldr	r0, [pc, #8]	@ (800b740 <ST7735_Reset+0x28>)
 800b736:	f7f7 fd61 	bl	80031fc <HAL_GPIO_WritePin>
}
 800b73a:	bf00      	nop
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	40020000 	.word	0x40020000

0800b744 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800b74e:	2200      	movs	r2, #0
 800b750:	2110      	movs	r1, #16
 800b752:	4807      	ldr	r0, [pc, #28]	@ (800b770 <ST7735_WriteCommand+0x2c>)
 800b754:	f7f7 fd52 	bl	80031fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b758:	1df9      	adds	r1, r7, #7
 800b75a:	f04f 33ff 	mov.w	r3, #4294967295
 800b75e:	2201      	movs	r2, #1
 800b760:	4804      	ldr	r0, [pc, #16]	@ (800b774 <ST7735_WriteCommand+0x30>)
 800b762:	f7fa fe21 	bl	80063a8 <HAL_SPI_Transmit>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40020000 	.word	0x40020000
 800b774:	20000700 	.word	0x20000700

0800b778 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b782:	2201      	movs	r2, #1
 800b784:	2110      	movs	r1, #16
 800b786:	4807      	ldr	r0, [pc, #28]	@ (800b7a4 <ST7735_WriteData+0x2c>)
 800b788:	f7f7 fd38 	bl	80031fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	b29a      	uxth	r2, r3
 800b790:	f04f 33ff 	mov.w	r3, #4294967295
 800b794:	6879      	ldr	r1, [r7, #4]
 800b796:	4804      	ldr	r0, [pc, #16]	@ (800b7a8 <ST7735_WriteData+0x30>)
 800b798:	f7fa fe06 	bl	80063a8 <HAL_SPI_Transmit>
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	40020000 	.word	0x40020000
 800b7a8:	20000700 	.word	0x20000700

0800b7ac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800b7be:	e034      	b.n	800b82a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	607a      	str	r2, [r7, #4]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff ffb9 	bl	800b744 <ST7735_WriteCommand>

        numArgs = *addr++;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800b7dc:	7abb      	ldrb	r3, [r7, #10]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7e4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800b7e6:	7abb      	ldrb	r3, [r7, #10]
 800b7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7ec:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800b7ee:	7abb      	ldrb	r3, [r7, #10]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d008      	beq.n	800b806 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800b7f4:	7abb      	ldrb	r3, [r7, #10]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ffbd 	bl	800b778 <ST7735_WriteData>
            addr += numArgs;
 800b7fe:	7abb      	ldrb	r3, [r7, #10]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4413      	add	r3, r2
 800b804:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800b806:	89bb      	ldrh	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00e      	beq.n	800b82a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	607a      	str	r2, [r7, #4]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800b816:	89bb      	ldrh	r3, [r7, #12]
 800b818:	2bff      	cmp	r3, #255	@ 0xff
 800b81a:	d102      	bne.n	800b822 <ST7735_ExecuteCommandList+0x76>
 800b81c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b820:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800b822:	89bb      	ldrh	r3, [r7, #12]
 800b824:	4618      	mov	r0, r3
 800b826:	f7f6 fb63 	bl	8001ef0 <HAL_Delay>
    while(numCommands--) {
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
 800b82c:	1e5a      	subs	r2, r3, #1
 800b82e:	73fa      	strb	r2, [r7, #15]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1c5      	bne.n	800b7c0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800b83e:	b590      	push	{r4, r7, lr}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	4604      	mov	r4, r0
 800b846:	4608      	mov	r0, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	461a      	mov	r2, r3
 800b84c:	4623      	mov	r3, r4
 800b84e:	71fb      	strb	r3, [r7, #7]
 800b850:	4603      	mov	r3, r0
 800b852:	71bb      	strb	r3, [r7, #6]
 800b854:	460b      	mov	r3, r1
 800b856:	717b      	strb	r3, [r7, #5]
 800b858:	4613      	mov	r3, r2
 800b85a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800b85c:	202a      	movs	r0, #42	@ 0x2a
 800b85e:	f7ff ff71 	bl	800b744 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800b862:	2300      	movs	r3, #0
 800b864:	733b      	strb	r3, [r7, #12]
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	737b      	strb	r3, [r7, #13]
 800b86a:	2300      	movs	r3, #0
 800b86c:	73bb      	strb	r3, [r7, #14]
 800b86e:	797b      	ldrb	r3, [r7, #5]
 800b870:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	2104      	movs	r1, #4
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff ff7d 	bl	800b778 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800b87e:	202b      	movs	r0, #43	@ 0x2b
 800b880:	f7ff ff60 	bl	800b744 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800b884:	79bb      	ldrb	r3, [r7, #6]
 800b886:	3318      	adds	r3, #24
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800b88c:	793b      	ldrb	r3, [r7, #4]
 800b88e:	3318      	adds	r3, #24
 800b890:	b2db      	uxtb	r3, r3
 800b892:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b894:	f107 030c 	add.w	r3, r7, #12
 800b898:	2104      	movs	r1, #4
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff ff6c 	bl	800b778 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800b8a0:	202c      	movs	r0, #44	@ 0x2c
 800b8a2:	f7ff ff4f 	bl	800b744 <ST7735_WriteCommand>
}
 800b8a6:	bf00      	nop
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd90      	pop	{r4, r7, pc}
	...

0800b8b0 <ST7735_Init>:

void ST7735_Init() {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
    ST7735_Select();
 800b8b4:	f7ff ff18 	bl	800b6e8 <ST7735_Select>
    ST7735_Reset();
 800b8b8:	f7ff ff2e 	bl	800b718 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800b8bc:	4806      	ldr	r0, [pc, #24]	@ (800b8d8 <ST7735_Init+0x28>)
 800b8be:	f7ff ff75 	bl	800b7ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800b8c2:	4806      	ldr	r0, [pc, #24]	@ (800b8dc <ST7735_Init+0x2c>)
 800b8c4:	f7ff ff72 	bl	800b7ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800b8c8:	4805      	ldr	r0, [pc, #20]	@ (800b8e0 <ST7735_Init+0x30>)
 800b8ca:	f7ff ff6f 	bl	800b7ac <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800b8ce:	f7ff ff17 	bl	800b700 <ST7735_Unselect>
}
 800b8d2:	bf00      	nop
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	080109b4 	.word	0x080109b4
 800b8dc:	080109f0 	.word	0x080109f0
 800b8e0:	08010a00 	.word	0x08010a00

0800b8e4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	80fb      	strh	r3, [r7, #6]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	80bb      	strh	r3, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800b8f6:	88fb      	ldrh	r3, [r7, #6]
 800b8f8:	2b9f      	cmp	r3, #159	@ 0x9f
 800b8fa:	d823      	bhi.n	800b944 <ST7735_DrawPixel+0x60>
 800b8fc:	88bb      	ldrh	r3, [r7, #4]
 800b8fe:	2b4f      	cmp	r3, #79	@ 0x4f
 800b900:	d820      	bhi.n	800b944 <ST7735_DrawPixel+0x60>
        return;
		
    ST7735_Select();
 800b902:	f7ff fef1 	bl	800b6e8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	b2d8      	uxtb	r0, r3
 800b90a:	88bb      	ldrh	r3, [r7, #4]
 800b90c:	b2d9      	uxtb	r1, r3
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	b2db      	uxtb	r3, r3
 800b912:	3301      	adds	r3, #1
 800b914:	b2da      	uxtb	r2, r3
 800b916:	88bb      	ldrh	r3, [r7, #4]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	3301      	adds	r3, #1
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f7ff ff8e 	bl	800b83e <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800b922:	887b      	ldrh	r3, [r7, #2]
 800b924:	0a1b      	lsrs	r3, r3, #8
 800b926:	b29b      	uxth	r3, r3
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	733b      	strb	r3, [r7, #12]
 800b92c:	887b      	ldrh	r3, [r7, #2]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800b932:	f107 030c 	add.w	r3, r7, #12
 800b936:	2102      	movs	r1, #2
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff ff1d 	bl	800b778 <ST7735_WriteData>
    ST7735_Unselect();
 800b93e:	f7ff fedf 	bl	800b700 <ST7735_Unselect>
 800b942:	e000      	b.n	800b946 <ST7735_DrawPixel+0x62>
        return;
 800b944:	bf00      	nop
}
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b94c:	b082      	sub	sp, #8
 800b94e:	b590      	push	{r4, r7, lr}
 800b950:	b089      	sub	sp, #36	@ 0x24
 800b952:	af00      	add	r7, sp, #0
 800b954:	637b      	str	r3, [r7, #52]	@ 0x34
 800b956:	4603      	mov	r3, r0
 800b958:	80fb      	strh	r3, [r7, #6]
 800b95a:	460b      	mov	r3, r1
 800b95c:	80bb      	strh	r3, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	b2d8      	uxtb	r0, r3
 800b966:	88bb      	ldrh	r3, [r7, #4]
 800b968:	b2d9      	uxtb	r1, r3
 800b96a:	88fb      	ldrh	r3, [r7, #6]
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b972:	4413      	add	r3, r2
 800b974:	b2db      	uxtb	r3, r3
 800b976:	3b01      	subs	r3, #1
 800b978:	b2dc      	uxtb	r4, r3
 800b97a:	88bb      	ldrh	r3, [r7, #4]
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b982:	4413      	add	r3, r2
 800b984:	b2db      	uxtb	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	4622      	mov	r2, r4
 800b98c:	f7ff ff57 	bl	800b83e <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 800b994:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d106      	bne.n	800b9aa <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 800b99c:	230e      	movs	r3, #14
 800b99e:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	2b25      	cmp	r3, #37	@ 0x25
 800b9a4:	d101      	bne.n	800b9aa <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 800b9a6:	2304      	movs	r3, #4
 800b9a8:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e044      	b.n	800ba3a <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 800b9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9b2:	78f9      	ldrb	r1, [r7, #3]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	1acb      	subs	r3, r1, r3
 800b9b8:	3b20      	subs	r3, #32
 800b9ba:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800b9be:	fb03 f101 	mul.w	r1, r3, r1
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	440b      	add	r3, r1
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4413      	add	r3, r2
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	61bb      	str	r3, [r7, #24]
 800b9d2:	e029      	b.n	800ba28 <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00e      	beq.n	800ba02 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800b9e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b9e6:	0a1b      	lsrs	r3, r3, #8
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	733b      	strb	r3, [r7, #12]
 800b9ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800b9f4:	f107 030c 	add.w	r3, r7, #12
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff febc 	bl	800b778 <ST7735_WriteData>
 800ba00:	e00f      	b.n	800ba22 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800ba02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	723b      	strb	r3, [r7, #8]
 800ba0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 800ba16:	f107 0308 	add.w	r3, r7, #8
 800ba1a:	2102      	movs	r1, #2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff feab 	bl	800b778 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	3301      	adds	r3, #1
 800ba26:	61bb      	str	r3, [r7, #24]
 800ba28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d3cf      	bcc.n	800b9d4 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	3301      	adds	r3, #1
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ba3e:	461a      	mov	r2, r3
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d3b4      	bcc.n	800b9b0 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 800ba46:	bf00      	nop
 800ba48:	bf00      	nop
 800ba4a:	3724      	adds	r7, #36	@ 0x24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ba52:	b002      	add	sp, #8
 800ba54:	4770      	bx	lr

0800ba56 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ba56:	b082      	sub	sp, #8
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af04      	add	r7, sp, #16
 800ba5e:	603a      	str	r2, [r7, #0]
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	4603      	mov	r3, r0
 800ba64:	80fb      	strh	r3, [r7, #6]
 800ba66:	460b      	mov	r3, r1
 800ba68:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800ba6a:	f7ff fe3d 	bl	800b6e8 <ST7735_Select>

    while(*str) {
 800ba6e:	e02d      	b.n	800bacc <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	7d3a      	ldrb	r2, [r7, #20]
 800ba74:	4413      	add	r3, r2
 800ba76:	2b9f      	cmp	r3, #159	@ 0x9f
 800ba78:	dd13      	ble.n	800baa2 <ST7735_WriteString+0x4c>
            x = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800ba7e:	7d7b      	ldrb	r3, [r7, #21]
 800ba80:	461a      	mov	r2, r3
 800ba82:	88bb      	ldrh	r3, [r7, #4]
 800ba84:	4413      	add	r3, r2
 800ba86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800ba88:	88bb      	ldrh	r3, [r7, #4]
 800ba8a:	7d7a      	ldrb	r2, [r7, #21]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ba90:	dc21      	bgt.n	800bad6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	d103      	bne.n	800baa2 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	603b      	str	r3, [r7, #0]
                continue;
 800baa0:	e014      	b.n	800bacc <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	781a      	ldrb	r2, [r3, #0]
 800baa6:	88b9      	ldrh	r1, [r7, #4]
 800baa8:	88f8      	ldrh	r0, [r7, #6]
 800baaa:	8c3b      	ldrh	r3, [r7, #32]
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	8bbb      	ldrh	r3, [r7, #28]
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f7ff ff48 	bl	800b94c <ST7735_WriteChar>
        x += font.width;
 800babc:	7d3b      	ldrb	r3, [r7, #20]
 800babe:	461a      	mov	r2, r3
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	4413      	add	r3, r2
 800bac4:	80fb      	strh	r3, [r7, #6]
        str++;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	603b      	str	r3, [r7, #0]
    while(*str) {
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1cd      	bne.n	800ba70 <ST7735_WriteString+0x1a>
 800bad4:	e000      	b.n	800bad8 <ST7735_WriteString+0x82>
                break;
 800bad6:	bf00      	nop
    }

    ST7735_Unselect();
 800bad8:	f7ff fe12 	bl	800b700 <ST7735_Unselect>
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bae6:	b002      	add	sp, #8
 800bae8:	4770      	bx	lr
	...

0800baec <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800baec:	b590      	push	{r4, r7, lr}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	461a      	mov	r2, r3
 800bafa:	4623      	mov	r3, r4
 800bafc:	80fb      	strh	r3, [r7, #6]
 800bafe:	4603      	mov	r3, r0
 800bb00:	80bb      	strh	r3, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	807b      	strh	r3, [r7, #2]
 800bb06:	4613      	mov	r3, r2
 800bb08:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	2b9f      	cmp	r3, #159	@ 0x9f
 800bb0e:	d857      	bhi.n	800bbc0 <ST7735_FillRectangle+0xd4>
 800bb10:	88bb      	ldrh	r3, [r7, #4]
 800bb12:	2b4f      	cmp	r3, #79	@ 0x4f
 800bb14:	d854      	bhi.n	800bbc0 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800bb16:	88fa      	ldrh	r2, [r7, #6]
 800bb18:	887b      	ldrh	r3, [r7, #2]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	2ba0      	cmp	r3, #160	@ 0xa0
 800bb1e:	dd03      	ble.n	800bb28 <ST7735_FillRectangle+0x3c>
 800bb20:	88fb      	ldrh	r3, [r7, #6]
 800bb22:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800bb26:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800bb28:	88ba      	ldrh	r2, [r7, #4]
 800bb2a:	883b      	ldrh	r3, [r7, #0]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	2b50      	cmp	r3, #80	@ 0x50
 800bb30:	dd03      	ble.n	800bb3a <ST7735_FillRectangle+0x4e>
 800bb32:	88bb      	ldrh	r3, [r7, #4]
 800bb34:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800bb38:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800bb3a:	f7ff fdd5 	bl	800b6e8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800bb3e:	88fb      	ldrh	r3, [r7, #6]
 800bb40:	b2d8      	uxtb	r0, r3
 800bb42:	88bb      	ldrh	r3, [r7, #4]
 800bb44:	b2d9      	uxtb	r1, r3
 800bb46:	88fb      	ldrh	r3, [r7, #6]
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	887b      	ldrh	r3, [r7, #2]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	4413      	add	r3, r2
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	3b01      	subs	r3, #1
 800bb54:	b2dc      	uxtb	r4, r3
 800bb56:	88bb      	ldrh	r3, [r7, #4]
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	883b      	ldrh	r3, [r7, #0]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	4413      	add	r3, r2
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	4622      	mov	r2, r4
 800bb68:	f7ff fe69 	bl	800b83e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800bb6c:	8c3b      	ldrh	r3, [r7, #32]
 800bb6e:	0a1b      	lsrs	r3, r3, #8
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	733b      	strb	r3, [r7, #12]
 800bb76:	8c3b      	ldrh	r3, [r7, #32]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	2110      	movs	r1, #16
 800bb80:	4811      	ldr	r0, [pc, #68]	@ (800bbc8 <ST7735_FillRectangle+0xdc>)
 800bb82:	f7f7 fb3b 	bl	80031fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800bb86:	883b      	ldrh	r3, [r7, #0]
 800bb88:	80bb      	strh	r3, [r7, #4]
 800bb8a:	e013      	b.n	800bbb4 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800bb8c:	887b      	ldrh	r3, [r7, #2]
 800bb8e:	80fb      	strh	r3, [r7, #6]
 800bb90:	e00a      	b.n	800bba8 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800bb92:	f107 010c 	add.w	r1, r7, #12
 800bb96:	f04f 33ff 	mov.w	r3, #4294967295
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	480b      	ldr	r0, [pc, #44]	@ (800bbcc <ST7735_FillRectangle+0xe0>)
 800bb9e:	f7fa fc03 	bl	80063a8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800bba2:	88fb      	ldrh	r3, [r7, #6]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	80fb      	strh	r3, [r7, #6]
 800bba8:	88fb      	ldrh	r3, [r7, #6]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1f1      	bne.n	800bb92 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800bbae:	88bb      	ldrh	r3, [r7, #4]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	80bb      	strh	r3, [r7, #4]
 800bbb4:	88bb      	ldrh	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1e8      	bne.n	800bb8c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800bbba:	f7ff fda1 	bl	800b700 <ST7735_Unselect>
 800bbbe:	e000      	b.n	800bbc2 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bbc0:	bf00      	nop
}
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd90      	pop	{r4, r7, pc}
 800bbc8:	40020000 	.word	0x40020000
 800bbcc:	20000700 	.word	0x20000700

0800bbd0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800bbda:	88fb      	ldrh	r3, [r7, #6]
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	2350      	movs	r3, #80	@ 0x50
 800bbe0:	22a0      	movs	r2, #160	@ 0xa0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	f7ff ff81 	bl	800baec <ST7735_FillRectangle>
}
 800bbea:	bf00      	nop
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t* data) {
 800bbf2:	b590      	push	{r4, r7, lr}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4623      	mov	r3, r4
 800bc02:	80fb      	strh	r3, [r7, #6]
 800bc04:	4603      	mov	r3, r0
 800bc06:	80bb      	strh	r3, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	807b      	strh	r3, [r7, #2]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b9f      	cmp	r3, #159	@ 0x9f
 800bc14:	d831      	bhi.n	800bc7a <ST7735_DrawImage+0x88>
 800bc16:	88bb      	ldrh	r3, [r7, #4]
 800bc18:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc1a:	d82e      	bhi.n	800bc7a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bc1c:	88fa      	ldrh	r2, [r7, #6]
 800bc1e:	887b      	ldrh	r3, [r7, #2]
 800bc20:	4413      	add	r3, r2
 800bc22:	2ba0      	cmp	r3, #160	@ 0xa0
 800bc24:	dc2b      	bgt.n	800bc7e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bc26:	88ba      	ldrh	r2, [r7, #4]
 800bc28:	883b      	ldrh	r3, [r7, #0]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	2b50      	cmp	r3, #80	@ 0x50
 800bc2e:	dc28      	bgt.n	800bc82 <ST7735_DrawImage+0x90>

    ST7735_Select();
 800bc30:	f7ff fd5a 	bl	800b6e8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800bc34:	88fb      	ldrh	r3, [r7, #6]
 800bc36:	b2d8      	uxtb	r0, r3
 800bc38:	88bb      	ldrh	r3, [r7, #4]
 800bc3a:	b2d9      	uxtb	r1, r3
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	887b      	ldrh	r3, [r7, #2]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	4413      	add	r3, r2
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	b2dc      	uxtb	r4, r3
 800bc4c:	88bb      	ldrh	r3, [r7, #4]
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	883b      	ldrh	r3, [r7, #0]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	4413      	add	r3, r2
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	f7ff fdee 	bl	800b83e <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800bc62:	887b      	ldrh	r3, [r7, #2]
 800bc64:	883a      	ldrh	r2, [r7, #0]
 800bc66:	fb02 f303 	mul.w	r3, r2, r3
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	69b8      	ldr	r0, [r7, #24]
 800bc70:	f7ff fd82 	bl	800b778 <ST7735_WriteData>
    ST7735_Unselect();
 800bc74:	f7ff fd44 	bl	800b700 <ST7735_Unselect>
 800bc78:	e004      	b.n	800bc84 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bc7a:	bf00      	nop
 800bc7c:	e002      	b.n	800bc84 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bc7e:	bf00      	nop
 800bc80:	e000      	b.n	800bc84 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bc82:	bf00      	nop
}
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd90      	pop	{r4, r7, pc}

0800bc8a <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert) {
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	4603      	mov	r3, r0
 800bc92:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800bc94:	f7ff fd28 	bl	800b6e8 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <ST7735_InvertColors+0x18>
 800bc9e:	2321      	movs	r3, #33	@ 0x21
 800bca0:	e000      	b.n	800bca4 <ST7735_InvertColors+0x1a>
 800bca2:	2320      	movs	r3, #32
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fd4d 	bl	800b744 <ST7735_WriteCommand>
    ST7735_Unselect();
 800bcaa:	f7ff fd29 	bl	800b700 <ST7735_Unselect>
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4912      	ldr	r1, [pc, #72]	@ (800bd08 <MX_USB_DEVICE_Init+0x50>)
 800bcc0:	4812      	ldr	r0, [pc, #72]	@ (800bd0c <MX_USB_DEVICE_Init+0x54>)
 800bcc2:	f7fe fa21 	bl	800a108 <USBD_Init>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bccc:	f7f5 fc9e 	bl	800160c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bcd0:	490f      	ldr	r1, [pc, #60]	@ (800bd10 <MX_USB_DEVICE_Init+0x58>)
 800bcd2:	480e      	ldr	r0, [pc, #56]	@ (800bd0c <MX_USB_DEVICE_Init+0x54>)
 800bcd4:	f7fe fa48 	bl	800a168 <USBD_RegisterClass>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcde:	f7f5 fc95 	bl	800160c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bce2:	490c      	ldr	r1, [pc, #48]	@ (800bd14 <MX_USB_DEVICE_Init+0x5c>)
 800bce4:	4809      	ldr	r0, [pc, #36]	@ (800bd0c <MX_USB_DEVICE_Init+0x54>)
 800bce6:	f7fe f97f 	bl	8009fe8 <USBD_CDC_RegisterInterface>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcf0:	f7f5 fc8c 	bl	800160c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcf4:	4805      	ldr	r0, [pc, #20]	@ (800bd0c <MX_USB_DEVICE_Init+0x54>)
 800bcf6:	f7fe fa6d 	bl	800a1d4 <USBD_Start>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bd00:	f7f5 fc84 	bl	800160c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd04:	bf00      	nop
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20000588 	.word	0x20000588
 800bd0c:	20000950 	.word	0x20000950
 800bd10:	200004dc 	.word	0x200004dc
 800bd14:	20000574 	.word	0x20000574

0800bd18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4905      	ldr	r1, [pc, #20]	@ (800bd34 <CDC_Init_FS+0x1c>)
 800bd20:	4805      	ldr	r0, [pc, #20]	@ (800bd38 <CDC_Init_FS+0x20>)
 800bd22:	f7fe f97b 	bl	800a01c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd26:	4905      	ldr	r1, [pc, #20]	@ (800bd3c <CDC_Init_FS+0x24>)
 800bd28:	4803      	ldr	r0, [pc, #12]	@ (800bd38 <CDC_Init_FS+0x20>)
 800bd2a:	f7fe f999 	bl	800a060 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	2000102c 	.word	0x2000102c
 800bd38:	20000950 	.word	0x20000950
 800bd3c:	20000c2c 	.word	0x20000c2c

0800bd40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd40:	b480      	push	{r7}
 800bd42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	2b23      	cmp	r3, #35	@ 0x23
 800bd64:	d84a      	bhi.n	800bdfc <CDC_Control_FS+0xac>
 800bd66:	a201      	add	r2, pc, #4	@ (adr r2, 800bd6c <CDC_Control_FS+0x1c>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bdfd 	.word	0x0800bdfd
 800bd70:	0800bdfd 	.word	0x0800bdfd
 800bd74:	0800bdfd 	.word	0x0800bdfd
 800bd78:	0800bdfd 	.word	0x0800bdfd
 800bd7c:	0800bdfd 	.word	0x0800bdfd
 800bd80:	0800bdfd 	.word	0x0800bdfd
 800bd84:	0800bdfd 	.word	0x0800bdfd
 800bd88:	0800bdfd 	.word	0x0800bdfd
 800bd8c:	0800bdfd 	.word	0x0800bdfd
 800bd90:	0800bdfd 	.word	0x0800bdfd
 800bd94:	0800bdfd 	.word	0x0800bdfd
 800bd98:	0800bdfd 	.word	0x0800bdfd
 800bd9c:	0800bdfd 	.word	0x0800bdfd
 800bda0:	0800bdfd 	.word	0x0800bdfd
 800bda4:	0800bdfd 	.word	0x0800bdfd
 800bda8:	0800bdfd 	.word	0x0800bdfd
 800bdac:	0800bdfd 	.word	0x0800bdfd
 800bdb0:	0800bdfd 	.word	0x0800bdfd
 800bdb4:	0800bdfd 	.word	0x0800bdfd
 800bdb8:	0800bdfd 	.word	0x0800bdfd
 800bdbc:	0800bdfd 	.word	0x0800bdfd
 800bdc0:	0800bdfd 	.word	0x0800bdfd
 800bdc4:	0800bdfd 	.word	0x0800bdfd
 800bdc8:	0800bdfd 	.word	0x0800bdfd
 800bdcc:	0800bdfd 	.word	0x0800bdfd
 800bdd0:	0800bdfd 	.word	0x0800bdfd
 800bdd4:	0800bdfd 	.word	0x0800bdfd
 800bdd8:	0800bdfd 	.word	0x0800bdfd
 800bddc:	0800bdfd 	.word	0x0800bdfd
 800bde0:	0800bdfd 	.word	0x0800bdfd
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800bdfd 	.word	0x0800bdfd
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800bdfd 	.word	0x0800bdfd
 800bdf4:	0800bdfd 	.word	0x0800bdfd
 800bdf8:	0800bdfd 	.word	0x0800bdfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdfc:	bf00      	nop
  }

  return (USBD_OK);
 800bdfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be00:	4618      	mov	r0, r3
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	4805      	ldr	r0, [pc, #20]	@ (800be30 <CDC_Receive_FS+0x24>)
 800be1a:	f7fe f921 	bl	800a060 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be1e:	4804      	ldr	r0, [pc, #16]	@ (800be30 <CDC_Receive_FS+0x24>)
 800be20:	f7fe f93c 	bl	800a09c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20000950 	.word	0x20000950

0800be34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4613      	mov	r3, r2
 800be40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
	...

0800be58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2212      	movs	r2, #18
 800be68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be6a:	4b03      	ldr	r3, [pc, #12]	@ (800be78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	200005a4 	.word	0x200005a4

0800be7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	6039      	str	r1, [r7, #0]
 800be86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2204      	movs	r2, #4
 800be8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be8e:	4b03      	ldr	r3, [pc, #12]	@ (800be9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	200005b8 	.word	0x200005b8

0800bea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	6039      	str	r1, [r7, #0]
 800beaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d105      	bne.n	800bebe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	4907      	ldr	r1, [pc, #28]	@ (800bed4 <USBD_FS_ProductStrDescriptor+0x34>)
 800beb6:	4808      	ldr	r0, [pc, #32]	@ (800bed8 <USBD_FS_ProductStrDescriptor+0x38>)
 800beb8:	f7ff fb36 	bl	800b528 <USBD_GetString>
 800bebc:	e004      	b.n	800bec8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	4904      	ldr	r1, [pc, #16]	@ (800bed4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bec2:	4805      	ldr	r0, [pc, #20]	@ (800bed8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bec4:	f7ff fb30 	bl	800b528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec8:	4b02      	ldr	r3, [pc, #8]	@ (800bed4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	2000142c 	.word	0x2000142c
 800bed8:	0800e128 	.word	0x0800e128

0800bedc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	4904      	ldr	r1, [pc, #16]	@ (800befc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800beec:	4804      	ldr	r0, [pc, #16]	@ (800bf00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800beee:	f7ff fb1b 	bl	800b528 <USBD_GetString>
  return USBD_StrDesc;
 800bef2:	4b02      	ldr	r3, [pc, #8]	@ (800befc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	2000142c 	.word	0x2000142c
 800bf00:	0800e140 	.word	0x0800e140

0800bf04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6039      	str	r1, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	221a      	movs	r2, #26
 800bf14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf16:	f000 f843 	bl	800bfa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf1a:	4b02      	ldr	r3, [pc, #8]	@ (800bf24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	200005bc 	.word	0x200005bc

0800bf28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d105      	bne.n	800bf46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	4907      	ldr	r1, [pc, #28]	@ (800bf5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf3e:	4808      	ldr	r0, [pc, #32]	@ (800bf60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf40:	f7ff faf2 	bl	800b528 <USBD_GetString>
 800bf44:	e004      	b.n	800bf50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4904      	ldr	r1, [pc, #16]	@ (800bf5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf4a:	4805      	ldr	r0, [pc, #20]	@ (800bf60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf4c:	f7ff faec 	bl	800b528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf50:	4b02      	ldr	r3, [pc, #8]	@ (800bf5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000142c 	.word	0x2000142c
 800bf60:	0800e154 	.word	0x0800e154

0800bf64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	6039      	str	r1, [r7, #0]
 800bf6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d105      	bne.n	800bf82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	4907      	ldr	r1, [pc, #28]	@ (800bf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf7a:	4808      	ldr	r0, [pc, #32]	@ (800bf9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf7c:	f7ff fad4 	bl	800b528 <USBD_GetString>
 800bf80:	e004      	b.n	800bf8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	4904      	ldr	r1, [pc, #16]	@ (800bf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf86:	4805      	ldr	r0, [pc, #20]	@ (800bf9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf88:	f7ff face 	bl	800b528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf8c:	4b02      	ldr	r3, [pc, #8]	@ (800bf98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	2000142c 	.word	0x2000142c
 800bf9c:	0800e160 	.word	0x0800e160

0800bfa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfa6:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe4 <Get_SerialNum+0x44>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfac:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe8 <Get_SerialNum+0x48>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bfec <Get_SerialNum+0x4c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfc6:	2208      	movs	r2, #8
 800bfc8:	4909      	ldr	r1, [pc, #36]	@ (800bff0 <Get_SerialNum+0x50>)
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 f814 	bl	800bff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfd0:	2204      	movs	r2, #4
 800bfd2:	4908      	ldr	r1, [pc, #32]	@ (800bff4 <Get_SerialNum+0x54>)
 800bfd4:	68b8      	ldr	r0, [r7, #8]
 800bfd6:	f000 f80f 	bl	800bff8 <IntToUnicode>
  }
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	1fff7a10 	.word	0x1fff7a10
 800bfe8:	1fff7a14 	.word	0x1fff7a14
 800bfec:	1fff7a18 	.word	0x1fff7a18
 800bff0:	200005be 	.word	0x200005be
 800bff4:	200005ce 	.word	0x200005ce

0800bff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c00a:	2300      	movs	r3, #0
 800c00c:	75fb      	strb	r3, [r7, #23]
 800c00e:	e027      	b.n	800c060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	0f1b      	lsrs	r3, r3, #28
 800c014:	2b09      	cmp	r3, #9
 800c016:	d80b      	bhi.n	800c030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	0f1b      	lsrs	r3, r3, #28
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	4619      	mov	r1, r3
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	440b      	add	r3, r1
 800c028:	3230      	adds	r2, #48	@ 0x30
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	e00a      	b.n	800c046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	0f1b      	lsrs	r3, r3, #28
 800c034:	b2da      	uxtb	r2, r3
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4619      	mov	r1, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	440b      	add	r3, r1
 800c040:	3237      	adds	r2, #55	@ 0x37
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	3301      	adds	r3, #1
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	4413      	add	r3, r2
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	3301      	adds	r3, #1
 800c05e:	75fb      	strb	r3, [r7, #23]
 800c060:	7dfa      	ldrb	r2, [r7, #23]
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	429a      	cmp	r2, r3
 800c066:	d3d3      	bcc.n	800c010 <IntToUnicode+0x18>
  }
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
	...

0800c078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	@ 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c080:	f107 0314 	add.w	r3, r7, #20
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	605a      	str	r2, [r3, #4]
 800c08a:	609a      	str	r2, [r3, #8]
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c098:	d13a      	bne.n	800c110 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c09a:	2300      	movs	r3, #0
 800c09c:	613b      	str	r3, [r7, #16]
 800c09e:	4b1e      	ldr	r3, [pc, #120]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a2:	4a1d      	ldr	r2, [pc, #116]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0a4:	f043 0301 	orr.w	r3, r3, #1
 800c0a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c0ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0bc:	2302      	movs	r3, #2
 800c0be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0c8:	230a      	movs	r3, #10
 800c0ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0cc:	f107 0314 	add.w	r3, r7, #20
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4812      	ldr	r0, [pc, #72]	@ (800c11c <HAL_PCD_MspInit+0xa4>)
 800c0d4:	f7f6 ff0e 	bl	8002ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0dc:	4a0e      	ldr	r2, [pc, #56]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e2:	6353      	str	r3, [r2, #52]	@ 0x34
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c0f2:	6453      	str	r3, [r2, #68]	@ 0x44
 800c0f4:	4b08      	ldr	r3, [pc, #32]	@ (800c118 <HAL_PCD_MspInit+0xa0>)
 800c0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	2043      	movs	r0, #67	@ 0x43
 800c106:	f7f6 fbd4 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c10a:	2043      	movs	r0, #67	@ 0x43
 800c10c:	f7f6 fbed 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c110:	bf00      	nop
 800c112:	3728      	adds	r7, #40	@ 0x28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	40023800 	.word	0x40023800
 800c11c:	40020000 	.word	0x40020000

0800c120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f7fe f899 	bl	800a26e <USBD_LL_SetupStage>
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c156:	78fa      	ldrb	r2, [r7, #3]
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	4613      	mov	r3, r2
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	4413      	add	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	440b      	add	r3, r1
 800c164:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	78fb      	ldrb	r3, [r7, #3]
 800c16c:	4619      	mov	r1, r3
 800c16e:	f7fe f8d3 	bl	800a318 <USBD_LL_DataOutStage>
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c18c:	78fa      	ldrb	r2, [r7, #3]
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4613      	mov	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	334c      	adds	r3, #76	@ 0x4c
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	78fb      	ldrb	r3, [r7, #3]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	f7fe f96c 	bl	800a47e <USBD_LL_DataInStage>
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fe faa0 	bl	800a702 <USBD_LL_SOF>
}
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d001      	beq.n	800c1e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1de:	f7f5 fa15 	bl	800160c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1e8:	7bfa      	ldrb	r2, [r7, #15]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fa4a 	bl	800a686 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe f9f2 	bl	800a5e2 <USBD_LL_Reset>
}
 800c1fe:	bf00      	nop
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fa45 	bl	800a6a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c22e:	f043 0301 	orr.w	r3, r3, #1
 800c232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d005      	beq.n	800c248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c23c:	4b04      	ldr	r3, [pc, #16]	@ (800c250 <HAL_PCD_SuspendCallback+0x48>)
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	4a03      	ldr	r2, [pc, #12]	@ (800c250 <HAL_PCD_SuspendCallback+0x48>)
 800c242:	f043 0306 	orr.w	r3, r3, #6
 800c246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	e000ed00 	.word	0xe000ed00

0800c254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fa35 	bl	800a6d2 <USBD_LL_Resume>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fa8d 	bl	800a7a6 <USBD_LL_IsoOUTIncomplete>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2a6:	78fa      	ldrb	r2, [r7, #3]
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe fa49 	bl	800a742 <USBD_LL_IsoINIncomplete>
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fa9f 	bl	800a80a <USBD_LL_DevConnected>
}
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fa9c 	bl	800a820 <USBD_LL_DevDisconnected>
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d13c      	bne.n	800c37a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c300:	4a20      	ldr	r2, [pc, #128]	@ (800c384 <USBD_LL_Init+0x94>)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a1e      	ldr	r2, [pc, #120]	@ (800c384 <USBD_LL_Init+0x94>)
 800c30c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c310:	4b1c      	ldr	r3, [pc, #112]	@ (800c384 <USBD_LL_Init+0x94>)
 800c312:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c316:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c318:	4b1a      	ldr	r3, [pc, #104]	@ (800c384 <USBD_LL_Init+0x94>)
 800c31a:	2204      	movs	r2, #4
 800c31c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c31e:	4b19      	ldr	r3, [pc, #100]	@ (800c384 <USBD_LL_Init+0x94>)
 800c320:	2202      	movs	r2, #2
 800c322:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c324:	4b17      	ldr	r3, [pc, #92]	@ (800c384 <USBD_LL_Init+0x94>)
 800c326:	2200      	movs	r2, #0
 800c328:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c32a:	4b16      	ldr	r3, [pc, #88]	@ (800c384 <USBD_LL_Init+0x94>)
 800c32c:	2202      	movs	r2, #2
 800c32e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c330:	4b14      	ldr	r3, [pc, #80]	@ (800c384 <USBD_LL_Init+0x94>)
 800c332:	2200      	movs	r2, #0
 800c334:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c336:	4b13      	ldr	r3, [pc, #76]	@ (800c384 <USBD_LL_Init+0x94>)
 800c338:	2200      	movs	r2, #0
 800c33a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c33c:	4b11      	ldr	r3, [pc, #68]	@ (800c384 <USBD_LL_Init+0x94>)
 800c33e:	2200      	movs	r2, #0
 800c340:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c342:	4b10      	ldr	r3, [pc, #64]	@ (800c384 <USBD_LL_Init+0x94>)
 800c344:	2200      	movs	r2, #0
 800c346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c348:	4b0e      	ldr	r3, [pc, #56]	@ (800c384 <USBD_LL_Init+0x94>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c34e:	480d      	ldr	r0, [pc, #52]	@ (800c384 <USBD_LL_Init+0x94>)
 800c350:	f7f7 fbe1 	bl	8003b16 <HAL_PCD_Init>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c35a:	f7f5 f957 	bl	800160c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c35e:	2180      	movs	r1, #128	@ 0x80
 800c360:	4808      	ldr	r0, [pc, #32]	@ (800c384 <USBD_LL_Init+0x94>)
 800c362:	f7f8 fe38 	bl	8004fd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c366:	2240      	movs	r2, #64	@ 0x40
 800c368:	2100      	movs	r1, #0
 800c36a:	4806      	ldr	r0, [pc, #24]	@ (800c384 <USBD_LL_Init+0x94>)
 800c36c:	f7f8 fdec 	bl	8004f48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c370:	2280      	movs	r2, #128	@ 0x80
 800c372:	2101      	movs	r1, #1
 800c374:	4803      	ldr	r0, [pc, #12]	@ (800c384 <USBD_LL_Init+0x94>)
 800c376:	f7f8 fde7 	bl	8004f48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	2000162c 	.word	0x2000162c

0800c388 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f7 fcd6 	bl	8003d50 <HAL_PCD_Start>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 f942 	bl	800c634 <USBD_Get_USB_Status>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	70fb      	strb	r3, [r7, #3]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70bb      	strb	r3, [r7, #2]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3e6:	78bb      	ldrb	r3, [r7, #2]
 800c3e8:	883a      	ldrh	r2, [r7, #0]
 800c3ea:	78f9      	ldrb	r1, [r7, #3]
 800c3ec:	f7f8 f9a7 	bl	800473e <HAL_PCD_EP_Open>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f91c 	bl	800c634 <USBD_Get_USB_Status>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c400:	7bbb      	ldrb	r3, [r7, #14]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	460b      	mov	r3, r1
 800c414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c424:	78fa      	ldrb	r2, [r7, #3]
 800c426:	4611      	mov	r1, r2
 800c428:	4618      	mov	r0, r3
 800c42a:	f7f8 f9f0 	bl	800480e <HAL_PCD_EP_Close>
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c432:	7bfb      	ldrb	r3, [r7, #15]
 800c434:	4618      	mov	r0, r3
 800c436:	f000 f8fd 	bl	800c634 <USBD_Get_USB_Status>
 800c43a:	4603      	mov	r3, r0
 800c43c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c462:	78fa      	ldrb	r2, [r7, #3]
 800c464:	4611      	mov	r1, r2
 800c466:	4618      	mov	r0, r3
 800c468:	f7f8 fac8 	bl	80049fc <HAL_PCD_EP_SetStall>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	4618      	mov	r0, r3
 800c474:	f000 f8de 	bl	800c634 <USBD_Get_USB_Status>
 800c478:	4603      	mov	r3, r0
 800c47a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c47c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b084      	sub	sp, #16
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	460b      	mov	r3, r1
 800c490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4a0:	78fa      	ldrb	r2, [r7, #3]
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f8 fb0d 	bl	8004ac4 <HAL_PCD_EP_ClrStall>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f8bf 	bl	800c634 <USBD_Get_USB_Status>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	da0b      	bge.n	800c4f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	333e      	adds	r3, #62	@ 0x3e
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	e00b      	b.n	800c510 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4f8:	78fb      	ldrb	r3, [r7, #3]
 800c4fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4fe:	68f9      	ldr	r1, [r7, #12]
 800c500:	4613      	mov	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	440b      	add	r3, r1
 800c50a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c50e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c536:	78fa      	ldrb	r2, [r7, #3]
 800c538:	4611      	mov	r1, r2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f8 f8da 	bl	80046f4 <HAL_PCD_SetAddress>
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f874 	bl	800c634 <USBD_Get_USB_Status>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c550:	7bbb      	ldrb	r3, [r7, #14]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b086      	sub	sp, #24
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
 800c566:	460b      	mov	r3, r1
 800c568:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c578:	7af9      	ldrb	r1, [r7, #11]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	f7f8 f9f3 	bl	8004968 <HAL_PCD_EP_Transmit>
 800c582:	4603      	mov	r3, r0
 800c584:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f853 	bl	800c634 <USBD_Get_USB_Status>
 800c58e:	4603      	mov	r3, r0
 800c590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c592:	7dbb      	ldrb	r3, [r7, #22]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c5ba:	7af9      	ldrb	r1, [r7, #11]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	f7f8 f96f 	bl	80048a2 <HAL_PCD_EP_Receive>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 f832 	bl	800c634 <USBD_Get_USB_Status>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3718      	adds	r7, #24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5f0:	78fa      	ldrb	r2, [r7, #3]
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7f8 f99f 	bl	8004938 <HAL_PCD_EP_GetRxCount>
 800c5fa:	4603      	mov	r3, r0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c60c:	4b03      	ldr	r3, [pc, #12]	@ (800c61c <USBD_static_malloc+0x18>)
}
 800c60e:	4618      	mov	r0, r3
 800c610:	370c      	adds	r7, #12
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20001b38 	.word	0x20001b38

0800c620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]

}
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	2b03      	cmp	r3, #3
 800c646:	d817      	bhi.n	800c678 <USBD_Get_USB_Status+0x44>
 800c648:	a201      	add	r2, pc, #4	@ (adr r2, 800c650 <USBD_Get_USB_Status+0x1c>)
 800c64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64e:	bf00      	nop
 800c650:	0800c661 	.word	0x0800c661
 800c654:	0800c667 	.word	0x0800c667
 800c658:	0800c66d 	.word	0x0800c66d
 800c65c:	0800c673 	.word	0x0800c673
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
    break;
 800c664:	e00b      	b.n	800c67e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c666:	2303      	movs	r3, #3
 800c668:	73fb      	strb	r3, [r7, #15]
    break;
 800c66a:	e008      	b.n	800c67e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c66c:	2301      	movs	r3, #1
 800c66e:	73fb      	strb	r3, [r7, #15]
    break;
 800c670:	e005      	b.n	800c67e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c672:	2303      	movs	r3, #3
 800c674:	73fb      	strb	r3, [r7, #15]
    break;
 800c676:	e002      	b.n	800c67e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c678:	2303      	movs	r3, #3
 800c67a:	73fb      	strb	r3, [r7, #15]
    break;
 800c67c:	bf00      	nop
  }
  return usb_status;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <led_off>:
uint8_t gl_loading_bar_stop_flag = 0;



void led_off()
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_ANOD_GPIO_Port, LED_ANOD_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c690:	2201      	movs	r2, #1
 800c692:	2104      	movs	r1, #4
 800c694:	4827      	ldr	r0, [pc, #156]	@ (800c734 <led_off+0xa8>)
 800c696:	f7f6 fdb1 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800c69a:	2201      	movs	r2, #1
 800c69c:	2120      	movs	r1, #32
 800c69e:	4825      	ldr	r0, [pc, #148]	@ (800c734 <led_off+0xa8>)
 800c6a0:	f7f6 fdac 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	2110      	movs	r1, #16
 800c6a8:	4823      	ldr	r0, [pc, #140]	@ (800c738 <led_off+0xac>)
 800c6aa:	f7f6 fda7 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	2180      	movs	r1, #128	@ 0x80
 800c6b2:	4821      	ldr	r0, [pc, #132]	@ (800c738 <led_off+0xac>)
 800c6b4:	f7f6 fda2 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_SET);
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c6be:	481e      	ldr	r0, [pc, #120]	@ (800c738 <led_off+0xac>)
 800c6c0:	f7f6 fd9c 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c6ca:	481a      	ldr	r0, [pc, #104]	@ (800c734 <led_off+0xa8>)
 800c6cc:	f7f6 fd96 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	2108      	movs	r1, #8
 800c6d4:	4817      	ldr	r0, [pc, #92]	@ (800c734 <led_off+0xa8>)
 800c6d6:	f7f6 fd91 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800c6da:	2201      	movs	r2, #1
 800c6dc:	2101      	movs	r1, #1
 800c6de:	4816      	ldr	r0, [pc, #88]	@ (800c738 <led_off+0xac>)
 800c6e0:	f7f6 fd8c 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	2120      	movs	r1, #32
 800c6e8:	4813      	ldr	r0, [pc, #76]	@ (800c738 <led_off+0xac>)
 800c6ea:	f7f6 fd87 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_SET);
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c6f4:	4810      	ldr	r0, [pc, #64]	@ (800c738 <led_off+0xac>)
 800c6f6:	f7f6 fd81 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	480d      	ldr	r0, [pc, #52]	@ (800c734 <led_off+0xa8>)
 800c700:	f7f6 fd7c 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c704:	2201      	movs	r2, #1
 800c706:	2110      	movs	r1, #16
 800c708:	480a      	ldr	r0, [pc, #40]	@ (800c734 <led_off+0xa8>)
 800c70a:	f7f6 fd77 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800c70e:	2201      	movs	r2, #1
 800c710:	2102      	movs	r1, #2
 800c712:	4809      	ldr	r0, [pc, #36]	@ (800c738 <led_off+0xac>)
 800c714:	f7f6 fd72 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800c718:	2201      	movs	r2, #1
 800c71a:	2140      	movs	r1, #64	@ 0x40
 800c71c:	4806      	ldr	r0, [pc, #24]	@ (800c738 <led_off+0xac>)
 800c71e:	f7f6 fd6d 	bl	80031fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_SET);
 800c722:	2201      	movs	r2, #1
 800c724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c728:	4803      	ldr	r0, [pc, #12]	@ (800c738 <led_off+0xac>)
 800c72a:	f7f6 fd67 	bl	80031fc <HAL_GPIO_WritePin>
};
 800c72e:	bf00      	nop
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	40020400 	.word	0x40020400
 800c738:	40020800 	.word	0x40020800

0800c73c <led_measuring_results_reflection>:
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
};

void led_measuring_results_reflection(uint8_t status) //conduct or acidity measuarement result
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]

	led_off();
 800c746:	f7ff ffa1 	bl	800c68c <led_off>



	if(status == MEAS_RESULTS_IS_GOOD)
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d11a      	bne.n	800c786 <led_measuring_results_reflection+0x4a>
	{
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c750:	2200      	movs	r2, #0
 800c752:	2102      	movs	r1, #2
 800c754:	4839      	ldr	r0, [pc, #228]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c756:	f7f6 fd51 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c75a:	2200      	movs	r2, #0
 800c75c:	2110      	movs	r1, #16
 800c75e:	4837      	ldr	r0, [pc, #220]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c760:	f7f6 fd4c 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c764:	2200      	movs	r2, #0
 800c766:	2102      	movs	r1, #2
 800c768:	4835      	ldr	r0, [pc, #212]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c76a:	f7f6 fd47 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c76e:	2200      	movs	r2, #0
 800c770:	2140      	movs	r1, #64	@ 0x40
 800c772:	4833      	ldr	r0, [pc, #204]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c774:	f7f6 fd42 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800c778:	2200      	movs	r2, #0
 800c77a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c77e:	4830      	ldr	r0, [pc, #192]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c780:	f7f6 fd3c 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
	}

}
 800c784:	e056      	b.n	800c834 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d135      	bne.n	800c7f8 <led_measuring_results_reflection+0xbc>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c78c:	2200      	movs	r2, #0
 800c78e:	2102      	movs	r1, #2
 800c790:	482a      	ldr	r0, [pc, #168]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c792:	f7f6 fd33 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c796:	2200      	movs	r2, #0
 800c798:	2110      	movs	r1, #16
 800c79a:	4828      	ldr	r0, [pc, #160]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c79c:	f7f6 fd2e 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2102      	movs	r1, #2
 800c7a4:	4826      	ldr	r0, [pc, #152]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7a6:	f7f6 fd29 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2140      	movs	r1, #64	@ 0x40
 800c7ae:	4824      	ldr	r0, [pc, #144]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7b0:	f7f6 fd24 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c7ba:	4821      	ldr	r0, [pc, #132]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7bc:	f7f6 fd1e 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c7c6:	481d      	ldr	r0, [pc, #116]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c7c8:	f7f6 fd18 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2108      	movs	r1, #8
 800c7d0:	481a      	ldr	r0, [pc, #104]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c7d2:	f7f6 fd13 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	2101      	movs	r1, #1
 800c7da:	4819      	ldr	r0, [pc, #100]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7dc:	f7f6 fd0e 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2120      	movs	r1, #32
 800c7e4:	4816      	ldr	r0, [pc, #88]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7e6:	f7f6 fd09 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c7f0:	4813      	ldr	r0, [pc, #76]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c7f2:	f7f6 fd03 	bl	80031fc <HAL_GPIO_WritePin>
}
 800c7f6:	e01d      	b.n	800c834 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_BAD)
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d11a      	bne.n	800c834 <led_measuring_results_reflection+0xf8>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c7fe:	2200      	movs	r2, #0
 800c800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c804:	480d      	ldr	r0, [pc, #52]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c806:	f7f6 fcf9 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c80a:	2200      	movs	r2, #0
 800c80c:	2108      	movs	r1, #8
 800c80e:	480b      	ldr	r0, [pc, #44]	@ (800c83c <led_measuring_results_reflection+0x100>)
 800c810:	f7f6 fcf4 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c814:	2200      	movs	r2, #0
 800c816:	2101      	movs	r1, #1
 800c818:	4809      	ldr	r0, [pc, #36]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c81a:	f7f6 fcef 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c81e:	2200      	movs	r2, #0
 800c820:	2120      	movs	r1, #32
 800c822:	4807      	ldr	r0, [pc, #28]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c824:	f7f6 fcea 	bl	80031fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800c828:	2200      	movs	r2, #0
 800c82a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c82e:	4804      	ldr	r0, [pc, #16]	@ (800c840 <led_measuring_results_reflection+0x104>)
 800c830:	f7f6 fce4 	bl	80031fc <HAL_GPIO_WritePin>
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	40020400 	.word	0x40020400
 800c840:	40020800 	.word	0x40020800

0800c844 <led_accumulation>:

void led_accumulation()
{
 800c844:	b580      	push	{r7, lr}
 800c846:	af00      	add	r7, sp, #0



	if(gl_int_5hz_tim2)
 800c848:	4bc0      	ldr	r3, [pc, #768]	@ (800cb4c <led_accumulation+0x308>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 8212 	beq.w	800cc76 <led_accumulation+0x432>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 800c852:	48bf      	ldr	r0, [pc, #764]	@ (800cb50 <led_accumulation+0x30c>)
 800c854:	f7fa fb18 	bl	8006e88 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800c858:	2108      	movs	r1, #8
 800c85a:	48bd      	ldr	r0, [pc, #756]	@ (800cb50 <led_accumulation+0x30c>)
 800c85c:	f7fa fbfe 	bl	800705c <HAL_TIM_PWM_Start>
		TIM2->CCR3 = 350;
 800c860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c864:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c868:	63da      	str	r2, [r3, #60]	@ 0x3c
		gl_int_5hz_tim2 = 0;
 800c86a:	4bb8      	ldr	r3, [pc, #736]	@ (800cb4c <led_accumulation+0x308>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]

		if(gl_led_increment < 15 && gl_led_increment > 0)
 800c870:	4bb8      	ldr	r3, [pc, #736]	@ (800cb54 <led_accumulation+0x310>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b0e      	cmp	r3, #14
 800c876:	d809      	bhi.n	800c88c <led_accumulation+0x48>
 800c878:	4bb6      	ldr	r3, [pc, #728]	@ (800cb54 <led_accumulation+0x310>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d005      	beq.n	800c88c <led_accumulation+0x48>
		{
			gl_led_increment++;
 800c880:	4bb4      	ldr	r3, [pc, #720]	@ (800cb54 <led_accumulation+0x310>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	b2da      	uxtb	r2, r3
 800c888:	4bb2      	ldr	r3, [pc, #712]	@ (800cb54 <led_accumulation+0x310>)
 800c88a:	701a      	strb	r2, [r3, #0]
		}

		switch(gl_led_increment)
 800c88c:	4bb1      	ldr	r3, [pc, #708]	@ (800cb54 <led_accumulation+0x310>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2b0f      	cmp	r3, #15
 800c892:	f200 81f0 	bhi.w	800cc76 <led_accumulation+0x432>
 800c896:	a201      	add	r2, pc, #4	@ (adr r2, 800c89c <led_accumulation+0x58>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8dd 	.word	0x0800c8dd
 800c8a0:	0800cc77 	.word	0x0800cc77
 800c8a4:	0800c8ef 	.word	0x0800c8ef
 800c8a8:	0800c911 	.word	0x0800c911
 800c8ac:	0800c951 	.word	0x0800c951
 800c8b0:	0800c98f 	.word	0x0800c98f
 800c8b4:	0800c9ed 	.word	0x0800c9ed
 800c8b8:	0800ca6f 	.word	0x0800ca6f
 800c8bc:	0800caad 	.word	0x0800caad
 800c8c0:	0800cb0b 	.word	0x0800cb0b
 800c8c4:	0800cb61 	.word	0x0800cb61
 800c8c8:	0800cb9f 	.word	0x0800cb9f
 800c8cc:	0800cbc1 	.word	0x0800cbc1
 800c8d0:	0800cc01 	.word	0x0800cc01
 800c8d4:	0800cc41 	.word	0x0800cc41
 800c8d8:	0800cc63 	.word	0x0800cc63
		{
		case 0:

			led_off();
 800c8dc:	f7ff fed6 	bl	800c68c <led_off>
			gl_led_increment++;
 800c8e0:	4b9c      	ldr	r3, [pc, #624]	@ (800cb54 <led_accumulation+0x310>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	4b9a      	ldr	r3, [pc, #616]	@ (800cb54 <led_accumulation+0x310>)
 800c8ea:	701a      	strb	r2, [r3, #0]
			break;
 800c8ec:	e1c3      	b.n	800cc76 <led_accumulation+0x432>
		case 2:


			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2104      	movs	r1, #4
 800c8f2:	4899      	ldr	r0, [pc, #612]	@ (800cb58 <led_accumulation+0x314>)
 800c8f4:	f7f6 fc82 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c8fe:	4896      	ldr	r0, [pc, #600]	@ (800cb58 <led_accumulation+0x314>)
 800c900:	f7f6 fc7c 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c904:	2200      	movs	r2, #0
 800c906:	2102      	movs	r1, #2
 800c908:	4893      	ldr	r0, [pc, #588]	@ (800cb58 <led_accumulation+0x314>)
 800c90a:	f7f6 fc77 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800c90e:	e1b2      	b.n	800cc76 <led_accumulation+0x432>
		case 3:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800c910:	2201      	movs	r2, #1
 800c912:	2104      	movs	r1, #4
 800c914:	4890      	ldr	r0, [pc, #576]	@ (800cb58 <led_accumulation+0x314>)
 800c916:	f7f6 fc71 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800c91a:	2201      	movs	r2, #1
 800c91c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c920:	488d      	ldr	r0, [pc, #564]	@ (800cb58 <led_accumulation+0x314>)
 800c922:	f7f6 fc6b 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800c926:	2201      	movs	r2, #1
 800c928:	2102      	movs	r1, #2
 800c92a:	488b      	ldr	r0, [pc, #556]	@ (800cb58 <led_accumulation+0x314>)
 800c92c:	f7f6 fc66 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800c930:	2200      	movs	r2, #0
 800c932:	2120      	movs	r1, #32
 800c934:	4888      	ldr	r0, [pc, #544]	@ (800cb58 <led_accumulation+0x314>)
 800c936:	f7f6 fc61 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800c93a:	2200      	movs	r2, #0
 800c93c:	2108      	movs	r1, #8
 800c93e:	4886      	ldr	r0, [pc, #536]	@ (800cb58 <led_accumulation+0x314>)
 800c940:	f7f6 fc5c 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800c944:	2200      	movs	r2, #0
 800c946:	2110      	movs	r1, #16
 800c948:	4883      	ldr	r0, [pc, #524]	@ (800cb58 <led_accumulation+0x314>)
 800c94a:	f7f6 fc57 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800c94e:	e192      	b.n	800cc76 <led_accumulation+0x432>
		case 4:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800c950:	2201      	movs	r2, #1
 800c952:	2120      	movs	r1, #32
 800c954:	4880      	ldr	r0, [pc, #512]	@ (800cb58 <led_accumulation+0x314>)
 800c956:	f7f6 fc51 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800c95a:	2201      	movs	r2, #1
 800c95c:	2108      	movs	r1, #8
 800c95e:	487e      	ldr	r0, [pc, #504]	@ (800cb58 <led_accumulation+0x314>)
 800c960:	f7f6 fc4c 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800c964:	2201      	movs	r2, #1
 800c966:	2110      	movs	r1, #16
 800c968:	487b      	ldr	r0, [pc, #492]	@ (800cb58 <led_accumulation+0x314>)
 800c96a:	f7f6 fc47 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800c96e:	2200      	movs	r2, #0
 800c970:	2110      	movs	r1, #16
 800c972:	487a      	ldr	r0, [pc, #488]	@ (800cb5c <led_accumulation+0x318>)
 800c974:	f7f6 fc42 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800c978:	2200      	movs	r2, #0
 800c97a:	2101      	movs	r1, #1
 800c97c:	4877      	ldr	r0, [pc, #476]	@ (800cb5c <led_accumulation+0x318>)
 800c97e:	f7f6 fc3d 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800c982:	2200      	movs	r2, #0
 800c984:	2102      	movs	r1, #2
 800c986:	4875      	ldr	r0, [pc, #468]	@ (800cb5c <led_accumulation+0x318>)
 800c988:	f7f6 fc38 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800c98c:	e173      	b.n	800cc76 <led_accumulation+0x432>
		case 5:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800c98e:	2201      	movs	r2, #1
 800c990:	2110      	movs	r1, #16
 800c992:	4872      	ldr	r0, [pc, #456]	@ (800cb5c <led_accumulation+0x318>)
 800c994:	f7f6 fc32 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800c998:	2201      	movs	r2, #1
 800c99a:	2101      	movs	r1, #1
 800c99c:	486f      	ldr	r0, [pc, #444]	@ (800cb5c <led_accumulation+0x318>)
 800c99e:	f7f6 fc2d 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	2102      	movs	r1, #2
 800c9a6:	486d      	ldr	r0, [pc, #436]	@ (800cb5c <led_accumulation+0x318>)
 800c9a8:	f7f6 fc28 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2180      	movs	r1, #128	@ 0x80
 800c9b0:	486a      	ldr	r0, [pc, #424]	@ (800cb5c <led_accumulation+0x318>)
 800c9b2:	f7f6 fc23 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2120      	movs	r1, #32
 800c9ba:	4868      	ldr	r0, [pc, #416]	@ (800cb5c <led_accumulation+0x318>)
 800c9bc:	f7f6 fc1e 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	2140      	movs	r1, #64	@ 0x40
 800c9c4:	4865      	ldr	r0, [pc, #404]	@ (800cb5c <led_accumulation+0x318>)
 800c9c6:	f7f6 fc19 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2104      	movs	r1, #4
 800c9ce:	4862      	ldr	r0, [pc, #392]	@ (800cb58 <led_accumulation+0x314>)
 800c9d0:	f7f6 fc14 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c9da:	485f      	ldr	r0, [pc, #380]	@ (800cb58 <led_accumulation+0x314>)
 800c9dc:	f7f6 fc0e 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	485c      	ldr	r0, [pc, #368]	@ (800cb58 <led_accumulation+0x314>)
 800c9e6:	f7f6 fc09 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800c9ea:	e144      	b.n	800cc76 <led_accumulation+0x432>
		case 6:
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	2180      	movs	r1, #128	@ 0x80
 800c9f0:	485a      	ldr	r0, [pc, #360]	@ (800cb5c <led_accumulation+0x318>)
 800c9f2:	f7f6 fc03 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	2120      	movs	r1, #32
 800c9fa:	4858      	ldr	r0, [pc, #352]	@ (800cb5c <led_accumulation+0x318>)
 800c9fc:	f7f6 fbfe 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800ca00:	2201      	movs	r2, #1
 800ca02:	2140      	movs	r1, #64	@ 0x40
 800ca04:	4855      	ldr	r0, [pc, #340]	@ (800cb5c <led_accumulation+0x318>)
 800ca06:	f7f6 fbf9 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_RESET);
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ca10:	4852      	ldr	r0, [pc, #328]	@ (800cb5c <led_accumulation+0x318>)
 800ca12:	f7f6 fbf3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800ca16:	2200      	movs	r2, #0
 800ca18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ca1c:	484f      	ldr	r0, [pc, #316]	@ (800cb5c <led_accumulation+0x318>)
 800ca1e:	f7f6 fbed 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800ca22:	2200      	movs	r2, #0
 800ca24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ca28:	484c      	ldr	r0, [pc, #304]	@ (800cb5c <led_accumulation+0x318>)
 800ca2a:	f7f6 fbe7 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2120      	movs	r1, #32
 800ca32:	4849      	ldr	r0, [pc, #292]	@ (800cb58 <led_accumulation+0x314>)
 800ca34:	f7f6 fbe2 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2108      	movs	r1, #8
 800ca3c:	4846      	ldr	r0, [pc, #280]	@ (800cb58 <led_accumulation+0x314>)
 800ca3e:	f7f6 fbdd 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800ca42:	2200      	movs	r2, #0
 800ca44:	2110      	movs	r1, #16
 800ca46:	4844      	ldr	r0, [pc, #272]	@ (800cb58 <led_accumulation+0x314>)
 800ca48:	f7f6 fbd8 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	2104      	movs	r1, #4
 800ca50:	4841      	ldr	r0, [pc, #260]	@ (800cb58 <led_accumulation+0x314>)
 800ca52:	f7f6 fbd3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800ca56:	2201      	movs	r2, #1
 800ca58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ca5c:	483e      	ldr	r0, [pc, #248]	@ (800cb58 <led_accumulation+0x314>)
 800ca5e:	f7f6 fbcd 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800ca62:	2201      	movs	r2, #1
 800ca64:	2102      	movs	r1, #2
 800ca66:	483c      	ldr	r0, [pc, #240]	@ (800cb58 <led_accumulation+0x314>)
 800ca68:	f7f6 fbc8 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800ca6c:	e103      	b.n	800cc76 <led_accumulation+0x432>
		case 7:

			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800ca6e:	2201      	movs	r2, #1
 800ca70:	2120      	movs	r1, #32
 800ca72:	4839      	ldr	r0, [pc, #228]	@ (800cb58 <led_accumulation+0x314>)
 800ca74:	f7f6 fbc2 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800ca78:	2201      	movs	r2, #1
 800ca7a:	2108      	movs	r1, #8
 800ca7c:	4836      	ldr	r0, [pc, #216]	@ (800cb58 <led_accumulation+0x314>)
 800ca7e:	f7f6 fbbd 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800ca82:	2201      	movs	r2, #1
 800ca84:	2110      	movs	r1, #16
 800ca86:	4834      	ldr	r0, [pc, #208]	@ (800cb58 <led_accumulation+0x314>)
 800ca88:	f7f6 fbb8 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2110      	movs	r1, #16
 800ca90:	4832      	ldr	r0, [pc, #200]	@ (800cb5c <led_accumulation+0x318>)
 800ca92:	f7f6 fbb3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800ca96:	2200      	movs	r2, #0
 800ca98:	2101      	movs	r1, #1
 800ca9a:	4830      	ldr	r0, [pc, #192]	@ (800cb5c <led_accumulation+0x318>)
 800ca9c:	f7f6 fbae 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800caa0:	2200      	movs	r2, #0
 800caa2:	2102      	movs	r1, #2
 800caa4:	482d      	ldr	r0, [pc, #180]	@ (800cb5c <led_accumulation+0x318>)
 800caa6:	f7f6 fba9 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800caaa:	e0e4      	b.n	800cc76 <led_accumulation+0x432>
		case 8:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800caac:	2201      	movs	r2, #1
 800caae:	2110      	movs	r1, #16
 800cab0:	482a      	ldr	r0, [pc, #168]	@ (800cb5c <led_accumulation+0x318>)
 800cab2:	f7f6 fba3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800cab6:	2201      	movs	r2, #1
 800cab8:	2101      	movs	r1, #1
 800caba:	4828      	ldr	r0, [pc, #160]	@ (800cb5c <led_accumulation+0x318>)
 800cabc:	f7f6 fb9e 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800cac0:	2201      	movs	r2, #1
 800cac2:	2102      	movs	r1, #2
 800cac4:	4825      	ldr	r0, [pc, #148]	@ (800cb5c <led_accumulation+0x318>)
 800cac6:	f7f6 fb99 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800caca:	2200      	movs	r2, #0
 800cacc:	2180      	movs	r1, #128	@ 0x80
 800cace:	4823      	ldr	r0, [pc, #140]	@ (800cb5c <led_accumulation+0x318>)
 800cad0:	f7f6 fb94 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800cad4:	2200      	movs	r2, #0
 800cad6:	2120      	movs	r1, #32
 800cad8:	4820      	ldr	r0, [pc, #128]	@ (800cb5c <led_accumulation+0x318>)
 800cada:	f7f6 fb8f 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800cade:	2200      	movs	r2, #0
 800cae0:	2140      	movs	r1, #64	@ 0x40
 800cae2:	481e      	ldr	r0, [pc, #120]	@ (800cb5c <led_accumulation+0x318>)
 800cae4:	f7f6 fb8a 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800cae8:	2200      	movs	r2, #0
 800caea:	2104      	movs	r1, #4
 800caec:	481a      	ldr	r0, [pc, #104]	@ (800cb58 <led_accumulation+0x314>)
 800caee:	f7f6 fb85 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800caf2:	2200      	movs	r2, #0
 800caf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800caf8:	4817      	ldr	r0, [pc, #92]	@ (800cb58 <led_accumulation+0x314>)
 800cafa:	f7f6 fb7f 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800cafe:	2200      	movs	r2, #0
 800cb00:	2102      	movs	r1, #2
 800cb02:	4815      	ldr	r0, [pc, #84]	@ (800cb58 <led_accumulation+0x314>)
 800cb04:	f7f6 fb7a 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cb08:	e0b5      	b.n	800cc76 <led_accumulation+0x432>
		case 9:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	2104      	movs	r1, #4
 800cb0e:	4812      	ldr	r0, [pc, #72]	@ (800cb58 <led_accumulation+0x314>)
 800cb10:	f7f6 fb74 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800cb14:	2201      	movs	r2, #1
 800cb16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cb1a:	480f      	ldr	r0, [pc, #60]	@ (800cb58 <led_accumulation+0x314>)
 800cb1c:	f7f6 fb6e 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800cb20:	2201      	movs	r2, #1
 800cb22:	2102      	movs	r1, #2
 800cb24:	480c      	ldr	r0, [pc, #48]	@ (800cb58 <led_accumulation+0x314>)
 800cb26:	f7f6 fb69 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	2120      	movs	r1, #32
 800cb2e:	480a      	ldr	r0, [pc, #40]	@ (800cb58 <led_accumulation+0x314>)
 800cb30:	f7f6 fb64 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cb34:	2200      	movs	r2, #0
 800cb36:	2108      	movs	r1, #8
 800cb38:	4807      	ldr	r0, [pc, #28]	@ (800cb58 <led_accumulation+0x314>)
 800cb3a:	f7f6 fb5f 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2110      	movs	r1, #16
 800cb42:	4805      	ldr	r0, [pc, #20]	@ (800cb58 <led_accumulation+0x314>)
 800cb44:	f7f6 fb5a 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cb48:	e095      	b.n	800cc76 <led_accumulation+0x432>
 800cb4a:	bf00      	nop
 800cb4c:	20000940 	.word	0x20000940
 800cb50:	20000860 	.word	0x20000860
 800cb54:	20001d58 	.word	0x20001d58
 800cb58:	40020400 	.word	0x40020400
 800cb5c:	40020800 	.word	0x40020800
		case 10:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800cb60:	2201      	movs	r2, #1
 800cb62:	2120      	movs	r1, #32
 800cb64:	4845      	ldr	r0, [pc, #276]	@ (800cc7c <led_accumulation+0x438>)
 800cb66:	f7f6 fb49 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	2108      	movs	r1, #8
 800cb6e:	4843      	ldr	r0, [pc, #268]	@ (800cc7c <led_accumulation+0x438>)
 800cb70:	f7f6 fb44 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800cb74:	2201      	movs	r2, #1
 800cb76:	2110      	movs	r1, #16
 800cb78:	4840      	ldr	r0, [pc, #256]	@ (800cc7c <led_accumulation+0x438>)
 800cb7a:	f7f6 fb3f 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2110      	movs	r1, #16
 800cb82:	483f      	ldr	r0, [pc, #252]	@ (800cc80 <led_accumulation+0x43c>)
 800cb84:	f7f6 fb3a 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	483c      	ldr	r0, [pc, #240]	@ (800cc80 <led_accumulation+0x43c>)
 800cb8e:	f7f6 fb35 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800cb92:	2200      	movs	r2, #0
 800cb94:	2102      	movs	r1, #2
 800cb96:	483a      	ldr	r0, [pc, #232]	@ (800cc80 <led_accumulation+0x43c>)
 800cb98:	f7f6 fb30 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cb9c:	e06b      	b.n	800cc76 <led_accumulation+0x432>
		case 11:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2104      	movs	r1, #4
 800cba2:	4836      	ldr	r0, [pc, #216]	@ (800cc7c <led_accumulation+0x438>)
 800cba4:	f7f6 fb2a 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cbae:	4833      	ldr	r0, [pc, #204]	@ (800cc7c <led_accumulation+0x438>)
 800cbb0:	f7f6 fb24 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2102      	movs	r1, #2
 800cbb8:	4830      	ldr	r0, [pc, #192]	@ (800cc7c <led_accumulation+0x438>)
 800cbba:	f7f6 fb1f 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cbbe:	e05a      	b.n	800cc76 <led_accumulation+0x432>
		case 12:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	2104      	movs	r1, #4
 800cbc4:	482d      	ldr	r0, [pc, #180]	@ (800cc7c <led_accumulation+0x438>)
 800cbc6:	f7f6 fb19 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cbd0:	482a      	ldr	r0, [pc, #168]	@ (800cc7c <led_accumulation+0x438>)
 800cbd2:	f7f6 fb13 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	2102      	movs	r1, #2
 800cbda:	4828      	ldr	r0, [pc, #160]	@ (800cc7c <led_accumulation+0x438>)
 800cbdc:	f7f6 fb0e 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2120      	movs	r1, #32
 800cbe4:	4825      	ldr	r0, [pc, #148]	@ (800cc7c <led_accumulation+0x438>)
 800cbe6:	f7f6 fb09 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cbea:	2200      	movs	r2, #0
 800cbec:	2108      	movs	r1, #8
 800cbee:	4823      	ldr	r0, [pc, #140]	@ (800cc7c <led_accumulation+0x438>)
 800cbf0:	f7f6 fb04 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2110      	movs	r1, #16
 800cbf8:	4820      	ldr	r0, [pc, #128]	@ (800cc7c <led_accumulation+0x438>)
 800cbfa:	f7f6 faff 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cbfe:	e03a      	b.n	800cc76 <led_accumulation+0x432>
		case 13:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800cc00:	2201      	movs	r2, #1
 800cc02:	2104      	movs	r1, #4
 800cc04:	481d      	ldr	r0, [pc, #116]	@ (800cc7c <led_accumulation+0x438>)
 800cc06:	f7f6 faf9 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc10:	481a      	ldr	r0, [pc, #104]	@ (800cc7c <led_accumulation+0x438>)
 800cc12:	f7f6 faf3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800cc16:	2201      	movs	r2, #1
 800cc18:	2102      	movs	r1, #2
 800cc1a:	4818      	ldr	r0, [pc, #96]	@ (800cc7c <led_accumulation+0x438>)
 800cc1c:	f7f6 faee 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800cc20:	2200      	movs	r2, #0
 800cc22:	2120      	movs	r1, #32
 800cc24:	4815      	ldr	r0, [pc, #84]	@ (800cc7c <led_accumulation+0x438>)
 800cc26:	f7f6 fae9 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2108      	movs	r1, #8
 800cc2e:	4813      	ldr	r0, [pc, #76]	@ (800cc7c <led_accumulation+0x438>)
 800cc30:	f7f6 fae4 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800cc34:	2200      	movs	r2, #0
 800cc36:	2110      	movs	r1, #16
 800cc38:	4810      	ldr	r0, [pc, #64]	@ (800cc7c <led_accumulation+0x438>)
 800cc3a:	f7f6 fadf 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cc3e:	e01a      	b.n	800cc76 <led_accumulation+0x432>
		case 14:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800cc40:	2200      	movs	r2, #0
 800cc42:	2104      	movs	r1, #4
 800cc44:	480d      	ldr	r0, [pc, #52]	@ (800cc7c <led_accumulation+0x438>)
 800cc46:	f7f6 fad9 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc50:	480a      	ldr	r0, [pc, #40]	@ (800cc7c <led_accumulation+0x438>)
 800cc52:	f7f6 fad3 	bl	80031fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800cc56:	2200      	movs	r2, #0
 800cc58:	2102      	movs	r1, #2
 800cc5a:	4808      	ldr	r0, [pc, #32]	@ (800cc7c <led_accumulation+0x438>)
 800cc5c:	f7f6 face 	bl	80031fc <HAL_GPIO_WritePin>
			break;
 800cc60:	e009      	b.n	800cc76 <led_accumulation+0x432>

		case 15:
			led_1hz_counter = 0;
 800cc62:	4b08      	ldr	r3, [pc, #32]	@ (800cc84 <led_accumulation+0x440>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
			gl_led_pwm_state = LED_PWM_CCR_CHANGEBALE;
 800cc68:	4b07      	ldr	r3, [pc, #28]	@ (800cc88 <led_accumulation+0x444>)
 800cc6a:	2202      	movs	r2, #2
 800cc6c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 800cc6e:	4807      	ldr	r0, [pc, #28]	@ (800cc8c <led_accumulation+0x448>)
 800cc70:	f7fa f96c 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
			break;
 800cc74:	bf00      	nop
		}
	}
};
 800cc76:	bf00      	nop
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	40020400 	.word	0x40020400
 800cc80:	40020800 	.word	0x40020800
 800cc84:	20000942 	.word	0x20000942
 800cc88:	200005d6 	.word	0x200005d6
 800cc8c:	20000860 	.word	0x20000860

0800cc90 <conduct_acidity_loading_bar_calculation>:

int conduct_acidity_loading_bar_calculation(uint16_t reference_acidity_conductivity,  uint8_t temperature_correction_coef , uint16_t measured_acidity_conductivity )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	80fb      	strh	r3, [r7, #6]
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	717b      	strb	r3, [r7, #5]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	807b      	strh	r3, [r7, #2]

	//Кол-во секций(уровней) заполенения бара загрузки = 13 . От 0 до 100 с щагом 10 и от 100 до 200 с шагом 50(100,150,200).

	uint32_t reference_acidity_conductivity_mul_100 = reference_acidity_conductivity * REF_TEMP_COEFF;  // Референсный
 800cca2:	88fb      	ldrh	r3, [r7, #6]
 800cca4:	2264      	movs	r2, #100	@ 0x64
 800cca6:	fb02 f303 	mul.w	r3, r2, r3
 800ccaa:	613b      	str	r3, [r7, #16]
	uint32_t measured_value_with_temp_coeff = measured_acidity_conductivity * temperature_correction_coef;
 800ccac:	887b      	ldrh	r3, [r7, #2]
 800ccae:	797a      	ldrb	r2, [r7, #5]
 800ccb0:	fb02 f303 	mul.w	r3, r2, r3
 800ccb4:	60fb      	str	r3, [r7, #12]
	uint16_t ref_value_10th_part = reference_acidity_conductivity_mul_100 /10;  // десятая часть
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd30 <conduct_acidity_loading_bar_calculation+0xa0>)
 800ccba:	fba2 2303 	umull	r2, r3, r2, r3
 800ccbe:	08db      	lsrs	r3, r3, #3
 800ccc0:	817b      	strh	r3, [r7, #10]

	uint8_t bar_index_value = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	75fb      	strb	r3, [r7, #23]

	if (ref_value_10th_part > measured_value_with_temp_coeff)
 800ccc6:	897b      	ldrh	r3, [r7, #10]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d202      	bcs.n	800ccd4 <conduct_acidity_loading_bar_calculation+0x44>
		{
			bar_index_value = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
 800ccd2:	e026      	b.n	800cd22 <conduct_acidity_loading_bar_calculation+0x92>
		}
	else if (ref_value_10th_part <= measured_value_with_temp_coeff)
 800ccd4:	897b      	ldrh	r3, [r7, #10]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d322      	bcc.n	800cd22 <conduct_acidity_loading_bar_calculation+0x92>
	{
		if(measured_value_with_temp_coeff/ref_value_10th_part<=10)
 800ccdc:	897b      	ldrh	r3, [r7, #10]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce4:	2b0a      	cmp	r3, #10
 800cce6:	d805      	bhi.n	800ccf4 <conduct_acidity_loading_bar_calculation+0x64>
		{
			bar_index_value = measured_value_with_temp_coeff/ref_value_10th_part;
 800cce8:	897b      	ldrh	r3, [r7, #10]
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf0:	75fb      	strb	r3, [r7, #23]
 800ccf2:	e016      	b.n	800cd22 <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part >10 && measured_value_with_temp_coeff/ref_value_10th_part<=15)
 800ccf4:	897b      	ldrh	r3, [r7, #10]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccfc:	2b0a      	cmp	r3, #10
 800ccfe:	d908      	bls.n	800cd12 <conduct_acidity_loading_bar_calculation+0x82>
 800cd00:	897b      	ldrh	r3, [r7, #10]
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd08:	2b0f      	cmp	r3, #15
 800cd0a:	d802      	bhi.n	800cd12 <conduct_acidity_loading_bar_calculation+0x82>
		{
			bar_index_value = 11;
 800cd0c:	230b      	movs	r3, #11
 800cd0e:	75fb      	strb	r3, [r7, #23]
 800cd10:	e007      	b.n	800cd22 <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part > 15 )
 800cd12:	897b      	ldrh	r3, [r7, #10]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1a:	2b0f      	cmp	r3, #15
 800cd1c:	d901      	bls.n	800cd22 <conduct_acidity_loading_bar_calculation+0x92>
		{
			bar_index_value = 12;
 800cd1e:	230c      	movs	r3, #12
 800cd20:	75fb      	strb	r3, [r7, #23]
		}
	}

	return bar_index_value;
 800cd22:	7dfb      	ldrb	r3, [r7, #23]


}
 800cd24:	4618      	mov	r0, r3
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	cccccccd 	.word	0xcccccccd

0800cd34 <display_loading_status>:

int display_loading_status(uint8_t bar_index,uint8_t id )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	460a      	mov	r2, r1
 800cd3e:	71fb      	strb	r3, [r7, #7]
 800cd40:	4613      	mov	r3, r2
 800cd42:	71bb      	strb	r3, [r7, #6]
	SPI_Flash_to_LCD(LOADING_BAR,16224 + 1800 * bar_index, 100, 9, 48, 55);
 800cd44:	79fb      	ldrb	r3, [r7, #7]
 800cd46:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800cd4a:	fb02 f303 	mul.w	r3, r2, r3
 800cd4e:	f503 517d 	add.w	r1, r3, #16192	@ 0x3f40
 800cd52:	3120      	adds	r1, #32
 800cd54:	2337      	movs	r3, #55	@ 0x37
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	2330      	movs	r3, #48	@ 0x30
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2309      	movs	r3, #9
 800cd5e:	2264      	movs	r2, #100	@ 0x64
 800cd60:	2008      	movs	r0, #8
 800cd62:	f7f3 fc3b 	bl	80005dc <SPI_Flash_to_LCD>
	for(int i = 54 ;i<76; i++)
 800cd66:	2336      	movs	r3, #54	@ 0x36
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	e00a      	b.n	800cd82 <display_loading_status+0x4e>
	{
		ST7735_DrawPixel(127, i, ST7735_RED);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800cd74:	4619      	mov	r1, r3
 800cd76:	207f      	movs	r0, #127	@ 0x7f
 800cd78:	f7fe fdb4 	bl	800b8e4 <ST7735_DrawPixel>
	for(int i = 54 ;i<76; i++)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b4b      	cmp	r3, #75	@ 0x4b
 800cd86:	ddf1      	ble.n	800cd6c <display_loading_status+0x38>
	}
	//uint16_t symbol_status_offset = 0;
	if(bar_index<=8)
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	d80c      	bhi.n	800cda8 <display_loading_status+0x74>
	{
		SPI_Flash_to_LCD(CHECK_MARK_M, 8, 44);
 800cd8e:	232c      	movs	r3, #44	@ 0x2c
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	2308      	movs	r3, #8
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	231e      	movs	r3, #30
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f649 315e 	movw	r1, #39774	@ 0x9b5e
 800cd9e:	2008      	movs	r0, #8
 800cda0:	f7f3 fc1c 	bl	80005dc <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_GOOD;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e01f      	b.n	800cde8 <display_loading_status+0xb4>
	}
	else if(bar_index==9)
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	2b09      	cmp	r3, #9
 800cdac:	d10c      	bne.n	800cdc8 <display_loading_status+0x94>
	{
		SPI_Flash_to_LCD(EXCLAMATION_MARK_M, 8, 44);
 800cdae:	232c      	movs	r3, #44	@ 0x2c
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	231e      	movs	r3, #30
 800cdb8:	2220      	movs	r2, #32
 800cdba:	f24a 21c0 	movw	r1, #41664	@ 0xa2c0
 800cdbe:	2008      	movs	r0, #8
 800cdc0:	f7f3 fc0c 	bl	80005dc <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_MEDIUM;
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	e00f      	b.n	800cde8 <display_loading_status+0xb4>
	}
	else if(bar_index>9)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b09      	cmp	r3, #9
 800cdcc:	d90c      	bls.n	800cde8 <display_loading_status+0xb4>
	{
		SPI_Flash_to_LCD(CROSS_MARK_M, 8, 44);
 800cdce:	232c      	movs	r3, #44	@ 0x2c
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	2308      	movs	r3, #8
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	231e      	movs	r3, #30
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f64a 2140 	movw	r1, #43584	@ 0xaa40
 800cdde:	2008      	movs	r0, #8
 800cde0:	f7f3 fbfc 	bl	80005dc <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_BAD;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e7ff      	b.n	800cde8 <display_loading_status+0xb4>
	}
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <display_measuring_product>:
void display_measuring_product(const uint8_t block, const uint16_t offset, uint8_t w, uint8_t h, uint8_t x, uint8_t y)
{
 800cdf0:	b5b0      	push	{r4, r5, r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4623      	mov	r3, r4
 800ce00:	71fb      	strb	r3, [r7, #7]
 800ce02:	4603      	mov	r3, r0
 800ce04:	80bb      	strh	r3, [r7, #4]
 800ce06:	460b      	mov	r3, r1
 800ce08:	71bb      	strb	r3, [r7, #6]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	70fb      	strb	r3, [r7, #3]
	SPI_Flash_to_LCD(block, offset, w, h, x, y);
 800ce0e:	79f8      	ldrb	r0, [r7, #7]
 800ce10:	88b9      	ldrh	r1, [r7, #4]
 800ce12:	79bc      	ldrb	r4, [r7, #6]
 800ce14:	78fd      	ldrb	r5, [r7, #3]
 800ce16:	7e3b      	ldrb	r3, [r7, #24]
 800ce18:	7f3a      	ldrb	r2, [r7, #28]
 800ce1a:	9201      	str	r2, [sp, #4]
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	462b      	mov	r3, r5
 800ce20:	4622      	mov	r2, r4
 800ce22:	f7f3 fbdb 	bl	80005dc <SPI_Flash_to_LCD>
	SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
 800ce26:	2321      	movs	r3, #33	@ 0x21
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	2390      	movs	r3, #144	@ 0x90
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	230e      	movs	r3, #14
 800ce30:	2208      	movs	r2, #8
 800ce32:	f24e 5192 	movw	r1, #58770	@ 0xe592
 800ce36:	2008      	movs	r0, #8
 800ce38:	f7f3 fbd0 	bl	80005dc <SPI_Flash_to_LCD>
}
 800ce3c:	bf00      	nop
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bdb0      	pop	{r4, r5, r7, pc}

0800ce44 <display_measuring_text>:
	ST7735_WriteString(77, 52, char_buffer, Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
	ST7735_WriteString(77, 34, "NORM", Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
	SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
}
void display_measuring_text(char*name ,uint16_t reference_value, uint16_t measured_value, uint8_t status, uint8_t language)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08a      	sub	sp, #40	@ 0x28
 800ce48:	af04      	add	r7, sp, #16
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	4611      	mov	r1, r2
 800ce50:	461a      	mov	r2, r3
 800ce52:	4603      	mov	r3, r0
 800ce54:	817b      	strh	r3, [r7, #10]
 800ce56:	460b      	mov	r3, r1
 800ce58:	813b      	strh	r3, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(50, 4,  name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800ce5e:	4b40      	ldr	r3, [pc, #256]	@ (800cf60 <display_measuring_text+0x11c>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	9202      	str	r2, [sp, #8]
 800ce64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	9200      	str	r2, [sp, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	2104      	movs	r1, #4
 800ce74:	2032      	movs	r0, #50	@ 0x32
 800ce76:	f7fe fdee 	bl	800ba56 <ST7735_WriteString>

	char char_buffer[5] = {};
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	753b      	strb	r3, [r7, #20]



	sprintf(char_buffer, "%d", reference_value );
 800ce82:	897a      	ldrh	r2, [r7, #10]
 800ce84:	f107 0310 	add.w	r3, r7, #16
 800ce88:	4936      	ldr	r1, [pc, #216]	@ (800cf64 <display_measuring_text+0x120>)
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 fb24 	bl	800d4d8 <siprintf>
	ST7735_WriteString(130, 67, char_buffer, Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800ce90:	4b35      	ldr	r3, [pc, #212]	@ (800cf68 <display_measuring_text+0x124>)
 800ce92:	f107 0110 	add.w	r1, r7, #16
 800ce96:	2200      	movs	r2, #0
 800ce98:	9202      	str	r2, [sp, #8]
 800ce9a:	f249 426e 	movw	r2, #37998	@ 0x946e
 800ce9e:	9201      	str	r2, [sp, #4]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	9200      	str	r2, [sp, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	460a      	mov	r2, r1
 800cea8:	2143      	movs	r1, #67	@ 0x43
 800ceaa:	2082      	movs	r0, #130	@ 0x82
 800ceac:	f7fe fdd3 	bl	800ba56 <ST7735_WriteString>

	sprintf(char_buffer, "%d", measured_value );
 800ceb0:	893a      	ldrh	r2, [r7, #8]
 800ceb2:	f107 0310 	add.w	r3, r7, #16
 800ceb6:	492b      	ldr	r1, [pc, #172]	@ (800cf64 <display_measuring_text+0x120>)
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fb0d 	bl	800d4d8 <siprintf>

	if(status == MEAS_RESULTS_IS_GOOD)
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d110      	bne.n	800cee6 <display_measuring_text+0xa2>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_GREEN, ST7735_BLACK);
 800cec4:	4b29      	ldr	r3, [pc, #164]	@ (800cf6c <display_measuring_text+0x128>)
 800cec6:	f107 0110 	add.w	r1, r7, #16
 800ceca:	2200      	movs	r2, #0
 800cecc:	9202      	str	r2, [sp, #8]
 800cece:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 800ced2:	9201      	str	r2, [sp, #4]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	9200      	str	r2, [sp, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	460a      	mov	r2, r1
 800cedc:	211b      	movs	r1, #27
 800cede:	2032      	movs	r0, #50	@ 0x32
 800cee0:	f7fe fdb9 	bl	800ba56 <ST7735_WriteString>
 800cee4:	e026      	b.n	800cf34 <display_measuring_text+0xf0>
	}
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d110      	bne.n	800cf0e <display_measuring_text+0xca>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_YELLOW, ST7735_BLACK);
 800ceec:	4b1f      	ldr	r3, [pc, #124]	@ (800cf6c <display_measuring_text+0x128>)
 800ceee:	f107 0110 	add.w	r1, r7, #16
 800cef2:	2200      	movs	r2, #0
 800cef4:	9202      	str	r2, [sp, #8]
 800cef6:	f64f 6220 	movw	r2, #65056	@ 0xfe20
 800cefa:	9201      	str	r2, [sp, #4]
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	9200      	str	r2, [sp, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	460a      	mov	r2, r1
 800cf04:	211b      	movs	r1, #27
 800cf06:	2032      	movs	r0, #50	@ 0x32
 800cf08:	f7fe fda5 	bl	800ba56 <ST7735_WriteString>
 800cf0c:	e012      	b.n	800cf34 <display_measuring_text+0xf0>
	}
	else if(status == MEAS_RESULTS_IS_BAD)
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d10f      	bne.n	800cf34 <display_measuring_text+0xf0>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_RED, ST7735_BLACK);
 800cf14:	4b15      	ldr	r3, [pc, #84]	@ (800cf6c <display_measuring_text+0x128>)
 800cf16:	f107 0110 	add.w	r1, r7, #16
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	9202      	str	r2, [sp, #8]
 800cf1e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800cf22:	9201      	str	r2, [sp, #4]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	9200      	str	r2, [sp, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	460a      	mov	r2, r1
 800cf2c:	211b      	movs	r1, #27
 800cf2e:	2032      	movs	r0, #50	@ 0x32
 800cf30:	f7fe fd91 	bl	800ba56 <ST7735_WriteString>
	}

	if(language == ENGLISH)
 800cf34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d10d      	bne.n	800cf58 <display_measuring_text+0x114>
	{
		ST7735_WriteString(50, 67, "ppm", Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf68 <display_measuring_text+0x124>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	9202      	str	r2, [sp, #8]
 800cf42:	f249 426e 	movw	r2, #37998	@ 0x946e
 800cf46:	9201      	str	r2, [sp, #4]
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	9200      	str	r2, [sp, #0]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a08      	ldr	r2, [pc, #32]	@ (800cf70 <display_measuring_text+0x12c>)
 800cf50:	2143      	movs	r1, #67	@ 0x43
 800cf52:	2032      	movs	r0, #50	@ 0x32
 800cf54:	f7fe fd7f 	bl	800ba56 <ST7735_WriteString>
	}

}
 800cf58:	bf00      	nop
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	20000564 	.word	0x20000564
 800cf64:	0800e170 	.word	0x0800e170
 800cf68:	2000055c 	.word	0x2000055c
 800cf6c:	2000056c 	.word	0x2000056c
 800cf70:	0800e17c 	.word	0x0800e17c

0800cf74 <MPR121_setregister>:
void MPR121_get_filtered_data() //Baseline Value Register (0x1E~0x2A
{

}
void MPR121_setregister(uint16_t regaddress, uint8_t value)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af04      	add	r7, sp, #16
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	460a      	mov	r2, r1
 800cf7e:	80fb      	strh	r3, [r7, #6]
 800cf80:	4613      	mov	r3, r2
 800cf82:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800cf84:	88fa      	ldrh	r2, [r7, #6]
 800cf86:	2364      	movs	r3, #100	@ 0x64
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	1d7b      	adds	r3, r7, #5
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	2301      	movs	r3, #1
 800cf94:	21b4      	movs	r1, #180	@ 0xb4
 800cf96:	4803      	ldr	r0, [pc, #12]	@ (800cfa4 <MPR121_setregister+0x30>)
 800cf98:	f7f6 faa6 	bl	80034e8 <HAL_I2C_Mem_Write>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	2000068c 	.word	0x2000068c

0800cfa8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800cfb2:	f107 020f 	add.w	r2, r7, #15
 800cfb6:	1df9      	adds	r1, r7, #7
 800cfb8:	2364      	movs	r3, #100	@ 0x64
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4804      	ldr	r0, [pc, #16]	@ (800cfd0 <W25qxx_Spi+0x28>)
 800cfc0:	f7f9 fc3f 	bl	8006842 <HAL_SPI_TransmitReceive>
	return ret;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20000700 	.word	0x20000700

0800cfd4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60bb      	str	r3, [r7, #8]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800cfea:	2200      	movs	r2, #0
 800cfec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cff0:	4813      	ldr	r0, [pc, #76]	@ (800d040 <W25qxx_ReadID+0x6c>)
 800cff2:	f7f6 f903 	bl	80031fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800cff6:	209f      	movs	r0, #159	@ 0x9f
 800cff8:	f7ff ffd6 	bl	800cfa8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cffc:	20a5      	movs	r0, #165	@ 0xa5
 800cffe:	f7ff ffd3 	bl	800cfa8 <W25qxx_Spi>
 800d002:	4603      	mov	r3, r0
 800d004:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d006:	20a5      	movs	r0, #165	@ 0xa5
 800d008:	f7ff ffce 	bl	800cfa8 <W25qxx_Spi>
 800d00c:	4603      	mov	r3, r0
 800d00e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d010:	20a5      	movs	r0, #165	@ 0xa5
 800d012:	f7ff ffc9 	bl	800cfa8 <W25qxx_Spi>
 800d016:	4603      	mov	r3, r0
 800d018:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d01a:	2201      	movs	r2, #1
 800d01c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d020:	4807      	ldr	r0, [pc, #28]	@ (800d040 <W25qxx_ReadID+0x6c>)
 800d022:	f7f6 f8eb 	bl	80031fc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	041a      	lsls	r2, r3, #16
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	021b      	lsls	r3, r3, #8
 800d02e:	4313      	orrs	r3, r2
 800d030:	683a      	ldr	r2, [r7, #0]
 800d032:	4313      	orrs	r3, r2
 800d034:	60fb      	str	r3, [r7, #12]
	return Temp;
 800d036:	68fb      	ldr	r3, [r7, #12]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	40020800 	.word	0x40020800

0800d044 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800d044:	b590      	push	{r4, r7, lr}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d04a:	2200      	movs	r2, #0
 800d04c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d050:	4816      	ldr	r0, [pc, #88]	@ (800d0ac <W25qxx_ReadUniqID+0x68>)
 800d052:	f7f6 f8d3 	bl	80031fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800d056:	204b      	movs	r0, #75	@ 0x4b
 800d058:	f7ff ffa6 	bl	800cfa8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800d05c:	2300      	movs	r3, #0
 800d05e:	71fb      	strb	r3, [r7, #7]
 800d060:	e005      	b.n	800d06e <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d062:	20a5      	movs	r0, #165	@ 0xa5
 800d064:	f7ff ffa0 	bl	800cfa8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	3301      	adds	r3, #1
 800d06c:	71fb      	strb	r3, [r7, #7]
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	2b03      	cmp	r3, #3
 800d072:	d9f6      	bls.n	800d062 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 800d074:	2300      	movs	r3, #0
 800d076:	71bb      	strb	r3, [r7, #6]
 800d078:	e00b      	b.n	800d092 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d07a:	79bc      	ldrb	r4, [r7, #6]
 800d07c:	20a5      	movs	r0, #165	@ 0xa5
 800d07e:	f7ff ff93 	bl	800cfa8 <W25qxx_Spi>
 800d082:	4603      	mov	r3, r0
 800d084:	461a      	mov	r2, r3
 800d086:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b0 <W25qxx_ReadUniqID+0x6c>)
 800d088:	4423      	add	r3, r4
 800d08a:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800d08c:	79bb      	ldrb	r3, [r7, #6]
 800d08e:	3301      	adds	r3, #1
 800d090:	71bb      	strb	r3, [r7, #6]
 800d092:	79bb      	ldrb	r3, [r7, #6]
 800d094:	2b07      	cmp	r3, #7
 800d096:	d9f0      	bls.n	800d07a <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d098:	2201      	movs	r2, #1
 800d09a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d09e:	4803      	ldr	r0, [pc, #12]	@ (800d0ac <W25qxx_ReadUniqID+0x68>)
 800d0a0:	f7f6 f8ac 	bl	80031fc <HAL_GPIO_WritePin>
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd90      	pop	{r4, r7, pc}
 800d0ac:	40020800 	.word	0x40020800
 800d0b0:	20001d5c 	.word	0x20001d5c

0800d0b4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d0c8:	481c      	ldr	r0, [pc, #112]	@ (800d13c <W25qxx_ReadStatusRegister+0x88>)
 800d0ca:	f7f6 f897 	bl	80031fc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d10c      	bne.n	800d0ee <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800d0d4:	2005      	movs	r0, #5
 800d0d6:	f7ff ff67 	bl	800cfa8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d0da:	20a5      	movs	r0, #165	@ 0xa5
 800d0dc:	f7ff ff64 	bl	800cfa8 <W25qxx_Spi>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800d0e4:	4a16      	ldr	r2, [pc, #88]	@ (800d140 <W25qxx_ReadStatusRegister+0x8c>)
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800d0ec:	e01b      	b.n	800d126 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d10c      	bne.n	800d10e <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800d0f4:	2035      	movs	r0, #53	@ 0x35
 800d0f6:	f7ff ff57 	bl	800cfa8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d0fa:	20a5      	movs	r0, #165	@ 0xa5
 800d0fc:	f7ff ff54 	bl	800cfa8 <W25qxx_Spi>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800d104:	4a0e      	ldr	r2, [pc, #56]	@ (800d140 <W25qxx_ReadStatusRegister+0x8c>)
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 800d10c:	e00b      	b.n	800d126 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800d10e:	2015      	movs	r0, #21
 800d110:	f7ff ff4a 	bl	800cfa8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d114:	20a5      	movs	r0, #165	@ 0xa5
 800d116:	f7ff ff47 	bl	800cfa8 <W25qxx_Spi>
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800d11e:	4a08      	ldr	r2, [pc, #32]	@ (800d140 <W25qxx_ReadStatusRegister+0x8c>)
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d126:	2201      	movs	r2, #1
 800d128:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d12c:	4803      	ldr	r0, [pc, #12]	@ (800d13c <W25qxx_ReadStatusRegister+0x88>)
 800d12e:	f7f6 f865 	bl	80031fc <HAL_GPIO_WritePin>
	return status;
 800d132:	7bfb      	ldrb	r3, [r7, #15]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	40020800 	.word	0x40020800
 800d140:	20001d5c 	.word	0x20001d5c

0800d144 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800d14a:	4b65      	ldr	r3, [pc, #404]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800d152:	e002      	b.n	800d15a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800d154:	2001      	movs	r0, #1
 800d156:	f7f4 fecb 	bl	8001ef0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800d15a:	f7f4 febd 	bl	8001ed8 <HAL_GetTick>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b63      	cmp	r3, #99	@ 0x63
 800d162:	d9f7      	bls.n	800d154 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d164:	2201      	movs	r2, #1
 800d166:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d16a:	485e      	ldr	r0, [pc, #376]	@ (800d2e4 <W25qxx_Init+0x1a0>)
 800d16c:	f7f6 f846 	bl	80031fc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800d170:	2064      	movs	r0, #100	@ 0x64
 800d172:	f7f4 febd 	bl	8001ef0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800d176:	f7ff ff2d 	bl	800cfd4 <W25qxx_ReadID>
 800d17a:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	3b11      	subs	r3, #17
 800d182:	2b0f      	cmp	r3, #15
 800d184:	d86b      	bhi.n	800d25e <W25qxx_Init+0x11a>
 800d186:	a201      	add	r2, pc, #4	@ (adr r2, 800d18c <W25qxx_Init+0x48>)
 800d188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18c:	0800d251 	.word	0x0800d251
 800d190:	0800d243 	.word	0x0800d243
 800d194:	0800d235 	.word	0x0800d235
 800d198:	0800d227 	.word	0x0800d227
 800d19c:	0800d219 	.word	0x0800d219
 800d1a0:	0800d20b 	.word	0x0800d20b
 800d1a4:	0800d1fd 	.word	0x0800d1fd
 800d1a8:	0800d1ed 	.word	0x0800d1ed
 800d1ac:	0800d1dd 	.word	0x0800d1dd
 800d1b0:	0800d25f 	.word	0x0800d25f
 800d1b4:	0800d25f 	.word	0x0800d25f
 800d1b8:	0800d25f 	.word	0x0800d25f
 800d1bc:	0800d25f 	.word	0x0800d25f
 800d1c0:	0800d25f 	.word	0x0800d25f
 800d1c4:	0800d25f 	.word	0x0800d25f
 800d1c8:	0800d1cd 	.word	0x0800d1cd
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800d1cc:	4b44      	ldr	r3, [pc, #272]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1ce:	220a      	movs	r2, #10
 800d1d0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800d1d2:	4b43      	ldr	r3, [pc, #268]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d1d8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800d1da:	e046      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800d1dc:	4b40      	ldr	r3, [pc, #256]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1de:	2209      	movs	r2, #9
 800d1e0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800d1e2:	4b3f      	ldr	r3, [pc, #252]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800d1ea:	e03e      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800d1ec:	4b3c      	ldr	r3, [pc, #240]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1ee:	2208      	movs	r2, #8
 800d1f0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800d1f2:	4b3b      	ldr	r3, [pc, #236]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800d1fa:	e036      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800d1fc:	4b38      	ldr	r3, [pc, #224]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d1fe:	2207      	movs	r2, #7
 800d200:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800d202:	4b37      	ldr	r3, [pc, #220]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d204:	2280      	movs	r2, #128	@ 0x80
 800d206:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800d208:	e02f      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800d20a:	4b35      	ldr	r3, [pc, #212]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d20c:	2206      	movs	r2, #6
 800d20e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800d210:	4b33      	ldr	r3, [pc, #204]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d212:	2240      	movs	r2, #64	@ 0x40
 800d214:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800d216:	e028      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800d218:	4b31      	ldr	r3, [pc, #196]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d21a:	2205      	movs	r2, #5
 800d21c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800d21e:	4b30      	ldr	r3, [pc, #192]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d220:	2220      	movs	r2, #32
 800d222:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800d224:	e021      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800d226:	4b2e      	ldr	r3, [pc, #184]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d228:	2204      	movs	r2, #4
 800d22a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800d22c:	4b2c      	ldr	r3, [pc, #176]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d22e:	2210      	movs	r2, #16
 800d230:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800d232:	e01a      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800d234:	4b2a      	ldr	r3, [pc, #168]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d236:	2203      	movs	r2, #3
 800d238:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800d23a:	4b29      	ldr	r3, [pc, #164]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d23c:	2208      	movs	r2, #8
 800d23e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800d240:	e013      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800d242:	4b27      	ldr	r3, [pc, #156]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d244:	2202      	movs	r2, #2
 800d246:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800d248:	4b25      	ldr	r3, [pc, #148]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d24a:	2204      	movs	r2, #4
 800d24c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800d24e:	e00c      	b.n	800d26a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800d250:	4b23      	ldr	r3, [pc, #140]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d252:	2201      	movs	r2, #1
 800d254:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800d256:	4b22      	ldr	r3, [pc, #136]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d258:	2202      	movs	r2, #2
 800d25a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800d25c:	e005      	b.n	800d26a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800d25e:	4b20      	ldr	r3, [pc, #128]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 800d266:	2300      	movs	r3, #0
 800d268:	e036      	b.n	800d2d8 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800d26a:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d26c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d270:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800d272:	4b1b      	ldr	r3, [pc, #108]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d274:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d278:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800d27a:	4b19      	ldr	r3, [pc, #100]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	011b      	lsls	r3, r3, #4
 800d280:	4a17      	ldr	r2, [pc, #92]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d282:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800d284:	4b16      	ldr	r3, [pc, #88]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	4a15      	ldr	r2, [pc, #84]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d28a:	6912      	ldr	r2, [r2, #16]
 800d28c:	fb02 f303 	mul.w	r3, r2, r3
 800d290:	4a13      	ldr	r2, [pc, #76]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d292:	8952      	ldrh	r2, [r2, #10]
 800d294:	fbb3 f3f2 	udiv	r3, r3, r2
 800d298:	4a11      	ldr	r2, [pc, #68]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d29a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800d29c:	4b10      	ldr	r3, [pc, #64]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	4a0f      	ldr	r2, [pc, #60]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d2a4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800d2a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d2ac:	6912      	ldr	r2, [r2, #16]
 800d2ae:	fb02 f303 	mul.w	r3, r2, r3
 800d2b2:	0a9b      	lsrs	r3, r3, #10
 800d2b4:	4a0a      	ldr	r2, [pc, #40]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d2b6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800d2b8:	f7ff fec4 	bl	800d044 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800d2bc:	2001      	movs	r0, #1
 800d2be:	f7ff fef9 	bl	800d0b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800d2c2:	2002      	movs	r0, #2
 800d2c4:	f7ff fef6 	bl	800d0b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800d2c8:	2003      	movs	r0, #3
 800d2ca:	f7ff fef3 	bl	800d0b4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800d2ce:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <W25qxx_Init+0x19c>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 800d2d6:	2301      	movs	r3, #1
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20001d5c 	.word	0x20001d5c
 800d2e4:	40020800 	.word	0x40020800

0800d2e8 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800d2f0:	4b07      	ldr	r3, [pc, #28]	@ (800d310 <W25qxx_BlockToPage+0x28>)
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	fb02 f303 	mul.w	r3, r2, r3
 800d2fa:	4a05      	ldr	r2, [pc, #20]	@ (800d310 <W25qxx_BlockToPage+0x28>)
 800d2fc:	8952      	ldrh	r2, [r2, #10]
 800d2fe:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800d302:	4618      	mov	r0, r3
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	20001d5c 	.word	0x20001d5c

0800d314 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800d322:	e002      	b.n	800d32a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800d324:	2001      	movs	r0, #1
 800d326:	f7f4 fde3 	bl	8001ef0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800d32a:	4b37      	ldr	r3, [pc, #220]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d32c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d330:	2b01      	cmp	r3, #1
 800d332:	d0f7      	beq.n	800d324 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800d334:	4b34      	ldr	r3, [pc, #208]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800d33c:	4b32      	ldr	r3, [pc, #200]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d33e:	895b      	ldrh	r3, [r3, #10]
 800d340:	461a      	mov	r2, r3
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	4293      	cmp	r3, r2
 800d346:	d802      	bhi.n	800d34e <W25qxx_ReadPage+0x3a>
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800d34e:	4b2e      	ldr	r3, [pc, #184]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d350:	895b      	ldrh	r3, [r3, #10]
 800d352:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	4413      	add	r3, r2
 800d35a:	4a2b      	ldr	r2, [pc, #172]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d35c:	8952      	ldrh	r2, [r2, #10]
 800d35e:	4293      	cmp	r3, r2
 800d360:	d905      	bls.n	800d36e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800d362:	4b29      	ldr	r3, [pc, #164]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d364:	895b      	ldrh	r3, [r3, #10]
 800d366:	461a      	mov	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800d36e:	4b26      	ldr	r3, [pc, #152]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d370:	895b      	ldrh	r3, [r3, #10]
 800d372:	461a      	mov	r2, r3
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	fb02 f303 	mul.w	r3, r2, r3
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	4413      	add	r3, r2
 800d37e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d380:	2200      	movs	r2, #0
 800d382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d386:	4821      	ldr	r0, [pc, #132]	@ (800d40c <W25qxx_ReadPage+0xf8>)
 800d388:	f7f5 ff38 	bl	80031fc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800d38c:	4b1e      	ldr	r3, [pc, #120]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b08      	cmp	r3, #8
 800d392:	d909      	bls.n	800d3a8 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800d394:	200c      	movs	r0, #12
 800d396:	f7ff fe07 	bl	800cfa8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	0e1b      	lsrs	r3, r3, #24
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff fe01 	bl	800cfa8 <W25qxx_Spi>
 800d3a6:	e002      	b.n	800d3ae <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800d3a8:	200b      	movs	r0, #11
 800d3aa:	f7ff fdfd 	bl	800cfa8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	0c1b      	lsrs	r3, r3, #16
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff fdf7 	bl	800cfa8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	0a1b      	lsrs	r3, r3, #8
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff fdf1 	bl	800cfa8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff fdec 	bl	800cfa8 <W25qxx_Spi>
	W25qxx_Spi(0);
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	f7ff fde9 	bl	800cfa8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	2364      	movs	r3, #100	@ 0x64
 800d3dc:	68f9      	ldr	r1, [r7, #12]
 800d3de:	480c      	ldr	r0, [pc, #48]	@ (800d410 <W25qxx_ReadPage+0xfc>)
 800d3e0:	f7f9 f91e 	bl	8006620 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d3ea:	4808      	ldr	r0, [pc, #32]	@ (800d40c <W25qxx_ReadPage+0xf8>)
 800d3ec:	f7f5 ff06 	bl	80031fc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	f7f4 fd7d 	bl	8001ef0 <HAL_Delay>
	w25qxx.Lock = 0;
 800d3f6:	4b04      	ldr	r3, [pc, #16]	@ (800d408 <W25qxx_ReadPage+0xf4>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800d3fe:	bf00      	nop
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20001d5c 	.word	0x20001d5c
 800d40c:	40020800 	.word	0x40020800
 800d410:	20000700 	.word	0x20000700

0800d414 <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800d422:	4b2c      	ldr	r3, [pc, #176]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d802      	bhi.n	800d432 <W25qxx_ReadBlock+0x1e>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d102      	bne.n	800d438 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800d432:	4b28      	ldr	r3, [pc, #160]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800d438:	4b26      	ldr	r3, [pc, #152]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d243      	bcs.n	800d4ca <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	441a      	add	r2, r3
 800d448:	4b22      	ldr	r3, [pc, #136]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d905      	bls.n	800d45c <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800d450:	4b20      	ldr	r3, [pc, #128]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d452:	699a      	ldr	r2, [r3, #24]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	61bb      	str	r3, [r7, #24]
 800d45a:	e001      	b.n	800d460 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7ff ff41 	bl	800d2e8 <W25qxx_BlockToPage>
 800d466:	4602      	mov	r2, r0
 800d468:	4b1a      	ldr	r3, [pc, #104]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d46a:	895b      	ldrh	r3, [r3, #10]
 800d46c:	4619      	mov	r1, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	fbb3 f3f1 	udiv	r3, r3, r1
 800d474:	4413      	add	r3, r2
 800d476:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800d478:	4b16      	ldr	r3, [pc, #88]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d47a:	895b      	ldrh	r3, [r3, #10]
 800d47c:	461a      	mov	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	fbb3 f1f2 	udiv	r1, r3, r2
 800d484:	fb01 f202 	mul.w	r2, r1, r2
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	617b      	str	r3, [r7, #20]
	do
	{

		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	69f9      	ldr	r1, [r7, #28]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff ff3e 	bl	800d314 <W25qxx_ReadPage>
		StartPage++;
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	3301      	adds	r3, #1
 800d49c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800d49e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d4a0:	895b      	ldrh	r3, [r3, #10]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	1a9a      	subs	r2, r3, r2
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800d4ae:	4b09      	ldr	r3, [pc, #36]	@ (800d4d4 <W25qxx_ReadBlock+0xc0>)
 800d4b0:	895b      	ldrh	r3, [r3, #10]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dce1      	bgt.n	800d48c <W25qxx_ReadBlock+0x78>
 800d4c8:	e000      	b.n	800d4cc <W25qxx_ReadBlock+0xb8>
		return;
 800d4ca:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800d4cc:	3720      	adds	r7, #32
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20001d5c 	.word	0x20001d5c

0800d4d8 <siprintf>:
 800d4d8:	b40e      	push	{r1, r2, r3}
 800d4da:	b500      	push	{lr}
 800d4dc:	b09c      	sub	sp, #112	@ 0x70
 800d4de:	ab1d      	add	r3, sp, #116	@ 0x74
 800d4e0:	9002      	str	r0, [sp, #8]
 800d4e2:	9006      	str	r0, [sp, #24]
 800d4e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d4e8:	4809      	ldr	r0, [pc, #36]	@ (800d510 <siprintf+0x38>)
 800d4ea:	9107      	str	r1, [sp, #28]
 800d4ec:	9104      	str	r1, [sp, #16]
 800d4ee:	4909      	ldr	r1, [pc, #36]	@ (800d514 <siprintf+0x3c>)
 800d4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	6800      	ldr	r0, [r0, #0]
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	a902      	add	r1, sp, #8
 800d4fc:	f000 f994 	bl	800d828 <_svfiprintf_r>
 800d500:	9b02      	ldr	r3, [sp, #8]
 800d502:	2200      	movs	r2, #0
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	b01c      	add	sp, #112	@ 0x70
 800d508:	f85d eb04 	ldr.w	lr, [sp], #4
 800d50c:	b003      	add	sp, #12
 800d50e:	4770      	bx	lr
 800d510:	200005d8 	.word	0x200005d8
 800d514:	ffff0208 	.word	0xffff0208

0800d518 <memset>:
 800d518:	4402      	add	r2, r0
 800d51a:	4603      	mov	r3, r0
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d100      	bne.n	800d522 <memset+0xa>
 800d520:	4770      	bx	lr
 800d522:	f803 1b01 	strb.w	r1, [r3], #1
 800d526:	e7f9      	b.n	800d51c <memset+0x4>

0800d528 <__errno>:
 800d528:	4b01      	ldr	r3, [pc, #4]	@ (800d530 <__errno+0x8>)
 800d52a:	6818      	ldr	r0, [r3, #0]
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	200005d8 	.word	0x200005d8

0800d534 <__libc_init_array>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	4d0d      	ldr	r5, [pc, #52]	@ (800d56c <__libc_init_array+0x38>)
 800d538:	4c0d      	ldr	r4, [pc, #52]	@ (800d570 <__libc_init_array+0x3c>)
 800d53a:	1b64      	subs	r4, r4, r5
 800d53c:	10a4      	asrs	r4, r4, #2
 800d53e:	2600      	movs	r6, #0
 800d540:	42a6      	cmp	r6, r4
 800d542:	d109      	bne.n	800d558 <__libc_init_array+0x24>
 800d544:	4d0b      	ldr	r5, [pc, #44]	@ (800d574 <__libc_init_array+0x40>)
 800d546:	4c0c      	ldr	r4, [pc, #48]	@ (800d578 <__libc_init_array+0x44>)
 800d548:	f000 fc66 	bl	800de18 <_init>
 800d54c:	1b64      	subs	r4, r4, r5
 800d54e:	10a4      	asrs	r4, r4, #2
 800d550:	2600      	movs	r6, #0
 800d552:	42a6      	cmp	r6, r4
 800d554:	d105      	bne.n	800d562 <__libc_init_array+0x2e>
 800d556:	bd70      	pop	{r4, r5, r6, pc}
 800d558:	f855 3b04 	ldr.w	r3, [r5], #4
 800d55c:	4798      	blx	r3
 800d55e:	3601      	adds	r6, #1
 800d560:	e7ee      	b.n	800d540 <__libc_init_array+0xc>
 800d562:	f855 3b04 	ldr.w	r3, [r5], #4
 800d566:	4798      	blx	r3
 800d568:	3601      	adds	r6, #1
 800d56a:	e7f2      	b.n	800d552 <__libc_init_array+0x1e>
 800d56c:	08010a68 	.word	0x08010a68
 800d570:	08010a68 	.word	0x08010a68
 800d574:	08010a68 	.word	0x08010a68
 800d578:	08010a6c 	.word	0x08010a6c

0800d57c <__retarget_lock_acquire_recursive>:
 800d57c:	4770      	bx	lr

0800d57e <__retarget_lock_release_recursive>:
 800d57e:	4770      	bx	lr

0800d580 <_free_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	2900      	cmp	r1, #0
 800d586:	d041      	beq.n	800d60c <_free_r+0x8c>
 800d588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d58c:	1f0c      	subs	r4, r1, #4
 800d58e:	2b00      	cmp	r3, #0
 800d590:	bfb8      	it	lt
 800d592:	18e4      	addlt	r4, r4, r3
 800d594:	f000 f8e0 	bl	800d758 <__malloc_lock>
 800d598:	4a1d      	ldr	r2, [pc, #116]	@ (800d610 <_free_r+0x90>)
 800d59a:	6813      	ldr	r3, [r2, #0]
 800d59c:	b933      	cbnz	r3, 800d5ac <_free_r+0x2c>
 800d59e:	6063      	str	r3, [r4, #4]
 800d5a0:	6014      	str	r4, [r2, #0]
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a8:	f000 b8dc 	b.w	800d764 <__malloc_unlock>
 800d5ac:	42a3      	cmp	r3, r4
 800d5ae:	d908      	bls.n	800d5c2 <_free_r+0x42>
 800d5b0:	6820      	ldr	r0, [r4, #0]
 800d5b2:	1821      	adds	r1, r4, r0
 800d5b4:	428b      	cmp	r3, r1
 800d5b6:	bf01      	itttt	eq
 800d5b8:	6819      	ldreq	r1, [r3, #0]
 800d5ba:	685b      	ldreq	r3, [r3, #4]
 800d5bc:	1809      	addeq	r1, r1, r0
 800d5be:	6021      	streq	r1, [r4, #0]
 800d5c0:	e7ed      	b.n	800d59e <_free_r+0x1e>
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	b10b      	cbz	r3, 800d5cc <_free_r+0x4c>
 800d5c8:	42a3      	cmp	r3, r4
 800d5ca:	d9fa      	bls.n	800d5c2 <_free_r+0x42>
 800d5cc:	6811      	ldr	r1, [r2, #0]
 800d5ce:	1850      	adds	r0, r2, r1
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d10b      	bne.n	800d5ec <_free_r+0x6c>
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	4401      	add	r1, r0
 800d5d8:	1850      	adds	r0, r2, r1
 800d5da:	4283      	cmp	r3, r0
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	d1e0      	bne.n	800d5a2 <_free_r+0x22>
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	6053      	str	r3, [r2, #4]
 800d5e6:	4408      	add	r0, r1
 800d5e8:	6010      	str	r0, [r2, #0]
 800d5ea:	e7da      	b.n	800d5a2 <_free_r+0x22>
 800d5ec:	d902      	bls.n	800d5f4 <_free_r+0x74>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	602b      	str	r3, [r5, #0]
 800d5f2:	e7d6      	b.n	800d5a2 <_free_r+0x22>
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	1821      	adds	r1, r4, r0
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	bf04      	itt	eq
 800d5fc:	6819      	ldreq	r1, [r3, #0]
 800d5fe:	685b      	ldreq	r3, [r3, #4]
 800d600:	6063      	str	r3, [r4, #4]
 800d602:	bf04      	itt	eq
 800d604:	1809      	addeq	r1, r1, r0
 800d606:	6021      	streq	r1, [r4, #0]
 800d608:	6054      	str	r4, [r2, #4]
 800d60a:	e7ca      	b.n	800d5a2 <_free_r+0x22>
 800d60c:	bd38      	pop	{r3, r4, r5, pc}
 800d60e:	bf00      	nop
 800d610:	20001ec8 	.word	0x20001ec8

0800d614 <sbrk_aligned>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	4e0f      	ldr	r6, [pc, #60]	@ (800d654 <sbrk_aligned+0x40>)
 800d618:	460c      	mov	r4, r1
 800d61a:	6831      	ldr	r1, [r6, #0]
 800d61c:	4605      	mov	r5, r0
 800d61e:	b911      	cbnz	r1, 800d626 <sbrk_aligned+0x12>
 800d620:	f000 fba6 	bl	800dd70 <_sbrk_r>
 800d624:	6030      	str	r0, [r6, #0]
 800d626:	4621      	mov	r1, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	f000 fba1 	bl	800dd70 <_sbrk_r>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	d103      	bne.n	800d63a <sbrk_aligned+0x26>
 800d632:	f04f 34ff 	mov.w	r4, #4294967295
 800d636:	4620      	mov	r0, r4
 800d638:	bd70      	pop	{r4, r5, r6, pc}
 800d63a:	1cc4      	adds	r4, r0, #3
 800d63c:	f024 0403 	bic.w	r4, r4, #3
 800d640:	42a0      	cmp	r0, r4
 800d642:	d0f8      	beq.n	800d636 <sbrk_aligned+0x22>
 800d644:	1a21      	subs	r1, r4, r0
 800d646:	4628      	mov	r0, r5
 800d648:	f000 fb92 	bl	800dd70 <_sbrk_r>
 800d64c:	3001      	adds	r0, #1
 800d64e:	d1f2      	bne.n	800d636 <sbrk_aligned+0x22>
 800d650:	e7ef      	b.n	800d632 <sbrk_aligned+0x1e>
 800d652:	bf00      	nop
 800d654:	20001ec4 	.word	0x20001ec4

0800d658 <_malloc_r>:
 800d658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d65c:	1ccd      	adds	r5, r1, #3
 800d65e:	f025 0503 	bic.w	r5, r5, #3
 800d662:	3508      	adds	r5, #8
 800d664:	2d0c      	cmp	r5, #12
 800d666:	bf38      	it	cc
 800d668:	250c      	movcc	r5, #12
 800d66a:	2d00      	cmp	r5, #0
 800d66c:	4606      	mov	r6, r0
 800d66e:	db01      	blt.n	800d674 <_malloc_r+0x1c>
 800d670:	42a9      	cmp	r1, r5
 800d672:	d904      	bls.n	800d67e <_malloc_r+0x26>
 800d674:	230c      	movs	r3, #12
 800d676:	6033      	str	r3, [r6, #0]
 800d678:	2000      	movs	r0, #0
 800d67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d754 <_malloc_r+0xfc>
 800d682:	f000 f869 	bl	800d758 <__malloc_lock>
 800d686:	f8d8 3000 	ldr.w	r3, [r8]
 800d68a:	461c      	mov	r4, r3
 800d68c:	bb44      	cbnz	r4, 800d6e0 <_malloc_r+0x88>
 800d68e:	4629      	mov	r1, r5
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff ffbf 	bl	800d614 <sbrk_aligned>
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	4604      	mov	r4, r0
 800d69a:	d158      	bne.n	800d74e <_malloc_r+0xf6>
 800d69c:	f8d8 4000 	ldr.w	r4, [r8]
 800d6a0:	4627      	mov	r7, r4
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d143      	bne.n	800d72e <_malloc_r+0xd6>
 800d6a6:	2c00      	cmp	r4, #0
 800d6a8:	d04b      	beq.n	800d742 <_malloc_r+0xea>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	eb04 0903 	add.w	r9, r4, r3
 800d6b4:	f000 fb5c 	bl	800dd70 <_sbrk_r>
 800d6b8:	4581      	cmp	r9, r0
 800d6ba:	d142      	bne.n	800d742 <_malloc_r+0xea>
 800d6bc:	6821      	ldr	r1, [r4, #0]
 800d6be:	1a6d      	subs	r5, r5, r1
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7ff ffa6 	bl	800d614 <sbrk_aligned>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d03a      	beq.n	800d742 <_malloc_r+0xea>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	442b      	add	r3, r5
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	bb62      	cbnz	r2, 800d734 <_malloc_r+0xdc>
 800d6da:	f8c8 7000 	str.w	r7, [r8]
 800d6de:	e00f      	b.n	800d700 <_malloc_r+0xa8>
 800d6e0:	6822      	ldr	r2, [r4, #0]
 800d6e2:	1b52      	subs	r2, r2, r5
 800d6e4:	d420      	bmi.n	800d728 <_malloc_r+0xd0>
 800d6e6:	2a0b      	cmp	r2, #11
 800d6e8:	d917      	bls.n	800d71a <_malloc_r+0xc2>
 800d6ea:	1961      	adds	r1, r4, r5
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	6025      	str	r5, [r4, #0]
 800d6f0:	bf18      	it	ne
 800d6f2:	6059      	strne	r1, [r3, #4]
 800d6f4:	6863      	ldr	r3, [r4, #4]
 800d6f6:	bf08      	it	eq
 800d6f8:	f8c8 1000 	streq.w	r1, [r8]
 800d6fc:	5162      	str	r2, [r4, r5]
 800d6fe:	604b      	str	r3, [r1, #4]
 800d700:	4630      	mov	r0, r6
 800d702:	f000 f82f 	bl	800d764 <__malloc_unlock>
 800d706:	f104 000b 	add.w	r0, r4, #11
 800d70a:	1d23      	adds	r3, r4, #4
 800d70c:	f020 0007 	bic.w	r0, r0, #7
 800d710:	1ac2      	subs	r2, r0, r3
 800d712:	bf1c      	itt	ne
 800d714:	1a1b      	subne	r3, r3, r0
 800d716:	50a3      	strne	r3, [r4, r2]
 800d718:	e7af      	b.n	800d67a <_malloc_r+0x22>
 800d71a:	6862      	ldr	r2, [r4, #4]
 800d71c:	42a3      	cmp	r3, r4
 800d71e:	bf0c      	ite	eq
 800d720:	f8c8 2000 	streq.w	r2, [r8]
 800d724:	605a      	strne	r2, [r3, #4]
 800d726:	e7eb      	b.n	800d700 <_malloc_r+0xa8>
 800d728:	4623      	mov	r3, r4
 800d72a:	6864      	ldr	r4, [r4, #4]
 800d72c:	e7ae      	b.n	800d68c <_malloc_r+0x34>
 800d72e:	463c      	mov	r4, r7
 800d730:	687f      	ldr	r7, [r7, #4]
 800d732:	e7b6      	b.n	800d6a2 <_malloc_r+0x4a>
 800d734:	461a      	mov	r2, r3
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d1fb      	bne.n	800d734 <_malloc_r+0xdc>
 800d73c:	2300      	movs	r3, #0
 800d73e:	6053      	str	r3, [r2, #4]
 800d740:	e7de      	b.n	800d700 <_malloc_r+0xa8>
 800d742:	230c      	movs	r3, #12
 800d744:	6033      	str	r3, [r6, #0]
 800d746:	4630      	mov	r0, r6
 800d748:	f000 f80c 	bl	800d764 <__malloc_unlock>
 800d74c:	e794      	b.n	800d678 <_malloc_r+0x20>
 800d74e:	6005      	str	r5, [r0, #0]
 800d750:	e7d6      	b.n	800d700 <_malloc_r+0xa8>
 800d752:	bf00      	nop
 800d754:	20001ec8 	.word	0x20001ec8

0800d758 <__malloc_lock>:
 800d758:	4801      	ldr	r0, [pc, #4]	@ (800d760 <__malloc_lock+0x8>)
 800d75a:	f7ff bf0f 	b.w	800d57c <__retarget_lock_acquire_recursive>
 800d75e:	bf00      	nop
 800d760:	20001ec0 	.word	0x20001ec0

0800d764 <__malloc_unlock>:
 800d764:	4801      	ldr	r0, [pc, #4]	@ (800d76c <__malloc_unlock+0x8>)
 800d766:	f7ff bf0a 	b.w	800d57e <__retarget_lock_release_recursive>
 800d76a:	bf00      	nop
 800d76c:	20001ec0 	.word	0x20001ec0

0800d770 <__ssputs_r>:
 800d770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	688e      	ldr	r6, [r1, #8]
 800d776:	461f      	mov	r7, r3
 800d778:	42be      	cmp	r6, r7
 800d77a:	680b      	ldr	r3, [r1, #0]
 800d77c:	4682      	mov	sl, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	4690      	mov	r8, r2
 800d782:	d82d      	bhi.n	800d7e0 <__ssputs_r+0x70>
 800d784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d788:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d78c:	d026      	beq.n	800d7dc <__ssputs_r+0x6c>
 800d78e:	6965      	ldr	r5, [r4, #20]
 800d790:	6909      	ldr	r1, [r1, #16]
 800d792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d796:	eba3 0901 	sub.w	r9, r3, r1
 800d79a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d79e:	1c7b      	adds	r3, r7, #1
 800d7a0:	444b      	add	r3, r9
 800d7a2:	106d      	asrs	r5, r5, #1
 800d7a4:	429d      	cmp	r5, r3
 800d7a6:	bf38      	it	cc
 800d7a8:	461d      	movcc	r5, r3
 800d7aa:	0553      	lsls	r3, r2, #21
 800d7ac:	d527      	bpl.n	800d7fe <__ssputs_r+0x8e>
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	f7ff ff52 	bl	800d658 <_malloc_r>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	b360      	cbz	r0, 800d812 <__ssputs_r+0xa2>
 800d7b8:	6921      	ldr	r1, [r4, #16]
 800d7ba:	464a      	mov	r2, r9
 800d7bc:	f000 fae8 	bl	800dd90 <memcpy>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ca:	81a3      	strh	r3, [r4, #12]
 800d7cc:	6126      	str	r6, [r4, #16]
 800d7ce:	6165      	str	r5, [r4, #20]
 800d7d0:	444e      	add	r6, r9
 800d7d2:	eba5 0509 	sub.w	r5, r5, r9
 800d7d6:	6026      	str	r6, [r4, #0]
 800d7d8:	60a5      	str	r5, [r4, #8]
 800d7da:	463e      	mov	r6, r7
 800d7dc:	42be      	cmp	r6, r7
 800d7de:	d900      	bls.n	800d7e2 <__ssputs_r+0x72>
 800d7e0:	463e      	mov	r6, r7
 800d7e2:	6820      	ldr	r0, [r4, #0]
 800d7e4:	4632      	mov	r2, r6
 800d7e6:	4641      	mov	r1, r8
 800d7e8:	f000 faa8 	bl	800dd3c <memmove>
 800d7ec:	68a3      	ldr	r3, [r4, #8]
 800d7ee:	1b9b      	subs	r3, r3, r6
 800d7f0:	60a3      	str	r3, [r4, #8]
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	4433      	add	r3, r6
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fe:	462a      	mov	r2, r5
 800d800:	f000 fad4 	bl	800ddac <_realloc_r>
 800d804:	4606      	mov	r6, r0
 800d806:	2800      	cmp	r0, #0
 800d808:	d1e0      	bne.n	800d7cc <__ssputs_r+0x5c>
 800d80a:	6921      	ldr	r1, [r4, #16]
 800d80c:	4650      	mov	r0, sl
 800d80e:	f7ff feb7 	bl	800d580 <_free_r>
 800d812:	230c      	movs	r3, #12
 800d814:	f8ca 3000 	str.w	r3, [sl]
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81e:	81a3      	strh	r3, [r4, #12]
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	e7e9      	b.n	800d7fa <__ssputs_r+0x8a>
	...

0800d828 <_svfiprintf_r>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	4698      	mov	r8, r3
 800d82e:	898b      	ldrh	r3, [r1, #12]
 800d830:	061b      	lsls	r3, r3, #24
 800d832:	b09d      	sub	sp, #116	@ 0x74
 800d834:	4607      	mov	r7, r0
 800d836:	460d      	mov	r5, r1
 800d838:	4614      	mov	r4, r2
 800d83a:	d510      	bpl.n	800d85e <_svfiprintf_r+0x36>
 800d83c:	690b      	ldr	r3, [r1, #16]
 800d83e:	b973      	cbnz	r3, 800d85e <_svfiprintf_r+0x36>
 800d840:	2140      	movs	r1, #64	@ 0x40
 800d842:	f7ff ff09 	bl	800d658 <_malloc_r>
 800d846:	6028      	str	r0, [r5, #0]
 800d848:	6128      	str	r0, [r5, #16]
 800d84a:	b930      	cbnz	r0, 800d85a <_svfiprintf_r+0x32>
 800d84c:	230c      	movs	r3, #12
 800d84e:	603b      	str	r3, [r7, #0]
 800d850:	f04f 30ff 	mov.w	r0, #4294967295
 800d854:	b01d      	add	sp, #116	@ 0x74
 800d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85a:	2340      	movs	r3, #64	@ 0x40
 800d85c:	616b      	str	r3, [r5, #20]
 800d85e:	2300      	movs	r3, #0
 800d860:	9309      	str	r3, [sp, #36]	@ 0x24
 800d862:	2320      	movs	r3, #32
 800d864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d868:	f8cd 800c 	str.w	r8, [sp, #12]
 800d86c:	2330      	movs	r3, #48	@ 0x30
 800d86e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da0c <_svfiprintf_r+0x1e4>
 800d872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d876:	f04f 0901 	mov.w	r9, #1
 800d87a:	4623      	mov	r3, r4
 800d87c:	469a      	mov	sl, r3
 800d87e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d882:	b10a      	cbz	r2, 800d888 <_svfiprintf_r+0x60>
 800d884:	2a25      	cmp	r2, #37	@ 0x25
 800d886:	d1f9      	bne.n	800d87c <_svfiprintf_r+0x54>
 800d888:	ebba 0b04 	subs.w	fp, sl, r4
 800d88c:	d00b      	beq.n	800d8a6 <_svfiprintf_r+0x7e>
 800d88e:	465b      	mov	r3, fp
 800d890:	4622      	mov	r2, r4
 800d892:	4629      	mov	r1, r5
 800d894:	4638      	mov	r0, r7
 800d896:	f7ff ff6b 	bl	800d770 <__ssputs_r>
 800d89a:	3001      	adds	r0, #1
 800d89c:	f000 80a7 	beq.w	800d9ee <_svfiprintf_r+0x1c6>
 800d8a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8a2:	445a      	add	r2, fp
 800d8a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 809f 	beq.w	800d9ee <_svfiprintf_r+0x1c6>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ba:	f10a 0a01 	add.w	sl, sl, #1
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	9307      	str	r3, [sp, #28]
 800d8c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8c8:	4654      	mov	r4, sl
 800d8ca:	2205      	movs	r2, #5
 800d8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d0:	484e      	ldr	r0, [pc, #312]	@ (800da0c <_svfiprintf_r+0x1e4>)
 800d8d2:	f7f2 fc85 	bl	80001e0 <memchr>
 800d8d6:	9a04      	ldr	r2, [sp, #16]
 800d8d8:	b9d8      	cbnz	r0, 800d912 <_svfiprintf_r+0xea>
 800d8da:	06d0      	lsls	r0, r2, #27
 800d8dc:	bf44      	itt	mi
 800d8de:	2320      	movmi	r3, #32
 800d8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e4:	0711      	lsls	r1, r2, #28
 800d8e6:	bf44      	itt	mi
 800d8e8:	232b      	movmi	r3, #43	@ 0x2b
 800d8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f4:	d015      	beq.n	800d922 <_svfiprintf_r+0xfa>
 800d8f6:	9a07      	ldr	r2, [sp, #28]
 800d8f8:	4654      	mov	r4, sl
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	f04f 0c0a 	mov.w	ip, #10
 800d900:	4621      	mov	r1, r4
 800d902:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d906:	3b30      	subs	r3, #48	@ 0x30
 800d908:	2b09      	cmp	r3, #9
 800d90a:	d94b      	bls.n	800d9a4 <_svfiprintf_r+0x17c>
 800d90c:	b1b0      	cbz	r0, 800d93c <_svfiprintf_r+0x114>
 800d90e:	9207      	str	r2, [sp, #28]
 800d910:	e014      	b.n	800d93c <_svfiprintf_r+0x114>
 800d912:	eba0 0308 	sub.w	r3, r0, r8
 800d916:	fa09 f303 	lsl.w	r3, r9, r3
 800d91a:	4313      	orrs	r3, r2
 800d91c:	9304      	str	r3, [sp, #16]
 800d91e:	46a2      	mov	sl, r4
 800d920:	e7d2      	b.n	800d8c8 <_svfiprintf_r+0xa0>
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	1d19      	adds	r1, r3, #4
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	9103      	str	r1, [sp, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	bfbb      	ittet	lt
 800d92e:	425b      	neglt	r3, r3
 800d930:	f042 0202 	orrlt.w	r2, r2, #2
 800d934:	9307      	strge	r3, [sp, #28]
 800d936:	9307      	strlt	r3, [sp, #28]
 800d938:	bfb8      	it	lt
 800d93a:	9204      	strlt	r2, [sp, #16]
 800d93c:	7823      	ldrb	r3, [r4, #0]
 800d93e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d940:	d10a      	bne.n	800d958 <_svfiprintf_r+0x130>
 800d942:	7863      	ldrb	r3, [r4, #1]
 800d944:	2b2a      	cmp	r3, #42	@ 0x2a
 800d946:	d132      	bne.n	800d9ae <_svfiprintf_r+0x186>
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	1d1a      	adds	r2, r3, #4
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	9203      	str	r2, [sp, #12]
 800d950:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d954:	3402      	adds	r4, #2
 800d956:	9305      	str	r3, [sp, #20]
 800d958:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da1c <_svfiprintf_r+0x1f4>
 800d95c:	7821      	ldrb	r1, [r4, #0]
 800d95e:	2203      	movs	r2, #3
 800d960:	4650      	mov	r0, sl
 800d962:	f7f2 fc3d 	bl	80001e0 <memchr>
 800d966:	b138      	cbz	r0, 800d978 <_svfiprintf_r+0x150>
 800d968:	9b04      	ldr	r3, [sp, #16]
 800d96a:	eba0 000a 	sub.w	r0, r0, sl
 800d96e:	2240      	movs	r2, #64	@ 0x40
 800d970:	4082      	lsls	r2, r0
 800d972:	4313      	orrs	r3, r2
 800d974:	3401      	adds	r4, #1
 800d976:	9304      	str	r3, [sp, #16]
 800d978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d97c:	4824      	ldr	r0, [pc, #144]	@ (800da10 <_svfiprintf_r+0x1e8>)
 800d97e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d982:	2206      	movs	r2, #6
 800d984:	f7f2 fc2c 	bl	80001e0 <memchr>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d036      	beq.n	800d9fa <_svfiprintf_r+0x1d2>
 800d98c:	4b21      	ldr	r3, [pc, #132]	@ (800da14 <_svfiprintf_r+0x1ec>)
 800d98e:	bb1b      	cbnz	r3, 800d9d8 <_svfiprintf_r+0x1b0>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	3307      	adds	r3, #7
 800d994:	f023 0307 	bic.w	r3, r3, #7
 800d998:	3308      	adds	r3, #8
 800d99a:	9303      	str	r3, [sp, #12]
 800d99c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99e:	4433      	add	r3, r6
 800d9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9a2:	e76a      	b.n	800d87a <_svfiprintf_r+0x52>
 800d9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	e7a8      	b.n	800d900 <_svfiprintf_r+0xd8>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	3401      	adds	r4, #1
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	f04f 0c0a 	mov.w	ip, #10
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9c0:	3a30      	subs	r2, #48	@ 0x30
 800d9c2:	2a09      	cmp	r2, #9
 800d9c4:	d903      	bls.n	800d9ce <_svfiprintf_r+0x1a6>
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d0c6      	beq.n	800d958 <_svfiprintf_r+0x130>
 800d9ca:	9105      	str	r1, [sp, #20]
 800d9cc:	e7c4      	b.n	800d958 <_svfiprintf_r+0x130>
 800d9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e7f0      	b.n	800d9ba <_svfiprintf_r+0x192>
 800d9d8:	ab03      	add	r3, sp, #12
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	462a      	mov	r2, r5
 800d9de:	4b0e      	ldr	r3, [pc, #56]	@ (800da18 <_svfiprintf_r+0x1f0>)
 800d9e0:	a904      	add	r1, sp, #16
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	f3af 8000 	nop.w
 800d9e8:	1c42      	adds	r2, r0, #1
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	d1d6      	bne.n	800d99c <_svfiprintf_r+0x174>
 800d9ee:	89ab      	ldrh	r3, [r5, #12]
 800d9f0:	065b      	lsls	r3, r3, #25
 800d9f2:	f53f af2d 	bmi.w	800d850 <_svfiprintf_r+0x28>
 800d9f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9f8:	e72c      	b.n	800d854 <_svfiprintf_r+0x2c>
 800d9fa:	ab03      	add	r3, sp, #12
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	462a      	mov	r2, r5
 800da00:	4b05      	ldr	r3, [pc, #20]	@ (800da18 <_svfiprintf_r+0x1f0>)
 800da02:	a904      	add	r1, sp, #16
 800da04:	4638      	mov	r0, r7
 800da06:	f000 f879 	bl	800dafc <_printf_i>
 800da0a:	e7ed      	b.n	800d9e8 <_svfiprintf_r+0x1c0>
 800da0c:	08010a2b 	.word	0x08010a2b
 800da10:	08010a35 	.word	0x08010a35
 800da14:	00000000 	.word	0x00000000
 800da18:	0800d771 	.word	0x0800d771
 800da1c:	08010a31 	.word	0x08010a31

0800da20 <_printf_common>:
 800da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da24:	4616      	mov	r6, r2
 800da26:	4698      	mov	r8, r3
 800da28:	688a      	ldr	r2, [r1, #8]
 800da2a:	690b      	ldr	r3, [r1, #16]
 800da2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da30:	4293      	cmp	r3, r2
 800da32:	bfb8      	it	lt
 800da34:	4613      	movlt	r3, r2
 800da36:	6033      	str	r3, [r6, #0]
 800da38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da3c:	4607      	mov	r7, r0
 800da3e:	460c      	mov	r4, r1
 800da40:	b10a      	cbz	r2, 800da46 <_printf_common+0x26>
 800da42:	3301      	adds	r3, #1
 800da44:	6033      	str	r3, [r6, #0]
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	0699      	lsls	r1, r3, #26
 800da4a:	bf42      	ittt	mi
 800da4c:	6833      	ldrmi	r3, [r6, #0]
 800da4e:	3302      	addmi	r3, #2
 800da50:	6033      	strmi	r3, [r6, #0]
 800da52:	6825      	ldr	r5, [r4, #0]
 800da54:	f015 0506 	ands.w	r5, r5, #6
 800da58:	d106      	bne.n	800da68 <_printf_common+0x48>
 800da5a:	f104 0a19 	add.w	sl, r4, #25
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	6832      	ldr	r2, [r6, #0]
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	42ab      	cmp	r3, r5
 800da66:	dc26      	bgt.n	800dab6 <_printf_common+0x96>
 800da68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da6c:	6822      	ldr	r2, [r4, #0]
 800da6e:	3b00      	subs	r3, #0
 800da70:	bf18      	it	ne
 800da72:	2301      	movne	r3, #1
 800da74:	0692      	lsls	r2, r2, #26
 800da76:	d42b      	bmi.n	800dad0 <_printf_common+0xb0>
 800da78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da7c:	4641      	mov	r1, r8
 800da7e:	4638      	mov	r0, r7
 800da80:	47c8      	blx	r9
 800da82:	3001      	adds	r0, #1
 800da84:	d01e      	beq.n	800dac4 <_printf_common+0xa4>
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	6922      	ldr	r2, [r4, #16]
 800da8a:	f003 0306 	and.w	r3, r3, #6
 800da8e:	2b04      	cmp	r3, #4
 800da90:	bf02      	ittt	eq
 800da92:	68e5      	ldreq	r5, [r4, #12]
 800da94:	6833      	ldreq	r3, [r6, #0]
 800da96:	1aed      	subeq	r5, r5, r3
 800da98:	68a3      	ldr	r3, [r4, #8]
 800da9a:	bf0c      	ite	eq
 800da9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daa0:	2500      	movne	r5, #0
 800daa2:	4293      	cmp	r3, r2
 800daa4:	bfc4      	itt	gt
 800daa6:	1a9b      	subgt	r3, r3, r2
 800daa8:	18ed      	addgt	r5, r5, r3
 800daaa:	2600      	movs	r6, #0
 800daac:	341a      	adds	r4, #26
 800daae:	42b5      	cmp	r5, r6
 800dab0:	d11a      	bne.n	800dae8 <_printf_common+0xc8>
 800dab2:	2000      	movs	r0, #0
 800dab4:	e008      	b.n	800dac8 <_printf_common+0xa8>
 800dab6:	2301      	movs	r3, #1
 800dab8:	4652      	mov	r2, sl
 800daba:	4641      	mov	r1, r8
 800dabc:	4638      	mov	r0, r7
 800dabe:	47c8      	blx	r9
 800dac0:	3001      	adds	r0, #1
 800dac2:	d103      	bne.n	800dacc <_printf_common+0xac>
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dacc:	3501      	adds	r5, #1
 800dace:	e7c6      	b.n	800da5e <_printf_common+0x3e>
 800dad0:	18e1      	adds	r1, r4, r3
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	2030      	movs	r0, #48	@ 0x30
 800dad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dada:	4422      	add	r2, r4
 800dadc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dae4:	3302      	adds	r3, #2
 800dae6:	e7c7      	b.n	800da78 <_printf_common+0x58>
 800dae8:	2301      	movs	r3, #1
 800daea:	4622      	mov	r2, r4
 800daec:	4641      	mov	r1, r8
 800daee:	4638      	mov	r0, r7
 800daf0:	47c8      	blx	r9
 800daf2:	3001      	adds	r0, #1
 800daf4:	d0e6      	beq.n	800dac4 <_printf_common+0xa4>
 800daf6:	3601      	adds	r6, #1
 800daf8:	e7d9      	b.n	800daae <_printf_common+0x8e>
	...

0800dafc <_printf_i>:
 800dafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db00:	7e0f      	ldrb	r7, [r1, #24]
 800db02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db04:	2f78      	cmp	r7, #120	@ 0x78
 800db06:	4691      	mov	r9, r2
 800db08:	4680      	mov	r8, r0
 800db0a:	460c      	mov	r4, r1
 800db0c:	469a      	mov	sl, r3
 800db0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db12:	d807      	bhi.n	800db24 <_printf_i+0x28>
 800db14:	2f62      	cmp	r7, #98	@ 0x62
 800db16:	d80a      	bhi.n	800db2e <_printf_i+0x32>
 800db18:	2f00      	cmp	r7, #0
 800db1a:	f000 80d2 	beq.w	800dcc2 <_printf_i+0x1c6>
 800db1e:	2f58      	cmp	r7, #88	@ 0x58
 800db20:	f000 80b9 	beq.w	800dc96 <_printf_i+0x19a>
 800db24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db2c:	e03a      	b.n	800dba4 <_printf_i+0xa8>
 800db2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db32:	2b15      	cmp	r3, #21
 800db34:	d8f6      	bhi.n	800db24 <_printf_i+0x28>
 800db36:	a101      	add	r1, pc, #4	@ (adr r1, 800db3c <_printf_i+0x40>)
 800db38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db3c:	0800db95 	.word	0x0800db95
 800db40:	0800dba9 	.word	0x0800dba9
 800db44:	0800db25 	.word	0x0800db25
 800db48:	0800db25 	.word	0x0800db25
 800db4c:	0800db25 	.word	0x0800db25
 800db50:	0800db25 	.word	0x0800db25
 800db54:	0800dba9 	.word	0x0800dba9
 800db58:	0800db25 	.word	0x0800db25
 800db5c:	0800db25 	.word	0x0800db25
 800db60:	0800db25 	.word	0x0800db25
 800db64:	0800db25 	.word	0x0800db25
 800db68:	0800dca9 	.word	0x0800dca9
 800db6c:	0800dbd3 	.word	0x0800dbd3
 800db70:	0800dc63 	.word	0x0800dc63
 800db74:	0800db25 	.word	0x0800db25
 800db78:	0800db25 	.word	0x0800db25
 800db7c:	0800dccb 	.word	0x0800dccb
 800db80:	0800db25 	.word	0x0800db25
 800db84:	0800dbd3 	.word	0x0800dbd3
 800db88:	0800db25 	.word	0x0800db25
 800db8c:	0800db25 	.word	0x0800db25
 800db90:	0800dc6b 	.word	0x0800dc6b
 800db94:	6833      	ldr	r3, [r6, #0]
 800db96:	1d1a      	adds	r2, r3, #4
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6032      	str	r2, [r6, #0]
 800db9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dba4:	2301      	movs	r3, #1
 800dba6:	e09d      	b.n	800dce4 <_printf_i+0x1e8>
 800dba8:	6833      	ldr	r3, [r6, #0]
 800dbaa:	6820      	ldr	r0, [r4, #0]
 800dbac:	1d19      	adds	r1, r3, #4
 800dbae:	6031      	str	r1, [r6, #0]
 800dbb0:	0606      	lsls	r6, r0, #24
 800dbb2:	d501      	bpl.n	800dbb8 <_printf_i+0xbc>
 800dbb4:	681d      	ldr	r5, [r3, #0]
 800dbb6:	e003      	b.n	800dbc0 <_printf_i+0xc4>
 800dbb8:	0645      	lsls	r5, r0, #25
 800dbba:	d5fb      	bpl.n	800dbb4 <_printf_i+0xb8>
 800dbbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	da03      	bge.n	800dbcc <_printf_i+0xd0>
 800dbc4:	232d      	movs	r3, #45	@ 0x2d
 800dbc6:	426d      	negs	r5, r5
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbcc:	4859      	ldr	r0, [pc, #356]	@ (800dd34 <_printf_i+0x238>)
 800dbce:	230a      	movs	r3, #10
 800dbd0:	e011      	b.n	800dbf6 <_printf_i+0xfa>
 800dbd2:	6821      	ldr	r1, [r4, #0]
 800dbd4:	6833      	ldr	r3, [r6, #0]
 800dbd6:	0608      	lsls	r0, r1, #24
 800dbd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbdc:	d402      	bmi.n	800dbe4 <_printf_i+0xe8>
 800dbde:	0649      	lsls	r1, r1, #25
 800dbe0:	bf48      	it	mi
 800dbe2:	b2ad      	uxthmi	r5, r5
 800dbe4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbe6:	4853      	ldr	r0, [pc, #332]	@ (800dd34 <_printf_i+0x238>)
 800dbe8:	6033      	str	r3, [r6, #0]
 800dbea:	bf14      	ite	ne
 800dbec:	230a      	movne	r3, #10
 800dbee:	2308      	moveq	r3, #8
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbf6:	6866      	ldr	r6, [r4, #4]
 800dbf8:	60a6      	str	r6, [r4, #8]
 800dbfa:	2e00      	cmp	r6, #0
 800dbfc:	bfa2      	ittt	ge
 800dbfe:	6821      	ldrge	r1, [r4, #0]
 800dc00:	f021 0104 	bicge.w	r1, r1, #4
 800dc04:	6021      	strge	r1, [r4, #0]
 800dc06:	b90d      	cbnz	r5, 800dc0c <_printf_i+0x110>
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	d04b      	beq.n	800dca4 <_printf_i+0x1a8>
 800dc0c:	4616      	mov	r6, r2
 800dc0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc12:	fb03 5711 	mls	r7, r3, r1, r5
 800dc16:	5dc7      	ldrb	r7, [r0, r7]
 800dc18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc1c:	462f      	mov	r7, r5
 800dc1e:	42bb      	cmp	r3, r7
 800dc20:	460d      	mov	r5, r1
 800dc22:	d9f4      	bls.n	800dc0e <_printf_i+0x112>
 800dc24:	2b08      	cmp	r3, #8
 800dc26:	d10b      	bne.n	800dc40 <_printf_i+0x144>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	07df      	lsls	r7, r3, #31
 800dc2c:	d508      	bpl.n	800dc40 <_printf_i+0x144>
 800dc2e:	6923      	ldr	r3, [r4, #16]
 800dc30:	6861      	ldr	r1, [r4, #4]
 800dc32:	4299      	cmp	r1, r3
 800dc34:	bfde      	ittt	le
 800dc36:	2330      	movle	r3, #48	@ 0x30
 800dc38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc40:	1b92      	subs	r2, r2, r6
 800dc42:	6122      	str	r2, [r4, #16]
 800dc44:	f8cd a000 	str.w	sl, [sp]
 800dc48:	464b      	mov	r3, r9
 800dc4a:	aa03      	add	r2, sp, #12
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	4640      	mov	r0, r8
 800dc50:	f7ff fee6 	bl	800da20 <_printf_common>
 800dc54:	3001      	adds	r0, #1
 800dc56:	d14a      	bne.n	800dcee <_printf_i+0x1f2>
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	b004      	add	sp, #16
 800dc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	f043 0320 	orr.w	r3, r3, #32
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	4833      	ldr	r0, [pc, #204]	@ (800dd38 <_printf_i+0x23c>)
 800dc6c:	2778      	movs	r7, #120	@ 0x78
 800dc6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	6831      	ldr	r1, [r6, #0]
 800dc76:	061f      	lsls	r7, r3, #24
 800dc78:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc7c:	d402      	bmi.n	800dc84 <_printf_i+0x188>
 800dc7e:	065f      	lsls	r7, r3, #25
 800dc80:	bf48      	it	mi
 800dc82:	b2ad      	uxthmi	r5, r5
 800dc84:	6031      	str	r1, [r6, #0]
 800dc86:	07d9      	lsls	r1, r3, #31
 800dc88:	bf44      	itt	mi
 800dc8a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc8e:	6023      	strmi	r3, [r4, #0]
 800dc90:	b11d      	cbz	r5, 800dc9a <_printf_i+0x19e>
 800dc92:	2310      	movs	r3, #16
 800dc94:	e7ac      	b.n	800dbf0 <_printf_i+0xf4>
 800dc96:	4827      	ldr	r0, [pc, #156]	@ (800dd34 <_printf_i+0x238>)
 800dc98:	e7e9      	b.n	800dc6e <_printf_i+0x172>
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	f023 0320 	bic.w	r3, r3, #32
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	e7f6      	b.n	800dc92 <_printf_i+0x196>
 800dca4:	4616      	mov	r6, r2
 800dca6:	e7bd      	b.n	800dc24 <_printf_i+0x128>
 800dca8:	6833      	ldr	r3, [r6, #0]
 800dcaa:	6825      	ldr	r5, [r4, #0]
 800dcac:	6961      	ldr	r1, [r4, #20]
 800dcae:	1d18      	adds	r0, r3, #4
 800dcb0:	6030      	str	r0, [r6, #0]
 800dcb2:	062e      	lsls	r6, r5, #24
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	d501      	bpl.n	800dcbc <_printf_i+0x1c0>
 800dcb8:	6019      	str	r1, [r3, #0]
 800dcba:	e002      	b.n	800dcc2 <_printf_i+0x1c6>
 800dcbc:	0668      	lsls	r0, r5, #25
 800dcbe:	d5fb      	bpl.n	800dcb8 <_printf_i+0x1bc>
 800dcc0:	8019      	strh	r1, [r3, #0]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6123      	str	r3, [r4, #16]
 800dcc6:	4616      	mov	r6, r2
 800dcc8:	e7bc      	b.n	800dc44 <_printf_i+0x148>
 800dcca:	6833      	ldr	r3, [r6, #0]
 800dccc:	1d1a      	adds	r2, r3, #4
 800dcce:	6032      	str	r2, [r6, #0]
 800dcd0:	681e      	ldr	r6, [r3, #0]
 800dcd2:	6862      	ldr	r2, [r4, #4]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7f2 fa82 	bl	80001e0 <memchr>
 800dcdc:	b108      	cbz	r0, 800dce2 <_printf_i+0x1e6>
 800dcde:	1b80      	subs	r0, r0, r6
 800dce0:	6060      	str	r0, [r4, #4]
 800dce2:	6863      	ldr	r3, [r4, #4]
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	2300      	movs	r3, #0
 800dce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcec:	e7aa      	b.n	800dc44 <_printf_i+0x148>
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	4632      	mov	r2, r6
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	47d0      	blx	sl
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d0ad      	beq.n	800dc58 <_printf_i+0x15c>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	079b      	lsls	r3, r3, #30
 800dd00:	d413      	bmi.n	800dd2a <_printf_i+0x22e>
 800dd02:	68e0      	ldr	r0, [r4, #12]
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	4298      	cmp	r0, r3
 800dd08:	bfb8      	it	lt
 800dd0a:	4618      	movlt	r0, r3
 800dd0c:	e7a6      	b.n	800dc5c <_printf_i+0x160>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4632      	mov	r2, r6
 800dd12:	4649      	mov	r1, r9
 800dd14:	4640      	mov	r0, r8
 800dd16:	47d0      	blx	sl
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d09d      	beq.n	800dc58 <_printf_i+0x15c>
 800dd1c:	3501      	adds	r5, #1
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	9903      	ldr	r1, [sp, #12]
 800dd22:	1a5b      	subs	r3, r3, r1
 800dd24:	42ab      	cmp	r3, r5
 800dd26:	dcf2      	bgt.n	800dd0e <_printf_i+0x212>
 800dd28:	e7eb      	b.n	800dd02 <_printf_i+0x206>
 800dd2a:	2500      	movs	r5, #0
 800dd2c:	f104 0619 	add.w	r6, r4, #25
 800dd30:	e7f5      	b.n	800dd1e <_printf_i+0x222>
 800dd32:	bf00      	nop
 800dd34:	08010a3c 	.word	0x08010a3c
 800dd38:	08010a4d 	.word	0x08010a4d

0800dd3c <memmove>:
 800dd3c:	4288      	cmp	r0, r1
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	eb01 0402 	add.w	r4, r1, r2
 800dd44:	d902      	bls.n	800dd4c <memmove+0x10>
 800dd46:	4284      	cmp	r4, r0
 800dd48:	4623      	mov	r3, r4
 800dd4a:	d807      	bhi.n	800dd5c <memmove+0x20>
 800dd4c:	1e43      	subs	r3, r0, #1
 800dd4e:	42a1      	cmp	r1, r4
 800dd50:	d008      	beq.n	800dd64 <memmove+0x28>
 800dd52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd5a:	e7f8      	b.n	800dd4e <memmove+0x12>
 800dd5c:	4402      	add	r2, r0
 800dd5e:	4601      	mov	r1, r0
 800dd60:	428a      	cmp	r2, r1
 800dd62:	d100      	bne.n	800dd66 <memmove+0x2a>
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd6e:	e7f7      	b.n	800dd60 <memmove+0x24>

0800dd70 <_sbrk_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4d06      	ldr	r5, [pc, #24]	@ (800dd8c <_sbrk_r+0x1c>)
 800dd74:	2300      	movs	r3, #0
 800dd76:	4604      	mov	r4, r0
 800dd78:	4608      	mov	r0, r1
 800dd7a:	602b      	str	r3, [r5, #0]
 800dd7c:	f7f3 ffd4 	bl	8001d28 <_sbrk>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_sbrk_r+0x1a>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_sbrk_r+0x1a>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20001ebc 	.word	0x20001ebc

0800dd90 <memcpy>:
 800dd90:	440a      	add	r2, r1
 800dd92:	4291      	cmp	r1, r2
 800dd94:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd98:	d100      	bne.n	800dd9c <memcpy+0xc>
 800dd9a:	4770      	bx	lr
 800dd9c:	b510      	push	{r4, lr}
 800dd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dda6:	4291      	cmp	r1, r2
 800dda8:	d1f9      	bne.n	800dd9e <memcpy+0xe>
 800ddaa:	bd10      	pop	{r4, pc}

0800ddac <_realloc_r>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	4615      	mov	r5, r2
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	b921      	cbnz	r1, 800ddc2 <_realloc_r+0x16>
 800ddb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	f7ff bc4b 	b.w	800d658 <_malloc_r>
 800ddc2:	b92a      	cbnz	r2, 800ddd0 <_realloc_r+0x24>
 800ddc4:	f7ff fbdc 	bl	800d580 <_free_r>
 800ddc8:	2400      	movs	r4, #0
 800ddca:	4620      	mov	r0, r4
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	f000 f81a 	bl	800de08 <_malloc_usable_size_r>
 800ddd4:	4285      	cmp	r5, r0
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	d802      	bhi.n	800dde0 <_realloc_r+0x34>
 800ddda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddde:	d8f4      	bhi.n	800ddca <_realloc_r+0x1e>
 800dde0:	4629      	mov	r1, r5
 800dde2:	4640      	mov	r0, r8
 800dde4:	f7ff fc38 	bl	800d658 <_malloc_r>
 800dde8:	4607      	mov	r7, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d0ec      	beq.n	800ddc8 <_realloc_r+0x1c>
 800ddee:	42b5      	cmp	r5, r6
 800ddf0:	462a      	mov	r2, r5
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	bf28      	it	cs
 800ddf6:	4632      	movcs	r2, r6
 800ddf8:	f7ff ffca 	bl	800dd90 <memcpy>
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4640      	mov	r0, r8
 800de00:	f7ff fbbe 	bl	800d580 <_free_r>
 800de04:	463c      	mov	r4, r7
 800de06:	e7e0      	b.n	800ddca <_realloc_r+0x1e>

0800de08 <_malloc_usable_size_r>:
 800de08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de0c:	1f18      	subs	r0, r3, #4
 800de0e:	2b00      	cmp	r3, #0
 800de10:	bfbc      	itt	lt
 800de12:	580b      	ldrlt	r3, [r1, r0]
 800de14:	18c0      	addlt	r0, r0, r3
 800de16:	4770      	bx	lr

0800de18 <_init>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	bf00      	nop
 800de1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1e:	bc08      	pop	{r3}
 800de20:	469e      	mov	lr, r3
 800de22:	4770      	bx	lr

0800de24 <_fini>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	bf00      	nop
 800de28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2a:	bc08      	pop	{r3}
 800de2c:	469e      	mov	lr, r3
 800de2e:	4770      	bx	lr
