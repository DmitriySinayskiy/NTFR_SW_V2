
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  0800de24  0800de24  0000ee24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee6c  0800ee6c  00010624  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee6c  0800ee6c  0000fe6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee74  0800ee74  00010624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee74  0800ee74  0000fe74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee78  0800ee78  0000fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000624  20000000  0800ee7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d4  20000624  0800f4a0  00010624  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef8  0800f4a0  00010ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010624  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203ad  00000000  00000000  00010654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052aa  00000000  00000000  00030a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00035cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001632  00000000  00000000  00037968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecef  00000000  00000000  00038f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028bdc  00000000  00000000  00057c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9268  00000000  00000000  00080865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c6c  00000000  00000000  00129b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000624 	.word	0x20000624
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de0c 	.word	0x0800de0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000628 	.word	0x20000628
 80001dc:	0800de0c 	.word	0x0800de0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
uint8_t touch_irq = 0;

 uint8_t gl_id_to_display = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d102      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x24>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000934 	.word	0x20000934

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 f94f 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f877 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fc07 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 fbdd 	bl	8000d68 <MX_DMA_Init>
  MX_I2C1_Init();
 80005ae:	f000 f92f 	bl	8000810 <MX_I2C1_Init>
  MX_RTC_Init();
 80005b2:	f000 f95b 	bl	800086c <MX_RTC_Init>
  MX_SPI1_Init();
 80005b6:	f000 f9e7 	bl	8000988 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005ba:	f000 f8d7 	bl	800076c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005be:	f000 fb2f 	bl	8000c20 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c2:	f000 fab7 	bl	8000b34 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005c6:	f000 fb81 	bl	8000ccc <MX_TIM4_Init>
  MX_TIM1_Init();
 80005ca:	f000 fa13 	bl	80009f4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80005ce:	f00b fa1d 	bl	800ba0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */




  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	4828      	ldr	r0, [pc, #160]	@ (800067c <main+0xe4>)
 80005da:	f002 f9c1 	bl	8002960 <HAL_GPIO_WritePin>
  ST7735_Init();
 80005de:	f00b f845 	bl	800b66c <ST7735_Init>
  ST7735_InvertColors(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f00b f9fb 	bl	800b9de <ST7735_InvertColors>
  ST7735_FillScreen(ST7735_BLACK);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f00b f99b 	bl	800b924 <ST7735_FillScreen>
  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f4:	4821      	ldr	r0, [pc, #132]	@ (800067c <main+0xe4>)
 80005f6:	f002 f9b3 	bl	8002960 <HAL_GPIO_WritePin>

  W25qxx_Init();
 80005fa:	f00c fd9d 	bl	800d138 <W25qxx_Init>
  MX_I2C1_Init();
 80005fe:	f000 f907 	bl	8000810 <MX_I2C1_Init>
  touch_init();
 8000602:	f00c fc2f 	bl	800ce64 <touch_init>

  HAL_TIM_Base_Start_IT(&htim4);
 8000606:	481e      	ldr	r0, [pc, #120]	@ (8000680 <main+0xe8>)
 8000608:	f006 fb54 	bl	8006cb4 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000612:	481c      	ldr	r0, [pc, #112]	@ (8000684 <main+0xec>)
 8000614:	f002 f9a4 	bl	8002960 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0xec>)
 8000620:	f002 f99e 	bl	8002960 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062a:	4816      	ldr	r0, [pc, #88]	@ (8000684 <main+0xec>)
 800062c:	f002 f998 	bl	8002960 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0xf0>)
 8000632:	f006 fb3f 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4814      	ldr	r0, [pc, #80]	@ (800068c <main+0xf4>)
 800063a:	f006 fbf7 	bl	8006e2c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 50;
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <main+0xf8>)
 8000640:	2232      	movs	r2, #50	@ 0x32
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34

  char char_buffer[10];

   uint16_t conduct0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	82fb      	strh	r3, [r7, #22]
   uint16_t conduct1 = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	82bb      	strh	r3, [r7, #20]
   uint16_t conduct2 = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	827b      	strh	r3, [r7, #18]
   uint16_t conduct_avg = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	823b      	strh	r3, [r7, #16]
   uint8_t gl_id = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]
   uint8_t id_changed_by_touch = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73bb      	strb	r3, [r7, #14]
   uint16_t touch_accel_to_disp = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	81bb      	strh	r3, [r7, #12]
   uint8_t id_to_displ_fast_scroll = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  button_state_determ();
 8000664:	f00b febc 	bl	800c3e0 <button_state_determ>
	  //gl_id_to_display  = select_product_id(gl_id_to_display);

	  MPR121_setregister(MHD_R,0x01);
 8000668:	2101      	movs	r1, #1
 800066a:	202b      	movs	r0, #43	@ 0x2b
 800066c:	f00c fa90 	bl	800cb90 <MPR121_setregister>
	  page_select();
 8000670:	f00c f81e 	bl	800c6b0 <page_select>
//	  	//  sprintf(char_buffer, "%04d", conduct2);
//	  	//  ST7735_WriteString(55, 43, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
//
//	  	  conduct_avg = (conduct0+conduct1+conduct2)/3;

	  	  but_state_reset();
 8000674:	f00b ff70 	bl	800c558 <but_state_reset>
	  button_state_determ();
 8000678:	bf00      	nop
 800067a:	e7f3      	b.n	8000664 <main+0xcc>
 800067c:	40020800 	.word	0x40020800
 8000680:	200008ec 	.word	0x200008ec
 8000684:	40020400 	.word	0x40020400
 8000688:	2000085c 	.word	0x2000085c
 800068c:	20000814 	.word	0x20000814
 8000690:	40010000 	.word	0x40010000

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00c ff32 	bl	800d50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd4>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006f4:	2305      	movs	r3, #5
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f004 fb8b 	bl	8004e3c <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800072c:	f000 fc32 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2102      	movs	r1, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f004 fded 	bl	800532c <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000758:	f000 fc1c 	bl	8000f94 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_ADC1_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <MX_ADC1_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_ADC1_Init+0x98>)
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	@ (800080c <MX_ADC1_Init+0xa0>)
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007ce:	f001 f8cd 	bl	800196c <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 fbdc 	bl	8000f94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80007e4:	2305      	movs	r3, #5
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_ADC1_Init+0x98>)
 80007ee:	f001 f901 	bl	80019f4 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 fbcc 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000640 	.word	0x20000640
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f002 f8b9 	bl	80029c4 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 fb9c 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000688 	.word	0x20000688
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b090      	sub	sp, #64	@ 0x40
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2228      	movs	r2, #40	@ 0x28
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f00c fe3d 	bl	800d50c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <MX_RTC_Init+0x114>)
 8000894:	4a3b      	ldr	r2, [pc, #236]	@ (8000984 <MX_RTC_Init+0x118>)
 8000896:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000898:	4b39      	ldr	r3, [pc, #228]	@ (8000980 <MX_RTC_Init+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_RTC_Init+0x114>)
 80008a0:	227f      	movs	r2, #127	@ 0x7f
 80008a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a4:	4b36      	ldr	r3, [pc, #216]	@ (8000980 <MX_RTC_Init+0x114>)
 80008a6:	22ff      	movs	r2, #255	@ 0xff
 80008a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <MX_RTC_Init+0x114>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b0:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <MX_RTC_Init+0x114>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <MX_RTC_Init+0x114>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008bc:	4830      	ldr	r0, [pc, #192]	@ (8000980 <MX_RTC_Init+0x114>)
 80008be:	f005 f82f 	bl	8005920 <HAL_RTC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 fb64 	bl	8000f94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	4824      	ldr	r0, [pc, #144]	@ (8000980 <MX_RTC_Init+0x114>)
 80008f0:	f005 f88c 	bl	8005a0c <HAL_RTC_SetTime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80008fa:	f000 fb4b 	bl	8000f94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008fe:	2301      	movs	r3, #1
 8000900:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000904:	2301      	movs	r3, #1
 8000906:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800090a:	2301      	movs	r3, #1
 800090c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_RTC_Init+0x114>)
 8000920:	f005 f90e 	bl	8005b40 <HAL_RTC_SetDate>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800092a:	f000 fb33 	bl	8000f94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800092e:	2300      	movs	r3, #0
 8000930:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000932:	2300      	movs	r3, #0
 8000934:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000936:	2300      	movs	r3, #0
 8000938:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000946:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 800094a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000954:	2301      	movs	r3, #1
 8000956:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800095a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2201      	movs	r2, #1
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_RTC_Init+0x114>)
 8000968:	f005 f96e 	bl	8005c48 <HAL_RTC_SetAlarm_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000972:	f000 fb0f 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3740      	adds	r7, #64	@ 0x40
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200006dc 	.word	0x200006dc
 8000984:	40002800 	.word	0x40002800

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_SPI1_Init+0x64>)
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <MX_SPI1_Init+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_SPI1_Init+0x64>)
 8000994:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009d4:	220a      	movs	r2, #10
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_SPI1_Init+0x64>)
 80009da:	f005 fb72 	bl	80060c2 <HAL_SPI_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009e4:	f000 fad6 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200006fc 	.word	0x200006fc
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	@ 0x58
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00c fd6d 	bl	800d50c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a32:	4b3e      	ldr	r3, [pc, #248]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a34:	4a3e      	ldr	r2, [pc, #248]	@ (8000b30 <MX_TIM1_Init+0x13c>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000a38:	4b3c      	ldr	r3, [pc, #240]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a3a:	f240 3233 	movw	r2, #819	@ 0x333
 8000a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b3a      	ldr	r3, [pc, #232]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a46:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a48:	2263      	movs	r2, #99	@ 0x63
 8000a4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b37      	ldr	r3, [pc, #220]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5e:	4833      	ldr	r0, [pc, #204]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a60:	f006 f8d8 	bl	8006c14 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a6a:	f000 fa93 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482c      	ldr	r0, [pc, #176]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a7c:	f006 fcaa 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a86:	f000 fa85 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8a:	4828      	ldr	r0, [pc, #160]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000a8c:	f006 f974 	bl	8006d78 <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a96:	f000 fa7d 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4820      	ldr	r0, [pc, #128]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000aaa:	f007 f859 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ab4:	f000 fa6e 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000ade:	f006 fbb7 	bl	8007250 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ae8:	f000 fa54 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000b10:	f007 f894 	bl	8007c3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b1a:	f000 fa3b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b1e:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <MX_TIM1_Init+0x138>)
 8000b20:	f000 fc52 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000b24:	bf00      	nop
 8000b26:	3758      	adds	r7, #88	@ 0x58
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000814 	.word	0x20000814
 8000b30:	40010000 	.word	0x40010000

08000b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b6e:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b7c:	2263      	movs	r2, #99	@ 0x63
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8c:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000b8e:	f006 f841 	bl	8006c14 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b98:	f000 f9fc 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000baa:	f006 fc13 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bb4:	f000 f9ee 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000bba:	f006 f8dd 	bl	8006d78 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bc4:	f000 f9e6 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000bd8:	f006 ffc2 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000be2:	f000 f9d7 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	@ 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000bfe:	f006 fb27 	bl	8007250 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c08:	f000 f9c4 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM2_Init+0xe8>)
 8000c0e:	f000 fbdb 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	@ 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000085c 	.word	0x2000085c

08000c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c3e:	4a22      	ldr	r2, [pc, #136]	@ (8000cc8 <MX_TIM3_Init+0xa8>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c44:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c52:	2263      	movs	r2, #99	@ 0x63
 8000c54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c62:	4818      	ldr	r0, [pc, #96]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c64:	f005 ffd6 	bl	8006c14 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f000 f991 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c80:	f006 fba8 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 f983 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c8e:	2108      	movs	r1, #8
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000c92:	f006 f97b 	bl	8006f8c <HAL_TIM_OnePulse_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c9c:	f000 f97a 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_TIM3_Init+0xa4>)
 8000cae:	f006 ff57 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cb8:	f000 f96c 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200008a4 	.word	0x200008a4
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <MX_TIM4_Init+0x98>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000cf0:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000cf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25-1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000cfe:	2218      	movs	r2, #24
 8000d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0e:	4814      	ldr	r0, [pc, #80]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000d10:	f005 ff80 	bl	8006c14 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 f93b 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000d2c:	f006 fb52 	bl	80073d4 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 f92d 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <MX_TIM4_Init+0x94>)
 8000d48:	f006 ff0a 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d52:	f000 f91f 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200008ec 	.word	0x200008ec
 8000d64:	40000800 	.word	0x40000800

08000d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_DMA_Init+0x4c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <MX_DMA_Init+0x4c>)
 8000d78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <MX_DMA_Init+0x4c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2038      	movs	r0, #56	@ 0x38
 8000d90:	f001 f929 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d94:	2038      	movs	r0, #56	@ 0x38
 8000d96:	f001 f942 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	203b      	movs	r0, #59	@ 0x3b
 8000da0:	f001 f921 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000da4:	203b      	movs	r0, #59	@ 0x3b
 8000da6:	f001 f93a 	bl	800201e <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b64      	ldr	r3, [pc, #400]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a63      	ldr	r2, [pc, #396]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b61      	ldr	r3, [pc, #388]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b5a      	ldr	r3, [pc, #360]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b56      	ldr	r3, [pc, #344]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a55      	ldr	r2, [pc, #340]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b53      	ldr	r3, [pc, #332]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b4f      	ldr	r3, [pc, #316]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a4e      	ldr	r2, [pc, #312]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f80 <MX_GPIO_Init+0x1c8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000e60:	4848      	ldr	r0, [pc, #288]	@ (8000f84 <MX_GPIO_Init+0x1cc>)
 8000e62:	f001 fd7d 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 8000e66:	2201      	movs	r2, #1
 8000e68:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8000e6c:	4845      	ldr	r0, [pc, #276]	@ (8000f84 <MX_GPIO_Init+0x1cc>)
 8000e6e:	f001 fd77 	bl	8002960 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000e78:	4843      	ldr	r0, [pc, #268]	@ (8000f88 <MX_GPIO_Init+0x1d0>)
 8000e7a:	f001 fd71 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VIBRO_Pin|S1_Pin|OE_Pin|DFU_FORCE_Pin
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f24d 2101 	movw	r1, #53761	@ 0xd201
 8000e84:	4841      	ldr	r0, [pc, #260]	@ (8000f8c <MX_GPIO_Init+0x1d4>)
 8000e86:	f001 fd6b 	bl	8002960 <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8000e90:	483e      	ldr	r0, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x1d4>)
 8000e92:	f001 fd65 	bl	8002960 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 8000e96:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8000e9a:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4835      	ldr	r0, [pc, #212]	@ (8000f84 <MX_GPIO_Init+0x1cc>)
 8000eb0:	f001 fbba 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	482f      	ldr	r0, [pc, #188]	@ (8000f84 <MX_GPIO_Init+0x1cc>)
 8000ec8:	f001 fbae 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 8000ecc:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4828      	ldr	r0, [pc, #160]	@ (8000f88 <MX_GPIO_Init+0x1d0>)
 8000ee6:	f001 fb9f 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : VIBRO_Pin LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin
                           OE_Pin DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_BLUE_1_Pin LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = VIBRO_Pin|LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin
 8000eea:	f24d 333f 	movw	r3, #54079	@ 0xd33f
 8000eee:	617b      	str	r3, [r7, #20]
                          |OE_Pin|DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_BLUE_1_Pin|LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <MX_GPIO_Init+0x1d4>)
 8000f04:	f001 fb90 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481b      	ldr	r0, [pc, #108]	@ (8000f8c <MX_GPIO_Init+0x1d4>)
 8000f1e:	f001 fb83 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8000f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4813      	ldr	r0, [pc, #76]	@ (8000f88 <MX_GPIO_Init+0x1d0>)
 8000f3a:	f001 fb75 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480f      	ldr	r0, [pc, #60]	@ (8000f90 <MX_GPIO_Init+0x1d8>)
 8000f54:	f001 fb68 	bl	8002628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2008      	movs	r0, #8
 8000f5e:	f001 f842 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f62:	2008      	movs	r0, #8
 8000f64:	f001 f85b 	bl	800201e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2028      	movs	r0, #40	@ 0x28
 8000f6e:	f001 f83a 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	@ 0x28
 8000f74:	f001 f853 	bl	800201e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <HAL_ADC_MspInit+0x7c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d127      	bne.n	8001062 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001020:	6453      	str	r3, [r2, #68]	@ 0x44
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 800104a:	230e      	movs	r3, #14
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 800105e:	f001 fae3 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40012000 	.word	0x40012000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_I2C_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b6:	23c0      	movs	r3, #192	@ 0xc0
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c6:	2304      	movs	r3, #4
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <HAL_I2C_MspInit+0x8c>)
 80010d2:	f001 faa9 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_I2C_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_RTC_MspInit+0x60>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d119      	bne.n	800115e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800112a:	2302      	movs	r3, #2
 800112c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800112e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001132:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fb03 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001144:	f7ff ff26 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_RTC_MspInit+0x64>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2029      	movs	r0, #41	@ 0x29
 8001154:	f000 ff47 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001158:	2029      	movs	r0, #41	@ 0x29
 800115a:	f000 ff60 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40002800 	.word	0x40002800
 800116c:	42470e3c 	.word	0x42470e3c

08001170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a47      	ldr	r2, [pc, #284]	@ (80012ac <HAL_SPI_MspInit+0x13c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 8088 	bne.w	80012a4 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119c:	4a44      	ldr	r2, [pc, #272]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 800119e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a4:	4b42      	ldr	r3, [pc, #264]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a3d      	ldr	r2, [pc, #244]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_SPI_MspInit+0x140>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011cc:	23e0      	movs	r3, #224	@ 0xe0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011dc:	2305      	movs	r3, #5
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4833      	ldr	r0, [pc, #204]	@ (80012b4 <HAL_SPI_MspInit+0x144>)
 80011e8:	f001 fa1e 	bl	8002628 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011ec:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 80011ee:	4a33      	ldr	r2, [pc, #204]	@ (80012bc <HAL_SPI_MspInit+0x14c>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011f2:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 80011f4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001208:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800122c:	4822      	ldr	r0, [pc, #136]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 800122e:	f000 ff11 	bl	8002054 <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001238:	f7ff feac 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001240:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001242:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <HAL_SPI_MspInit+0x148>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_SPI_MspInit+0x154>)
 800124c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001250:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001254:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001258:	2240      	movs	r2, #64	@ 0x40
 800125a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001288:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800128a:	f000 fee3 	bl	8002054 <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001294:	f7ff fe7e 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 800129c:	649a      	str	r2, [r3, #72]	@ 0x48
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_SPI_MspInit+0x150>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	20000754 	.word	0x20000754
 80012bc:	40026410 	.word	0x40026410
 80012c0:	200007b4 	.word	0x200007b4
 80012c4:	40026458 	.word	0x40026458

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a38      	ldr	r2, [pc, #224]	@ (80013b8 <HAL_TIM_Base_MspInit+0xf0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d116      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a36      	ldr	r2, [pc, #216]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2019      	movs	r0, #25
 80012fc:	f000 fe73 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001300:	2019      	movs	r0, #25
 8001302:	f000 fe8c 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001306:	e052      	b.n	80013ae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001310:	d116      	bne.n	8001340 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201c      	movs	r0, #28
 8001334:	f000 fe57 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001338:	201c      	movs	r0, #28
 800133a:	f000 fe70 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 800133e:	e036      	b.n	80013ae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d116      	bne.n	8001378 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a1a      	ldr	r2, [pc, #104]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201d      	movs	r0, #29
 800136c:	f000 fe3b 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001370:	201d      	movs	r0, #29
 8001372:	f000 fe54 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 8001376:	e01a      	b.n	80013ae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_TIM_Base_MspInit+0xfc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d115      	bne.n	80013ae <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_TIM_Base_MspInit+0xf4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2101      	movs	r1, #1
 80013a2:	201e      	movs	r0, #30
 80013a4:	f000 fe1f 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013a8:	201e      	movs	r0, #30
 80013aa:	f000 fe38 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40000800 	.word	0x40000800

080013c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	@ (800147c <HAL_TIM_MspPostInit+0xb4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d11f      	bne.n	800142a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4818      	ldr	r0, [pc, #96]	@ (8001484 <HAL_TIM_MspPostInit+0xbc>)
 8001424:	f001 f900 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001428:	e023      	b.n	8001472 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001432:	d11e      	bne.n	8001472 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	6313      	str	r3, [r2, #48]	@ 0x30
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_TIM_MspPostInit+0xb8>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	@ (8001488 <HAL_TIM_MspPostInit+0xc0>)
 800146e:	f001 f8db 	bl	8002628 <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f9ff 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 80014ee:	2004      	movs	r0, #4
 80014f0:	f001 fa50 	bl	8002994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014fe:	f005 fd9f 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000814 	.word	0x20000814

0800150c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(gl_touch_accel)
 8001510:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <TIM2_IRQHandler+0x158>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <TIM2_IRQHandler+0x18>
	{
		gl_touch_accel_inc++;
 8001518:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <TIM2_IRQHandler+0x15c>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <TIM2_IRQHandler+0x15c>)
 8001522:	801a      	strh	r2, [r3, #0]
	}
	if(gl_touch_change_id)
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <TIM2_IRQHandler+0x160>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d016      	beq.n	800155a <TIM2_IRQHandler+0x4e>
	{
		gl_touch_change_id++;
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <TIM2_IRQHandler+0x160>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b4d      	ldr	r3, [pc, #308]	@ (800166c <TIM2_IRQHandler+0x160>)
 8001536:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	484c      	ldr	r0, [pc, #304]	@ (8001670 <TIM2_IRQHandler+0x164>)
 800153e:	f001 fa0f 	bl	8002960 <HAL_GPIO_WritePin>
		if(gl_touch_change_id == 70)
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <TIM2_IRQHandler+0x160>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b46      	cmp	r3, #70	@ 0x46
 8001548:	d107      	bne.n	800155a <TIM2_IRQHandler+0x4e>
		{
			HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2101      	movs	r1, #1
 800154e:	4848      	ldr	r0, [pc, #288]	@ (8001670 <TIM2_IRQHandler+0x164>)
 8001550:	f001 fa06 	bl	8002960 <HAL_GPIO_WritePin>
			gl_touch_change_id = 0;
 8001554:	4b45      	ldr	r3, [pc, #276]	@ (800166c <TIM2_IRQHandler+0x160>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(&htim2);
		}
	}

	gl_counter_1000hz_tim2++;
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <TIM2_IRQHandler+0x168>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <TIM2_IRQHandler+0x168>)
 8001564:	801a      	strh	r2, [r3, #0]
	gl_selected_pause++;
 8001566:	4b44      	ldr	r3, [pc, #272]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 8001570:	801a      	strh	r2, [r3, #0]
	if(gl_selected_pause >0 && gl_selected_pause < 5000)
 8001572:	4b41      	ldr	r3, [pc, #260]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <TIM2_IRQHandler+0x86>
 800157a:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001582:	4293      	cmp	r3, r2
 8001584:	d805      	bhi.n	8001592 <TIM2_IRQHandler+0x86>
	{
		gl_selected_pause++;
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <TIM2_IRQHandler+0x16c>)
 8001590:	801a      	strh	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 500 == 0)
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <TIM2_IRQHandler+0x168>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	4a39      	ldr	r2, [pc, #228]	@ (800167c <TIM2_IRQHandler+0x170>)
 8001598:	fba2 1203 	umull	r1, r2, r2, r3
 800159c:	0952      	lsrs	r2, r2, #5
 800159e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <TIM2_IRQHandler+0xb4>
	{
		gl_int_5hz_tim2 = 1;
 80015ae:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <TIM2_IRQHandler+0x174>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
		gl_int_5hz_tim2_for_pic ++;
 80015b4:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <TIM2_IRQHandler+0x178>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <TIM2_IRQHandler+0x178>)
 80015be:	701a      	strb	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 50 == 0 && gl_led_pwm_state == LED_PWM_CCR_CHANGEBALE )
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <TIM2_IRQHandler+0x168>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <TIM2_IRQHandler+0x17c>)
 80015c6:	fba2 1203 	umull	r1, r2, r2, r3
 80015ca:	0912      	lsrs	r2, r2, #4
 80015cc:	2132      	movs	r1, #50	@ 0x32
 80015ce:	fb01 f202 	mul.w	r2, r1, r2
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d13f      	bne.n	800165a <TIM2_IRQHandler+0x14e>
 80015da:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <TIM2_IRQHandler+0x180>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d13b      	bne.n	800165a <TIM2_IRQHandler+0x14e>
	{
		ch3_counter += 3;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <TIM2_IRQHandler+0x184>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3303      	adds	r3, #3
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <TIM2_IRQHandler+0x184>)
 80015ec:	801a      	strh	r2, [r3, #0]
		if(ch3_counter < 300)
 80015ee:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <TIM2_IRQHandler+0x184>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015f6:	d20b      	bcs.n	8001610 <TIM2_IRQHandler+0x104>
		{
			CH3_DC = ch3_counter;
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <TIM2_IRQHandler+0x184>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <TIM2_IRQHandler+0x188>)
 8001600:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = CH3_DC;
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <TIM2_IRQHandler+0x188>)
 8001604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001608:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800160c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800160e:	e024      	b.n	800165a <TIM2_IRQHandler+0x14e>
		}
		else if(ch3_counter >= 300)
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <TIM2_IRQHandler+0x184>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001618:	d31f      	bcc.n	800165a <TIM2_IRQHandler+0x14e>
		{
			TIM2->CCR3 = CH3_DC;
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <TIM2_IRQHandler+0x188>)
 800161c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001624:	63da      	str	r2, [r3, #60]	@ 0x3c
			CH3_DC -= 3;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <TIM2_IRQHandler+0x188>)
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b03      	subs	r3, #3
 8001630:	b29b      	uxth	r3, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <TIM2_IRQHandler+0x188>)
 8001636:	801a      	strh	r2, [r3, #0]
			if(CH3_DC <=0)
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <TIM2_IRQHandler+0x188>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dc0b      	bgt.n	800165a <TIM2_IRQHandler+0x14e>
			{
				CH3_DC = 0;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <TIM2_IRQHandler+0x188>)
 8001644:	2200      	movs	r2, #0
 8001646:	801a      	strh	r2, [r3, #0]
				ch3_counter = 0;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <TIM2_IRQHandler+0x184>)
 800164a:	2200      	movs	r2, #0
 800164c:	801a      	strh	r2, [r3, #0]
				gl_led_color_result_blink_counter++;
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <TIM2_IRQHandler+0x18c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <TIM2_IRQHandler+0x18c>)
 8001658:	701a      	strb	r2, [r3, #0]
		}


	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800165a:	4810      	ldr	r0, [pc, #64]	@ (800169c <TIM2_IRQHandler+0x190>)
 800165c:	f005 fcf0 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000942 	.word	0x20000942
 8001668:	20000944 	.word	0x20000944
 800166c:	20000940 	.word	0x20000940
 8001670:	40020400 	.word	0x40020400
 8001674:	2000093a 	.word	0x2000093a
 8001678:	20001d6e 	.word	0x20001d6e
 800167c:	10624dd3 	.word	0x10624dd3
 8001680:	2000093c 	.word	0x2000093c
 8001684:	2000093d 	.word	0x2000093d
 8001688:	51eb851f 	.word	0x51eb851f
 800168c:	20000102 	.word	0x20000102
 8001690:	20000938 	.word	0x20000938
 8001694:	20000936 	.word	0x20000936
 8001698:	2000093f 	.word	0x2000093f
 800169c:	2000085c 	.word	0x2000085c

080016a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <TIM3_IRQHandler+0x10>)
 80016a6:	f005 fccb 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200008a4 	.word	0x200008a4

080016b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <TIM4_IRQHandler+0x10>)
 80016ba:	f005 fcc1 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200008ec 	.word	0x200008ec

080016c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80016cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016d0:	f001 f960 	bl	8002994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	led_1hz_counter++;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <RTC_Alarm_IRQHandler+0x38>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <RTC_Alarm_IRQHandler+0x38>)
 80016e6:	701a      	strb	r2, [r3, #0]

	if(gl_selected_pause == 0 && gl_selected_flag == 1)
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <RTC_Alarm_IRQHandler+0x3c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <RTC_Alarm_IRQHandler+0x2c>
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <RTC_Alarm_IRQHandler+0x40>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <RTC_Alarm_IRQHandler+0x2c>
	{
		gl_selected_pause = 1;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <RTC_Alarm_IRQHandler+0x3c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	801a      	strh	r2, [r3, #0]
		gl_selected_flag = 0;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <RTC_Alarm_IRQHandler+0x40>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001704:	4805      	ldr	r0, [pc, #20]	@ (800171c <RTC_Alarm_IRQHandler+0x44>)
 8001706:	f004 fbe1 	bl	8005ecc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000093e 	.word	0x2000093e
 8001714:	20001d6e 	.word	0x20001d6e
 8001718:	20000104 	.word	0x20000104
 800171c:	200006dc 	.word	0x200006dc

08001720 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA2_Stream0_IRQHandler+0x10>)
 8001726:	f000 fd43 	bl	80021b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000754 	.word	0x20000754

08001734 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA2_Stream3_IRQHandler+0x10>)
 800173a:	f000 fd39 	bl	80021b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200007b4 	.word	0x200007b4

08001748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <OTG_FS_IRQHandler+0x10>)
 800174e:	f002 fa48 	bl	8003be2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20001630 	.word	0x20001630

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f00b fec6 	bl	800d51c <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20010000 	.word	0x20010000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000948 	.word	0x20000948
 80017c4:	20001ef8 	.word	0x20001ef8

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	@ (800182c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	@ (8001838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001816:	f7ff ffd7 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f00b fe85 	bl	800d528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7fe febb 	bl	8000598 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000624 	.word	0x20000624
  ldr r2, =_sidata
 8001830:	0800ee7c 	.word	0x0800ee7c
  ldr r2, =_sbss
 8001834:	20000624 	.word	0x20000624
  ldr r4, =_ebss
 8001838:	20001ef8 	.word	0x20001ef8

0800183c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 fbb1 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	200f      	movs	r0, #15
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fb94 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fbc9 	bl	800203a <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 fb91 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	2000094c 	.word	0x2000094c

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000094c 	.word	0x2000094c

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e033      	b.n	80019ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fb30 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019b2:	f023 0302 	bic.w	r3, r3, #2
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f93a 	bl	8001c38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019da:	e001      	b.n	80019e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1c>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e105      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x228>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d925      	bls.n	8001a6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68d9      	ldr	r1, [r3, #12]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	3b1e      	subs	r3, #30
 8001a36:	2207      	movs	r2, #7
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68d9      	ldr	r1, [r3, #12]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	4603      	mov	r3, r0
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3b1e      	subs	r3, #30
 8001a60:	409a      	lsls	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	e022      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6919      	ldr	r1, [r3, #16]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	2207      	movs	r2, #7
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6919      	ldr	r1, [r3, #16]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4403      	add	r3, r0
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d824      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b05      	subs	r3, #5
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b05      	subs	r3, #5
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b02:	e04c      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d824      	bhi.n	8001b56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	@ 0x23
 8001b1e:	221f      	movs	r2, #31
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43da      	mvns	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b23      	subs	r3, #35	@ 0x23
 8001b48:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b54:	e023      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	@ 0x41
 8001b68:	221f      	movs	r2, #31
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	400a      	ands	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b41      	subs	r3, #65	@ 0x41
 8001b92:	fa00 f203 	lsl.w	r2, r0, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <HAL_ADC_ConfigChannel+0x234>)
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <HAL_ADC_ConfigChannel+0x238>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1cc>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_ADC_ConfigChannel+0x238>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d123      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x21e>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x1e6>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d11b      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d111      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_ADC_ConfigChannel+0x23c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_ADC_ConfigChannel+0x240>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9a      	lsrs	r2, r3, #18
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	40012000 	.word	0x40012000
 8001c30:	20000000 	.word	0x20000000
 8001c34:	431bde83 	.word	0x431bde83

08001c38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c40:	4b79      	ldr	r3, [pc, #484]	@ (8001e28 <ADC_Init+0x1f0>)
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	4a58      	ldr	r2, [pc, #352]	@ (8001e2c <ADC_Init+0x1f4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e00f      	b.n	8001d36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0202 	bic.w	r2, r2, #2
 8001d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e1b      	ldrb	r3, [r3, #24]
 8001d50:	005a      	lsls	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	035a      	lsls	r2, r3, #13
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e007      	b.n	8001dac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001daa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	051a      	lsls	r2, r3, #20
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dee:	025a      	lsls	r2, r3, #9
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	029a      	lsls	r2, r3, #10
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40012300 	.word	0x40012300
 8001e2c:	0f000001 	.word	0x0f000001

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	@ (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff3e 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff31 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fc54 	bl	800190c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e099      	b.n	80021a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002090:	e00f      	b.n	80020b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002092:	f7ff fc3b 	bl	800190c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b05      	cmp	r3, #5
 800209e:	d908      	bls.n	80020b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e078      	b.n	80021a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e8      	bne.n	8002092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_DMA_Init+0x158>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	2b04      	cmp	r3, #4
 800210a:	d107      	bne.n	800211c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	4313      	orrs	r3, r2
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0307 	bic.w	r3, r3, #7
 8002132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	2b04      	cmp	r3, #4
 8002144:	d117      	bne.n	8002176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f9e9 	bl	8002530 <DMA_CheckFifoParam>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002172:	2301      	movs	r3, #1
 8002174:	e016      	b.n	80021a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9a0 	bl	80024c4 <DMA_CalcBaseAndBitshift>
 8002184:	4603      	mov	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	223f      	movs	r2, #63	@ 0x3f
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	f010803f 	.word	0xf010803f

080021b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021bc:	4b8e      	ldr	r3, [pc, #568]	@ (80023f8 <HAL_DMA_IRQHandler+0x248>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a8e      	ldr	r2, [pc, #568]	@ (80023fc <HAL_DMA_IRQHandler+0x24c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2208      	movs	r2, #8
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01a      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2208      	movs	r2, #8
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	2201      	movs	r2, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2201      	movs	r2, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	2204      	movs	r2, #4
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2204      	movs	r2, #4
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	2210      	movs	r2, #16
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d043      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03c      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022aa:	2210      	movs	r2, #16
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d024      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e01f      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01b      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e016      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	2220      	movs	r2, #32
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808f 	beq.w	8002450 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8087 	beq.w	8002450 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	2220      	movs	r2, #32
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b05      	cmp	r3, #5
 8002358:	d136      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0216 	bic.w	r2, r2, #22
 8002368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_DMA_IRQHandler+0x1da>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0208 	bic.w	r2, r2, #8
 8002398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	223f      	movs	r2, #63	@ 0x3f
 80023a0:	409a      	lsls	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d07e      	beq.n	80024bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
        }
        return;
 80023c6:	e079      	b.n	80024bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10d      	bne.n	8002400 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e02c      	b.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
 8002410:	e01e      	b.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0210 	bic.w	r2, r2, #16
 800242e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d032      	beq.n	80024be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2205      	movs	r2, #5
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3301      	adds	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	d307      	bcc.n	8002498 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f2      	bne.n	800247c <HAL_DMA_IRQHandler+0x2cc>
 8002496:	e000      	b.n	800249a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002498:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e000      	b.n	80024be <HAL_DMA_IRQHandler+0x30e>
        return;
 80024bc:	bf00      	nop
    }
  }
}
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3b10      	subs	r3, #16
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <DMA_CalcBaseAndBitshift+0x64>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024de:	4a13      	ldr	r2, [pc, #76]	@ (800252c <DMA_CalcBaseAndBitshift+0x68>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d909      	bls.n	8002506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58
 8002504:	e007      	b.n	8002516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	aaaaaaab 	.word	0xaaaaaaab
 800252c:	0800e05c 	.word	0x0800e05c

08002530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11f      	bne.n	800258a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d856      	bhi.n	80025fe <DMA_CheckFifoParam+0xce>
 8002550:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <DMA_CheckFifoParam+0x28>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	08002569 	.word	0x08002569
 800255c:	0800257b 	.word	0x0800257b
 8002560:	08002569 	.word	0x08002569
 8002564:	080025ff 	.word	0x080025ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d046      	beq.n	8002602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e043      	b.n	8002602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002582:	d140      	bne.n	8002606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e03d      	b.n	8002606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002592:	d121      	bne.n	80025d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d837      	bhi.n	800260a <DMA_CheckFifoParam+0xda>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <DMA_CheckFifoParam+0x70>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b7 	.word	0x080025b7
 80025a8:	080025b1 	.word	0x080025b1
 80025ac:	080025c9 	.word	0x080025c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e030      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d025      	beq.n	800260e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e022      	b.n	800260e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d0:	d11f      	bne.n	8002612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025d6:	e01c      	b.n	8002612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d903      	bls.n	80025e6 <DMA_CheckFifoParam+0xb6>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d003      	beq.n	80025ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025e4:	e018      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ea:	e015      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e00b      	b.n	8002616 <DMA_CheckFifoParam+0xe6>
      break;
 80025fe:	bf00      	nop
 8002600:	e00a      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e008      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e006      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e004      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e002      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;   
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
    }
  } 
  
  return status; 
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e159      	b.n	80028f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	f040 8148 	bne.w	80028f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d005      	beq.n	800267a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	2b02      	cmp	r3, #2
 8002678:	d130      	bne.n	80026dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d017      	beq.n	8002718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d123      	bne.n	800276c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a2 	beq.w	80028f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a56      	ldr	r2, [pc, #344]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b54      	ldr	r3, [pc, #336]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ca:	4a52      	ldr	r2, [pc, #328]	@ (8002914 <HAL_GPIO_Init+0x2ec>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a49      	ldr	r2, [pc, #292]	@ (8002918 <HAL_GPIO_Init+0x2f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x202>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a48      	ldr	r2, [pc, #288]	@ (800291c <HAL_GPIO_Init+0x2f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x1fe>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a47      	ldr	r2, [pc, #284]	@ (8002920 <HAL_GPIO_Init+0x2f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x1fa>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a46      	ldr	r2, [pc, #280]	@ (8002924 <HAL_GPIO_Init+0x2fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x1f6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a45      	ldr	r2, [pc, #276]	@ (8002928 <HAL_GPIO_Init+0x300>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x1f2>
 8002816:	2304      	movs	r3, #4
 8002818:	e008      	b.n	800282c <HAL_GPIO_Init+0x204>
 800281a:	2307      	movs	r3, #7
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x204>
 800281e:	2303      	movs	r3, #3
 8002820:	e004      	b.n	800282c <HAL_GPIO_Init+0x204>
 8002822:	2302      	movs	r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_Init+0x204>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x204>
 800282a:	2300      	movs	r3, #0
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f002 0203 	and.w	r2, r2, #3
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4093      	lsls	r3, r2
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800283c:	4935      	ldr	r1, [pc, #212]	@ (8002914 <HAL_GPIO_Init+0x2ec>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <HAL_GPIO_Init+0x304>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286e:	4a2f      	ldr	r2, [pc, #188]	@ (800292c <HAL_GPIO_Init+0x304>)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002874:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_GPIO_Init+0x304>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <HAL_GPIO_Init+0x304>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289e:	4b23      	ldr	r3, [pc, #140]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c2:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ec:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	f67f aea2 	bls.w	8002644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40013800 	.word	0x40013800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e001      	b.n	8002952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800297c:	e003      	b.n	8002986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	041a      	lsls	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029aa:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fddc 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12b      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fb44 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a28:	f002 fe78 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a81      	ldr	r2, [pc, #516]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d807      	bhi.n	8002a48 <HAL_I2C_Init+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a80      	ldr	r2, [pc, #512]	@ (8002c3c <HAL_I2C_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e006      	b.n	8002a56 <HAL_I2C_Init+0x92>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c40 <HAL_I2C_Init+0x27c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0e7      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a78      	ldr	r2, [pc, #480]	@ (8002c44 <HAL_I2C_Init+0x280>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <HAL_I2C_Init+0xd4>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e009      	b.n	8002aac <HAL_I2C_Init+0xe8>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_I2C_Init+0x284>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	495c      	ldr	r1, [pc, #368]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d819      	bhi.n	8002b00 <HAL_I2C_Init+0x13c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e59      	subs	r1, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_I2C_Init+0x138>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e59      	subs	r1, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	e051      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x168>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x18e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x196>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c66:	f7fe fe51 	bl	800190c <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 80d9 	bne.w	8002e2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2319      	movs	r3, #25
 8002c80:	2201      	movs	r2, #1
 8002c82:	496d      	ldr	r1, [pc, #436]	@ (8002e38 <HAL_I2C_Mem_Write+0x1ec>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fc7f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0cc      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x56>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0c5      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d007      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	@ 0x21
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a4d      	ldr	r2, [pc, #308]	@ (8002e3c <HAL_I2C_Mem_Write+0x1f0>)
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0a:	88f8      	ldrh	r0, [r7, #6]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4603      	mov	r3, r0
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fab6 	bl	800328c <I2C_RequestMemoryWrite>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d052      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e081      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fd00 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06b      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_I2C_Mem_Write+0x180>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d017      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1aa      	bne.n	8002d2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fcec 	bl	80037b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e016      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	f7fe fd57 	bl	800190c <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	f040 8208 	bne.w	800327e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	497b      	ldr	r1, [pc, #492]	@ (8003064 <HAL_I2C_Mem_Read+0x224>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb85 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
 8002e86:	e1fb      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x56>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e1f4      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	@ 0x22
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a5b      	ldr	r2, [pc, #364]	@ (8003068 <HAL_I2C_Mem_Read+0x228>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efe:	88f8      	ldrh	r0, [r7, #6]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fa52 	bl	80033b8 <I2C_RequestMemoryRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1b0      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e184      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e164      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d11b      	bne.n	8002fce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	e144      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fe4:	e138      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	f200 80f1 	bhi.w	80031d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d123      	bne.n	8003040 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fc1b 	bl	8003838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e139      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800303e:	e10b      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	d14e      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_I2C_Mem_Read+0x22c>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa98 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e10e      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000
 800306c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e0b8      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	4966      	ldr	r1, [pc, #408]	@ (8003288 <HAL_I2C_Mem_Read+0x448>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fa49 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0bf      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2200      	movs	r2, #0
 800314a:	494f      	ldr	r1, [pc, #316]	@ (8003288 <HAL_I2C_Mem_Read+0x448>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa1b 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e091      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031d0:	e042      	b.n	8003258 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb2e 	bl	8003838 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e04c      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d118      	bne.n	8003258 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	f47f aec2 	bne.w	8002fe6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	@ 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00010004 	.word	0x00010004

0800328c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	461a      	mov	r2, r3
 800329a:	4603      	mov	r3, r0
 800329c:	817b      	strh	r3, [r7, #10]
 800329e:	460b      	mov	r3, r1
 80032a0:	813b      	strh	r3, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2200      	movs	r2, #0
 80032be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f960 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032dc:	d103      	bne.n	80032e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e05f      	b.n	80033aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	492d      	ldr	r1, [pc, #180]	@ (80033b4 <I2C_RequestMemoryWrite+0x128>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f998 	bl	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e04c      	b.n	80033aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa02 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e02b      	b.n	80033aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	611a      	str	r2, [r3, #16]
 8003362:	e021      	b.n	80033a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003364:	893b      	ldrh	r3, [r7, #8]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	b29b      	uxth	r3, r3
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003374:	6a39      	ldr	r1, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f9dc 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e005      	b.n	80033aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	00010002 	.word	0x00010002

080033b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8c2 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003418:	d103      	bne.n	8003422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0aa      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	4952      	ldr	r1, [pc, #328]	@ (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f8fa 	bl	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e097      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f964 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e076      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
 800349e:	e021      	b.n	80034e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	6a39      	ldr	r1, [r7, #32]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f93e 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d107      	bne.n	80034d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e050      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f923 	bl	8003734 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e035      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800351e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2200      	movs	r2, #0
 8003528:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f82b 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003546:	d103      	bne.n	8003550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e013      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	4906      	ldr	r1, [pc, #24]	@ (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f863 	bl	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010002 	.word	0x00010002

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e025      	b.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d021      	beq.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe f9b3 	bl	800190c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e023      	b.n	800362e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10d      	bne.n	800360c <I2C_WaitOnFlagUntilTimeout+0x84>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	e00c      	b.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d0b6      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003644:	e051      	b.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003654:	d123      	bne.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003664:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800366e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e046      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d021      	beq.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe f931 	bl	800190c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e020      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e00b      	b.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	43da      	mvns	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d18d      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003740:	e02d      	b.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f8ce 	bl	80038e4 <I2C_IsAcknowledgeFailed>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e02d      	b.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d021      	beq.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe f8d7 	bl	800190c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a8:	2b80      	cmp	r3, #128	@ 0x80
 80037aa:	d1ca      	bne.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c2:	e02d      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f88d 	bl	80038e4 <I2C_IsAcknowledgeFailed>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e02d      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d021      	beq.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037dc:	f7fe f896 	bl	800190c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e007      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d1ca      	bne.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003844:	e042      	b.n	80038cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d119      	bne.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e029      	b.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fe f840 	bl	800190c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e007      	b.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d6:	2b40      	cmp	r3, #64	@ 0x40
 80038d8:	d1b5      	bne.n	8003846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d11b      	bne.n	8003934 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003904:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003944:	b08f      	sub	sp, #60	@ 0x3c
 8003946:	af0a      	add	r7, sp, #40	@ 0x28
 8003948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e10f      	b.n	8003b74 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f008 fa2c 	bl	800bdcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f004 facd 	bl	8007f32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	687e      	ldr	r6, [r7, #4]
 80039a0:	466d      	mov	r5, sp
 80039a2:	f106 0410 	add.w	r4, r6, #16
 80039a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039b6:	1d33      	adds	r3, r6, #4
 80039b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f004 f9a4 	bl	8007d08 <USB_CoreInit>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0d0      	b.n	8003b74 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f004 fabb 	bl	8007f54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e04a      	b.n	8003a7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	333d      	adds	r3, #61	@ 0x3d
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	333c      	adds	r3, #60	@ 0x3c
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	b298      	uxth	r0, r3
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3344      	adds	r3, #68	@ 0x44
 8003a20:	4602      	mov	r2, r0
 8003a22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3340      	adds	r3, #64	@ 0x40
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3348      	adds	r3, #72	@ 0x48
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	334c      	adds	r3, #76	@ 0x4c
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3354      	adds	r3, #84	@ 0x54
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	3301      	adds	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3af      	bcc.n	80039e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e044      	b.n	8003b14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3301      	adds	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3b5      	bcc.n	8003a8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	687e      	ldr	r6, [r7, #4]
 8003b26:	466d      	mov	r5, sp
 8003b28:	f106 0410 	add.w	r4, r6, #16
 8003b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b38:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b3c:	1d33      	adds	r3, r6, #4
 8003b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f004 fa53 	bl	8007fec <USB_DevInit>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e00d      	b.n	8003b74 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f005 fba2 	bl	80092b6 <USB_DevDisconnect>

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_PCD_Start+0x1c>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e020      	b.n	8003bda <HAL_PCD_Start+0x5e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d109      	bne.n	8003bbc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d005      	beq.n	8003bbc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 f9a5 	bl	8007f10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 fb52 	bl	8009274 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003be2:	b590      	push	{r4, r7, lr}
 8003be4:	b08d      	sub	sp, #52	@ 0x34
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f005 fc10 	bl	800941e <USB_GetMode>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 848a 	bne.w	800451a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f005 fb74 	bl	80092f8 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8480 	beq.w	8004518 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f005 fb61 	bl	80092f8 <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d107      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f002 0202 	and.w	r2, r2, #2
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f005 fb4f 	bl	80092f8 <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d161      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0210 	bic.w	r2, r2, #16
 8003c72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	0c5b      	lsrs	r3, r3, #17
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d124      	bne.n	8003cea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d035      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6a38      	ldr	r0, [r7, #32]
 8003cc0:	f005 f986 	bl	8008fd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ce2:	441a      	add	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	621a      	str	r2, [r3, #32]
 8003ce8:	e016      	b.n	8003d18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	0c5b      	lsrs	r3, r3, #17
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d110      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6a38      	ldr	r0, [r7, #32]
 8003d02:	f005 f965 	bl	8008fd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d12:	441a      	add	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0210 	orr.w	r2, r2, #16
 8003d26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 fae3 	bl	80092f8 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d3c:	f040 80a7 	bne.w	8003e8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f005 fae8 	bl	800931e <USB_ReadDevAllOutEpInterrupt>
 8003d4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003d50:	e099      	b.n	8003e86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 808e 	beq.w	8003e7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 fb0c 	bl	8009386 <USB_ReadDevOutEPInterrupt>
 8003d6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	2301      	movs	r3, #1
 8003d8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fec2 	bl	8004b18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	2308      	movs	r3, #8
 8003dae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 ff98 	bl	8004ce8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d030      	beq.n	8003e40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b80      	cmp	r3, #128	@ 0x80
 8003de8:	d109      	bne.n	8003dfe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003df8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dfc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3304      	adds	r3, #4
 8003e12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	78db      	ldrb	r3, [r3, #3]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d108      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f008 f8cb 	bl	800bfc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e56:	461a      	mov	r2, r3
 8003e58:	2320      	movs	r3, #32
 8003e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f af62 	bne.w	8003d52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 fa30 	bl	80092f8 <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ea2:	f040 80db 	bne.w	800405c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 fa51 	bl	8009352 <USB_ReadDevAllInEpInterrupt>
 8003eb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003eb6:	e0cd      	b.n	8004054 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80c2 	beq.w	8004048 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 fa77 	bl	80093c2 <USB_ReadDevInEPInterrupt>
 8003ed4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d057      	beq.n	8003f90 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69f9      	ldr	r1, [r7, #28]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	2301      	movs	r3, #1
 8003f14:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d132      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	334c      	adds	r3, #76	@ 0x4c
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4403      	add	r3, r0
 8003f3e:	3348      	adds	r3, #72	@ 0x48
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4419      	add	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4403      	add	r3, r0
 8003f52:	334c      	adds	r3, #76	@ 0x4c
 8003f54:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x3a2>
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3354      	adds	r3, #84	@ 0x54
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2101      	movs	r1, #1
 8003f80:	f005 fa7e 	bl	8009480 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f007 ff9f 	bl	800bece <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2308      	movs	r3, #8
 8003faa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2340      	movs	r3, #64	@ 0x40
 8003fe2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d023      	beq.n	8004036 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff0:	6a38      	ldr	r0, [r7, #32]
 8003ff2:	f004 f95f 	bl	80082b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3338      	adds	r3, #56	@ 0x38
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	78db      	ldrb	r3, [r3, #3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f007 ffe2 	bl	800bfe8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	2302      	movs	r3, #2
 8004034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fcdb 	bl	80049fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	3301      	adds	r3, #1
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	f47f af2e 	bne.w	8003eb8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 f949 	bl	80092f8 <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800406c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004070:	d122      	bne.n	80040b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800408c:	2b01      	cmp	r3, #1
 800408e:	d108      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004098:	2100      	movs	r1, #0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fec2 	bl	8004e24 <HAL_PCDEx_LPM_Callback>
 80040a0:	e002      	b.n	80040a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f007 ff80 	bl	800bfa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f005 f91b 	bl	80092f8 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040cc:	d112      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d102      	bne.n	80040e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f007 ff3c 	bl	800bf5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80040f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f005 f8fd 	bl	80092f8 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004108:	f040 80b7 	bne.w	800427a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2110      	movs	r1, #16
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f8c4 	bl	80082b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004130:	e046      	b.n	80041c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413e:	461a      	mov	r2, r3
 8004140:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004144:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004160:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004164:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004172:	461a      	mov	r2, r3
 8004174:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004178:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041bc:	3301      	adds	r3, #1
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3b3      	bcc.n	8004132 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80041dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041f6:	f043 030b 	orr.w	r3, r3, #11
 80041fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800420c:	f043 030b 	orr.w	r3, r3, #11
 8004210:	6453      	str	r3, [r2, #68]	@ 0x44
 8004212:	e015      	b.n	8004240 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004222:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004226:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800422a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800423a:	f043 030b 	orr.w	r3, r3, #11
 800423e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800424e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004252:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004264:	461a      	mov	r2, r3
 8004266:	f005 f90b 	bl	8009480 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f005 f83a 	bl	80092f8 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428e:	d124      	bne.n	80042da <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f005 f8d0 	bl	800943a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 f885 	bl	80083ae <USB_GetDevSpeed>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681c      	ldr	r4, [r3, #0]
 80042b0:	f001 fa28 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 80042b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f003 fd84 	bl	8007dcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f007 fe2a 	bl	800bf1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80042d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f005 f80a 	bl	80092f8 <USB_ReadInterrupts>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d10a      	bne.n	8004304 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f007 fe07 	bl	800bf02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f002 0208 	and.w	r2, r2, #8
 8004302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fff5 	bl	80092f8 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d122      	bne.n	800435e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004324:	2301      	movs	r3, #1
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	e014      	b.n	8004354 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	b2db      	uxtb	r3, r3
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb27 	bl	800499c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	3301      	adds	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435a:	429a      	cmp	r2, r3
 800435c:	d3e5      	bcc.n	800432a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f004 ffc8 	bl	80092f8 <USB_ReadInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004372:	d13b      	bne.n	80043ec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004374:	2301      	movs	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
 8004378:	e02b      	b.n	80043d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3340      	adds	r3, #64	@ 0x40
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d115      	bne.n	80043cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da12      	bge.n	80043cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	333f      	adds	r3, #63	@ 0x3f
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fae8 	bl	800499c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	3301      	adds	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3ce      	bcc.n	800437a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80043ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 ff81 	bl	80092f8 <USB_ReadInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004400:	d155      	bne.n	80044ae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004402:	2301      	movs	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
 8004406:	e045      	b.n	8004494 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d12e      	bne.n	800448e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004430:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	da2b      	bge.n	800448e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004442:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004446:	429a      	cmp	r2, r3
 8004448:	d121      	bne.n	800448e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800448a:	6053      	str	r3, [r2, #4]
            break;
 800448c:	e007      	b.n	800449e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	3301      	adds	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449a:	429a      	cmp	r2, r3
 800449c:	d3b4      	bcc.n	8004408 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80044ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f004 ff20 	bl	80092f8 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c2:	d10a      	bne.n	80044da <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f007 fda1 	bl	800c00c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80044d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f004 ff0a 	bl	80092f8 <USB_ReadInterrupts>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d115      	bne.n	800451a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f007 fd91 	bl	800c028 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	e000      	b.n	800451a <HAL_PCD_IRQHandler+0x938>
      return;
 8004518:	bf00      	nop
    }
  }
}
 800451a:	3734      	adds	r7, #52	@ 0x34
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}

08004520 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_PCD_SetAddress+0x1a>
 8004536:	2302      	movs	r3, #2
 8004538:	e013      	b.n	8004562 <HAL_PCD_SetAddress+0x42>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f004 fe68 	bl	8009228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	461a      	mov	r2, r3
 8004578:	4603      	mov	r3, r0
 800457a:	70fb      	strb	r3, [r7, #3]
 800457c:	460b      	mov	r3, r1
 800457e:	803b      	strh	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800458c:	2b00      	cmp	r3, #0
 800458e:	da0f      	bge.n	80045b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 020f 	and.w	r2, r3, #15
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	3338      	adds	r3, #56	@ 0x38
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	705a      	strb	r2, [r3, #1]
 80045ae:	e00f      	b.n	80045d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	3304      	adds	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045dc:	883a      	ldrh	r2, [r7, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	78ba      	ldrb	r2, [r7, #2]
 80045e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045fa:	78bb      	ldrb	r3, [r7, #2]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d102      	bne.n	8004606 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_PCD_EP_Open+0xaa>
 8004610:	2302      	movs	r3, #2
 8004612:	e00e      	b.n	8004632 <HAL_PCD_EP_Open+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fee8 	bl	80083f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004630:	7afb      	ldrb	r3, [r7, #11]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da0f      	bge.n	800466e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	3338      	adds	r3, #56	@ 0x38
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	3304      	adds	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	705a      	strb	r2, [r3, #1]
 800466c:	e00f      	b.n	800468e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_PCD_EP_Close+0x6e>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e00e      	b.n	80046c6 <HAL_PCD_EP_Close+0x8c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 ff26 	bl	8008508 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	460b      	mov	r3, r1
 80046dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2200      	movs	r2, #0
 8004708:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004710:	7afb      	ldrb	r3, [r7, #11]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	b2da      	uxtb	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d102      	bne.n	800472a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	f004 fa05 	bl	8008b50 <USB_EP0StartXfer>
 8004746:	e008      	b.n	800475a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	6979      	ldr	r1, [r7, #20]
 8004756:	f003 ffb3 	bl	80086c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	460b      	mov	r3, r1
 80047a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3338      	adds	r3, #56	@ 0x38
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2200      	movs	r2, #0
 80047cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2201      	movs	r2, #1
 80047d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d102      	bne.n	80047ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	6979      	ldr	r1, [r7, #20]
 8004806:	f004 f9a3 	bl	8008b50 <USB_EP0StartXfer>
 800480a:	e008      	b.n	800481e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	f003 ff51 	bl	80086c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d901      	bls.n	8004846 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e050      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484a:	2b00      	cmp	r3, #0
 800484c:	da0f      	bge.n	800486e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	3338      	adds	r3, #56	@ 0x38
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	3304      	adds	r3, #4
 8004864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	705a      	strb	r2, [r3, #1]
 800486c:	e00d      	b.n	800488a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_PCD_EP_SetStall+0x82>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e01e      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xc0>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f004 fbe1 	bl	8009080 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	b2d9      	uxtb	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048d8:	461a      	mov	r2, r3
 80048da:	f004 fdd1 	bl	8009480 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 020f 	and.w	r2, r3, #15
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d901      	bls.n	800490e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e042      	b.n	8004994 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800490e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da0f      	bge.n	8004936 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3338      	adds	r3, #56	@ 0x38
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	705a      	strb	r2, [r3, #1]
 8004934:	e00f      	b.n	8004956 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_PCD_EP_ClrStall+0x86>
 8004972:	2302      	movs	r3, #2
 8004974:	e00e      	b.n	8004994 <HAL_PCD_EP_ClrStall+0xa4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	f004 fbe9 	bl	800915c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da0c      	bge.n	80049ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 020f 	and.w	r2, r3, #15
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	3338      	adds	r3, #56	@ 0x38
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00c      	b.n	80049e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 fa08 	bl	8008e00 <USB_EPStopXfer>
 80049f0:	4603      	mov	r3, r0
 80049f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049f4:	7afb      	ldrb	r3, [r7, #11]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b08a      	sub	sp, #40	@ 0x28
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	3338      	adds	r3, #56	@ 0x38
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1a      	ldr	r2, [r3, #32]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d901      	bls.n	8004a36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06c      	b.n	8004b10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3303      	adds	r3, #3
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a5a:	e02b      	b.n	8004ab4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d902      	bls.n	8004a78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3303      	adds	r3, #3
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6919      	ldr	r1, [r3, #16]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	6978      	ldr	r0, [r7, #20]
 8004a98:	f004 fa5c 	bl	8008f54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d809      	bhi.n	8004ade <PCD_WriteEmptyTxFifo+0xe0>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d203      	bcs.n	8004ade <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1be      	bne.n	8004a5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d811      	bhi.n	8004b0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	2201      	movs	r2, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	6939      	ldr	r1, [r7, #16]
 8004b06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	333c      	adds	r3, #60	@ 0x3c
 8004b30:	3304      	adds	r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d17b      	bne.n	8004c46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4a61      	ldr	r2, [pc, #388]	@ (8004ce0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	f240 80b9 	bls.w	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80b3 	beq.w	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b80:	6093      	str	r3, [r2, #8]
 8004b82:	e0a7      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2320      	movs	r3, #32
 8004b9e:	6093      	str	r3, [r2, #8]
 8004ba0:	e098      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 8093 	bne.w	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d90f      	bls.n	8004bd6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd2:	6093      	str	r3, [r2, #8]
 8004bd4:	e07e      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	3304      	adds	r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	0159      	lsls	r1, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d114      	bne.n	8004c38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004c20:	461a      	mov	r2, r3
 8004c22:	2101      	movs	r1, #1
 8004c24:	f004 fc2c 	bl	8009480 <USB_EP0_OutStart>
 8004c28:	e006      	b.n	8004c38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f007 f92a 	bl	800be98 <HAL_PCD_DataOutStageCallback>
 8004c44:	e046      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	4a26      	ldr	r2, [pc, #152]	@ (8004ce4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d124      	bne.n	8004c98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6a:	6093      	str	r3, [r2, #8]
 8004c6c:	e032      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2320      	movs	r3, #32
 8004c88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f007 f901 	bl	800be98 <HAL_PCD_DataOutStageCallback>
 8004c96:	e01d      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d114      	bne.n	8004cc8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f004 fbdc 	bl	8009480 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f007 f8e2 	bl	800be98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	4f54300a 	.word	0x4f54300a
 8004ce4:	4f54310a 	.word	0x4f54310a

08004ce8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	333c      	adds	r3, #60	@ 0x3c
 8004d00:	3304      	adds	r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d90e      	bls.n	8004d3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d34:	461a      	mov	r2, r3
 8004d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f007 f899 	bl	800be74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	@ (8004d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d90c      	bls.n	8004d64 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d108      	bne.n	8004d64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2101      	movs	r1, #1
 8004d60:	f004 fb8e 	bl	8009480 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	4f54300a 	.word	0x4f54300a

08004d74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
 8004d80:	4613      	mov	r3, r2
 8004d82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d92:	883b      	ldrh	r3, [r7, #0]
 8004d94:	0419      	lsls	r1, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004da0:	e028      	b.n	8004df4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4413      	add	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	e00d      	b.n	8004dd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	3340      	adds	r3, #64	@ 0x40
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d3ec      	bcc.n	8004db6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ddc:	883b      	ldrh	r3, [r7, #0]
 8004dde:	0418      	lsls	r0, r3, #16
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	4302      	orrs	r2, r0
 8004dec:	3340      	adds	r3, #64	@ 0x40
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e267      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d075      	beq.n	8004f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e5a:	4b88      	ldr	r3, [pc, #544]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d00c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b85      	ldr	r3, [pc, #532]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d112      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b82      	ldr	r3, [pc, #520]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	4b7e      	ldr	r3, [pc, #504]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05b      	beq.n	8004f44 <HAL_RCC_OscConfig+0x108>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d157      	bne.n	8004f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e242      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x74>
 8004ea2:	4b76      	ldr	r3, [pc, #472]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a75      	ldr	r2, [pc, #468]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x98>
 8004eba:	4b70      	ldr	r3, [pc, #448]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6c      	ldr	r2, [pc, #432]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004ed4:	4b69      	ldr	r3, [pc, #420]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b66      	ldr	r3, [pc, #408]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a65      	ldr	r2, [pc, #404]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fc fd0a 	bl	800190c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fc fd06 	bl	800190c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e207      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xc0>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fcf6 	bl	800190c <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fc fcf2 	bl	800190c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1f3      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	4b51      	ldr	r3, [pc, #324]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0xe8>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b47      	ldr	r3, [pc, #284]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b44      	ldr	r3, [pc, #272]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	4b41      	ldr	r3, [pc, #260]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x152>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1c7      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4937      	ldr	r1, [pc, #220]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	e03a      	b.n	800501a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fac:	4b34      	ldr	r3, [pc, #208]	@ (8005080 <HAL_RCC_OscConfig+0x244>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fc fcab 	bl	800190c <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fc fca7 	bl	800190c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1a8      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b28      	ldr	r3, [pc, #160]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4925      	ldr	r1, [pc, #148]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
 8004fec:	e015      	b.n	800501a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fee:	4b24      	ldr	r3, [pc, #144]	@ (8005080 <HAL_RCC_OscConfig+0x244>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fc8a 	bl	800190c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fc fc86 	bl	800190c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e187      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d036      	beq.n	8005094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_RCC_OscConfig+0x248>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fc fc6a 	bl	800190c <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503c:	f7fc fc66 	bl	800190c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e167      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8005050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x200>
 800505a:	e01b      	b.n	8005094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800505c:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCC_OscConfig+0x248>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fc fc53 	bl	800190c <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	e00e      	b.n	8005088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506a:	f7fc fc4f 	bl	800190c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d907      	bls.n	8005088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e150      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
 800507c:	40023800 	.word	0x40023800
 8005080:	42470000 	.word	0x42470000
 8005084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005088:	4b88      	ldr	r3, [pc, #544]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800508a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ea      	bne.n	800506a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8097 	beq.w	80051d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050a6:	4b81      	ldr	r3, [pc, #516]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10f      	bne.n	80050d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	4b7d      	ldr	r3, [pc, #500]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	4a7c      	ldr	r2, [pc, #496]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050c2:	4b7a      	ldr	r3, [pc, #488]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d2:	4b77      	ldr	r3, [pc, #476]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d118      	bne.n	8005110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050de:	4b74      	ldr	r3, [pc, #464]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a73      	ldr	r2, [pc, #460]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ea:	f7fc fc0f 	bl	800190c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fc fc0b 	bl	800190c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e10c      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <HAL_RCC_OscConfig+0x2ea>
 8005118:	4b64      	ldr	r3, [pc, #400]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511c:	4a63      	ldr	r2, [pc, #396]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6713      	str	r3, [r2, #112]	@ 0x70
 8005124:	e01c      	b.n	8005160 <HAL_RCC_OscConfig+0x324>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b05      	cmp	r3, #5
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x30c>
 800512e:	4b5f      	ldr	r3, [pc, #380]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005132:	4a5e      	ldr	r2, [pc, #376]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005134:	f043 0304 	orr.w	r3, r3, #4
 8005138:	6713      	str	r3, [r2, #112]	@ 0x70
 800513a:	4b5c      	ldr	r3, [pc, #368]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a5b      	ldr	r2, [pc, #364]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0x324>
 8005148:	4b58      	ldr	r3, [pc, #352]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	4a57      	ldr	r2, [pc, #348]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6713      	str	r3, [r2, #112]	@ 0x70
 8005154:	4b55      	ldr	r3, [pc, #340]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a54      	ldr	r2, [pc, #336]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 0304 	bic.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fc fbd0 	bl	800190c <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fc fbcc 	bl	800190c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0cb      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005186:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ee      	beq.n	8005170 <HAL_RCC_OscConfig+0x334>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fc fbba 	bl	800190c <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fc fbb6 	bl	800190c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e0b5      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ee      	bne.n	800519c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c4:	4b39      	ldr	r3, [pc, #228]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	4a38      	ldr	r2, [pc, #224]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80a1 	beq.w	800531c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d05c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d141      	bne.n	8005272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fc fb8a 	bl	800190c <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fc fb86 	bl	800190c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e087      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	3b01      	subs	r3, #1
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	491b      	ldr	r1, [pc, #108]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fc fb5f 	bl	800190c <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005252:	f7fc fb5b 	bl	800190c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e05c      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x416>
 8005270:	e054      	b.n	800531c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fc fb48 	bl	800190c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fb44 	bl	800190c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e045      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x444>
 800529e:	e03d      	b.n	800531c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e038      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
 80052b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4ec>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d028      	beq.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d121      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d11a      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d111      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d107      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800

0800532c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0cc      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005340:	4b68      	ldr	r3, [pc, #416]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d90c      	bls.n	8005368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b65      	ldr	r3, [pc, #404]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b63      	ldr	r3, [pc, #396]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0b8      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005380:	4b59      	ldr	r3, [pc, #356]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a58      	ldr	r2, [pc, #352]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800538a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a52      	ldr	r2, [pc, #328]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b50      	ldr	r3, [pc, #320]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	494d      	ldr	r1, [pc, #308]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d044      	beq.n	800544c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ca:	4b47      	ldr	r3, [pc, #284]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d119      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e07f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d003      	beq.n	80053ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ea:	4b3f      	ldr	r3, [pc, #252]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e06f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fa:	4b3b      	ldr	r3, [pc, #236]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e067      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540a:	4b37      	ldr	r3, [pc, #220]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 0203 	bic.w	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4934      	ldr	r1, [pc, #208]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800541c:	f7fc fa76 	bl	800190c <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	e00a      	b.n	800543a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005424:	f7fc fa72 	bl	800190c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e04f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	4b2b      	ldr	r3, [pc, #172]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 020c 	and.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	429a      	cmp	r2, r3
 800544a:	d1eb      	bne.n	8005424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800544c:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d20c      	bcs.n	8005474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b20      	ldr	r3, [pc, #128]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e032      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005480:	4b19      	ldr	r3, [pc, #100]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4916      	ldr	r1, [pc, #88]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	490e      	ldr	r1, [pc, #56]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054b2:	f000 f821 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	490a      	ldr	r1, [pc, #40]	@ (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80054cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ce:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fc f9d6 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023c00 	.word	0x40023c00
 80054e8:	40023800 	.word	0x40023800
 80054ec:	0800e044 	.word	0x0800e044
 80054f0:	20000000 	.word	0x20000000
 80054f4:	20000004 	.word	0x20000004

080054f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054fc:	b094      	sub	sp, #80	@ 0x50
 80054fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	647b      	str	r3, [r7, #68]	@ 0x44
 8005504:	2300      	movs	r3, #0
 8005506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005508:	2300      	movs	r3, #0
 800550a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005510:	4b79      	ldr	r3, [pc, #484]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
 8005518:	2b08      	cmp	r3, #8
 800551a:	d00d      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x40>
 800551c:	2b08      	cmp	r3, #8
 800551e:	f200 80e1 	bhi.w	80056e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x34>
 8005526:	2b04      	cmp	r3, #4
 8005528:	d003      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x3a>
 800552a:	e0db      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800552c:	4b73      	ldr	r3, [pc, #460]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x204>)
 800552e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005530:	e0db      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005532:	4b73      	ldr	r3, [pc, #460]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x208>)
 8005534:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005536:	e0d8      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005538:	4b6f      	ldr	r3, [pc, #444]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005540:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005542:	4b6d      	ldr	r3, [pc, #436]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d063      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554e:	4b6a      	ldr	r3, [pc, #424]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	2200      	movs	r2, #0
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005558:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005560:	633b      	str	r3, [r7, #48]	@ 0x30
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
 8005566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	f04f 0000 	mov.w	r0, #0
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	0159      	lsls	r1, r3, #5
 8005578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557c:	0150      	lsls	r0, r2, #5
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4621      	mov	r1, r4
 8005584:	1a51      	subs	r1, r2, r1
 8005586:	6139      	str	r1, [r7, #16]
 8005588:	4629      	mov	r1, r5
 800558a:	eb63 0301 	sbc.w	r3, r3, r1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800559c:	4659      	mov	r1, fp
 800559e:	018b      	lsls	r3, r1, #6
 80055a0:	4651      	mov	r1, sl
 80055a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a6:	4651      	mov	r1, sl
 80055a8:	018a      	lsls	r2, r1, #6
 80055aa:	4651      	mov	r1, sl
 80055ac:	ebb2 0801 	subs.w	r8, r2, r1
 80055b0:	4659      	mov	r1, fp
 80055b2:	eb63 0901 	sbc.w	r9, r3, r1
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ca:	4690      	mov	r8, r2
 80055cc:	4699      	mov	r9, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	eb18 0303 	adds.w	r3, r8, r3
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	462b      	mov	r3, r5
 80055d8:	eb49 0303 	adc.w	r3, r9, r3
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ea:	4629      	mov	r1, r5
 80055ec:	024b      	lsls	r3, r1, #9
 80055ee:	4621      	mov	r1, r4
 80055f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055f4:	4621      	mov	r1, r4
 80055f6:	024a      	lsls	r2, r1, #9
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055fe:	2200      	movs	r2, #0
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005608:	f7fa fe3a 	bl	8000280 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4613      	mov	r3, r2
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	e058      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005616:	4b38      	ldr	r3, [pc, #224]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	2200      	movs	r2, #0
 800561e:	4618      	mov	r0, r3
 8005620:	4611      	mov	r1, r2
 8005622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	2300      	movs	r3, #0
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
 800562c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f04f 0100 	mov.w	r1, #0
 800563c:	0159      	lsls	r1, r3, #5
 800563e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005642:	0150      	lsls	r0, r2, #5
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4641      	mov	r1, r8
 800564a:	ebb2 0a01 	subs.w	sl, r2, r1
 800564e:	4649      	mov	r1, r9
 8005650:	eb63 0b01 	sbc.w	fp, r3, r1
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005668:	ebb2 040a 	subs.w	r4, r2, sl
 800566c:	eb63 050b 	sbc.w	r5, r3, fp
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	00eb      	lsls	r3, r5, #3
 800567a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567e:	00e2      	lsls	r2, r4, #3
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	4643      	mov	r3, r8
 8005686:	18e3      	adds	r3, r4, r3
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	464b      	mov	r3, r9
 800568c:	eb45 0303 	adc.w	r3, r5, r3
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800569e:	4629      	mov	r1, r5
 80056a0:	028b      	lsls	r3, r1, #10
 80056a2:	4621      	mov	r1, r4
 80056a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056a8:	4621      	mov	r1, r4
 80056aa:	028a      	lsls	r2, r1, #10
 80056ac:	4610      	mov	r0, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b2:	2200      	movs	r2, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	61fa      	str	r2, [r7, #28]
 80056b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056bc:	f7fa fde0 	bl	8000280 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4613      	mov	r3, r2
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	3301      	adds	r3, #1
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056e2:	e002      	b.n	80056ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x204>)
 80056e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3750      	adds	r7, #80	@ 0x50
 80056f0:	46bd      	mov	sp, r7
 80056f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	007a1200 	.word	0x007a1200

08005704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_RCC_GetHCLKFreq+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000000 	.word	0x20000000

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005720:	f7ff fff0 	bl	8005704 <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a9b      	lsrs	r3, r3, #10
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	@ (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	0800e054 	.word	0x0800e054

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005768:	2b00      	cmp	r3, #0
 800576a:	d035      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800576c:	4b67      	ldr	r3, [pc, #412]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005772:	f7fc f8cb 	bl	800190c <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005778:	e008      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800577a:	f7fc f8c7 	bl	800190c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0ba      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800578c:	4b60      	ldr	r3, [pc, #384]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	019a      	lsls	r2, r3, #6
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	071b      	lsls	r3, r3, #28
 80057a4:	495a      	ldr	r1, [pc, #360]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057ac:	4b57      	ldr	r3, [pc, #348]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057b2:	f7fc f8ab 	bl	800190c <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057ba:	f7fc f8a7 	bl	800190c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e09a      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057cc:	4b50      	ldr	r3, [pc, #320]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8083 	beq.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	4b49      	ldr	r3, [pc, #292]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	4a48      	ldr	r2, [pc, #288]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057f6:	4b46      	ldr	r3, [pc, #280]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005802:	4b44      	ldr	r3, [pc, #272]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800580e:	f7fc f87d 	bl	800190c <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005816:	f7fc f879 	bl	800190c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e06c      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005828:	4b3a      	ldr	r3, [pc, #232]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800583c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02f      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d028      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005852:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800585a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800585c:	4b2e      	ldr	r3, [pc, #184]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005862:	4b2d      	ldr	r3, [pc, #180]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005868:	4a29      	ldr	r2, [pc, #164]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800586e:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d114      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800587a:	f7fc f847 	bl	800190c <HAL_GetTick>
 800587e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fc f843 	bl	800190c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e034      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005898:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ee      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b0:	d10d      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058b2:	4b17      	ldr	r3, [pc, #92]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80058c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c6:	4912      	ldr	r1, [pc, #72]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	608b      	str	r3, [r1, #8]
 80058cc:	e005      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058ce:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4a0f      	ldr	r2, [pc, #60]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058d4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058d8:	6093      	str	r3, [r2, #8]
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e6:	490a      	ldr	r1, [pc, #40]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7c1a      	ldrb	r2, [r3, #16]
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058fe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	42470068 	.word	0x42470068
 8005910:	40023800 	.word	0x40023800
 8005914:	40007000 	.word	0x40007000
 8005918:	42470e40 	.word	0x42470e40
 800591c:	424711e0 	.word	0x424711e0

08005920 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e066      	b.n	8005a04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7f5b      	ldrb	r3, [r3, #29]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb fbde 	bl	8001108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	22ca      	movs	r2, #202	@ 0xca
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2253      	movs	r2, #83	@ 0x53
 8005960:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fb2a 	bl	8005fbc <RTC_EnterInitMode>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d12c      	bne.n	80059cc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005984:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	68d2      	ldr	r2, [r2, #12]
 80059ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6919      	ldr	r1, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	041a      	lsls	r2, r3, #16
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb31 	bl	800602a <RTC_ExitInitMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d113      	bne.n	80059fa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ff      	movs	r2, #255	@ 0xff
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	7f1b      	ldrb	r3, [r3, #28]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_RTC_SetTime+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e087      	b.n	8005b38 <HAL_RTC_SetTime+0x12c>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2202      	movs	r2, #2
 8005a32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d126      	bne.n	8005a88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fb0e 	bl	8006074 <RTC_ByteToBcd2>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fb07 	bl	8006074 <RTC_ByteToBcd2>
 8005a66:	4603      	mov	r3, r0
 8005a68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	789b      	ldrb	r3, [r3, #2]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 faff 	bl	8006074 <RTC_ByteToBcd2>
 8005a76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e018      	b.n	8005aba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005aa8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005aae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	78db      	ldrb	r3, [r3, #3]
 8005ab4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	22ca      	movs	r2, #202	@ 0xca
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2253      	movs	r2, #83	@ 0x53
 8005ac8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa76 	bl	8005fbc <RTC_EnterInitMode>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d120      	bne.n	8005b1c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005af8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fa89 	bl	800602a <RTC_ExitInitMode>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	22ff      	movs	r2, #255	@ 0xff
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]

  return status;
 8005b36:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd90      	pop	{r4, r7, pc}

08005b40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	7f1b      	ldrb	r3, [r3, #28]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_RTC_SetDate+0x1c>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e071      	b.n	8005c40 <HAL_RTC_SetDate+0x100>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2202      	movs	r2, #2
 8005b66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10e      	bne.n	8005b8c <HAL_RTC_SetDate+0x4c>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	f023 0310 	bic.w	r3, r3, #16
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	330a      	adds	r3, #10
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11c      	bne.n	8005bcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fa6c 	bl	8006074 <RTC_ByteToBcd2>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fa65 	bl	8006074 <RTC_ByteToBcd2>
 8005baa:	4603      	mov	r3, r0
 8005bac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	789b      	ldrb	r3, [r3, #2]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa5d 	bl	8006074 <RTC_ByteToBcd2>
 8005bba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e00e      	b.n	8005bea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	78db      	ldrb	r3, [r3, #3]
 8005bd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ca      	movs	r2, #202	@ 0xca
 8005bf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2253      	movs	r2, #83	@ 0x53
 8005bf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f9de 	bl	8005fbc <RTC_EnterInitMode>
 8005c00:	4603      	mov	r3, r0
 8005c02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10c      	bne.n	8005c24 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa05 	bl	800602a <RTC_ExitInitMode>
 8005c20:	4603      	mov	r3, r0
 8005c22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	22ff      	movs	r2, #255	@ 0xff
 8005c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	771a      	strb	r2, [r3, #28]

  return status;
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}

08005c48 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b089      	sub	sp, #36	@ 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005c54:	4b9a      	ldr	r3, [pc, #616]	@ (8005ec0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a9a      	ldr	r2, [pc, #616]	@ (8005ec4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	0adb      	lsrs	r3, r3, #11
 8005c60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c64:	fb02 f303 	mul.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	7f1b      	ldrb	r3, [r3, #28]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_RTC_SetAlarm_IT+0x36>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e11c      	b.n	8005eb8 <HAL_RTC_SetAlarm_IT+0x270>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2202      	movs	r2, #2
 8005c88:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d137      	bne.n	8005d00 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 f9e3 	bl	8006074 <RTC_ByteToBcd2>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f9dc 	bl	8006074 <RTC_ByteToBcd2>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005cc0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f9d4 	bl	8006074 <RTC_ByteToBcd2>
 8005ccc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	78db      	ldrb	r3, [r3, #3]
 8005cd6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005cd8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f9c6 	bl	8006074 <RTC_ByteToBcd2>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005cec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005cf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e023      	b.n	8005d48 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d20:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005d26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005d2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005d38:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005d3e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	22ca      	movs	r2, #202	@ 0xca
 8005d5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2253      	movs	r2, #83	@ 0x53
 8005d62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6c:	d141      	bne.n	8005df2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d7c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005d8e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	617a      	str	r2, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	22ff      	movs	r2, #255	@ 0xff
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2203      	movs	r2, #3
 8005da6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e082      	b.n	8005eb8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0e7      	beq.n	8005d90 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dde:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	e04b      	b.n	8005e8a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e00:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005e12:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005e14:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0adb      	lsrs	r3, r3, #11
 8005e20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	617a      	str	r2, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	22ff      	movs	r2, #255	@ 0xff
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2203      	movs	r2, #3
 8005e40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e035      	b.n	8005eb8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0e7      	beq.n	8005e2a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e78:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e88:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ec8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e94:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005e96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ec8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	22ff      	movs	r2, #255	@ 0xff
 8005ea8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3724      	adds	r7, #36	@ 0x24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	10624dd3 	.word	0x10624dd3
 8005ec8:	40013c00 	.word	0x40013c00

08005ecc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d012      	beq.n	8005f08 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f831 	bl	8005f58 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005f06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8c2 	bl	80060ae <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005f3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005f3c:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005f3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f42:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	775a      	strb	r2, [r3, #29]
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40013c00 	.word	0x40013c00

08005f58 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f88:	f7fb fcc0 	bl	800190c <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f8e:	e009      	b.n	8005fa4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f90:	f7fb fcbc 	bl	800190c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e007      	b.n	8005fb4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0ee      	beq.n	8005f90 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d122      	bne.n	8006020 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fe8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fea:	f7fb fc8f 	bl	800190c <HAL_GetTick>
 8005fee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ff0:	e00c      	b.n	800600c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ff2:	f7fb fc8b 	bl	800190c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006000:	d904      	bls.n	800600c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2204      	movs	r2, #4
 8006006:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <RTC_EnterInitMode+0x64>
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d1e8      	bne.n	8005ff2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006044:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff89 	bl	8005f6c <HAL_RTC_WaitForSynchro>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2204      	movs	r2, #4
 8006064:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006082:	e005      	b.n	8006090 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	3301      	adds	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	3b0a      	subs	r3, #10
 800608e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d8f6      	bhi.n	8006084 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	b2da      	uxtb	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	4313      	orrs	r3, r2
 80060a0:	b2db      	uxtb	r3, r3
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e07b      	b.n	80061cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d108      	bne.n	80060ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e4:	d009      	beq.n	80060fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	61da      	str	r2, [r3, #28]
 80060ec:	e005      	b.n	80060fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fb f82b 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006130:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	ea42 0103 	orr.w	r1, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 0104 	and.w	r1, r3, #4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	f003 0210 	and.w	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_SPI_Transmit+0x22>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e126      	b.n	8006444 <HAL_SPI_Transmit+0x270>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061fe:	f7fb fb85 	bl	800190c <HAL_GetTick>
 8006202:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d002      	beq.n	800621a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006214:	2302      	movs	r3, #2
 8006216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006218:	e10b      	b.n	8006432 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0x52>
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	77fb      	strb	r3, [r7, #31]
    goto error;
 800622a:	e102      	b.n	8006432 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2203      	movs	r2, #3
 8006230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	88fa      	ldrh	r2, [r7, #6]
 800624a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006272:	d10f      	bne.n	8006294 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006292:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b40      	cmp	r3, #64	@ 0x40
 80062a0:	d007      	beq.n	80062b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ba:	d14b      	bne.n	8006354 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_SPI_Transmit+0xf6>
 80062c4:	8afb      	ldrh	r3, [r7, #22]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d13e      	bne.n	8006348 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062ee:	e02b      	b.n	8006348 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d112      	bne.n	8006324 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	881a      	ldrh	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006322:	e011      	b.n	8006348 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006324:	f7fb faf2 	bl	800190c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d803      	bhi.n	800633c <HAL_SPI_Transmit+0x168>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Transmit+0x16e>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006346:	e074      	b.n	8006432 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ce      	bne.n	80062f0 <HAL_SPI_Transmit+0x11c>
 8006352:	e04c      	b.n	80063ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_SPI_Transmit+0x18e>
 800635c:	8afb      	ldrh	r3, [r7, #22]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d140      	bne.n	80063e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006388:	e02c      	b.n	80063e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d113      	bne.n	80063c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063be:	e011      	b.n	80063e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c0:	f7fb faa4 	bl	800190c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d803      	bhi.n	80063d8 <HAL_SPI_Transmit+0x204>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d102      	bne.n	80063de <HAL_SPI_Transmit+0x20a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063e2:	e026      	b.n	8006432 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1cd      	bne.n	800638a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fbcc 	bl	8006b90 <SPI_EndRxTxTransaction>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e000      	b.n	8006432 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006442:	7ffb      	ldrb	r3, [r7, #31]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006468:	d112      	bne.n	8006490 <HAL_SPI_Receive+0x44>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10e      	bne.n	8006490 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2204      	movs	r2, #4
 8006476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f8f1 	bl	800666e <HAL_SPI_TransmitReceive>
 800648c:	4603      	mov	r3, r0
 800648e:	e0ea      	b.n	8006666 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_SPI_Receive+0x52>
 800649a:	2302      	movs	r3, #2
 800649c:	e0e3      	b.n	8006666 <HAL_SPI_Receive+0x21a>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a6:	f7fb fa31 	bl	800190c <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064b8:	2302      	movs	r3, #2
 80064ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064bc:	e0ca      	b.n	8006654 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <HAL_SPI_Receive+0x7e>
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064ce:	e0c1      	b.n	8006654 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	88fa      	ldrh	r2, [r7, #6]
 80064e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006516:	d10f      	bne.n	8006538 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	d007      	beq.n	8006556 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d162      	bne.n	8006624 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800655e:	e02e      	b.n	80065be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b01      	cmp	r3, #1
 800656c:	d115      	bne.n	800659a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f103 020c 	add.w	r2, r3, #12
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006598:	e011      	b.n	80065be <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659a:	f7fb f9b7 	bl	800190c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d803      	bhi.n	80065b2 <HAL_SPI_Receive+0x166>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d102      	bne.n	80065b8 <HAL_SPI_Receive+0x16c>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065bc:	e04a      	b.n	8006654 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1cb      	bne.n	8006560 <HAL_SPI_Receive+0x114>
 80065c8:	e031      	b.n	800662e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d113      	bne.n	8006600 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065fe:	e011      	b.n	8006624 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006600:	f7fb f984 	bl	800190c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d803      	bhi.n	8006618 <HAL_SPI_Receive+0x1cc>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d102      	bne.n	800661e <HAL_SPI_Receive+0x1d2>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d102      	bne.n	8006624 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006622:	e017      	b.n	8006654 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1cd      	bne.n	80065ca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fa46 	bl	8006ac4 <SPI_EndRxTransaction>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
 8006650:	e000      	b.n	8006654 <HAL_SPI_Receive+0x208>
  }

error :
 8006652:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b08c      	sub	sp, #48	@ 0x30
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800667c:	2301      	movs	r3, #1
 800667e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x26>
 8006690:	2302      	movs	r3, #2
 8006692:	e18a      	b.n	80069aa <HAL_SPI_TransmitReceive+0x33c>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669c:	f7fb f936 	bl	800190c <HAL_GetTick>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066b2:	887b      	ldrh	r3, [r7, #2]
 80066b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d00f      	beq.n	80066de <HAL_SPI_TransmitReceive+0x70>
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c4:	d107      	bne.n	80066d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_SPI_TransmitReceive+0x68>
 80066ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d003      	beq.n	80066de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
 80066d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80066dc:	e15b      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_SPI_TransmitReceive+0x82>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_SPI_TransmitReceive+0x82>
 80066ea:	887b      	ldrh	r3, [r7, #2]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80066f6:	e14e      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b04      	cmp	r3, #4
 8006702:	d003      	beq.n	800670c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2205      	movs	r2, #5
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	887a      	ldrh	r2, [r7, #2]
 8006722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	887a      	ldrh	r2, [r7, #2]
 800672e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	d007      	beq.n	8006760 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800675e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006768:	d178      	bne.n	800685c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_SPI_TransmitReceive+0x10a>
 8006772:	8b7b      	ldrh	r3, [r7, #26]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d166      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	881a      	ldrh	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800679c:	e053      	b.n	8006846 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d11b      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x176>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x176>
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d113      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d119      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x1b8>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d014      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	b292      	uxth	r2, r2
 8006808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	1c9a      	adds	r2, r3, #2
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006822:	2301      	movs	r3, #1
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006826:	f7fb f871 	bl	800190c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006832:	429a      	cmp	r2, r3
 8006834:	d807      	bhi.n	8006846 <HAL_SPI_TransmitReceive+0x1d8>
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d003      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006844:	e0a7      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1a6      	bne.n	800679e <HAL_SPI_TransmitReceive+0x130>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1a1      	bne.n	800679e <HAL_SPI_TransmitReceive+0x130>
 800685a:	e07c      	b.n	8006956 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_SPI_TransmitReceive+0x1fc>
 8006864:	8b7b      	ldrh	r3, [r7, #26]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d16b      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006890:	e057      	b.n	8006942 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b02      	cmp	r3, #2
 800689e:	d11c      	bne.n	80068da <HAL_SPI_TransmitReceive+0x26c>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <HAL_SPI_TransmitReceive+0x26c>
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d114      	bne.n	80068da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d119      	bne.n	800691c <HAL_SPI_TransmitReceive+0x2ae>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d014      	beq.n	800691c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006918:	2301      	movs	r3, #1
 800691a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800691c:	f7fa fff6 	bl	800190c <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006928:	429a      	cmp	r2, r3
 800692a:	d803      	bhi.n	8006934 <HAL_SPI_TransmitReceive+0x2c6>
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d102      	bne.n	800693a <HAL_SPI_TransmitReceive+0x2cc>
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006940:	e029      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1a2      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x224>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d19d      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006958:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f918 	bl	8006b90 <SPI_EndRxTxTransaction>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d006      	beq.n	8006974 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006972:	e010      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	e000      	b.n	8006996 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006994:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80069a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3730      	adds	r7, #48	@ 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069c4:	f7fa ffa2 	bl	800190c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069d4:	f7fa ff9a 	bl	800190c <HAL_GetTick>
 80069d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069da:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	015b      	lsls	r3, r3, #5
 80069e0:	0d1b      	lsrs	r3, r3, #20
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ea:	e054      	b.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d050      	beq.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f4:	f7fa ff8a 	bl	800190c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d902      	bls.n	8006a0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d13d      	bne.n	8006a86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a22:	d111      	bne.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2c:	d004      	beq.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a36:	d107      	bne.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a50:	d10f      	bne.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e017      	b.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2301      	moveq	r3, #1
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d19b      	bne.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000000 	.word	0x20000000

08006ac4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ad8:	d111      	bne.n	8006afe <SPI_EndRxTransaction+0x3a>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ae2:	d004      	beq.n	8006aee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aec:	d107      	bne.n	8006afe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b06:	d12a      	bne.n	8006b5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b10:	d012      	beq.n	8006b38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2180      	movs	r1, #128	@ 0x80
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff ff49 	bl	80069b4 <SPI_WaitFlagStateUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02d      	beq.n	8006b84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e026      	b.n	8006b86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2101      	movs	r1, #1
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff ff36 	bl	80069b4 <SPI_WaitFlagStateUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e013      	b.n	8006b86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	2101      	movs	r1, #1
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff ff23 	bl	80069b4 <SPI_WaitFlagStateUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b78:	f043 0220 	orr.w	r2, r3, #32
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e000      	b.n	8006b86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c0c <SPI_EndRxTxTransaction+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c10 <SPI_EndRxTxTransaction+0x80>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	0d5b      	lsrs	r3, r3, #21
 8006ba8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bba:	d112      	bne.n	8006be2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	@ 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fef4 	bl	80069b4 <SPI_WaitFlagStateUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e00f      	b.n	8006c02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf8:	2b80      	cmp	r3, #128	@ 0x80
 8006bfa:	d0f2      	beq.n	8006be2 <SPI_EndRxTxTransaction+0x52>
 8006bfc:	e000      	b.n	8006c00 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bfe:	bf00      	nop
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000000 	.word	0x20000000
 8006c10:	165e9f81 	.word	0x165e9f81

08006c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e041      	b.n	8006caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fa fb44 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f000 fcb8 	bl	80075c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d001      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e044      	b.n	8006d56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x6c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf6:	d013      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xb4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x6c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xb8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x6c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a17      	ldr	r2, [pc, #92]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x6c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a16      	ldr	r2, [pc, #88]	@ (8006d74 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d111      	bne.n	8006d44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d010      	beq.n	8006d54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e007      	b.n	8006d54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e041      	b.n	8006e0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f839 	bl	8006e16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f000 fc06 	bl	80075c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
	...

08006e2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <HAL_TIM_PWM_Start+0x24>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	bf14      	ite	ne
 8006e48:	2301      	movne	r3, #1
 8006e4a:	2300      	moveq	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	e022      	b.n	8006e96 <HAL_TIM_PWM_Start+0x6a>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d109      	bne.n	8006e6a <HAL_TIM_PWM_Start+0x3e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	e015      	b.n	8006e96 <HAL_TIM_PWM_Start+0x6a>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d109      	bne.n	8006e84 <HAL_TIM_PWM_Start+0x58>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	e008      	b.n	8006e96 <HAL_TIM_PWM_Start+0x6a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e068      	b.n	8006f70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_TIM_PWM_Start+0x82>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eac:	e013      	b.n	8006ed6 <HAL_TIM_PWM_Start+0xaa>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d104      	bne.n	8006ebe <HAL_TIM_PWM_Start+0x92>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ebc:	e00b      	b.n	8006ed6 <HAL_TIM_PWM_Start+0xaa>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d104      	bne.n	8006ece <HAL_TIM_PWM_Start+0xa2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ecc:	e003      	b.n	8006ed6 <HAL_TIM_PWM_Start+0xaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2201      	movs	r2, #1
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fe18 	bl	8007b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a23      	ldr	r2, [pc, #140]	@ (8006f78 <HAL_TIM_PWM_Start+0x14c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d107      	bne.n	8006efe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006efc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	@ (8006f78 <HAL_TIM_PWM_Start+0x14c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x10e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f10:	d013      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x10e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <HAL_TIM_PWM_Start+0x150>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x10e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a17      	ldr	r2, [pc, #92]	@ (8006f80 <HAL_TIM_PWM_Start+0x154>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x10e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a16      	ldr	r2, [pc, #88]	@ (8006f84 <HAL_TIM_PWM_Start+0x158>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x10e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a14      	ldr	r2, [pc, #80]	@ (8006f88 <HAL_TIM_PWM_Start+0x15c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d111      	bne.n	8006f5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	d010      	beq.n	8006f6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5c:	e007      	b.n	8006f6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0201 	orr.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40014000 	.word	0x40014000

08006f8c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e041      	b.n	8007024 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d106      	bne.n	8006fba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f839 	bl	800702c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f000 fafb 	bl	80075c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0208 	bic.w	r2, r2, #8
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6819      	ldr	r1, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d122      	bne.n	800709c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d11b      	bne.n	800709c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0202 	mvn.w	r2, #2
 800706c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa81 	bl	800758a <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa73 	bl	8007576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa84 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d122      	bne.n	80070f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d11b      	bne.n	80070f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0204 	mvn.w	r2, #4
 80070c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa57 	bl	800758a <HAL_TIM_IC_CaptureCallback>
 80070dc:	e005      	b.n	80070ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa49 	bl	8007576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa5a 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d122      	bne.n	8007144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b08      	cmp	r3, #8
 800710a:	d11b      	bne.n	8007144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0208 	mvn.w	r2, #8
 8007114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa2d 	bl	800758a <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa1f 	bl	8007576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa30 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b10      	cmp	r3, #16
 8007150:	d122      	bne.n	8007198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b10      	cmp	r3, #16
 800715e:	d11b      	bne.n	8007198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0210 	mvn.w	r2, #16
 8007168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2208      	movs	r2, #8
 800716e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa03 	bl	800758a <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9f5 	bl	8007576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa06 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d10e      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d107      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0201 	mvn.w	r2, #1
 80071bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9cf 	bl	8007562 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d10e      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071dc:	2b80      	cmp	r3, #128	@ 0x80
 80071de:	d107      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fd82 	bl	8007cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fa:	2b40      	cmp	r3, #64	@ 0x40
 80071fc:	d10e      	bne.n	800721c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b40      	cmp	r3, #64	@ 0x40
 800720a:	d107      	bne.n	800721c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9cb 	bl	80075b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b20      	cmp	r3, #32
 8007228:	d10e      	bne.n	8007248 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b20      	cmp	r3, #32
 8007236:	d107      	bne.n	8007248 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0220 	mvn.w	r2, #32
 8007240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fd4c 	bl	8007ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800726a:	2302      	movs	r3, #2
 800726c:	e0ae      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b0c      	cmp	r3, #12
 800727a:	f200 809f 	bhi.w	80073bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072b9 	.word	0x080072b9
 8007288:	080073bd 	.word	0x080073bd
 800728c:	080073bd 	.word	0x080073bd
 8007290:	080073bd 	.word	0x080073bd
 8007294:	080072f9 	.word	0x080072f9
 8007298:	080073bd 	.word	0x080073bd
 800729c:	080073bd 	.word	0x080073bd
 80072a0:	080073bd 	.word	0x080073bd
 80072a4:	0800733b 	.word	0x0800733b
 80072a8:	080073bd 	.word	0x080073bd
 80072ac:	080073bd 	.word	0x080073bd
 80072b0:	080073bd 	.word	0x080073bd
 80072b4:	0800737b 	.word	0x0800737b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fa02 	bl	80076c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0208 	orr.w	r2, r2, #8
 80072d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0204 	bic.w	r2, r2, #4
 80072e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6999      	ldr	r1, [r3, #24]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	619a      	str	r2, [r3, #24]
      break;
 80072f6:	e064      	b.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fa48 	bl	8007794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6999      	ldr	r1, [r3, #24]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	021a      	lsls	r2, r3, #8
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	619a      	str	r2, [r3, #24]
      break;
 8007338:	e043      	b.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fa93 	bl	800786c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0208 	orr.w	r2, r2, #8
 8007354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0204 	bic.w	r2, r2, #4
 8007364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69d9      	ldr	r1, [r3, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	61da      	str	r2, [r3, #28]
      break;
 8007378:	e023      	b.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fadd 	bl	8007940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69d9      	ldr	r1, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	021a      	lsls	r2, r3, #8
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	61da      	str	r2, [r3, #28]
      break;
 80073ba:	e002      	b.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	75fb      	strb	r3, [r7, #23]
      break;
 80073c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIM_ConfigClockSource+0x1c>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e0b4      	b.n	800755a <HAL_TIM_ConfigClockSource+0x186>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800740e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007428:	d03e      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0xd4>
 800742a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800742e:	f200 8087 	bhi.w	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007436:	f000 8086 	beq.w	8007546 <HAL_TIM_ConfigClockSource+0x172>
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743e:	d87f      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007440:	2b70      	cmp	r3, #112	@ 0x70
 8007442:	d01a      	beq.n	800747a <HAL_TIM_ConfigClockSource+0xa6>
 8007444:	2b70      	cmp	r3, #112	@ 0x70
 8007446:	d87b      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007448:	2b60      	cmp	r3, #96	@ 0x60
 800744a:	d050      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x11a>
 800744c:	2b60      	cmp	r3, #96	@ 0x60
 800744e:	d877      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007450:	2b50      	cmp	r3, #80	@ 0x50
 8007452:	d03c      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0xfa>
 8007454:	2b50      	cmp	r3, #80	@ 0x50
 8007456:	d873      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007458:	2b40      	cmp	r3, #64	@ 0x40
 800745a:	d058      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x13a>
 800745c:	2b40      	cmp	r3, #64	@ 0x40
 800745e:	d86f      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007460:	2b30      	cmp	r3, #48	@ 0x30
 8007462:	d064      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x15a>
 8007464:	2b30      	cmp	r3, #48	@ 0x30
 8007466:	d86b      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007468:	2b20      	cmp	r3, #32
 800746a:	d060      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x15a>
 800746c:	2b20      	cmp	r3, #32
 800746e:	d867      	bhi.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05c      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x15a>
 8007474:	2b10      	cmp	r3, #16
 8007476:	d05a      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x15a>
 8007478:	e062      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6899      	ldr	r1, [r3, #8]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f000 fb23 	bl	8007ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800749c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	609a      	str	r2, [r3, #8]
      break;
 80074a6:	e04f      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	6899      	ldr	r1, [r3, #8]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f000 fb0c 	bl	8007ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074ca:	609a      	str	r2, [r3, #8]
      break;
 80074cc:	e03c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fa80 	bl	80079e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2150      	movs	r1, #80	@ 0x50
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fad9 	bl	8007a9e <TIM_ITRx_SetConfig>
      break;
 80074ec:	e02c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 fa9f 	bl	8007a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2160      	movs	r1, #96	@ 0x60
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fac9 	bl	8007a9e <TIM_ITRx_SetConfig>
      break;
 800750c:	e01c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6859      	ldr	r1, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	461a      	mov	r2, r3
 800751c:	f000 fa60 	bl	80079e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2140      	movs	r1, #64	@ 0x40
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fab9 	bl	8007a9e <TIM_ITRx_SetConfig>
      break;
 800752c:	e00c      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 fab0 	bl	8007a9e <TIM_ITRx_SetConfig>
      break;
 800753e:	e003      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
      break;
 8007544:	e000      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a34      	ldr	r2, [pc, #208]	@ (80076ac <TIM_Base_SetConfig+0xe4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00f      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e6:	d00b      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a31      	ldr	r2, [pc, #196]	@ (80076b0 <TIM_Base_SetConfig+0xe8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d007      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a30      	ldr	r2, [pc, #192]	@ (80076b4 <TIM_Base_SetConfig+0xec>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2f      	ldr	r2, [pc, #188]	@ (80076b8 <TIM_Base_SetConfig+0xf0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d108      	bne.n	8007612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a25      	ldr	r2, [pc, #148]	@ (80076ac <TIM_Base_SetConfig+0xe4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01b      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007620:	d017      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a22      	ldr	r2, [pc, #136]	@ (80076b0 <TIM_Base_SetConfig+0xe8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a21      	ldr	r2, [pc, #132]	@ (80076b4 <TIM_Base_SetConfig+0xec>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00f      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <TIM_Base_SetConfig+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1f      	ldr	r2, [pc, #124]	@ (80076bc <TIM_Base_SetConfig+0xf4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1e      	ldr	r2, [pc, #120]	@ (80076c0 <TIM_Base_SetConfig+0xf8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <TIM_Base_SetConfig+0xfc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d108      	bne.n	8007664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <TIM_Base_SetConfig+0xe4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f023 0201 	bic.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 0302 	bic.w	r3, r3, #2
 8007710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <TIM_OC1_SetConfig+0xc8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d10c      	bne.n	800773e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 0308 	bic.w	r3, r3, #8
 800772a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 0304 	bic.w	r3, r3, #4
 800773c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a13      	ldr	r2, [pc, #76]	@ (8007790 <TIM_OC1_SetConfig+0xc8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d111      	bne.n	800776a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800774c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	621a      	str	r2, [r3, #32]
}
 8007784:	bf00      	nop
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40010000 	.word	0x40010000

08007794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0210 	bic.w	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0320 	bic.w	r3, r3, #32
 80077de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007868 <TIM_OC2_SetConfig+0xd4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10d      	bne.n	8007810 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800780e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a15      	ldr	r2, [pc, #84]	@ (8007868 <TIM_OC2_SetConfig+0xd4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d113      	bne.n	8007840 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800781e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	621a      	str	r2, [r3, #32]
}
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000

0800786c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a1d      	ldr	r2, [pc, #116]	@ (800793c <TIM_OC3_SetConfig+0xd0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d10d      	bne.n	80078e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a14      	ldr	r2, [pc, #80]	@ (800793c <TIM_OC3_SetConfig+0xd0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d113      	bne.n	8007916 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40010000 	.word	0x40010000

08007940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800798a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a10      	ldr	r2, [pc, #64]	@ (80079dc <TIM_OC4_SetConfig+0x9c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000

080079e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f023 0201 	bic.w	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f023 030a 	bic.w	r3, r3, #10
 8007a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b087      	sub	sp, #28
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f023 0210 	bic.w	r2, r3, #16
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	031b      	lsls	r3, r3, #12
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f043 0307 	orr.w	r3, r3, #7
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	021a      	lsls	r2, r3, #8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	609a      	str	r2, [r3, #8]
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	2201      	movs	r2, #1
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	43db      	mvns	r3, r3
 8007b36:	401a      	ands	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f003 031f 	and.w	r3, r3, #31
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e050      	b.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc4:	d013      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00e      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a16      	ldr	r2, [pc, #88]	@ (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a15      	ldr	r2, [pc, #84]	@ (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a13      	ldr	r2, [pc, #76]	@ (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d10c      	bne.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00
 8007c38:	40014000 	.word	0x40014000

08007c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e03d      	b.n	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d08:	b084      	sub	sp, #16
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	f107 001c 	add.w	r0, r7, #28
 8007d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d122      	bne.n	8007d66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d105      	bne.n	8007d5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fbee 	bl	800953c <USB_CoreReset>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e01a      	b.n	8007d9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fbe2 	bl	800953c <USB_CoreReset>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d8e:	e005      	b.n	8007d9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d10b      	bne.n	8007dba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f043 0206 	orr.w	r2, r3, #6
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f043 0220 	orr.w	r2, r3, #32
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dc6:	b004      	add	sp, #16
 8007dc8:	4770      	bx	lr
	...

08007dcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d165      	bne.n	8007eac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4a41      	ldr	r2, [pc, #260]	@ (8007ee8 <USB_SetTurnaroundTime+0x11c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d906      	bls.n	8007df6 <USB_SetTurnaroundTime+0x2a>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4a40      	ldr	r2, [pc, #256]	@ (8007eec <USB_SetTurnaroundTime+0x120>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d202      	bcs.n	8007df6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007df0:	230f      	movs	r3, #15
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	e062      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4a3c      	ldr	r2, [pc, #240]	@ (8007eec <USB_SetTurnaroundTime+0x120>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d306      	bcc.n	8007e0c <USB_SetTurnaroundTime+0x40>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4a3b      	ldr	r2, [pc, #236]	@ (8007ef0 <USB_SetTurnaroundTime+0x124>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d202      	bcs.n	8007e0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e06:	230e      	movs	r3, #14
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	e057      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4a38      	ldr	r2, [pc, #224]	@ (8007ef0 <USB_SetTurnaroundTime+0x124>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d306      	bcc.n	8007e22 <USB_SetTurnaroundTime+0x56>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4a37      	ldr	r2, [pc, #220]	@ (8007ef4 <USB_SetTurnaroundTime+0x128>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d202      	bcs.n	8007e22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e1c:	230d      	movs	r3, #13
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e04c      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4a33      	ldr	r2, [pc, #204]	@ (8007ef4 <USB_SetTurnaroundTime+0x128>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d306      	bcc.n	8007e38 <USB_SetTurnaroundTime+0x6c>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4a32      	ldr	r2, [pc, #200]	@ (8007ef8 <USB_SetTurnaroundTime+0x12c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d802      	bhi.n	8007e38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e32:	230c      	movs	r3, #12
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	e041      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef8 <USB_SetTurnaroundTime+0x12c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d906      	bls.n	8007e4e <USB_SetTurnaroundTime+0x82>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4a2e      	ldr	r2, [pc, #184]	@ (8007efc <USB_SetTurnaroundTime+0x130>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d802      	bhi.n	8007e4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e48:	230b      	movs	r3, #11
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e036      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4a2a      	ldr	r2, [pc, #168]	@ (8007efc <USB_SetTurnaroundTime+0x130>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d906      	bls.n	8007e64 <USB_SetTurnaroundTime+0x98>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4a29      	ldr	r2, [pc, #164]	@ (8007f00 <USB_SetTurnaroundTime+0x134>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d802      	bhi.n	8007e64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e5e:	230a      	movs	r3, #10
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	e02b      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <USB_SetTurnaroundTime+0x134>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d906      	bls.n	8007e7a <USB_SetTurnaroundTime+0xae>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4a25      	ldr	r2, [pc, #148]	@ (8007f04 <USB_SetTurnaroundTime+0x138>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d202      	bcs.n	8007e7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e74:	2309      	movs	r3, #9
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e020      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4a21      	ldr	r2, [pc, #132]	@ (8007f04 <USB_SetTurnaroundTime+0x138>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d306      	bcc.n	8007e90 <USB_SetTurnaroundTime+0xc4>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4a20      	ldr	r2, [pc, #128]	@ (8007f08 <USB_SetTurnaroundTime+0x13c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d802      	bhi.n	8007e90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e015      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <USB_SetTurnaroundTime+0x13c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d906      	bls.n	8007ea6 <USB_SetTurnaroundTime+0xda>
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <USB_SetTurnaroundTime+0x140>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d202      	bcs.n	8007ea6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ea0:	2307      	movs	r3, #7
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e00a      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007ea6:	2306      	movs	r3, #6
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e007      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007eb2:	2309      	movs	r3, #9
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	e001      	b.n	8007ebc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007eb8:	2309      	movs	r3, #9
 8007eba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	00d8acbf 	.word	0x00d8acbf
 8007eec:	00e4e1c0 	.word	0x00e4e1c0
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	01067380 	.word	0x01067380
 8007ef8:	011a499f 	.word	0x011a499f
 8007efc:	01312cff 	.word	0x01312cff
 8007f00:	014ca43f 	.word	0x014ca43f
 8007f04:	016e3600 	.word	0x016e3600
 8007f08:	01a6ab1f 	.word	0x01a6ab1f
 8007f0c:	01e84800 	.word	0x01e84800

08007f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f043 0201 	orr.w	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f023 0201 	bic.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d115      	bne.n	8007fa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7f9 fcce 	bl	8001924 <HAL_Delay>
      ms++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fa45 	bl	800941e <USB_GetMode>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d01e      	beq.n	8007fd8 <USB_SetCurrentMode+0x84>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b31      	cmp	r3, #49	@ 0x31
 8007f9e:	d9f0      	bls.n	8007f82 <USB_SetCurrentMode+0x2e>
 8007fa0:	e01a      	b.n	8007fd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7f9 fcb5 	bl	8001924 <HAL_Delay>
      ms++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fa2c 	bl	800941e <USB_GetMode>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <USB_SetCurrentMode+0x84>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b31      	cmp	r3, #49	@ 0x31
 8007fd0:	d9f0      	bls.n	8007fb4 <USB_SetCurrentMode+0x60>
 8007fd2:	e001      	b.n	8007fd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e005      	b.n	8007fe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b32      	cmp	r3, #50	@ 0x32
 8007fdc:	d101      	bne.n	8007fe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fec:	b084      	sub	sp, #16
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	e009      	b.n	8008020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3340      	adds	r3, #64	@ 0x40
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b0e      	cmp	r3, #14
 8008024:	d9f2      	bls.n	800800c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11c      	bne.n	8008066 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800803a:	f043 0302 	orr.w	r3, r3, #2
 800803e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008044:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008050:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	639a      	str	r2, [r3, #56]	@ 0x38
 8008064:	e00b      	b.n	800807e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008076:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008084:	461a      	mov	r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008090:	4619      	mov	r1, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008098:	461a      	mov	r2, r3
 800809a:	680b      	ldr	r3, [r1, #0]
 800809c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d10c      	bne.n	80080be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d104      	bne.n	80080b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f965 	bl	800837c <USB_SetDevSpeed>
 80080b2:	e008      	b.n	80080c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080b4:	2101      	movs	r1, #1
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f960 	bl	800837c <USB_SetDevSpeed>
 80080bc:	e003      	b.n	80080c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080be:	2103      	movs	r1, #3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f95b 	bl	800837c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080c6:	2110      	movs	r1, #16
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8f3 	bl	80082b4 <USB_FlushTxFifo>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f91f 	bl	800831c <USB_FlushRxFifo>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fa:	461a      	mov	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008106:	461a      	mov	r2, r3
 8008108:	2300      	movs	r3, #0
 800810a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	e043      	b.n	800819a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008128:	d118      	bne.n	800815c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e013      	b.n	800816e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008152:	461a      	mov	r2, r3
 8008154:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e008      	b.n	800816e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818c:	461a      	mov	r2, r3
 800818e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d3b7      	bcc.n	8008112 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	e043      	b.n	8008230 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081be:	d118      	bne.n	80081f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d2:	461a      	mov	r2, r3
 80081d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e013      	b.n	8008204 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e8:	461a      	mov	r2, r3
 80081ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	e008      	b.n	8008204 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	461a      	mov	r2, r3
 8008200:	2300      	movs	r3, #0
 8008202:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008210:	461a      	mov	r2, r3
 8008212:	2300      	movs	r3, #0
 8008214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008222:	461a      	mov	r2, r3
 8008224:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008228:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3301      	adds	r3, #1
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	429a      	cmp	r2, r3
 8008236:	d3b7      	bcc.n	80081a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800824a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008258:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	2b00      	cmp	r3, #0
 800825e:	d105      	bne.n	800826c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f043 0210 	orr.w	r2, r3, #16
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	4b0f      	ldr	r3, [pc, #60]	@ (80082b0 <USB_DevInit+0x2c4>)
 8008272:	4313      	orrs	r3, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800828a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828c:	2b01      	cmp	r3, #1
 800828e:	d107      	bne.n	80082a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008298:	f043 0304 	orr.w	r3, r3, #4
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr
 80082b0:	803c3800 	.word	0x803c3800

080082b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a13      	ldr	r2, [pc, #76]	@ (8008318 <USB_FlushTxFifo+0x64>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d901      	bls.n	80082d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e01b      	b.n	800830c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	daf2      	bge.n	80082c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	019b      	lsls	r3, r3, #6
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4a08      	ldr	r2, [pc, #32]	@ (8008318 <USB_FlushTxFifo+0x64>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d901      	bls.n	80082fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e006      	b.n	800830c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b20      	cmp	r3, #32
 8008308:	d0f0      	beq.n	80082ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	00030d40 	.word	0x00030d40

0800831c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a11      	ldr	r2, [pc, #68]	@ (8008378 <USB_FlushRxFifo+0x5c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e018      	b.n	800836c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	daf2      	bge.n	8008328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2210      	movs	r2, #16
 800834a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4a08      	ldr	r2, [pc, #32]	@ (8008378 <USB_FlushRxFifo+0x5c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d901      	bls.n	800835e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e006      	b.n	800836c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b10      	cmp	r3, #16
 8008368:	d0f0      	beq.n	800834c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	00030d40 	.word	0x00030d40

0800837c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0306 	and.w	r3, r3, #6
 80083c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
 80083d2:	e00a      	b.n	80083ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d002      	beq.n	80083e0 <USB_GetDevSpeed+0x32>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d102      	bne.n	80083e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80083e0:	2302      	movs	r3, #2
 80083e2:	75fb      	strb	r3, [r7, #23]
 80083e4:	e001      	b.n	80083ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80083e6:	230f      	movs	r3, #15
 80083e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d13a      	bne.n	800848a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	2101      	movs	r1, #1
 8008426:	fa01 f303 	lsl.w	r3, r1, r3
 800842a:	b29b      	uxth	r3, r3
 800842c:	68f9      	ldr	r1, [r7, #12]
 800842e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008432:	4313      	orrs	r3, r2
 8008434:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d155      	bne.n	80084f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008468:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008470:	4313      	orrs	r3, r2
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800847e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e036      	b.n	80084f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	2101      	movs	r1, #1
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d11a      	bne.n	80084f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084de:	430b      	orrs	r3, r1
 80084e0:	4313      	orrs	r3, r2
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d161      	bne.n	80085e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800853a:	d11f      	bne.n	800857c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	440a      	add	r2, r1
 8008552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008556:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800855a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	440a      	add	r2, r1
 8008572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008576:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800857a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f303 	lsl.w	r3, r1, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	43db      	mvns	r3, r3
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800859c:	4013      	ands	r3, r2
 800859e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085c0:	4013      	ands	r3, r2
 80085c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	0159      	lsls	r1, r3, #5
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	440b      	add	r3, r1
 80085da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085de:	4619      	mov	r1, r3
 80085e0:	4b35      	ldr	r3, [pc, #212]	@ (80086b8 <USB_DeactivateEndpoint+0x1b0>)
 80085e2:	4013      	ands	r3, r2
 80085e4:	600b      	str	r3, [r1, #0]
 80085e6:	e060      	b.n	80086aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085fe:	d11f      	bne.n	8008640 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	440a      	add	r2, r1
 8008616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800861a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800861e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	440a      	add	r2, r1
 8008636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800863a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800863e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	43db      	mvns	r3, r3
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008660:	4013      	ands	r3, r2
 8008662:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	2101      	movs	r1, #1
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	43db      	mvns	r3, r3
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008684:	4013      	ands	r3, r2
 8008686:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	0159      	lsls	r1, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	440b      	add	r3, r1
 800869e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a2:	4619      	mov	r1, r3
 80086a4:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <USB_DeactivateEndpoint+0x1b4>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	ec337800 	.word	0xec337800
 80086bc:	eff37800 	.word	0xeff37800

080086c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	@ 0x28
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	785b      	ldrb	r3, [r3, #1]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 815c 	bne.w	800899a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d132      	bne.n	8008750 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	0151      	lsls	r1, r2, #5
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	440a      	add	r2, r1
 8008700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008704:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008708:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800870c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	440a      	add	r2, r1
 8008724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008728:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800872c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008748:	0cdb      	lsrs	r3, r3, #19
 800874a:	04db      	lsls	r3, r3, #19
 800874c:	6113      	str	r3, [r2, #16]
 800874e:	e074      	b.n	800883a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800876a:	0cdb      	lsrs	r3, r3, #19
 800876c:	04db      	lsls	r3, r3, #19
 800876e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800878a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800878e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	440b      	add	r3, r1
 80087ac:	1e59      	subs	r1, r3, #1
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80087b8:	4b9d      	ldr	r3, [pc, #628]	@ (8008a30 <USB_EPStartXfer+0x370>)
 80087ba:	400b      	ands	r3, r1
 80087bc:	69b9      	ldr	r1, [r7, #24]
 80087be:	0148      	lsls	r0, r1, #5
 80087c0:	69f9      	ldr	r1, [r7, #28]
 80087c2:	4401      	add	r1, r0
 80087c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087c8:	4313      	orrs	r3, r2
 80087ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e2:	69b9      	ldr	r1, [r7, #24]
 80087e4:	0148      	lsls	r0, r1, #5
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	4401      	add	r1, r0
 80087ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087ee:	4313      	orrs	r3, r2
 80087f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	791b      	ldrb	r3, [r3, #4]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d11f      	bne.n	800883a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008814:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d14b      	bne.n	80088d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	791b      	ldrb	r3, [r3, #4]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d128      	bne.n	80088b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	d110      	bne.n	8008896 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	440a      	add	r2, r1
 800888a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800888e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e00f      	b.n	80088b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e133      	b.n	8008b40 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	791b      	ldrb	r3, [r3, #4]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d015      	beq.n	800892c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 811b 	beq.w	8008b40 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	2101      	movs	r1, #1
 800891c:	fa01 f303 	lsl.w	r3, r1, r3
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008926:	4313      	orrs	r3, r2
 8008928:	634b      	str	r3, [r1, #52]	@ 0x34
 800892a:	e109      	b.n	8008b40 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d110      	bne.n	800895e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008956:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e00f      	b.n	800897e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800897c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6919      	ldr	r1, [r3, #16]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	b298      	uxth	r0, r3
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fade 	bl	8008f54 <USB_WritePacket>
 8008998:	e0d2      	b.n	8008b40 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b4:	0cdb      	lsrs	r3, r3, #19
 80089b6:	04db      	lsls	r3, r3, #19
 80089b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d126      	bne.n	8008a34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089fc:	69b9      	ldr	r1, [r7, #24]
 80089fe:	0148      	lsls	r0, r1, #5
 8008a00:	69f9      	ldr	r1, [r7, #28]
 8008a02:	4401      	add	r1, r0
 8008a04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a2a:	6113      	str	r3, [r2, #16]
 8008a2c:	e03a      	b.n	8008aa4 <USB_EPStartXfer+0x3e4>
 8008a2e:	bf00      	nop
 8008a30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	1e5a      	subs	r2, r3, #1
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	8afa      	ldrh	r2, [r7, #22]
 8008a50:	fb03 f202 	mul.w	r2, r3, r2
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	8afb      	ldrh	r3, [r7, #22]
 8008a68:	04d9      	lsls	r1, r3, #19
 8008a6a:	4b38      	ldr	r3, [pc, #224]	@ (8008b4c <USB_EPStartXfer+0x48c>)
 8008a6c:	400b      	ands	r3, r1
 8008a6e:	69b9      	ldr	r1, [r7, #24]
 8008a70:	0148      	lsls	r0, r1, #5
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	4401      	add	r1, r0
 8008a76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a94:	69b9      	ldr	r1, [r7, #24]
 8008a96:	0148      	lsls	r0, r1, #5
 8008a98:	69f9      	ldr	r1, [r7, #28]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10d      	bne.n	8008ac6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6919      	ldr	r1, [r3, #16]
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac2:	460a      	mov	r2, r1
 8008ac4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	791b      	ldrb	r3, [r3, #4]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d128      	bne.n	8008b20 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d110      	bne.n	8008b00 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e00f      	b.n	8008b20 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	1ff80000 	.word	0x1ff80000

08008b50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	f040 80ce 	bne.w	8008d0e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d132      	bne.n	8008be0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b94:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b98:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd8:	0cdb      	lsrs	r3, r3, #19
 8008bda:	04db      	lsls	r3, r3, #19
 8008bdc:	6113      	str	r3, [r2, #16]
 8008bde:	e04e      	b.n	8008c7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bfa:	0cdb      	lsrs	r3, r3, #19
 8008bfc:	04db      	lsls	r3, r3, #19
 8008bfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d903      	bls.n	8008c38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c6e:	6939      	ldr	r1, [r7, #16]
 8008c70:	0148      	lsls	r0, r1, #5
 8008c72:	6979      	ldr	r1, [r7, #20]
 8008c74:	4401      	add	r1, r0
 8008c76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d11e      	bne.n	8008cc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e097      	b.n	8008df2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cdc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ce0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8083 	beq.w	8008df2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008d02:	6979      	ldr	r1, [r7, #20]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8008d0c:	e071      	b.n	8008df2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d28:	0cdb      	lsrs	r3, r3, #19
 8008d2a:	04db      	lsls	r3, r3, #19
 8008d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da0:	6939      	ldr	r1, [r7, #16]
 8008da2:	0148      	lsls	r0, r1, #5
 8008da4:	6979      	ldr	r1, [r7, #20]
 8008da6:	4401      	add	r1, r0
 8008da8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dac:	4313      	orrs	r3, r2
 8008dae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d10d      	bne.n	8008dd2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6919      	ldr	r1, [r3, #16]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	460a      	mov	r2, r1
 8008dd0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	0151      	lsls	r1, r2, #5
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	440a      	add	r2, r1
 8008de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d14a      	bne.n	8008eb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e36:	f040 8086 	bne.w	8008f46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	7812      	ldrb	r2, [r2, #0]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d902      	bls.n	8008e98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
          break;
 8008e96:	e056      	b.n	8008f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eb0:	d0e7      	beq.n	8008e82 <USB_EPStopXfer+0x82>
 8008eb2:	e048      	b.n	8008f46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ecc:	d13b      	bne.n	8008f46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	7812      	ldrb	r2, [r2, #0]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ef0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	7812      	ldrb	r2, [r2, #0]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d902      	bls.n	8008f2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
          break;
 8008f2a:	e00c      	b.n	8008f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f44:	d0e7      	beq.n	8008f16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b089      	sub	sp, #36	@ 0x24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	460b      	mov	r3, r1
 8008f64:	71fb      	strb	r3, [r7, #7]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d123      	bne.n	8008fc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f7a:	88bb      	ldrh	r3, [r7, #4]
 8008f7c:	3303      	adds	r3, #3
 8008f7e:	089b      	lsrs	r3, r3, #2
 8008f80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f82:	2300      	movs	r3, #0
 8008f84:	61bb      	str	r3, [r7, #24]
 8008f86:	e018      	b.n	8008fba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	031a      	lsls	r2, r3, #12
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f94:	461a      	mov	r2, r3
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	3301      	adds	r3, #1
 8008fac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	61bb      	str	r3, [r7, #24]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d3e2      	bcc.n	8008f88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3724      	adds	r7, #36	@ 0x24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b08b      	sub	sp, #44	@ 0x2c
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	089b      	lsrs	r3, r3, #2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	623b      	str	r3, [r7, #32]
 8008ffa:	e014      	b.n	8009026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	601a      	str	r2, [r3, #0]
    pDest++;
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	3301      	adds	r3, #1
 800900c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	3301      	adds	r3, #1
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	3301      	adds	r3, #1
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	3301      	adds	r3, #1
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	3301      	adds	r3, #1
 8009024:	623b      	str	r3, [r7, #32]
 8009026:	6a3a      	ldr	r2, [r7, #32]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	429a      	cmp	r2, r3
 800902c:	d3e6      	bcc.n	8008ffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800902e:	8bfb      	ldrh	r3, [r7, #30]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01e      	beq.n	8009072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800903e:	461a      	mov	r2, r3
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	6812      	ldr	r2, [r2, #0]
 8009046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	fa22 f303 	lsr.w	r3, r2, r3
 8009054:	b2da      	uxtb	r2, r3
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	701a      	strb	r2, [r3, #0]
      i++;
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	3301      	adds	r3, #1
 800905e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	3301      	adds	r3, #1
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009066:	8bfb      	ldrh	r3, [r7, #30]
 8009068:	3b01      	subs	r3, #1
 800906a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800906c:	8bfb      	ldrh	r3, [r7, #30]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1ea      	bne.n	8009048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009074:	4618      	mov	r0, r3
 8009076:	372c      	adds	r7, #44	@ 0x2c
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d12c      	bne.n	80090f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	db12      	blt.n	80090d4 <USB_EPSetStall+0x54>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00f      	beq.n	80090d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	0151      	lsls	r1, r2, #5
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	440a      	add	r2, r1
 80090ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	e02b      	b.n	800914e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	db12      	blt.n	800912e <USB_EPSetStall+0xae>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00f      	beq.n	800912e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	440a      	add	r2, r1
 8009124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009128:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800912c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	0151      	lsls	r1, r2, #5
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	440a      	add	r2, r1
 8009144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800914c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d128      	bne.n	80091ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009192:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009196:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	791b      	ldrb	r3, [r3, #4]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d003      	beq.n	80091a8 <USB_EPClearStall+0x4c>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	791b      	ldrb	r3, [r3, #4]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d138      	bne.n	800921a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e027      	b.n	800921a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d003      	beq.n	80091fa <USB_EPClearStall+0x9e>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	791b      	ldrb	r3, [r3, #4]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d10f      	bne.n	800921a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	440a      	add	r2, r1
 8009210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009218:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009246:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800924a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009262:	4313      	orrs	r3, r2
 8009264:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800928e:	f023 0303 	bic.w	r3, r3, #3
 8009292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092a2:	f023 0302 	bic.w	r3, r3, #2
 80092a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092d0:	f023 0303 	bic.w	r3, r3, #3
 80092d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4013      	ands	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009310:	68fb      	ldr	r3, [r7, #12]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	4013      	ands	r3, r2
 8009340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0c1b      	lsrs	r3, r3, #16
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	4013      	ands	r3, r2
 8009374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	b29b      	uxth	r3, r3
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009386:	b480      	push	{r7}
 8009388:	b085      	sub	sp, #20
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	4013      	ands	r3, r2
 80093b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093b4:	68bb      	ldr	r3, [r7, #8]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b087      	sub	sp, #28
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	01db      	lsls	r3, r3, #7
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4013      	ands	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009410:	68bb      	ldr	r3, [r7, #8]
}
 8009412:	4618      	mov	r0, r3
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	f003 0301 	and.w	r3, r3, #1
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009454:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009458:	f023 0307 	bic.w	r3, r3, #7
 800945c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800946c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	460b      	mov	r3, r1
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	333c      	adds	r3, #60	@ 0x3c
 8009496:	3304      	adds	r3, #4
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4a26      	ldr	r2, [pc, #152]	@ (8009538 <USB_EP0_OutStart+0xb8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d90a      	bls.n	80094ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094b4:	d101      	bne.n	80094ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e037      	b.n	800952a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c0:	461a      	mov	r2, r3
 80094c2:	2300      	movs	r3, #0
 80094c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e8:	f043 0318 	orr.w	r3, r3, #24
 80094ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009500:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d10f      	bne.n	8009528 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009522:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	4f54300a 	.word	0x4f54300a

0800953c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	4a13      	ldr	r2, [pc, #76]	@ (80095a0 <USB_CoreReset+0x64>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d901      	bls.n	800955a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e01b      	b.n	8009592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	daf2      	bge.n	8009548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f043 0201 	orr.w	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <USB_CoreReset+0x64>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d901      	bls.n	8009584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e006      	b.n	8009592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b01      	cmp	r3, #1
 800958e:	d0f0      	beq.n	8009572 <USB_CoreReset+0x36>

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	00030d40 	.word	0x00030d40

080095a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80095b4:	f002 fed0 	bl	800c358 <USBD_static_malloc>
 80095b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	32b0      	adds	r2, #176	@ 0xb0
 80095ca:	2100      	movs	r1, #0
 80095cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095d0:	2302      	movs	r3, #2
 80095d2:	e0d4      	b.n	800977e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095d8:	2100      	movs	r1, #0
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f003 ff96 	bl	800d50c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32b0      	adds	r2, #176	@ 0xb0
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32b0      	adds	r2, #176	@ 0xb0
 80095fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d138      	bne.n	800967e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800960c:	4b5e      	ldr	r3, [pc, #376]	@ (8009788 <USBD_CDC_Init+0x1e4>)
 800960e:	7819      	ldrb	r1, [r3, #0]
 8009610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009614:	2202      	movs	r2, #2
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f002 fd7b 	bl	800c112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800961c:	4b5a      	ldr	r3, [pc, #360]	@ (8009788 <USBD_CDC_Init+0x1e4>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 020f 	and.w	r2, r3, #15
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	3324      	adds	r3, #36	@ 0x24
 8009632:	2201      	movs	r2, #1
 8009634:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009636:	4b55      	ldr	r3, [pc, #340]	@ (800978c <USBD_CDC_Init+0x1e8>)
 8009638:	7819      	ldrb	r1, [r3, #0]
 800963a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800963e:	2202      	movs	r2, #2
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 fd66 	bl	800c112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009646:	4b51      	ldr	r3, [pc, #324]	@ (800978c <USBD_CDC_Init+0x1e8>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 020f 	and.w	r2, r3, #15
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800965e:	2201      	movs	r2, #1
 8009660:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009662:	4b4b      	ldr	r3, [pc, #300]	@ (8009790 <USBD_CDC_Init+0x1ec>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 020f 	and.w	r2, r3, #15
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	3326      	adds	r3, #38	@ 0x26
 8009678:	2210      	movs	r2, #16
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e035      	b.n	80096ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800967e:	4b42      	ldr	r3, [pc, #264]	@ (8009788 <USBD_CDC_Init+0x1e4>)
 8009680:	7819      	ldrb	r1, [r3, #0]
 8009682:	2340      	movs	r3, #64	@ 0x40
 8009684:	2202      	movs	r2, #2
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f002 fd43 	bl	800c112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800968c:	4b3e      	ldr	r3, [pc, #248]	@ (8009788 <USBD_CDC_Init+0x1e4>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	3324      	adds	r3, #36	@ 0x24
 80096a2:	2201      	movs	r2, #1
 80096a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096a6:	4b39      	ldr	r3, [pc, #228]	@ (800978c <USBD_CDC_Init+0x1e8>)
 80096a8:	7819      	ldrb	r1, [r3, #0]
 80096aa:	2340      	movs	r3, #64	@ 0x40
 80096ac:	2202      	movs	r2, #2
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f002 fd2f 	bl	800c112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096b4:	4b35      	ldr	r3, [pc, #212]	@ (800978c <USBD_CDC_Init+0x1e8>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 020f 	and.w	r2, r3, #15
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	440b      	add	r3, r1
 80096c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096cc:	2201      	movs	r2, #1
 80096ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096d0:	4b2f      	ldr	r3, [pc, #188]	@ (8009790 <USBD_CDC_Init+0x1ec>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	3326      	adds	r3, #38	@ 0x26
 80096e6:	2210      	movs	r2, #16
 80096e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096ea:	4b29      	ldr	r3, [pc, #164]	@ (8009790 <USBD_CDC_Init+0x1ec>)
 80096ec:	7819      	ldrb	r1, [r3, #0]
 80096ee:	2308      	movs	r3, #8
 80096f0:	2203      	movs	r2, #3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f002 fd0d 	bl	800c112 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80096f8:	4b25      	ldr	r3, [pc, #148]	@ (8009790 <USBD_CDC_Init+0x1ec>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	3324      	adds	r3, #36	@ 0x24
 800970e:	2201      	movs	r2, #1
 8009710:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	33b0      	adds	r3, #176	@ 0xb0
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009748:	2302      	movs	r3, #2
 800974a:	e018      	b.n	800977e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7c1b      	ldrb	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009754:	4b0d      	ldr	r3, [pc, #52]	@ (800978c <USBD_CDC_Init+0x1e8>)
 8009756:	7819      	ldrb	r1, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800975e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f002 fdc4 	bl	800c2f0 <USBD_LL_PrepareReceive>
 8009768:	e008      	b.n	800977c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800976a:	4b08      	ldr	r3, [pc, #32]	@ (800978c <USBD_CDC_Init+0x1e8>)
 800976c:	7819      	ldrb	r1, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009774:	2340      	movs	r3, #64	@ 0x40
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f002 fdba 	bl	800c2f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000093 	.word	0x20000093
 800978c:	20000094 	.word	0x20000094
 8009790:	20000095 	.word	0x20000095

08009794 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80097a0:	4b3a      	ldr	r3, [pc, #232]	@ (800988c <USBD_CDC_DeInit+0xf8>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f002 fcd9 	bl	800c15e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097ac:	4b37      	ldr	r3, [pc, #220]	@ (800988c <USBD_CDC_DeInit+0xf8>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 020f 	and.w	r2, r3, #15
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	440b      	add	r3, r1
 80097c0:	3324      	adds	r3, #36	@ 0x24
 80097c2:	2200      	movs	r2, #0
 80097c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097c6:	4b32      	ldr	r3, [pc, #200]	@ (8009890 <USBD_CDC_DeInit+0xfc>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 fcc6 	bl	800c15e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009890 <USBD_CDC_DeInit+0xfc>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	f003 020f 	and.w	r2, r3, #15
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097ea:	2200      	movs	r2, #0
 80097ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80097ee:	4b29      	ldr	r3, [pc, #164]	@ (8009894 <USBD_CDC_DeInit+0x100>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f002 fcb2 	bl	800c15e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80097fa:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <USBD_CDC_DeInit+0x100>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 020f 	and.w	r2, r3, #15
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	3324      	adds	r3, #36	@ 0x24
 8009810:	2200      	movs	r2, #0
 8009812:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009814:	4b1f      	ldr	r3, [pc, #124]	@ (8009894 <USBD_CDC_DeInit+0x100>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 020f 	and.w	r2, r3, #15
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	3326      	adds	r3, #38	@ 0x26
 800982a:	2200      	movs	r2, #0
 800982c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	32b0      	adds	r2, #176	@ 0xb0
 8009838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01f      	beq.n	8009880 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	33b0      	adds	r3, #176	@ 0xb0
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	32b0      	adds	r2, #176	@ 0xb0
 800985e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009862:	4618      	mov	r0, r3
 8009864:	f002 fd86 	bl	800c374 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32b0      	adds	r2, #176	@ 0xb0
 8009872:	2100      	movs	r1, #0
 8009874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000093 	.word	0x20000093
 8009890:	20000094 	.word	0x20000094
 8009894:	20000095 	.word	0x20000095

08009898 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	32b0      	adds	r2, #176	@ 0xb0
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e0bf      	b.n	8009a48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d050      	beq.n	8009976 <USBD_CDC_Setup+0xde>
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	f040 80af 	bne.w	8009a38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	88db      	ldrh	r3, [r3, #6]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03a      	beq.n	8009958 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da1b      	bge.n	8009924 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	33b0      	adds	r3, #176	@ 0xb0
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009902:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	88d2      	ldrh	r2, [r2, #6]
 8009908:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	88db      	ldrh	r3, [r3, #6]
 800990e:	2b07      	cmp	r3, #7
 8009910:	bf28      	it	cs
 8009912:	2307      	movcs	r3, #7
 8009914:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	89fa      	ldrh	r2, [r7, #14]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fd41 	bl	800b3a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009922:	e090      	b.n	8009a46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	785a      	ldrb	r2, [r3, #1]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	88db      	ldrh	r3, [r3, #6]
 8009932:	2b3f      	cmp	r3, #63	@ 0x3f
 8009934:	d803      	bhi.n	800993e <USBD_CDC_Setup+0xa6>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	e000      	b.n	8009940 <USBD_CDC_Setup+0xa8>
 800993e:	2240      	movs	r2, #64	@ 0x40
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009946:	6939      	ldr	r1, [r7, #16]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800994e:	461a      	mov	r2, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 fd53 	bl	800b3fc <USBD_CtlPrepareRx>
      break;
 8009956:	e076      	b.n	8009a46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	33b0      	adds	r3, #176	@ 0xb0
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	7850      	ldrb	r0, [r2, #1]
 800996e:	2200      	movs	r2, #0
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	4798      	blx	r3
      break;
 8009974:	e067      	b.n	8009a46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b0b      	cmp	r3, #11
 800997c:	d851      	bhi.n	8009a22 <USBD_CDC_Setup+0x18a>
 800997e:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <USBD_CDC_Setup+0xec>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099b5 	.word	0x080099b5
 8009988:	08009a31 	.word	0x08009a31
 800998c:	08009a23 	.word	0x08009a23
 8009990:	08009a23 	.word	0x08009a23
 8009994:	08009a23 	.word	0x08009a23
 8009998:	08009a23 	.word	0x08009a23
 800999c:	08009a23 	.word	0x08009a23
 80099a0:	08009a23 	.word	0x08009a23
 80099a4:	08009a23 	.word	0x08009a23
 80099a8:	08009a23 	.word	0x08009a23
 80099ac:	080099df 	.word	0x080099df
 80099b0:	08009a09 	.word	0x08009a09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d107      	bne.n	80099d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099c0:	f107 030a 	add.w	r3, r7, #10
 80099c4:	2202      	movs	r2, #2
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 fceb 	bl	800b3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ce:	e032      	b.n	8009a36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fc75 	bl	800b2c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	75fb      	strb	r3, [r7, #23]
          break;
 80099dc:	e02b      	b.n	8009a36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d107      	bne.n	80099fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099ea:	f107 030d 	add.w	r3, r7, #13
 80099ee:	2201      	movs	r2, #1
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fcd6 	bl	800b3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099f8:	e01d      	b.n	8009a36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 fc60 	bl	800b2c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a02:	2303      	movs	r3, #3
 8009a04:	75fb      	strb	r3, [r7, #23]
          break;
 8009a06:	e016      	b.n	8009a36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d00f      	beq.n	8009a34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fc53 	bl	800b2c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a20:	e008      	b.n	8009a34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 fc4c 	bl	800b2c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a2e:	e002      	b.n	8009a36 <USBD_CDC_Setup+0x19e>
          break;
 8009a30:	bf00      	nop
 8009a32:	e008      	b.n	8009a46 <USBD_CDC_Setup+0x1ae>
          break;
 8009a34:	bf00      	nop
      }
      break;
 8009a36:	e006      	b.n	8009a46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 fc41 	bl	800b2c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a40:	2303      	movs	r3, #3
 8009a42:	75fb      	strb	r3, [r7, #23]
      break;
 8009a44:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	32b0      	adds	r2, #176	@ 0xb0
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e065      	b.n	8009b46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	32b0      	adds	r2, #176	@ 0xb0
 8009a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	f003 020f 	and.w	r2, r3, #15
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3318      	adds	r3, #24
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d02f      	beq.n	8009b04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	f003 010f 	and.w	r1, r3, #15
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	440b      	add	r3, r1
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4403      	add	r3, r0
 8009acc:	3348      	adds	r3, #72	@ 0x48
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d112      	bne.n	8009b04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f003 020f 	and.w	r2, r3, #15
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	3318      	adds	r3, #24
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009af6:	78f9      	ldrb	r1, [r7, #3]
 8009af8:	2300      	movs	r3, #0
 8009afa:	2200      	movs	r2, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f002 fbd6 	bl	800c2ae <USBD_LL_Transmit>
 8009b02:	e01f      	b.n	8009b44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	33b0      	adds	r3, #176	@ 0xb0
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d010      	beq.n	8009b44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	33b0      	adds	r3, #176	@ 0xb0
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b40:	78fa      	ldrb	r2, [r7, #3]
 8009b42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	32b0      	adds	r2, #176	@ 0xb0
 8009b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	32b0      	adds	r2, #176	@ 0xb0
 8009b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e01a      	b.n	8009bb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 fbd4 	bl	800c332 <USBD_LL_GetRxDataSize>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	33b0      	adds	r3, #176	@ 0xb0
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	32b0      	adds	r2, #176	@ 0xb0
 8009bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e024      	b.n	8009c2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	33b0      	adds	r3, #176	@ 0xb0
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d019      	beq.n	8009c28 <USBD_CDC_EP0_RxReady+0x6a>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009bfa:	2bff      	cmp	r3, #255	@ 0xff
 8009bfc:	d014      	beq.n	8009c28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	33b0      	adds	r3, #176	@ 0xb0
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	22ff      	movs	r2, #255	@ 0xff
 8009c24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c3c:	2182      	movs	r1, #130	@ 0x82
 8009c3e:	4818      	ldr	r0, [pc, #96]	@ (8009ca0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c40:	f000 fd09 	bl	800a656 <USBD_GetEpDesc>
 8009c44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c46:	2101      	movs	r1, #1
 8009c48:	4815      	ldr	r0, [pc, #84]	@ (8009ca0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c4a:	f000 fd04 	bl	800a656 <USBD_GetEpDesc>
 8009c4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c50:	2181      	movs	r1, #129	@ 0x81
 8009c52:	4813      	ldr	r0, [pc, #76]	@ (8009ca0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c54:	f000 fcff 	bl	800a656 <USBD_GetEpDesc>
 8009c58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2210      	movs	r2, #16
 8009c64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c74:	711a      	strb	r2, [r3, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d006      	beq.n	8009c8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c88:	711a      	strb	r2, [r3, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2243      	movs	r2, #67	@ 0x43
 8009c92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c94:	4b02      	ldr	r3, [pc, #8]	@ (8009ca0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000050 	.word	0x20000050

08009ca4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cac:	2182      	movs	r1, #130	@ 0x82
 8009cae:	4818      	ldr	r0, [pc, #96]	@ (8009d10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cb0:	f000 fcd1 	bl	800a656 <USBD_GetEpDesc>
 8009cb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	4815      	ldr	r0, [pc, #84]	@ (8009d10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cba:	f000 fccc 	bl	800a656 <USBD_GetEpDesc>
 8009cbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cc0:	2181      	movs	r1, #129	@ 0x81
 8009cc2:	4813      	ldr	r0, [pc, #76]	@ (8009d10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cc4:	f000 fcc7 	bl	800a656 <USBD_GetEpDesc>
 8009cc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2210      	movs	r2, #16
 8009cd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d006      	beq.n	8009cea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	711a      	strb	r2, [r3, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f042 0202 	orr.w	r2, r2, #2
 8009ce8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d006      	beq.n	8009cfe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	711a      	strb	r2, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f042 0202 	orr.w	r2, r2, #2
 8009cfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2243      	movs	r2, #67	@ 0x43
 8009d02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000050 	.word	0x20000050

08009d14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d1c:	2182      	movs	r1, #130	@ 0x82
 8009d1e:	4818      	ldr	r0, [pc, #96]	@ (8009d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d20:	f000 fc99 	bl	800a656 <USBD_GetEpDesc>
 8009d24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d26:	2101      	movs	r1, #1
 8009d28:	4815      	ldr	r0, [pc, #84]	@ (8009d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d2a:	f000 fc94 	bl	800a656 <USBD_GetEpDesc>
 8009d2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d30:	2181      	movs	r1, #129	@ 0x81
 8009d32:	4813      	ldr	r0, [pc, #76]	@ (8009d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d34:	f000 fc8f 	bl	800a656 <USBD_GetEpDesc>
 8009d38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2210      	movs	r2, #16
 8009d44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d54:	711a      	strb	r2, [r3, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d68:	711a      	strb	r2, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2243      	movs	r2, #67	@ 0x43
 8009d72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000050 	.word	0x20000050

08009d84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	220a      	movs	r2, #10
 8009d90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d92:	4b03      	ldr	r3, [pc, #12]	@ (8009da0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	2000000c 	.word	0x2000000c

08009da4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e009      	b.n	8009dcc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	33b0      	adds	r3, #176	@ 0xb0
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	32b0      	adds	r2, #176	@ 0xb0
 8009dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e008      	b.n	8009e10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	32b0      	adds	r2, #176	@ 0xb0
 8009e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e004      	b.n	8009e4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	32b0      	adds	r2, #176	@ 0xb0
 8009e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	32b0      	adds	r2, #176	@ 0xb0
 8009e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e018      	b.n	8009eb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	7c1b      	ldrb	r3, [r3, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec0 <USBD_CDC_ReceivePacket+0x68>)
 8009e90:	7819      	ldrb	r1, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f002 fa27 	bl	800c2f0 <USBD_LL_PrepareReceive>
 8009ea2:	e008      	b.n	8009eb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ea4:	4b06      	ldr	r3, [pc, #24]	@ (8009ec0 <USBD_CDC_ReceivePacket+0x68>)
 8009ea6:	7819      	ldrb	r1, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009eae:	2340      	movs	r3, #64	@ 0x40
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f002 fa1d 	bl	800c2f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000094 	.word	0x20000094

08009ec4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e01f      	b.n	8009f1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	79fa      	ldrb	r2, [r7, #7]
 8009f0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f002 f897 	bl	800c044 <USBD_LL_Init>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e025      	b.n	8009f88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	@ 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00f      	beq.n	8009f78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	32ae      	adds	r2, #174	@ 0xae
 8009f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f68:	f107 020e 	add.w	r2, r7, #14
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	4602      	mov	r2, r0
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f002 f89f 	bl	800c0dc <USBD_LL_Start>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d009      	beq.n	8009fec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	4611      	mov	r1, r2
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	4798      	blx	r3
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f001 f906 	bl	800b24e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a050:	461a      	mov	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a05e:	f003 031f 	and.w	r3, r3, #31
 800a062:	2b02      	cmp	r3, #2
 800a064:	d01a      	beq.n	800a09c <USBD_LL_SetupStage+0x72>
 800a066:	2b02      	cmp	r3, #2
 800a068:	d822      	bhi.n	800a0b0 <USBD_LL_SetupStage+0x86>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <USBD_LL_SetupStage+0x4a>
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d00a      	beq.n	800a088 <USBD_LL_SetupStage+0x5e>
 800a072:	e01d      	b.n	800a0b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fb5d 	bl	800a73c <USBD_StdDevReq>
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
      break;
 800a086:	e020      	b.n	800a0ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fbc5 	bl	800a820 <USBD_StdItfReq>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
      break;
 800a09a:	e016      	b.n	800a0ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fc27 	bl	800a8f8 <USBD_StdEPReq>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ae:	e00c      	b.n	800a0ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f002 f86c 	bl	800c19c <USBD_LL_StallEP>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c8:	bf00      	nop
  }

  return ret;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a0e6:	7afb      	ldrb	r3, [r7, #11]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d16e      	bne.n	800a1ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a0f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	f040 8098 	bne.w	800a230 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d913      	bls.n	800a134 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	1ad2      	subs	r2, r2, r3
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	4293      	cmp	r3, r2
 800a124:	bf28      	it	cs
 800a126:	4613      	movcs	r3, r2
 800a128:	461a      	mov	r2, r3
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f001 f982 	bl	800b436 <USBD_CtlContinueRx>
 800a132:	e07d      	b.n	800a230 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a13a:	f003 031f 	and.w	r3, r3, #31
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d014      	beq.n	800a16c <USBD_LL_DataOutStage+0x98>
 800a142:	2b02      	cmp	r3, #2
 800a144:	d81d      	bhi.n	800a182 <USBD_LL_DataOutStage+0xae>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <USBD_LL_DataOutStage+0x7c>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d003      	beq.n	800a156 <USBD_LL_DataOutStage+0x82>
 800a14e:	e018      	b.n	800a182 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	75bb      	strb	r3, [r7, #22]
            break;
 800a154:	e018      	b.n	800a188 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4619      	mov	r1, r3
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fa5e 	bl	800a622 <USBD_CoreFindIF>
 800a166:	4603      	mov	r3, r0
 800a168:	75bb      	strb	r3, [r7, #22]
            break;
 800a16a:	e00d      	b.n	800a188 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4619      	mov	r1, r3
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 fa60 	bl	800a63c <USBD_CoreFindEP>
 800a17c:	4603      	mov	r3, r0
 800a17e:	75bb      	strb	r3, [r7, #22]
            break;
 800a180:	e002      	b.n	800a188 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	75bb      	strb	r3, [r7, #22]
            break;
 800a186:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a188:	7dbb      	ldrb	r3, [r7, #22]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d119      	bne.n	800a1c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b03      	cmp	r3, #3
 800a198:	d113      	bne.n	800a1c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a19a:	7dba      	ldrb	r2, [r7, #22]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	32ae      	adds	r2, #174	@ 0xae
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a1aa:	7dba      	ldrb	r2, [r7, #22]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a1b2:	7dba      	ldrb	r2, [r7, #22]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	32ae      	adds	r2, #174	@ 0xae
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f001 f948 	bl	800b458 <USBD_CtlSendStatus>
 800a1c8:	e032      	b.n	800a230 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fa31 	bl	800a63c <USBD_CoreFindEP>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1de:	7dbb      	ldrb	r3, [r7, #22]
 800a1e0:	2bff      	cmp	r3, #255	@ 0xff
 800a1e2:	d025      	beq.n	800a230 <USBD_LL_DataOutStage+0x15c>
 800a1e4:	7dbb      	ldrb	r3, [r7, #22]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d122      	bne.n	800a230 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d117      	bne.n	800a226 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1f6:	7dba      	ldrb	r2, [r7, #22]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	32ae      	adds	r2, #174	@ 0xae
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00f      	beq.n	800a226 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a206:	7dba      	ldrb	r2, [r7, #22]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a20e:	7dba      	ldrb	r2, [r7, #22]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	32ae      	adds	r2, #174	@ 0xae
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	7afa      	ldrb	r2, [r7, #11]
 800a21c:	4611      	mov	r1, r2
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	4798      	blx	r3
 800a222:	4603      	mov	r3, r0
 800a224:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	e000      	b.n	800a232 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b086      	sub	sp, #24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	460b      	mov	r3, r1
 800a244:	607a      	str	r2, [r7, #4]
 800a246:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d16f      	bne.n	800a32e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3314      	adds	r3, #20
 800a252:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d15a      	bne.n	800a314 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	429a      	cmp	r2, r3
 800a268:	d914      	bls.n	800a294 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	461a      	mov	r2, r3
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f001 f8aa 	bl	800b3da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a286:	2300      	movs	r3, #0
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f002 f82f 	bl	800c2f0 <USBD_LL_PrepareReceive>
 800a292:	e03f      	b.n	800a314 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	68da      	ldr	r2, [r3, #12]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d11c      	bne.n	800a2da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d316      	bcc.n	800a2da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d20f      	bcs.n	800a2da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2100      	movs	r1, #0
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f001 f88b 	bl	800b3da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f002 f80c 	bl	800c2f0 <USBD_LL_PrepareReceive>
 800a2d8:	e01c      	b.n	800a314 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d10f      	bne.n	800a306 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d009      	beq.n	800a306 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a306:	2180      	movs	r1, #128	@ 0x80
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f001 ff47 	bl	800c19c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f001 f8b5 	bl	800b47e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d03a      	beq.n	800a394 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fe42 	bl	8009fa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a32c:	e032      	b.n	800a394 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a334:	b2db      	uxtb	r3, r3
 800a336:	4619      	mov	r1, r3
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f97f 	bl	800a63c <USBD_CoreFindEP>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	2bff      	cmp	r3, #255	@ 0xff
 800a346:	d025      	beq.n	800a394 <USBD_LL_DataInStage+0x15a>
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d122      	bne.n	800a394 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d11c      	bne.n	800a394 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a35a:	7dfa      	ldrb	r2, [r7, #23]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	32ae      	adds	r2, #174	@ 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d014      	beq.n	800a394 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a36a:	7dfa      	ldrb	r2, [r7, #23]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a372:	7dfa      	ldrb	r2, [r7, #23]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	32ae      	adds	r2, #174	@ 0xae
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	7afa      	ldrb	r2, [r7, #11]
 800a380:	4611      	mov	r1, r2
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	4798      	blx	r3
 800a386:	4603      	mov	r3, r0
 800a388:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a390:	7dbb      	ldrb	r3, [r7, #22]
 800a392:	e000      	b.n	800a396 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d014      	beq.n	800a404 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00e      	beq.n	800a404 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6852      	ldr	r2, [r2, #4]
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a400:	2303      	movs	r3, #3
 800a402:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a404:	2340      	movs	r3, #64	@ 0x40
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f001 fe81 	bl	800c112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2240      	movs	r2, #64	@ 0x40
 800a41c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a420:	2340      	movs	r3, #64	@ 0x40
 800a422:	2200      	movs	r2, #0
 800a424:	2180      	movs	r1, #128	@ 0x80
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 fe73 	bl	800c112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2240      	movs	r2, #64	@ 0x40
 800a436:	621a      	str	r2, [r3, #32]

  return ret;
 800a438:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a470:	b2da      	uxtb	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2204      	movs	r2, #4
 800a47c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d106      	bne.n	800a4b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d110      	bne.n	800a4f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d005      	beq.n	800a4f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	32ae      	adds	r2, #174	@ 0xae
 800a514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e01c      	b.n	800a55a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d115      	bne.n	800a558 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	32ae      	adds	r2, #174	@ 0xae
 800a536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	32ae      	adds	r2, #174	@ 0xae
 800a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	32ae      	adds	r2, #174	@ 0xae
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	e01c      	b.n	800a5be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d115      	bne.n	800a5bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	32ae      	adds	r2, #174	@ 0xae
 800a59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00b      	beq.n	800a5bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32ae      	adds	r2, #174	@ 0xae
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b4:	78fa      	ldrb	r2, [r7, #3]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00e      	beq.n	800a618 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6852      	ldr	r2, [r2, #4]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	4611      	mov	r1, r2
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a614:	2303      	movs	r3, #3
 800a616:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a62e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a648:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b086      	sub	sp, #24
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	460b      	mov	r3, r1
 800a660:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	885b      	ldrh	r3, [r3, #2]
 800a672:	b29b      	uxth	r3, r3
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	7812      	ldrb	r2, [r2, #0]
 800a678:	4293      	cmp	r3, r2
 800a67a:	d91f      	bls.n	800a6bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a682:	e013      	b.n	800a6ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a684:	f107 030a 	add.w	r3, r7, #10
 800a688:	4619      	mov	r1, r3
 800a68a:	6978      	ldr	r0, [r7, #20]
 800a68c:	f000 f81b 	bl	800a6c6 <USBD_GetNextDesc>
 800a690:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	2b05      	cmp	r3, #5
 800a698:	d108      	bne.n	800a6ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	789b      	ldrb	r3, [r3, #2]
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d008      	beq.n	800a6ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	885b      	ldrh	r3, [r3, #2]
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d8e5      	bhi.n	800a684 <USBD_GetEpDesc+0x2e>
 800a6b8:	e000      	b.n	800a6bc <USBD_GetEpDesc+0x66>
          break;
 800a6ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a6bc:	693b      	ldr	r3, [r7, #16]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	7812      	ldrb	r2, [r2, #0]
 800a6dc:	4413      	add	r3, r2
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b087      	sub	sp, #28
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	3301      	adds	r3, #1
 800a714:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a71c:	8a3b      	ldrh	r3, [r7, #16]
 800a71e:	021b      	lsls	r3, r3, #8
 800a720:	b21a      	sxth	r2, r3
 800a722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a726:	4313      	orrs	r3, r2
 800a728:	b21b      	sxth	r3, r3
 800a72a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a72c:	89fb      	ldrh	r3, [r7, #14]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a752:	2b40      	cmp	r3, #64	@ 0x40
 800a754:	d005      	beq.n	800a762 <USBD_StdDevReq+0x26>
 800a756:	2b40      	cmp	r3, #64	@ 0x40
 800a758:	d857      	bhi.n	800a80a <USBD_StdDevReq+0xce>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00f      	beq.n	800a77e <USBD_StdDevReq+0x42>
 800a75e:	2b20      	cmp	r3, #32
 800a760:	d153      	bne.n	800a80a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	32ae      	adds	r2, #174	@ 0xae
 800a76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
      break;
 800a77c:	e04a      	b.n	800a814 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b09      	cmp	r3, #9
 800a784:	d83b      	bhi.n	800a7fe <USBD_StdDevReq+0xc2>
 800a786:	a201      	add	r2, pc, #4	@ (adr r2, 800a78c <USBD_StdDevReq+0x50>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a7e1 	.word	0x0800a7e1
 800a790:	0800a7f5 	.word	0x0800a7f5
 800a794:	0800a7ff 	.word	0x0800a7ff
 800a798:	0800a7eb 	.word	0x0800a7eb
 800a79c:	0800a7ff 	.word	0x0800a7ff
 800a7a0:	0800a7bf 	.word	0x0800a7bf
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7ff 	.word	0x0800a7ff
 800a7ac:	0800a7d7 	.word	0x0800a7d7
 800a7b0:	0800a7c9 	.word	0x0800a7c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa3c 	bl	800ac34 <USBD_GetDescriptor>
          break;
 800a7bc:	e024      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fba1 	bl	800af08 <USBD_SetAddress>
          break;
 800a7c6:	e01f      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fbe0 	bl	800af90 <USBD_SetConfig>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
          break;
 800a7d4:	e018      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fc83 	bl	800b0e4 <USBD_GetConfig>
          break;
 800a7de:	e013      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fcb4 	bl	800b150 <USBD_GetStatus>
          break;
 800a7e8:	e00e      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fce3 	bl	800b1b8 <USBD_SetFeature>
          break;
 800a7f2:	e009      	b.n	800a808 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fd07 	bl	800b20a <USBD_ClrFeature>
          break;
 800a7fc:	e004      	b.n	800a808 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fd5e 	bl	800b2c2 <USBD_CtlError>
          break;
 800a806:	bf00      	nop
      }
      break;
 800a808:	e004      	b.n	800a814 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fd58 	bl	800b2c2 <USBD_CtlError>
      break;
 800a812:	bf00      	nop
  }

  return ret;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop

0800a820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a836:	2b40      	cmp	r3, #64	@ 0x40
 800a838:	d005      	beq.n	800a846 <USBD_StdItfReq+0x26>
 800a83a:	2b40      	cmp	r3, #64	@ 0x40
 800a83c:	d852      	bhi.n	800a8e4 <USBD_StdItfReq+0xc4>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <USBD_StdItfReq+0x26>
 800a842:	2b20      	cmp	r3, #32
 800a844:	d14e      	bne.n	800a8e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	3b01      	subs	r3, #1
 800a850:	2b02      	cmp	r3, #2
 800a852:	d840      	bhi.n	800a8d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	889b      	ldrh	r3, [r3, #4]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d836      	bhi.n	800a8cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fedb 	bl	800a622 <USBD_CoreFindIF>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2bff      	cmp	r3, #255	@ 0xff
 800a874:	d01d      	beq.n	800a8b2 <USBD_StdItfReq+0x92>
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d11a      	bne.n	800a8b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a87c:	7bba      	ldrb	r2, [r7, #14]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	32ae      	adds	r2, #174	@ 0xae
 800a882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a88c:	7bba      	ldrb	r2, [r7, #14]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a894:	7bba      	ldrb	r2, [r7, #14]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32ae      	adds	r2, #174	@ 0xae
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	4798      	blx	r3
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8aa:	e004      	b.n	800a8b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8b0:	e001      	b.n	800a8b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d110      	bne.n	800a8e0 <USBD_StdItfReq+0xc0>
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10d      	bne.n	800a8e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fdc7 	bl	800b458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8ca:	e009      	b.n	800a8e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fcf7 	bl	800b2c2 <USBD_CtlError>
          break;
 800a8d4:	e004      	b.n	800a8e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fcf2 	bl	800b2c2 <USBD_CtlError>
          break;
 800a8de:	e000      	b.n	800a8e2 <USBD_StdItfReq+0xc2>
          break;
 800a8e0:	bf00      	nop
      }
      break;
 800a8e2:	e004      	b.n	800a8ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fceb 	bl	800b2c2 <USBD_CtlError>
      break;
 800a8ec:	bf00      	nop
  }

  return ret;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	889b      	ldrh	r3, [r3, #4]
 800a90a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a914:	2b40      	cmp	r3, #64	@ 0x40
 800a916:	d007      	beq.n	800a928 <USBD_StdEPReq+0x30>
 800a918:	2b40      	cmp	r3, #64	@ 0x40
 800a91a:	f200 817f 	bhi.w	800ac1c <USBD_StdEPReq+0x324>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d02a      	beq.n	800a978 <USBD_StdEPReq+0x80>
 800a922:	2b20      	cmp	r3, #32
 800a924:	f040 817a 	bne.w	800ac1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fe85 	bl	800a63c <USBD_CoreFindEP>
 800a932:	4603      	mov	r3, r0
 800a934:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a936:	7b7b      	ldrb	r3, [r7, #13]
 800a938:	2bff      	cmp	r3, #255	@ 0xff
 800a93a:	f000 8174 	beq.w	800ac26 <USBD_StdEPReq+0x32e>
 800a93e:	7b7b      	ldrb	r3, [r7, #13]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f040 8170 	bne.w	800ac26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a946:	7b7a      	ldrb	r2, [r7, #13]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a94e:	7b7a      	ldrb	r2, [r7, #13]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32ae      	adds	r2, #174	@ 0xae
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 8163 	beq.w	800ac26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a960:	7b7a      	ldrb	r2, [r7, #13]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	32ae      	adds	r2, #174	@ 0xae
 800a966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a976:	e156      	b.n	800ac26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d008      	beq.n	800a992 <USBD_StdEPReq+0x9a>
 800a980:	2b03      	cmp	r3, #3
 800a982:	f300 8145 	bgt.w	800ac10 <USBD_StdEPReq+0x318>
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 809b 	beq.w	800aac2 <USBD_StdEPReq+0x1ca>
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d03c      	beq.n	800aa0a <USBD_StdEPReq+0x112>
 800a990:	e13e      	b.n	800ac10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d002      	beq.n	800a9a4 <USBD_StdEPReq+0xac>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d016      	beq.n	800a9d0 <USBD_StdEPReq+0xd8>
 800a9a2:	e02c      	b.n	800a9fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <USBD_StdEPReq+0xce>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	@ 0x80
 800a9ae:	d00a      	beq.n	800a9c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fbf1 	bl	800c19c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ba:	2180      	movs	r1, #128	@ 0x80
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 fbed 	bl	800c19c <USBD_LL_StallEP>
 800a9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c4:	e020      	b.n	800aa08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc7a 	bl	800b2c2 <USBD_CtlError>
              break;
 800a9ce:	e01b      	b.n	800aa08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10e      	bne.n	800a9f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <USBD_StdEPReq+0xfe>
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b80      	cmp	r3, #128	@ 0x80
 800a9e2:	d008      	beq.n	800a9f6 <USBD_StdEPReq+0xfe>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d104      	bne.n	800a9f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 fbd3 	bl	800c19c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fd2e 	bl	800b458 <USBD_CtlSendStatus>

              break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc5e 	bl	800b2c2 <USBD_CtlError>
              break;
 800aa06:	bf00      	nop
          }
          break;
 800aa08:	e107      	b.n	800ac1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d002      	beq.n	800aa1c <USBD_StdEPReq+0x124>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d016      	beq.n	800aa48 <USBD_StdEPReq+0x150>
 800aa1a:	e04b      	b.n	800aab4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00d      	beq.n	800aa3e <USBD_StdEPReq+0x146>
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b80      	cmp	r3, #128	@ 0x80
 800aa26:	d00a      	beq.n	800aa3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 fbb5 	bl	800c19c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa32:	2180      	movs	r1, #128	@ 0x80
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fbb1 	bl	800c19c <USBD_LL_StallEP>
 800aa3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa3c:	e040      	b.n	800aac0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc3e 	bl	800b2c2 <USBD_CtlError>
              break;
 800aa46:	e03b      	b.n	800aac0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d136      	bne.n	800aabe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 fbbb 	bl	800c1da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fcf7 	bl	800b458 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fde4 	bl	800a63c <USBD_CoreFindEP>
 800aa74:	4603      	mov	r3, r0
 800aa76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa78:	7b7b      	ldrb	r3, [r7, #13]
 800aa7a:	2bff      	cmp	r3, #255	@ 0xff
 800aa7c:	d01f      	beq.n	800aabe <USBD_StdEPReq+0x1c6>
 800aa7e:	7b7b      	ldrb	r3, [r7, #13]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11c      	bne.n	800aabe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa84:	7b7a      	ldrb	r2, [r7, #13]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa8c:	7b7a      	ldrb	r2, [r7, #13]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	@ 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d010      	beq.n	800aabe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa9c:	7b7a      	ldrb	r2, [r7, #13]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	32ae      	adds	r2, #174	@ 0xae
 800aaa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
 800aaae:	4603      	mov	r3, r0
 800aab0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aab2:	e004      	b.n	800aabe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fc03 	bl	800b2c2 <USBD_CtlError>
              break;
 800aabc:	e000      	b.n	800aac0 <USBD_StdEPReq+0x1c8>
              break;
 800aabe:	bf00      	nop
          }
          break;
 800aac0:	e0ab      	b.n	800ac1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d002      	beq.n	800aad4 <USBD_StdEPReq+0x1dc>
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d032      	beq.n	800ab38 <USBD_StdEPReq+0x240>
 800aad2:	e097      	b.n	800ac04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d007      	beq.n	800aaea <USBD_StdEPReq+0x1f2>
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b80      	cmp	r3, #128	@ 0x80
 800aade:	d004      	beq.n	800aaea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fbed 	bl	800b2c2 <USBD_CtlError>
                break;
 800aae8:	e091      	b.n	800ac0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	da0b      	bge.n	800ab0a <USBD_StdEPReq+0x212>
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	3310      	adds	r3, #16
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	4413      	add	r3, r2
 800ab06:	3304      	adds	r3, #4
 800ab08:	e00b      	b.n	800ab22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	4413      	add	r3, r2
 800ab20:	3304      	adds	r3, #4
 800ab22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fc37 	bl	800b3a4 <USBD_CtlSendData>
              break;
 800ab36:	e06a      	b.n	800ac0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da11      	bge.n	800ab64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	f003 020f 	and.w	r2, r3, #15
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	440b      	add	r3, r1
 800ab52:	3324      	adds	r3, #36	@ 0x24
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d117      	bne.n	800ab8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fbb0 	bl	800b2c2 <USBD_CtlError>
                  break;
 800ab62:	e054      	b.n	800ac0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	f003 020f 	and.w	r2, r3, #15
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fb9d 	bl	800b2c2 <USBD_CtlError>
                  break;
 800ab88:	e041      	b.n	800ac0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	da0b      	bge.n	800abaa <USBD_StdEPReq+0x2b2>
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab98:	4613      	mov	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	3310      	adds	r3, #16
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	4413      	add	r3, r2
 800aba6:	3304      	adds	r3, #4
 800aba8:	e00b      	b.n	800abc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	3304      	adds	r3, #4
 800abc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <USBD_StdEPReq+0x2d8>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b80      	cmp	r3, #128	@ 0x80
 800abce:	d103      	bne.n	800abd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e00e      	b.n	800abf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 fb1b 	bl	800c218 <USBD_LL_IsStallEP>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d003      	beq.n	800abf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2201      	movs	r2, #1
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	e002      	b.n	800abf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2202      	movs	r2, #2
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fbd1 	bl	800b3a4 <USBD_CtlSendData>
              break;
 800ac02:	e004      	b.n	800ac0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fb5b 	bl	800b2c2 <USBD_CtlError>
              break;
 800ac0c:	bf00      	nop
          }
          break;
 800ac0e:	e004      	b.n	800ac1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fb55 	bl	800b2c2 <USBD_CtlError>
          break;
 800ac18:	bf00      	nop
      }
      break;
 800ac1a:	e005      	b.n	800ac28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fb4f 	bl	800b2c2 <USBD_CtlError>
      break;
 800ac24:	e000      	b.n	800ac28 <USBD_StdEPReq+0x330>
      break;
 800ac26:	bf00      	nop
  }

  return ret;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	885b      	ldrh	r3, [r3, #2]
 800ac4e:	0a1b      	lsrs	r3, r3, #8
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	2b06      	cmp	r3, #6
 800ac56:	f200 8128 	bhi.w	800aeaa <USBD_GetDescriptor+0x276>
 800ac5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac60 <USBD_GetDescriptor+0x2c>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac95 	.word	0x0800ac95
 800ac68:	0800acd5 	.word	0x0800acd5
 800ac6c:	0800aeab 	.word	0x0800aeab
 800ac70:	0800aeab 	.word	0x0800aeab
 800ac74:	0800ae4b 	.word	0x0800ae4b
 800ac78:	0800ae77 	.word	0x0800ae77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	7c12      	ldrb	r2, [r2, #16]
 800ac88:	f107 0108 	add.w	r1, r7, #8
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4798      	blx	r3
 800ac90:	60f8      	str	r0, [r7, #12]
      break;
 800ac92:	e112      	b.n	800aeba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	7c1b      	ldrb	r3, [r3, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10d      	bne.n	800acb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca4:	f107 0208 	add.w	r2, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3301      	adds	r3, #1
 800acb2:	2202      	movs	r2, #2
 800acb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acb6:	e100      	b.n	800aeba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc0:	f107 0208 	add.w	r2, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	2202      	movs	r2, #2
 800acd0:	701a      	strb	r2, [r3, #0]
      break;
 800acd2:	e0f2      	b.n	800aeba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	885b      	ldrh	r3, [r3, #2]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b05      	cmp	r3, #5
 800acdc:	f200 80ac 	bhi.w	800ae38 <USBD_GetDescriptor+0x204>
 800ace0:	a201      	add	r2, pc, #4	@ (adr r2, 800ace8 <USBD_GetDescriptor+0xb4>)
 800ace2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace6:	bf00      	nop
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad69 	.word	0x0800ad69
 800acf4:	0800ad9d 	.word	0x0800ad9d
 800acf8:	0800add1 	.word	0x0800add1
 800acfc:	0800ae05 	.word	0x0800ae05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad22:	e091      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 facb 	bl	800b2c2 <USBD_CtlError>
            err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
          break;
 800ad32:	e089      	b.n	800ae48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	7c12      	ldrb	r2, [r2, #16]
 800ad4c:	f107 0108 	add.w	r1, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad56:	e077      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fab1 	bl	800b2c2 <USBD_CtlError>
            err++;
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	3301      	adds	r3, #1
 800ad64:	72fb      	strb	r3, [r7, #11]
          break;
 800ad66:	e06f      	b.n	800ae48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	7c12      	ldrb	r2, [r2, #16]
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8a:	e05d      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa97 	bl	800b2c2 <USBD_CtlError>
            err++;
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	3301      	adds	r3, #1
 800ad98:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9a:	e055      	b.n	800ae48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	7c12      	ldrb	r2, [r2, #16]
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	4610      	mov	r0, r2
 800adba:	4798      	blx	r3
 800adbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adbe:	e043      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa7d 	bl	800b2c2 <USBD_CtlError>
            err++;
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	3301      	adds	r3, #1
 800adcc:	72fb      	strb	r3, [r7, #11]
          break;
 800adce:	e03b      	b.n	800ae48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	7c12      	ldrb	r2, [r2, #16]
 800ade8:	f107 0108 	add.w	r1, r7, #8
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
 800adf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adf2:	e029      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa63 	bl	800b2c2 <USBD_CtlError>
            err++;
 800adfc:	7afb      	ldrb	r3, [r7, #11]
 800adfe:	3301      	adds	r3, #1
 800ae00:	72fb      	strb	r3, [r7, #11]
          break;
 800ae02:	e021      	b.n	800ae48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	7c12      	ldrb	r2, [r2, #16]
 800ae1c:	f107 0108 	add.w	r1, r7, #8
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae26:	e00f      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fa49 	bl	800b2c2 <USBD_CtlError>
            err++;
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	3301      	adds	r3, #1
 800ae34:	72fb      	strb	r3, [r7, #11]
          break;
 800ae36:	e007      	b.n	800ae48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fa41 	bl	800b2c2 <USBD_CtlError>
          err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae46:	bf00      	nop
      }
      break;
 800ae48:	e037      	b.n	800aeba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	7c1b      	ldrb	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5a:	f107 0208 	add.w	r2, r7, #8
 800ae5e:	4610      	mov	r0, r2
 800ae60:	4798      	blx	r3
 800ae62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae64:	e029      	b.n	800aeba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fa2a 	bl	800b2c2 <USBD_CtlError>
        err++;
 800ae6e:	7afb      	ldrb	r3, [r7, #11]
 800ae70:	3301      	adds	r3, #1
 800ae72:	72fb      	strb	r3, [r7, #11]
      break;
 800ae74:	e021      	b.n	800aeba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7c1b      	ldrb	r3, [r3, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10d      	bne.n	800ae9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae86:	f107 0208 	add.w	r2, r7, #8
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	4798      	blx	r3
 800ae8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3301      	adds	r3, #1
 800ae94:	2207      	movs	r2, #7
 800ae96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae98:	e00f      	b.n	800aeba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa10 	bl	800b2c2 <USBD_CtlError>
        err++;
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	3301      	adds	r3, #1
 800aea6:	72fb      	strb	r3, [r7, #11]
      break;
 800aea8:	e007      	b.n	800aeba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fa08 	bl	800b2c2 <USBD_CtlError>
      err++;
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	72fb      	strb	r3, [r7, #11]
      break;
 800aeb8:	bf00      	nop
  }

  if (err != 0U)
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d11e      	bne.n	800aefe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	88db      	ldrh	r3, [r3, #6]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d016      	beq.n	800aef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aec8:	893b      	ldrh	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00e      	beq.n	800aeec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	88da      	ldrh	r2, [r3, #6]
 800aed2:	893b      	ldrh	r3, [r7, #8]
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bf28      	it	cs
 800aed8:	4613      	movcs	r3, r2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aede:	893b      	ldrh	r3, [r7, #8]
 800aee0:	461a      	mov	r2, r3
 800aee2:	68f9      	ldr	r1, [r7, #12]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fa5d 	bl	800b3a4 <USBD_CtlSendData>
 800aeea:	e009      	b.n	800af00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f9e7 	bl	800b2c2 <USBD_CtlError>
 800aef4:	e004      	b.n	800af00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 faae 	bl	800b458 <USBD_CtlSendStatus>
 800aefc:	e000      	b.n	800af00 <USBD_GetDescriptor+0x2cc>
    return;
 800aefe:	bf00      	nop
  }
}
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop

0800af08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	889b      	ldrh	r3, [r3, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d131      	bne.n	800af7e <USBD_SetAddress+0x76>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	88db      	ldrh	r3, [r3, #6]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d12d      	bne.n	800af7e <USBD_SetAddress+0x76>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	885b      	ldrh	r3, [r3, #2]
 800af26:	2b7f      	cmp	r3, #127	@ 0x7f
 800af28:	d829      	bhi.n	800af7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d104      	bne.n	800af4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f9bc 	bl	800b2c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4a:	e01d      	b.n	800af88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	7bfa      	ldrb	r2, [r7, #15]
 800af50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f989 	bl	800c270 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fa7a 	bl	800b458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d004      	beq.n	800af74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2202      	movs	r2, #2
 800af6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af72:	e009      	b.n	800af88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7c:	e004      	b.n	800af88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f99e 	bl	800b2c2 <USBD_CtlError>
  }
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	885b      	ldrh	r3, [r3, #2]
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	4b4e      	ldr	r3, [pc, #312]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800afa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afa8:	4b4d      	ldr	r3, [pc, #308]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d905      	bls.n	800afbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f985 	bl	800b2c2 <USBD_CtlError>
    return USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	e08c      	b.n	800b0d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d002      	beq.n	800afce <USBD_SetConfig+0x3e>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d029      	beq.n	800b020 <USBD_SetConfig+0x90>
 800afcc:	e075      	b.n	800b0ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afce:	4b44      	ldr	r3, [pc, #272]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d020      	beq.n	800b018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800afd6:	4b42      	ldr	r3, [pc, #264]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afe0:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7fe ffe9 	bl	8009fbe <USBD_SetClassConfig>
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d008      	beq.n	800b008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f962 	bl	800b2c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2202      	movs	r2, #2
 800b002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b006:	e065      	b.n	800b0d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa25 	bl	800b458 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2203      	movs	r2, #3
 800b012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b016:	e05d      	b.n	800b0d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fa1d 	bl	800b458 <USBD_CtlSendStatus>
      break;
 800b01e:	e059      	b.n	800b0d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b020:	4b2f      	ldr	r3, [pc, #188]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d112      	bne.n	800b04e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b030:	4b2b      	ldr	r3, [pc, #172]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b03a:	4b29      	ldr	r3, [pc, #164]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7fe ffd8 	bl	8009ff6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fa06 	bl	800b458 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b04c:	e042      	b.n	800b0d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b04e:	4b24      	ldr	r3, [pc, #144]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d02a      	beq.n	800b0b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7fe ffc6 	bl	8009ff6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b06a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b074:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fe ff9f 	bl	8009fbe <USBD_SetClassConfig>
 800b080:	4603      	mov	r3, r0
 800b082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00f      	beq.n	800b0aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f918 	bl	800b2c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7fe ffab 	bl	8009ff6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0a8:	e014      	b.n	800b0d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f9d4 	bl	800b458 <USBD_CtlSendStatus>
      break;
 800b0b0:	e010      	b.n	800b0d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f9d0 	bl	800b458 <USBD_CtlSendStatus>
      break;
 800b0b8:	e00c      	b.n	800b0d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f900 	bl	800b2c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0c2:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <USBD_SetConfig+0x150>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fe ff94 	bl	8009ff6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d2:	bf00      	nop
  }

  return ret;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000950 	.word	0x20000950

0800b0e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	88db      	ldrh	r3, [r3, #6]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d004      	beq.n	800b100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f8e2 	bl	800b2c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0fe:	e023      	b.n	800b148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	dc02      	bgt.n	800b112 <USBD_GetConfig+0x2e>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dc03      	bgt.n	800b118 <USBD_GetConfig+0x34>
 800b110:	e015      	b.n	800b13e <USBD_GetConfig+0x5a>
 800b112:	2b03      	cmp	r3, #3
 800b114:	d00b      	beq.n	800b12e <USBD_GetConfig+0x4a>
 800b116:	e012      	b.n	800b13e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3308      	adds	r3, #8
 800b122:	2201      	movs	r2, #1
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f93c 	bl	800b3a4 <USBD_CtlSendData>
        break;
 800b12c:	e00c      	b.n	800b148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3304      	adds	r3, #4
 800b132:	2201      	movs	r2, #1
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f934 	bl	800b3a4 <USBD_CtlSendData>
        break;
 800b13c:	e004      	b.n	800b148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f8be 	bl	800b2c2 <USBD_CtlError>
        break;
 800b146:	bf00      	nop
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	3b01      	subs	r3, #1
 800b164:	2b02      	cmp	r3, #2
 800b166:	d81e      	bhi.n	800b1a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	88db      	ldrh	r3, [r3, #6]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d004      	beq.n	800b17a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f8a5 	bl	800b2c2 <USBD_CtlError>
        break;
 800b178:	e01a      	b.n	800b1b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	f043 0202 	orr.w	r2, r3, #2
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	330c      	adds	r3, #12
 800b19a:	2202      	movs	r2, #2
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f900 	bl	800b3a4 <USBD_CtlSendData>
      break;
 800b1a4:	e004      	b.n	800b1b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f88a 	bl	800b2c2 <USBD_CtlError>
      break;
 800b1ae:	bf00      	nop
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	885b      	ldrh	r3, [r3, #2]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d107      	bne.n	800b1da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f940 	bl	800b458 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b1d8:	e013      	b.n	800b202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	885b      	ldrh	r3, [r3, #2]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d10b      	bne.n	800b1fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	889b      	ldrh	r3, [r3, #4]
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f930 	bl	800b458 <USBD_CtlSendStatus>
}
 800b1f8:	e003      	b.n	800b202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f860 	bl	800b2c2 <USBD_CtlError>
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d80b      	bhi.n	800b23a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d10c      	bne.n	800b244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f910 	bl	800b458 <USBD_CtlSendStatus>
      }
      break;
 800b238:	e004      	b.n	800b244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f840 	bl	800b2c2 <USBD_CtlError>
      break;
 800b242:	e000      	b.n	800b246 <USBD_ClrFeature+0x3c>
      break;
 800b244:	bf00      	nop
  }
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3301      	adds	r3, #1
 800b268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3301      	adds	r3, #1
 800b276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7ff fa40 	bl	800a6fe <SWAPBYTE>
 800b27e:	4603      	mov	r3, r0
 800b280:	461a      	mov	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3301      	adds	r3, #1
 800b28a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fa33 	bl	800a6fe <SWAPBYTE>
 800b298:	4603      	mov	r3, r0
 800b29a:	461a      	mov	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f7ff fa26 	bl	800a6fe <SWAPBYTE>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	80da      	strh	r2, [r3, #6]
}
 800b2ba:	bf00      	nop
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2cc:	2180      	movs	r1, #128	@ 0x80
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 ff64 	bl	800c19c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 ff60 	bl	800c19c <USBD_LL_StallEP>
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d036      	beq.n	800b368 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2fe:	6938      	ldr	r0, [r7, #16]
 800b300:	f000 f836 	bl	800b370 <USBD_GetLen>
 800b304:	4603      	mov	r3, r0
 800b306:	3301      	adds	r3, #1
 800b308:	b29b      	uxth	r3, r3
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	4413      	add	r3, r2
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7812      	ldrb	r2, [r2, #0]
 800b31c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	3301      	adds	r3, #1
 800b322:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	4413      	add	r3, r2
 800b32a:	2203      	movs	r2, #3
 800b32c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b32e:	7dfb      	ldrb	r3, [r7, #23]
 800b330:	3301      	adds	r3, #1
 800b332:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b334:	e013      	b.n	800b35e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	4413      	add	r3, r2
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	7812      	ldrb	r2, [r2, #0]
 800b340:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3301      	adds	r3, #1
 800b346:	613b      	str	r3, [r7, #16]
    idx++;
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	3301      	adds	r3, #1
 800b34c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	4413      	add	r3, r2
 800b354:	2200      	movs	r2, #0
 800b356:	701a      	strb	r2, [r3, #0]
    idx++;
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	3301      	adds	r3, #1
 800b35c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e7      	bne.n	800b336 <USBD_GetString+0x52>
 800b366:	e000      	b.n	800b36a <USBD_GetString+0x86>
    return;
 800b368:	bf00      	nop
  }
}
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b380:	e005      	b.n	800b38e <USBD_GetLen+0x1e>
  {
    len++;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	3301      	adds	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	3301      	adds	r3, #1
 800b38c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f5      	bne.n	800b382 <USBD_GetLen+0x12>
  }

  return len;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 ff6f 	bl	800c2ae <USBD_LL_Transmit>

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	60b9      	str	r1, [r7, #8]
 800b3e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 ff5e 	bl	800c2ae <USBD_LL_Transmit>

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2203      	movs	r2, #3
 800b40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	2100      	movs	r1, #0
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 ff62 	bl	800c2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	2100      	movs	r1, #0
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 ff51 	bl	800c2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2204      	movs	r2, #4
 800b464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b468:	2300      	movs	r3, #0
 800b46a:	2200      	movs	r2, #0
 800b46c:	2100      	movs	r1, #0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 ff1d 	bl	800c2ae <USBD_LL_Transmit>

  return USBD_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b082      	sub	sp, #8
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2205      	movs	r2, #5
 800b48a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b48e:	2300      	movs	r3, #0
 800b490:	2200      	movs	r2, #0
 800b492:	2100      	movs	r1, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 ff2b 	bl	800c2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4ae:	4802      	ldr	r0, [pc, #8]	@ (800b4b8 <ST7735_Select+0x14>)
 800b4b0:	f7f7 fa56 	bl	8002960 <HAL_GPIO_WritePin>
}
 800b4b4:	bf00      	nop
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	40020000 	.word	0x40020000

0800b4bc <ST7735_Unselect>:

void ST7735_Unselect() {
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b4c6:	4802      	ldr	r0, [pc, #8]	@ (800b4d0 <ST7735_Unselect+0x14>)
 800b4c8:	f7f7 fa4a 	bl	8002960 <HAL_GPIO_WritePin>
}
 800b4cc:	bf00      	nop
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	40020000 	.word	0x40020000

0800b4d4 <ST7735_Reset>:

void ST7735_Reset() {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4de:	4807      	ldr	r0, [pc, #28]	@ (800b4fc <ST7735_Reset+0x28>)
 800b4e0:	f7f7 fa3e 	bl	8002960 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800b4e4:	2005      	movs	r0, #5
 800b4e6:	f7f6 fa1d 	bl	8001924 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4f0:	4802      	ldr	r0, [pc, #8]	@ (800b4fc <ST7735_Reset+0x28>)
 800b4f2:	f7f7 fa35 	bl	8002960 <HAL_GPIO_WritePin>
}
 800b4f6:	bf00      	nop
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	40020000 	.word	0x40020000

0800b500 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800b50a:	2200      	movs	r2, #0
 800b50c:	2110      	movs	r1, #16
 800b50e:	4807      	ldr	r0, [pc, #28]	@ (800b52c <ST7735_WriteCommand+0x2c>)
 800b510:	f7f7 fa26 	bl	8002960 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b514:	1df9      	adds	r1, r7, #7
 800b516:	f04f 33ff 	mov.w	r3, #4294967295
 800b51a:	2201      	movs	r2, #1
 800b51c:	4804      	ldr	r0, [pc, #16]	@ (800b530 <ST7735_WriteCommand+0x30>)
 800b51e:	f7fa fe59 	bl	80061d4 <HAL_SPI_Transmit>
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	40020000 	.word	0x40020000
 800b530:	200006fc 	.word	0x200006fc

0800b534 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b53e:	2201      	movs	r2, #1
 800b540:	2110      	movs	r1, #16
 800b542:	4807      	ldr	r0, [pc, #28]	@ (800b560 <ST7735_WriteData+0x2c>)
 800b544:	f7f7 fa0c 	bl	8002960 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4804      	ldr	r0, [pc, #16]	@ (800b564 <ST7735_WriteData+0x30>)
 800b554:	f7fa fe3e 	bl	80061d4 <HAL_SPI_Transmit>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	40020000 	.word	0x40020000
 800b564:	200006fc 	.word	0x200006fc

0800b568 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800b57a:	e034      	b.n	800b5e6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800b586:	7afb      	ldrb	r3, [r7, #11]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff ffb9 	bl	800b500 <ST7735_WriteCommand>

        numArgs = *addr++;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800b598:	7abb      	ldrb	r3, [r7, #10]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5a0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800b5a2:	7abb      	ldrb	r3, [r7, #10]
 800b5a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5a8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800b5aa:	7abb      	ldrb	r3, [r7, #10]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d008      	beq.n	800b5c2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800b5b0:	7abb      	ldrb	r3, [r7, #10]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7ff ffbd 	bl	800b534 <ST7735_WriteData>
            addr += numArgs;
 800b5ba:	7abb      	ldrb	r3, [r7, #10]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	4413      	add	r3, r2
 800b5c0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800b5c2:	89bb      	ldrh	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00e      	beq.n	800b5e6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	607a      	str	r2, [r7, #4]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800b5d2:	89bb      	ldrh	r3, [r7, #12]
 800b5d4:	2bff      	cmp	r3, #255	@ 0xff
 800b5d6:	d102      	bne.n	800b5de <ST7735_ExecuteCommandList+0x76>
 800b5d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b5dc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800b5de:	89bb      	ldrh	r3, [r7, #12]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f6 f99f 	bl	8001924 <HAL_Delay>
    while(numCommands--) {
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	1e5a      	subs	r2, r3, #1
 800b5ea:	73fa      	strb	r2, [r7, #15]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1c5      	bne.n	800b57c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800b5fa:	b590      	push	{r4, r7, lr}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	4604      	mov	r4, r0
 800b602:	4608      	mov	r0, r1
 800b604:	4611      	mov	r1, r2
 800b606:	461a      	mov	r2, r3
 800b608:	4623      	mov	r3, r4
 800b60a:	71fb      	strb	r3, [r7, #7]
 800b60c:	4603      	mov	r3, r0
 800b60e:	71bb      	strb	r3, [r7, #6]
 800b610:	460b      	mov	r3, r1
 800b612:	717b      	strb	r3, [r7, #5]
 800b614:	4613      	mov	r3, r2
 800b616:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800b618:	202a      	movs	r0, #42	@ 0x2a
 800b61a:	f7ff ff71 	bl	800b500 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800b61e:	2300      	movs	r3, #0
 800b620:	733b      	strb	r3, [r7, #12]
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	737b      	strb	r3, [r7, #13]
 800b626:	2300      	movs	r3, #0
 800b628:	73bb      	strb	r3, [r7, #14]
 800b62a:	797b      	ldrb	r3, [r7, #5]
 800b62c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b62e:	f107 030c 	add.w	r3, r7, #12
 800b632:	2104      	movs	r1, #4
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ff7d 	bl	800b534 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800b63a:	202b      	movs	r0, #43	@ 0x2b
 800b63c:	f7ff ff60 	bl	800b500 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800b640:	79bb      	ldrb	r3, [r7, #6]
 800b642:	3318      	adds	r3, #24
 800b644:	b2db      	uxtb	r3, r3
 800b646:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800b648:	793b      	ldrb	r3, [r7, #4]
 800b64a:	3318      	adds	r3, #24
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	2104      	movs	r1, #4
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff ff6c 	bl	800b534 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800b65c:	202c      	movs	r0, #44	@ 0x2c
 800b65e:	f7ff ff4f 	bl	800b500 <ST7735_WriteCommand>
}
 800b662:	bf00      	nop
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}
	...

0800b66c <ST7735_Init>:

void ST7735_Init() {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
    ST7735_Select();
 800b670:	f7ff ff18 	bl	800b4a4 <ST7735_Select>
    ST7735_Reset();
 800b674:	f7ff ff2e 	bl	800b4d4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800b678:	4806      	ldr	r0, [pc, #24]	@ (800b694 <ST7735_Init+0x28>)
 800b67a:	f7ff ff75 	bl	800b568 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800b67e:	4806      	ldr	r0, [pc, #24]	@ (800b698 <ST7735_Init+0x2c>)
 800b680:	f7ff ff72 	bl	800b568 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800b684:	4805      	ldr	r0, [pc, #20]	@ (800b69c <ST7735_Init+0x30>)
 800b686:	f7ff ff6f 	bl	800b568 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800b68a:	f7ff ff17 	bl	800b4bc <ST7735_Unselect>
}
 800b68e:	bf00      	nop
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	0800edc0 	.word	0x0800edc0
 800b698:	0800edfc 	.word	0x0800edfc
 800b69c:	0800ee0c 	.word	0x0800ee0c

0800b6a0 <ST7735_WriteChar>:
    uint8_t data[] = { color >> 8, color & 0xFF };
    ST7735_WriteData(data, sizeof(data));
    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	b590      	push	{r4, r7, lr}
 800b6a4:	b089      	sub	sp, #36	@ 0x24
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	80fb      	strh	r3, [r7, #6]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	80bb      	strh	r3, [r7, #4]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800b6b6:	88fb      	ldrh	r3, [r7, #6]
 800b6b8:	b2d8      	uxtb	r0, r3
 800b6ba:	88bb      	ldrh	r3, [r7, #4]
 800b6bc:	b2d9      	uxtb	r1, r3
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b6c6:	4413      	add	r3, r2
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	b2dc      	uxtb	r4, r3
 800b6ce:	88bb      	ldrh	r3, [r7, #4]
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b6d6:	4413      	add	r3, r2
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	4622      	mov	r2, r4
 800b6e0:	f7ff ff8b 	bl	800b5fa <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 800b6e8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b6ec:	2b08      	cmp	r3, #8
 800b6ee:	d106      	bne.n	800b6fe <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 800b6f0:	230e      	movs	r3, #14
 800b6f2:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	2b25      	cmp	r3, #37	@ 0x25
 800b6f8:	d101      	bne.n	800b6fe <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e044      	b.n	800b78e <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 800b704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b706:	78f9      	ldrb	r1, [r7, #3]
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1acb      	subs	r3, r1, r3
 800b70c:	3b20      	subs	r3, #32
 800b70e:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800b712:	fb03 f101 	mul.w	r1, r3, r1
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	440b      	add	r3, r1
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	4413      	add	r3, r2
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 800b722:	2300      	movs	r3, #0
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	e029      	b.n	800b77c <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800b738:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b73a:	0a1b      	lsrs	r3, r3, #8
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	733b      	strb	r3, [r7, #12]
 800b742:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800b748:	f107 030c 	add.w	r3, r7, #12
 800b74c:	2102      	movs	r1, #2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff fef0 	bl	800b534 <ST7735_WriteData>
 800b754:	e00f      	b.n	800b776 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800b756:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	723b      	strb	r3, [r7, #8]
 800b762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b766:	b2db      	uxtb	r3, r3
 800b768:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 800b76a:	f107 0308 	add.w	r3, r7, #8
 800b76e:	2102      	movs	r1, #2
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff fedf 	bl	800b534 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	3301      	adds	r3, #1
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b780:	461a      	mov	r2, r3
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	4293      	cmp	r3, r2
 800b786:	d3cf      	bcc.n	800b728 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	3301      	adds	r3, #1
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b792:	461a      	mov	r2, r3
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4293      	cmp	r3, r2
 800b798:	d3b4      	bcc.n	800b704 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	3724      	adds	r7, #36	@ 0x24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b7a6:	b002      	add	sp, #8
 800b7a8:	4770      	bx	lr

0800b7aa <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af04      	add	r7, sp, #16
 800b7b2:	603a      	str	r2, [r7, #0]
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	80fb      	strh	r3, [r7, #6]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800b7be:	f7ff fe71 	bl	800b4a4 <ST7735_Select>

    while(*str) {
 800b7c2:	e02d      	b.n	800b820 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800b7c4:	88fb      	ldrh	r3, [r7, #6]
 800b7c6:	7d3a      	ldrb	r2, [r7, #20]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	2b9f      	cmp	r3, #159	@ 0x9f
 800b7cc:	dd13      	ble.n	800b7f6 <ST7735_WriteString+0x4c>
            x = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800b7d2:	7d7b      	ldrb	r3, [r7, #21]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	88bb      	ldrh	r3, [r7, #4]
 800b7d8:	4413      	add	r3, r2
 800b7da:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800b7dc:	88bb      	ldrh	r3, [r7, #4]
 800b7de:	7d7a      	ldrb	r2, [r7, #21]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	2b4f      	cmp	r3, #79	@ 0x4f
 800b7e4:	dc21      	bgt.n	800b82a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d103      	bne.n	800b7f6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	603b      	str	r3, [r7, #0]
                continue;
 800b7f4:	e014      	b.n	800b820 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	88b9      	ldrh	r1, [r7, #4]
 800b7fc:	88f8      	ldrh	r0, [r7, #6]
 800b7fe:	8c3b      	ldrh	r3, [r7, #32]
 800b800:	9302      	str	r3, [sp, #8]
 800b802:	8bbb      	ldrh	r3, [r7, #28]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f7ff ff48 	bl	800b6a0 <ST7735_WriteChar>
        x += font.width;
 800b810:	7d3b      	ldrb	r3, [r7, #20]
 800b812:	461a      	mov	r2, r3
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	4413      	add	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
        str++;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	603b      	str	r3, [r7, #0]
    while(*str) {
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1cd      	bne.n	800b7c4 <ST7735_WriteString+0x1a>
 800b828:	e000      	b.n	800b82c <ST7735_WriteString+0x82>
                break;
 800b82a:	bf00      	nop
    }

    ST7735_Unselect();
 800b82c:	f7ff fe46 	bl	800b4bc <ST7735_Unselect>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b83a:	b002      	add	sp, #8
 800b83c:	4770      	bx	lr
	...

0800b840 <ST7735_FillRectangle>:

void ST7735_FillRectangle( uint16_t w, uint16_t h,uint16_t x, uint16_t y, uint16_t color) {
 800b840:	b590      	push	{r4, r7, lr}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	461a      	mov	r2, r3
 800b84e:	4623      	mov	r3, r4
 800b850:	80fb      	strh	r3, [r7, #6]
 800b852:	4603      	mov	r3, r0
 800b854:	80bb      	strh	r3, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	807b      	strh	r3, [r7, #2]
 800b85a:	4613      	mov	r3, r2
 800b85c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b85e:	887b      	ldrh	r3, [r7, #2]
 800b860:	2b9f      	cmp	r3, #159	@ 0x9f
 800b862:	d857      	bhi.n	800b914 <ST7735_FillRectangle+0xd4>
 800b864:	883b      	ldrh	r3, [r7, #0]
 800b866:	2b4f      	cmp	r3, #79	@ 0x4f
 800b868:	d854      	bhi.n	800b914 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800b86a:	887a      	ldrh	r2, [r7, #2]
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	4413      	add	r3, r2
 800b870:	2ba0      	cmp	r3, #160	@ 0xa0
 800b872:	dd03      	ble.n	800b87c <ST7735_FillRectangle+0x3c>
 800b874:	887b      	ldrh	r3, [r7, #2]
 800b876:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800b87a:	80fb      	strh	r3, [r7, #6]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800b87c:	883a      	ldrh	r2, [r7, #0]
 800b87e:	88bb      	ldrh	r3, [r7, #4]
 800b880:	4413      	add	r3, r2
 800b882:	2b50      	cmp	r3, #80	@ 0x50
 800b884:	dd03      	ble.n	800b88e <ST7735_FillRectangle+0x4e>
 800b886:	883b      	ldrh	r3, [r7, #0]
 800b888:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800b88c:	80bb      	strh	r3, [r7, #4]

    ST7735_Select();
 800b88e:	f7ff fe09 	bl	800b4a4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b892:	887b      	ldrh	r3, [r7, #2]
 800b894:	b2d8      	uxtb	r0, r3
 800b896:	883b      	ldrh	r3, [r7, #0]
 800b898:	b2d9      	uxtb	r1, r3
 800b89a:	887b      	ldrh	r3, [r7, #2]
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	4413      	add	r3, r2
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	b2dc      	uxtb	r4, r3
 800b8aa:	883b      	ldrh	r3, [r7, #0]
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	88bb      	ldrh	r3, [r7, #4]
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	f7ff fe9d 	bl	800b5fa <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800b8c0:	8c3b      	ldrh	r3, [r7, #32]
 800b8c2:	0a1b      	lsrs	r3, r3, #8
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	733b      	strb	r3, [r7, #12]
 800b8ca:	8c3b      	ldrh	r3, [r7, #32]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	2110      	movs	r1, #16
 800b8d4:	4811      	ldr	r0, [pc, #68]	@ (800b91c <ST7735_FillRectangle+0xdc>)
 800b8d6:	f7f7 f843 	bl	8002960 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800b8da:	88bb      	ldrh	r3, [r7, #4]
 800b8dc:	803b      	strh	r3, [r7, #0]
 800b8de:	e013      	b.n	800b908 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800b8e0:	88fb      	ldrh	r3, [r7, #6]
 800b8e2:	807b      	strh	r3, [r7, #2]
 800b8e4:	e00a      	b.n	800b8fc <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800b8e6:	f107 010c 	add.w	r1, r7, #12
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	480b      	ldr	r0, [pc, #44]	@ (800b920 <ST7735_FillRectangle+0xe0>)
 800b8f2:	f7fa fc6f 	bl	80061d4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800b8f6:	887b      	ldrh	r3, [r7, #2]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	807b      	strh	r3, [r7, #2]
 800b8fc:	887b      	ldrh	r3, [r7, #2]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f1      	bne.n	800b8e6 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800b902:	883b      	ldrh	r3, [r7, #0]
 800b904:	3b01      	subs	r3, #1
 800b906:	803b      	strh	r3, [r7, #0]
 800b908:	883b      	ldrh	r3, [r7, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e8      	bne.n	800b8e0 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800b90e:	f7ff fdd5 	bl	800b4bc <ST7735_Unselect>
 800b912:	e000      	b.n	800b916 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b914:	bf00      	nop
}
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd90      	pop	{r4, r7, pc}
 800b91c:	40020000 	.word	0x40020000
 800b920:	200006fc 	.word	0x200006fc

0800b924 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af02      	add	r7, sp, #8
 800b92a:	4603      	mov	r3, r0
 800b92c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(ST7735_WIDTH, ST7735_HEIGHT, 0, 0,  color);
 800b92e:	88fb      	ldrh	r3, [r7, #6]
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	2200      	movs	r2, #0
 800b936:	2150      	movs	r1, #80	@ 0x50
 800b938:	20a0      	movs	r0, #160	@ 0xa0
 800b93a:	f7ff ff81 	bl	800b840 <ST7735_FillRectangle>
}
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t* data) {
 800b946:	b590      	push	{r4, r7, lr}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4604      	mov	r4, r0
 800b94e:	4608      	mov	r0, r1
 800b950:	4611      	mov	r1, r2
 800b952:	461a      	mov	r2, r3
 800b954:	4623      	mov	r3, r4
 800b956:	80fb      	strh	r3, [r7, #6]
 800b958:	4603      	mov	r3, r0
 800b95a:	80bb      	strh	r3, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	807b      	strh	r3, [r7, #2]
 800b960:	4613      	mov	r3, r2
 800b962:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b964:	88fb      	ldrh	r3, [r7, #6]
 800b966:	2b9f      	cmp	r3, #159	@ 0x9f
 800b968:	d831      	bhi.n	800b9ce <ST7735_DrawImage+0x88>
 800b96a:	88bb      	ldrh	r3, [r7, #4]
 800b96c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b96e:	d82e      	bhi.n	800b9ce <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800b970:	88fa      	ldrh	r2, [r7, #6]
 800b972:	887b      	ldrh	r3, [r7, #2]
 800b974:	4413      	add	r3, r2
 800b976:	2ba0      	cmp	r3, #160	@ 0xa0
 800b978:	dc2b      	bgt.n	800b9d2 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800b97a:	88ba      	ldrh	r2, [r7, #4]
 800b97c:	883b      	ldrh	r3, [r7, #0]
 800b97e:	4413      	add	r3, r2
 800b980:	2b50      	cmp	r3, #80	@ 0x50
 800b982:	dc28      	bgt.n	800b9d6 <ST7735_DrawImage+0x90>

    ST7735_Select();
 800b984:	f7ff fd8e 	bl	800b4a4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b988:	88fb      	ldrh	r3, [r7, #6]
 800b98a:	b2d8      	uxtb	r0, r3
 800b98c:	88bb      	ldrh	r3, [r7, #4]
 800b98e:	b2d9      	uxtb	r1, r3
 800b990:	88fb      	ldrh	r3, [r7, #6]
 800b992:	b2da      	uxtb	r2, r3
 800b994:	887b      	ldrh	r3, [r7, #2]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	4413      	add	r3, r2
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	3b01      	subs	r3, #1
 800b99e:	b2dc      	uxtb	r4, r3
 800b9a0:	88bb      	ldrh	r3, [r7, #4]
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	883b      	ldrh	r3, [r7, #0]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	4413      	add	r3, r2
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	f7ff fe22 	bl	800b5fa <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800b9b6:	887b      	ldrh	r3, [r7, #2]
 800b9b8:	883a      	ldrh	r2, [r7, #0]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	69b8      	ldr	r0, [r7, #24]
 800b9c4:	f7ff fdb6 	bl	800b534 <ST7735_WriteData>
    ST7735_Unselect();
 800b9c8:	f7ff fd78 	bl	800b4bc <ST7735_Unselect>
 800b9cc:	e004      	b.n	800b9d8 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b9ce:	bf00      	nop
 800b9d0:	e002      	b.n	800b9d8 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800b9d2:	bf00      	nop
 800b9d4:	e000      	b.n	800b9d8 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800b9d6:	bf00      	nop
}
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}

0800b9de <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert) {
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800b9e8:	f7ff fd5c 	bl	800b4a4 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <ST7735_InvertColors+0x18>
 800b9f2:	2321      	movs	r3, #33	@ 0x21
 800b9f4:	e000      	b.n	800b9f8 <ST7735_InvertColors+0x1a>
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fd81 	bl	800b500 <ST7735_WriteCommand>
    ST7735_Unselect();
 800b9fe:	f7ff fd5d 	bl	800b4bc <ST7735_Unselect>
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba10:	2200      	movs	r2, #0
 800ba12:	4912      	ldr	r1, [pc, #72]	@ (800ba5c <MX_USB_DEVICE_Init+0x50>)
 800ba14:	4812      	ldr	r0, [pc, #72]	@ (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba16:	f7fe fa55 	bl	8009ec4 <USBD_Init>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba20:	f7f5 fab8 	bl	8000f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba24:	490f      	ldr	r1, [pc, #60]	@ (800ba64 <MX_USB_DEVICE_Init+0x58>)
 800ba26:	480e      	ldr	r0, [pc, #56]	@ (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba28:	f7fe fa7c 	bl	8009f24 <USBD_RegisterClass>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba32:	f7f5 faaf 	bl	8000f94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba36:	490c      	ldr	r1, [pc, #48]	@ (800ba68 <MX_USB_DEVICE_Init+0x5c>)
 800ba38:	4809      	ldr	r0, [pc, #36]	@ (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba3a:	f7fe f9b3 	bl	8009da4 <USBD_CDC_RegisterInterface>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba44:	f7f5 faa6 	bl	8000f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba48:	4805      	ldr	r0, [pc, #20]	@ (800ba60 <MX_USB_DEVICE_Init+0x54>)
 800ba4a:	f7fe faa1 	bl	8009f90 <USBD_Start>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba54:	f7f5 fa9e 	bl	8000f94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba58:	bf00      	nop
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	200000b4 	.word	0x200000b4
 800ba60:	20000954 	.word	0x20000954
 800ba64:	20000018 	.word	0x20000018
 800ba68:	200000a0 	.word	0x200000a0

0800ba6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba70:	2200      	movs	r2, #0
 800ba72:	4905      	ldr	r1, [pc, #20]	@ (800ba88 <CDC_Init_FS+0x1c>)
 800ba74:	4805      	ldr	r0, [pc, #20]	@ (800ba8c <CDC_Init_FS+0x20>)
 800ba76:	f7fe f9af 	bl	8009dd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba7a:	4905      	ldr	r1, [pc, #20]	@ (800ba90 <CDC_Init_FS+0x24>)
 800ba7c:	4803      	ldr	r0, [pc, #12]	@ (800ba8c <CDC_Init_FS+0x20>)
 800ba7e:	f7fe f9cd 	bl	8009e1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20001030 	.word	0x20001030
 800ba8c:	20000954 	.word	0x20000954
 800ba90:	20000c30 	.word	0x20000c30

0800ba94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
 800bab0:	4613      	mov	r3, r2
 800bab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b23      	cmp	r3, #35	@ 0x23
 800bab8:	d84a      	bhi.n	800bb50 <CDC_Control_FS+0xac>
 800baba:	a201      	add	r2, pc, #4	@ (adr r2, 800bac0 <CDC_Control_FS+0x1c>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bb51 	.word	0x0800bb51
 800bac4:	0800bb51 	.word	0x0800bb51
 800bac8:	0800bb51 	.word	0x0800bb51
 800bacc:	0800bb51 	.word	0x0800bb51
 800bad0:	0800bb51 	.word	0x0800bb51
 800bad4:	0800bb51 	.word	0x0800bb51
 800bad8:	0800bb51 	.word	0x0800bb51
 800badc:	0800bb51 	.word	0x0800bb51
 800bae0:	0800bb51 	.word	0x0800bb51
 800bae4:	0800bb51 	.word	0x0800bb51
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bb51 	.word	0x0800bb51
 800baf0:	0800bb51 	.word	0x0800bb51
 800baf4:	0800bb51 	.word	0x0800bb51
 800baf8:	0800bb51 	.word	0x0800bb51
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bb51 	.word	0x0800bb51
 800bb04:	0800bb51 	.word	0x0800bb51
 800bb08:	0800bb51 	.word	0x0800bb51
 800bb0c:	0800bb51 	.word	0x0800bb51
 800bb10:	0800bb51 	.word	0x0800bb51
 800bb14:	0800bb51 	.word	0x0800bb51
 800bb18:	0800bb51 	.word	0x0800bb51
 800bb1c:	0800bb51 	.word	0x0800bb51
 800bb20:	0800bb51 	.word	0x0800bb51
 800bb24:	0800bb51 	.word	0x0800bb51
 800bb28:	0800bb51 	.word	0x0800bb51
 800bb2c:	0800bb51 	.word	0x0800bb51
 800bb30:	0800bb51 	.word	0x0800bb51
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb51 	.word	0x0800bb51
 800bb3c:	0800bb51 	.word	0x0800bb51
 800bb40:	0800bb51 	.word	0x0800bb51
 800bb44:	0800bb51 	.word	0x0800bb51
 800bb48:	0800bb51 	.word	0x0800bb51
 800bb4c:	0800bb51 	.word	0x0800bb51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb50:	bf00      	nop
  }

  return (USBD_OK);
 800bb52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	4805      	ldr	r0, [pc, #20]	@ (800bb84 <CDC_Receive_FS+0x24>)
 800bb6e:	f7fe f955 	bl	8009e1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb72:	4804      	ldr	r0, [pc, #16]	@ (800bb84 <CDC_Receive_FS+0x24>)
 800bb74:	f7fe f970 	bl	8009e58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20000954 	.word	0x20000954

0800bb88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
	...

0800bbac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	6039      	str	r1, [r7, #0]
 800bbb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2212      	movs	r2, #18
 800bbbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbbe:	4b03      	ldr	r3, [pc, #12]	@ (800bbcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200000d0 	.word	0x200000d0

0800bbd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2204      	movs	r2, #4
 800bbe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbe2:	4b03      	ldr	r3, [pc, #12]	@ (800bbf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	200000e4 	.word	0x200000e4

0800bbf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	6039      	str	r1, [r7, #0]
 800bbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d105      	bne.n	800bc12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	4907      	ldr	r1, [pc, #28]	@ (800bc28 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc0a:	4808      	ldr	r0, [pc, #32]	@ (800bc2c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc0c:	f7ff fb6a 	bl	800b2e4 <USBD_GetString>
 800bc10:	e004      	b.n	800bc1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	4904      	ldr	r1, [pc, #16]	@ (800bc28 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc16:	4805      	ldr	r0, [pc, #20]	@ (800bc2c <USBD_FS_ProductStrDescriptor+0x38>)
 800bc18:	f7ff fb64 	bl	800b2e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc1c:	4b02      	ldr	r3, [pc, #8]	@ (800bc28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20001430 	.word	0x20001430
 800bc2c:	0800de24 	.word	0x0800de24

0800bc30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	6039      	str	r1, [r7, #0]
 800bc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	4904      	ldr	r1, [pc, #16]	@ (800bc50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc40:	4804      	ldr	r0, [pc, #16]	@ (800bc54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc42:	f7ff fb4f 	bl	800b2e4 <USBD_GetString>
  return USBD_StrDesc;
 800bc46:	4b02      	ldr	r3, [pc, #8]	@ (800bc50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20001430 	.word	0x20001430
 800bc54:	0800de3c 	.word	0x0800de3c

0800bc58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6039      	str	r1, [r7, #0]
 800bc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	221a      	movs	r2, #26
 800bc68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc6a:	f000 f843 	bl	800bcf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc6e:	4b02      	ldr	r3, [pc, #8]	@ (800bc78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200000e8 	.word	0x200000e8

0800bc7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d105      	bne.n	800bc9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	4907      	ldr	r1, [pc, #28]	@ (800bcb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc92:	4808      	ldr	r0, [pc, #32]	@ (800bcb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc94:	f7ff fb26 	bl	800b2e4 <USBD_GetString>
 800bc98:	e004      	b.n	800bca4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	4904      	ldr	r1, [pc, #16]	@ (800bcb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc9e:	4805      	ldr	r0, [pc, #20]	@ (800bcb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bca0:	f7ff fb20 	bl	800b2e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bca4:	4b02      	ldr	r3, [pc, #8]	@ (800bcb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20001430 	.word	0x20001430
 800bcb4:	0800de50 	.word	0x0800de50

0800bcb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4907      	ldr	r1, [pc, #28]	@ (800bcec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcce:	4808      	ldr	r0, [pc, #32]	@ (800bcf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcd0:	f7ff fb08 	bl	800b2e4 <USBD_GetString>
 800bcd4:	e004      	b.n	800bce0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	4904      	ldr	r1, [pc, #16]	@ (800bcec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcda:	4805      	ldr	r0, [pc, #20]	@ (800bcf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcdc:	f7ff fb02 	bl	800b2e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20001430 	.word	0x20001430
 800bcf0:	0800de5c 	.word	0x0800de5c

0800bcf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcfa:	4b0f      	ldr	r3, [pc, #60]	@ (800bd38 <Get_SerialNum+0x44>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd00:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <Get_SerialNum+0x48>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd06:	4b0e      	ldr	r3, [pc, #56]	@ (800bd40 <Get_SerialNum+0x4c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	4909      	ldr	r1, [pc, #36]	@ (800bd44 <Get_SerialNum+0x50>)
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f814 	bl	800bd4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd24:	2204      	movs	r2, #4
 800bd26:	4908      	ldr	r1, [pc, #32]	@ (800bd48 <Get_SerialNum+0x54>)
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f000 f80f 	bl	800bd4c <IntToUnicode>
  }
}
 800bd2e:	bf00      	nop
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	1fff7a10 	.word	0x1fff7a10
 800bd3c:	1fff7a14 	.word	0x1fff7a14
 800bd40:	1fff7a18 	.word	0x1fff7a18
 800bd44:	200000ea 	.word	0x200000ea
 800bd48:	200000fa 	.word	0x200000fa

0800bd4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	4613      	mov	r3, r2
 800bd58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]
 800bd62:	e027      	b.n	800bdb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	0f1b      	lsrs	r3, r3, #28
 800bd68:	2b09      	cmp	r3, #9
 800bd6a:	d80b      	bhi.n	800bd84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	0f1b      	lsrs	r3, r3, #28
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	4619      	mov	r1, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3230      	adds	r2, #48	@ 0x30
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e00a      	b.n	800bd9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	0f1b      	lsrs	r3, r3, #28
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4619      	mov	r1, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	440b      	add	r3, r1
 800bd94:	3237      	adds	r2, #55	@ 0x37
 800bd96:	b2d2      	uxtb	r2, r2
 800bd98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	3301      	adds	r3, #1
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	4413      	add	r3, r2
 800bdaa:	2200      	movs	r2, #0
 800bdac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	75fb      	strb	r3, [r7, #23]
 800bdb4:	7dfa      	ldrb	r2, [r7, #23]
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d3d3      	bcc.n	800bd64 <IntToUnicode+0x18>
  }
}
 800bdbc:	bf00      	nop
 800bdbe:	bf00      	nop
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
	...

0800bdcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	@ 0x28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdd4:	f107 0314 	add.w	r3, r7, #20
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	605a      	str	r2, [r3, #4]
 800bdde:	609a      	str	r2, [r3, #8]
 800bde0:	60da      	str	r2, [r3, #12]
 800bde2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdec:	d13a      	bne.n	800be64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	4b1e      	ldr	r3, [pc, #120]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf6:	4a1d      	ldr	r2, [pc, #116]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800bdf8:	f043 0301 	orr.w	r3, r3, #1
 800bdfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdfe:	4b1b      	ldr	r3, [pc, #108]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	613b      	str	r3, [r7, #16]
 800be08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800be0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be10:	2302      	movs	r3, #2
 800be12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be14:	2300      	movs	r3, #0
 800be16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be18:	2303      	movs	r3, #3
 800be1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be1c:	230a      	movs	r3, #10
 800be1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be20:	f107 0314 	add.w	r3, r7, #20
 800be24:	4619      	mov	r1, r3
 800be26:	4812      	ldr	r0, [pc, #72]	@ (800be70 <HAL_PCD_MspInit+0xa4>)
 800be28:	f7f6 fbfe 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be2c:	4b0f      	ldr	r3, [pc, #60]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be30:	4a0e      	ldr	r2, [pc, #56]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be36:	6353      	str	r3, [r2, #52]	@ 0x34
 800be38:	2300      	movs	r3, #0
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	4b0b      	ldr	r3, [pc, #44]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be40:	4a0a      	ldr	r2, [pc, #40]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800be46:	6453      	str	r3, [r2, #68]	@ 0x44
 800be48:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <HAL_PCD_MspInit+0xa0>)
 800be4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be54:	2200      	movs	r2, #0
 800be56:	2100      	movs	r1, #0
 800be58:	2043      	movs	r0, #67	@ 0x43
 800be5a:	f7f6 f8c4 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be5e:	2043      	movs	r0, #67	@ 0x43
 800be60:	f7f6 f8dd 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be64:	bf00      	nop
 800be66:	3728      	adds	r7, #40	@ 0x28
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	40023800 	.word	0x40023800
 800be70:	40020000 	.word	0x40020000

0800be74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800be88:	4619      	mov	r1, r3
 800be8a:	4610      	mov	r0, r2
 800be8c:	f7fe f8cd 	bl	800a02a <USBD_LL_SetupStage>
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800beaa:	78fa      	ldrb	r2, [r7, #3]
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	4613      	mov	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	440b      	add	r3, r1
 800beb8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	4619      	mov	r1, r3
 800bec2:	f7fe f907 	bl	800a0d4 <USBD_LL_DataOutStage>
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	460b      	mov	r3, r1
 800bed8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800bee0:	78fa      	ldrb	r2, [r7, #3]
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	334c      	adds	r3, #76	@ 0x4c
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	78fb      	ldrb	r3, [r7, #3]
 800bef4:	4619      	mov	r1, r3
 800bef6:	f7fe f9a0 	bl	800a23a <USBD_LL_DataInStage>
}
 800befa:	bf00      	nop
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe fad4 	bl	800a4be <USBD_LL_SOF>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d001      	beq.n	800bf36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf32:	f7f5 f82f 	bl	8000f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe fa7e 	bl	800a442 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe fa26 	bl	800a39e <USBD_LL_Reset>
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fa79 	bl	800a462 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf82:	f043 0301 	orr.w	r3, r3, #1
 800bf86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf90:	4b04      	ldr	r3, [pc, #16]	@ (800bfa4 <HAL_PCD_SuspendCallback+0x48>)
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	4a03      	ldr	r2, [pc, #12]	@ (800bfa4 <HAL_PCD_SuspendCallback+0x48>)
 800bf96:	f043 0306 	orr.w	r3, r3, #6
 800bf9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	e000ed00 	.word	0xe000ed00

0800bfa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe fa69 	bl	800a48e <USBD_LL_Resume>
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfd6:	78fa      	ldrb	r2, [r7, #3]
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe fac1 	bl	800a562 <USBD_LL_IsoOUTIncomplete>
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bffa:	78fa      	ldrb	r2, [r7, #3]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fa7d 	bl	800a4fe <USBD_LL_IsoINIncomplete>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fad3 	bl	800a5c6 <USBD_LL_DevConnected>
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fad0 	bl	800a5dc <USBD_LL_DevDisconnected>
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d13c      	bne.n	800c0ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c054:	4a20      	ldr	r2, [pc, #128]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a1e      	ldr	r2, [pc, #120]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c060:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c064:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c066:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c06a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c06c:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c06e:	2204      	movs	r2, #4
 800c070:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c072:	4b19      	ldr	r3, [pc, #100]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c074:	2202      	movs	r2, #2
 800c076:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c078:	4b17      	ldr	r3, [pc, #92]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c07e:	4b16      	ldr	r3, [pc, #88]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c080:	2202      	movs	r2, #2
 800c082:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c084:	4b14      	ldr	r3, [pc, #80]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c086:	2200      	movs	r2, #0
 800c088:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c08a:	4b13      	ldr	r3, [pc, #76]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c090:	4b11      	ldr	r3, [pc, #68]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c092:	2200      	movs	r2, #0
 800c094:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c096:	4b10      	ldr	r3, [pc, #64]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c098:	2200      	movs	r2, #0
 800c09a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c09c:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0a2:	480d      	ldr	r0, [pc, #52]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c0a4:	f7f7 fc4d 	bl	8003942 <HAL_PCD_Init>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c0ae:	f7f4 ff71 	bl	8000f94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c0b2:	2180      	movs	r1, #128	@ 0x80
 800c0b4:	4808      	ldr	r0, [pc, #32]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c0b6:	f7f8 fea4 	bl	8004e02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c0ba:	2240      	movs	r2, #64	@ 0x40
 800c0bc:	2100      	movs	r1, #0
 800c0be:	4806      	ldr	r0, [pc, #24]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c0c0:	f7f8 fe58 	bl	8004d74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c0c4:	2280      	movs	r2, #128	@ 0x80
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	4803      	ldr	r0, [pc, #12]	@ (800c0d8 <USBD_LL_Init+0x94>)
 800c0ca:	f7f8 fe53 	bl	8004d74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20001630 	.word	0x20001630

0800c0dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7f7 fd42 	bl	8003b7c <HAL_PCD_Start>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f942 	bl	800c388 <USBD_Get_USB_Status>
 800c104:	4603      	mov	r3, r0
 800c106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c108:	7bbb      	ldrb	r3, [r7, #14]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	4608      	mov	r0, r1
 800c11c:	4611      	mov	r1, r2
 800c11e:	461a      	mov	r2, r3
 800c120:	4603      	mov	r3, r0
 800c122:	70fb      	strb	r3, [r7, #3]
 800c124:	460b      	mov	r3, r1
 800c126:	70bb      	strb	r3, [r7, #2]
 800c128:	4613      	mov	r3, r2
 800c12a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c13a:	78bb      	ldrb	r3, [r7, #2]
 800c13c:	883a      	ldrh	r2, [r7, #0]
 800c13e:	78f9      	ldrb	r1, [r7, #3]
 800c140:	f7f8 fa13 	bl	800456a <HAL_PCD_EP_Open>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f91c 	bl	800c388 <USBD_Get_USB_Status>
 800c150:	4603      	mov	r3, r0
 800c152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c154:	7bbb      	ldrb	r3, [r7, #14]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c178:	78fa      	ldrb	r2, [r7, #3]
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7f8 fa5c 	bl	800463a <HAL_PCD_EP_Close>
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 f8fd 	bl	800c388 <USBD_Get_USB_Status>
 800c18e:	4603      	mov	r3, r0
 800c190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c192:	7bbb      	ldrb	r3, [r7, #14]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f8 fb34 	bl	8004828 <HAL_PCD_EP_SetStall>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f8de 	bl	800c388 <USBD_Get_USB_Status>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1f4:	78fa      	ldrb	r2, [r7, #3]
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7f8 fb79 	bl	80048f0 <HAL_PCD_EP_ClrStall>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	4618      	mov	r0, r3
 800c206:	f000 f8bf 	bl	800c388 <USBD_Get_USB_Status>
 800c20a:	4603      	mov	r3, r0
 800c20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c22a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c22c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c230:	2b00      	cmp	r3, #0
 800c232:	da0b      	bge.n	800c24c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	4613      	mov	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	4413      	add	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	440b      	add	r3, r1
 800c246:	333e      	adds	r3, #62	@ 0x3e
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	e00b      	b.n	800c264 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c24c:	78fb      	ldrb	r3, [r7, #3]
 800c24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	4613      	mov	r3, r2
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	440b      	add	r3, r1
 800c25e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c262:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	4611      	mov	r1, r2
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f8 f946 	bl	8004520 <HAL_PCD_SetAddress>
 800c294:	4603      	mov	r3, r0
 800c296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f874 	bl	800c388 <USBD_Get_USB_Status>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c2cc:	7af9      	ldrb	r1, [r7, #11]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	f7f8 fa5f 	bl	8004794 <HAL_PCD_EP_Transmit>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 f853 	bl	800c388 <USBD_Get_USB_Status>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	607a      	str	r2, [r7, #4]
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c30e:	7af9      	ldrb	r1, [r7, #11]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	f7f8 f9db 	bl	80046ce <HAL_PCD_EP_Receive>
 800c318:	4603      	mov	r3, r0
 800c31a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f832 	bl	800c388 <USBD_Get_USB_Status>
 800c324:	4603      	mov	r3, r0
 800c326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c328:	7dbb      	ldrb	r3, [r7, #22]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c344:	78fa      	ldrb	r2, [r7, #3]
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7f8 fa0b 	bl	8004764 <HAL_PCD_EP_GetRxCount>
 800c34e:	4603      	mov	r3, r0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c360:	4b03      	ldr	r3, [pc, #12]	@ (800c370 <USBD_static_malloc+0x18>)
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20001b3c 	.word	0x20001b3c

0800c374 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]

}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d817      	bhi.n	800c3cc <USBD_Get_USB_Status+0x44>
 800c39c:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a4 <USBD_Get_USB_Status+0x1c>)
 800c39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a2:	bf00      	nop
 800c3a4:	0800c3b5 	.word	0x0800c3b5
 800c3a8:	0800c3bb 	.word	0x0800c3bb
 800c3ac:	0800c3c1 	.word	0x0800c3c1
 800c3b0:	0800c3c7 	.word	0x0800c3c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b8:	e00b      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3be:	e008      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c4:	e005      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ca:	e002      	b.n	800c3d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d0:	bf00      	nop
  }
  return usb_status;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <button_state_determ>:
uint8_t long_state_r = 0;
uint32_t time_key_r = 0;
uint8_t but_flag_ext = 0 ;

void button_state_determ()
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0

		  uint32_t ms = HAL_GetTick();
 800c3e6:	f7f5 fa91 	bl	800190c <HAL_GetTick>
 800c3ea:	6078      	str	r0, [r7, #4]
		  uint8_t key_state_l = HAL_GPIO_ReadPin(BUT_0_GPIO_Port, BUT_0_Pin);
 800c3ec:	2108      	movs	r1, #8
 800c3ee:	4850      	ldr	r0, [pc, #320]	@ (800c530 <button_state_determ+0x150>)
 800c3f0:	f7f6 fa9e 	bl	8002930 <HAL_GPIO_ReadPin>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	70fb      	strb	r3, [r7, #3]

		  if(key_state_l == 1 && !short_state_l && (ms - time_key_l) > 50)
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d113      	bne.n	800c426 <button_state_determ+0x46>
 800c3fe:	4b4d      	ldr	r3, [pc, #308]	@ (800c534 <button_state_determ+0x154>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10f      	bne.n	800c426 <button_state_determ+0x46>
 800c406:	4b4c      	ldr	r3, [pc, #304]	@ (800c538 <button_state_determ+0x158>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	2b32      	cmp	r3, #50	@ 0x32
 800c410:	d909      	bls.n	800c426 <button_state_determ+0x46>
		  {
		    short_state_l = 1;
 800c412:	4b48      	ldr	r3, [pc, #288]	@ (800c534 <button_state_determ+0x154>)
 800c414:	2201      	movs	r2, #1
 800c416:	701a      	strb	r2, [r3, #0]
		    long_state_l = 0;
 800c418:	4b48      	ldr	r3, [pc, #288]	@ (800c53c <button_state_determ+0x15c>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 800c41e:	4a46      	ldr	r2, [pc, #280]	@ (800c538 <button_state_determ+0x158>)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	e02e      	b.n	800c484 <button_state_determ+0xa4>
		  }
		  else if(key_state_l == 1 && !long_state_l && (ms - time_key_l) > 700)
 800c426:	78fb      	ldrb	r3, [r7, #3]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d111      	bne.n	800c450 <button_state_determ+0x70>
 800c42c:	4b43      	ldr	r3, [pc, #268]	@ (800c53c <button_state_determ+0x15c>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10d      	bne.n	800c450 <button_state_determ+0x70>
 800c434:	4b40      	ldr	r3, [pc, #256]	@ (800c538 <button_state_determ+0x158>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800c440:	d906      	bls.n	800c450 <button_state_determ+0x70>
		  {

		    long_state_l = 1;
 800c442:	4b3e      	ldr	r3, [pc, #248]	@ (800c53c <button_state_determ+0x15c>)
 800c444:	2201      	movs	r2, #1
 800c446:	701a      	strb	r2, [r3, #0]
		    but_state_left = BUT_LONG;
 800c448:	4b3d      	ldr	r3, [pc, #244]	@ (800c540 <button_state_determ+0x160>)
 800c44a:	2201      	movs	r2, #1
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e019      	b.n	800c484 <button_state_determ+0xa4>
		   // sleep_counter = 0;
		  }
		  else if(key_state_l == 0 && short_state_l && (ms - time_key_l) > 50)
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d116      	bne.n	800c484 <button_state_determ+0xa4>
 800c456:	4b37      	ldr	r3, [pc, #220]	@ (800c534 <button_state_determ+0x154>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d012      	beq.n	800c484 <button_state_determ+0xa4>
 800c45e:	4b36      	ldr	r3, [pc, #216]	@ (800c538 <button_state_determ+0x158>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b32      	cmp	r3, #50	@ 0x32
 800c468:	d90c      	bls.n	800c484 <button_state_determ+0xa4>
		  {
		    short_state_l = 0;
 800c46a:	4b32      	ldr	r3, [pc, #200]	@ (800c534 <button_state_determ+0x154>)
 800c46c:	2200      	movs	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 800c470:	4a31      	ldr	r2, [pc, #196]	@ (800c538 <button_state_determ+0x158>)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6013      	str	r3, [r2, #0]

		    if(!long_state_l)
 800c476:	4b31      	ldr	r3, [pc, #196]	@ (800c53c <button_state_determ+0x15c>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <button_state_determ+0xa4>
		    {
		      // левая кнопка , действие на короткое нажатие
		    	but_state_left = BUT_SHORT;
 800c47e:	4b30      	ldr	r3, [pc, #192]	@ (800c540 <button_state_determ+0x160>)
 800c480:	2202      	movs	r2, #2
 800c482:	701a      	strb	r2, [r3, #0]
		    	//sleep_counter = 0;
		    }
		  }
	          ms = HAL_GetTick();
 800c484:	f7f5 fa42 	bl	800190c <HAL_GetTick>
 800c488:	6078      	str	r0, [r7, #4]
		  	  uint8_t key_state_r = HAL_GPIO_ReadPin(BUT_1_GPIO_Port, BUT_1_Pin);
 800c48a:	2104      	movs	r1, #4
 800c48c:	4828      	ldr	r0, [pc, #160]	@ (800c530 <button_state_determ+0x150>)
 800c48e:	f7f6 fa4f 	bl	8002930 <HAL_GPIO_ReadPin>
 800c492:	4603      	mov	r3, r0
 800c494:	70bb      	strb	r3, [r7, #2]

		  	  if(key_state_r == 1 && !short_state_r && (ms - time_key_r) > 50)
 800c496:	78bb      	ldrb	r3, [r7, #2]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d113      	bne.n	800c4c4 <button_state_determ+0xe4>
 800c49c:	4b29      	ldr	r3, [pc, #164]	@ (800c544 <button_state_determ+0x164>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10f      	bne.n	800c4c4 <button_state_determ+0xe4>
 800c4a4:	4b28      	ldr	r3, [pc, #160]	@ (800c548 <button_state_determ+0x168>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	2b32      	cmp	r3, #50	@ 0x32
 800c4ae:	d909      	bls.n	800c4c4 <button_state_determ+0xe4>
		  	  {
		  	    short_state_r = 1;
 800c4b0:	4b24      	ldr	r3, [pc, #144]	@ (800c544 <button_state_determ+0x164>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
		  	    long_state_r = 0;
 800c4b6:	4b25      	ldr	r3, [pc, #148]	@ (800c54c <button_state_determ+0x16c>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 800c4bc:	4a22      	ldr	r2, [pc, #136]	@ (800c548 <button_state_determ+0x168>)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	e02e      	b.n	800c522 <button_state_determ+0x142>
		  	  }
		  	  else if(key_state_r == 1 && !long_state_r && (ms - time_key_r) > 700)
 800c4c4:	78bb      	ldrb	r3, [r7, #2]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d111      	bne.n	800c4ee <button_state_determ+0x10e>
 800c4ca:	4b20      	ldr	r3, [pc, #128]	@ (800c54c <button_state_determ+0x16c>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10d      	bne.n	800c4ee <button_state_determ+0x10e>
 800c4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c548 <button_state_determ+0x168>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800c4de:	d906      	bls.n	800c4ee <button_state_determ+0x10e>
		  	  {
		  		// левая кнопка , действие на длительное нажатие
		  		but_state_right = BUT_LONG;
 800c4e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c550 <button_state_determ+0x170>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	701a      	strb	r2, [r3, #0]
		  		long_state_r = 1;
 800c4e6:	4b19      	ldr	r3, [pc, #100]	@ (800c54c <button_state_determ+0x16c>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	e019      	b.n	800c522 <button_state_determ+0x142>
		  		//sleep_counter = 0;
		  	  }
		  	  else if(key_state_r == 0 && short_state_r && (ms - time_key_r) > 50)
 800c4ee:	78bb      	ldrb	r3, [r7, #2]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d116      	bne.n	800c522 <button_state_determ+0x142>
 800c4f4:	4b13      	ldr	r3, [pc, #76]	@ (800c544 <button_state_determ+0x164>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d012      	beq.n	800c522 <button_state_determ+0x142>
 800c4fc:	4b12      	ldr	r3, [pc, #72]	@ (800c548 <button_state_determ+0x168>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b32      	cmp	r3, #50	@ 0x32
 800c506:	d90c      	bls.n	800c522 <button_state_determ+0x142>
		  	  {
		  	    short_state_r = 0;
 800c508:	4b0e      	ldr	r3, [pc, #56]	@ (800c544 <button_state_determ+0x164>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 800c50e:	4a0e      	ldr	r2, [pc, #56]	@ (800c548 <button_state_determ+0x168>)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6013      	str	r3, [r2, #0]

		  	 if(!long_state_r)
 800c514:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <button_state_determ+0x16c>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <button_state_determ+0x142>
		  	    {
		  		 	 but_state_right = BUT_SHORT;
 800c51c:	4b0c      	ldr	r3, [pc, #48]	@ (800c550 <button_state_determ+0x170>)
 800c51e:	2202      	movs	r2, #2
 800c520:	701a      	strb	r2, [r3, #0]
		  		 	 //sleep_counter = 0;
		  	    }
		  	  }
		  	 but_flag_ext = 0;
 800c522:	4b0c      	ldr	r3, [pc, #48]	@ (800c554 <button_state_determ+0x174>)
 800c524:	2200      	movs	r2, #0
 800c526:	701a      	strb	r2, [r3, #0]
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	40020800 	.word	0x40020800
 800c534:	20001d5e 	.word	0x20001d5e
 800c538:	20001d60 	.word	0x20001d60
 800c53c:	20001d5f 	.word	0x20001d5f
 800c540:	20001d5c 	.word	0x20001d5c
 800c544:	20001d64 	.word	0x20001d64
 800c548:	20001d68 	.word	0x20001d68
 800c54c:	20001d65 	.word	0x20001d65
 800c550:	20001d5d 	.word	0x20001d5d
 800c554:	20001d6c 	.word	0x20001d6c

0800c558 <but_state_reset>:

void but_state_reset()
{
 800c558:	b480      	push	{r7}
 800c55a:	af00      	add	r7, sp, #0
	    but_state_left = BUT_RESET;
 800c55c:	4b05      	ldr	r3, [pc, #20]	@ (800c574 <but_state_reset+0x1c>)
 800c55e:	2200      	movs	r2, #0
 800c560:	701a      	strb	r2, [r3, #0]
	    but_state_right = BUT_RESET;
 800c562:	4b05      	ldr	r3, [pc, #20]	@ (800c578 <but_state_reset+0x20>)
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
}
 800c568:	bf00      	nop
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	20001d5c 	.word	0x20001d5c
 800c578:	20001d5d 	.word	0x20001d5d

0800c57c <display_product_norm>:
	SPI_Flash_to_LCD(block, offset, w, h, x, y);
	SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
}

void display_product_norm(uint8_t id, uint8_t language)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af04      	add	r7, sp, #16
 800c582:	4603      	mov	r3, r0
 800c584:	460a      	mov	r2, r1
 800c586:	71fb      	strb	r3, [r7, #7]
 800c588:	4613      	mov	r3, r2
 800c58a:	71bb      	strb	r3, [r7, #6]
	if(prod_sel_flag.sub_norm == 0)
 800c58c:	4b43      	ldr	r3, [pc, #268]	@ (800c69c <display_product_norm+0x120>)
 800c58e:	785b      	ldrb	r3, [r3, #1]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <display_product_norm+0x24>
	{
		prod_sel_flag.sub_norm = 1;
 800c594:	4b41      	ldr	r3, [pc, #260]	@ (800c69c <display_product_norm+0x120>)
 800c596:	2201      	movs	r2, #1
 800c598:	705a      	strb	r2, [r3, #1]
		ST7735_FillScreen(ST7735_BLACK);
 800c59a:	2000      	movs	r0, #0
 800c59c:	f7ff f9c2 	bl	800b924 <ST7735_FillScreen>
	}
	char char_buffer[5] = {};
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60bb      	str	r3, [r7, #8]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	733b      	strb	r3, [r7, #12]
	sprintf(char_buffer, "%d", product_array[id].conductivity );
 800c5a8:	79fa      	ldrb	r2, [r7, #7]
 800c5aa:	493d      	ldr	r1, [pc, #244]	@ (800c6a0 <display_product_norm+0x124>)
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	440b      	add	r3, r1
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4938      	ldr	r1, [pc, #224]	@ (800c6a4 <display_product_norm+0x128>)
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 ff82 	bl	800d4cc <siprintf>

	SPI_Flash_to_LCD(9, 0 , 76, 42, 60, 30);
 800c5c8:	231e      	movs	r3, #30
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	233c      	movs	r3, #60	@ 0x3c
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	232a      	movs	r3, #42	@ 0x2a
 800c5d2:	224c      	movs	r2, #76	@ 0x4c
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	2009      	movs	r0, #9
 800c5d8:	f000 f8c8 	bl	800c76c <SPI_Flash_to_LCD>
	SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L, 46, 46, 5, 20);
 800c5dc:	79fa      	ldrb	r2, [r7, #7]
 800c5de:	4930      	ldr	r1, [pc, #192]	@ (800c6a0 <display_product_norm+0x124>)
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	440b      	add	r3, r1
 800c5ea:	330a      	adds	r3, #10
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	79fa      	ldrb	r2, [r7, #7]
 800c5f2:	492b      	ldr	r1, [pc, #172]	@ (800c6a0 <display_product_norm+0x124>)
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	440b      	add	r3, r1
 800c5fe:	330c      	adds	r3, #12
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	4619      	mov	r1, r3
 800c604:	2314      	movs	r3, #20
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	2305      	movs	r3, #5
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	232e      	movs	r3, #46	@ 0x2e
 800c60e:	222e      	movs	r2, #46	@ 0x2e
 800c610:	f000 f8ac 	bl	800c76c <SPI_Flash_to_LCD>


	ST7735_WriteString(76, 52, char_buffer, Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
 800c614:	4b24      	ldr	r3, [pc, #144]	@ (800c6a8 <display_product_norm+0x12c>)
 800c616:	f107 0108 	add.w	r1, r7, #8
 800c61a:	2200      	movs	r2, #0
 800c61c:	9202      	str	r2, [sp, #8]
 800c61e:	f645 6215 	movw	r2, #24085	@ 0x5e15
 800c622:	9201      	str	r2, [sp, #4]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	9200      	str	r2, [sp, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	460a      	mov	r2, r1
 800c62c:	2134      	movs	r1, #52	@ 0x34
 800c62e:	204c      	movs	r0, #76	@ 0x4c
 800c630:	f7ff f8bb 	bl	800b7aa <ST7735_WriteString>
	ST7735_WriteString(76, 34, "NORM", Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
 800c634:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a8 <display_product_norm+0x12c>)
 800c636:	2200      	movs	r2, #0
 800c638:	9202      	str	r2, [sp, #8]
 800c63a:	f645 6215 	movw	r2, #24085	@ 0x5e15
 800c63e:	9201      	str	r2, [sp, #4]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	9200      	str	r2, [sp, #0]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a19      	ldr	r2, [pc, #100]	@ (800c6ac <display_product_norm+0x130>)
 800c648:	2122      	movs	r1, #34	@ 0x22
 800c64a:	204c      	movs	r0, #76	@ 0x4c
 800c64c:	f7ff f8ad 	bl	800b7aa <ST7735_WriteString>

	ST7735_WriteString(50, 3,  product_array[id].name , Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800c650:	79fa      	ldrb	r2, [r7, #7]
 800c652:	4913      	ldr	r1, [pc, #76]	@ (800c6a0 <display_product_norm+0x124>)
 800c654:	4613      	mov	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	3310      	adds	r3, #16
 800c660:	6819      	ldr	r1, [r3, #0]
 800c662:	4b11      	ldr	r3, [pc, #68]	@ (800c6a8 <display_product_norm+0x12c>)
 800c664:	2200      	movs	r2, #0
 800c666:	9202      	str	r2, [sp, #8]
 800c668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c66c:	9201      	str	r2, [sp, #4]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	9200      	str	r2, [sp, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	460a      	mov	r2, r1
 800c676:	2103      	movs	r1, #3
 800c678:	2032      	movs	r0, #50	@ 0x32
 800c67a:	f7ff f896 	bl	800b7aa <ST7735_WriteString>

	SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
 800c67e:	2321      	movs	r3, #33	@ 0x21
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	2393      	movs	r3, #147	@ 0x93
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	230e      	movs	r3, #14
 800c688:	2208      	movs	r2, #8
 800c68a:	f24e 5192 	movw	r1, #58770	@ 0xe592
 800c68e:	2008      	movs	r0, #8
 800c690:	f000 f86c 	bl	800c76c <SPI_Flash_to_LCD>
}
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20001d70 	.word	0x20001d70
 800c6a0:	20000108 	.word	0x20000108
 800c6a4:	0800de6c 	.word	0x0800de6c
 800c6a8:	20000098 	.word	0x20000098
 800c6ac:	0800de70 	.word	0x0800de70

0800c6b0 <page_select>:

uint8_t current_page = SELECT_PRODUCT_LIST_PAGE;

// pga_ функция содержащая все действия на странице
void page_select()
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
	uint8_t page = page_select_by_button();
 800c6b6:	f000 f80b 	bl	800c6d0 <page_select_by_button>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	71fb      	strb	r3, [r7, #7]
	page_action(page);
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 f82f 	bl	800c724 <page_action>
}
 800c6c6:	bf00      	nop
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <page_select_by_button>:

int page_select_by_button()
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
	if(current_page == SELECT_PRODUCT_LIST_PAGE && but_state_right == BUT_LONG)
 800c6d4:	4b10      	ldr	r3, [pc, #64]	@ (800c718 <page_select_by_button+0x48>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d10b      	bne.n	800c6f4 <page_select_by_button+0x24>
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <page_select_by_button+0x4c>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d107      	bne.n	800c6f4 <page_select_by_button+0x24>
	{
		but_state_reset();
 800c6e4:	f7ff ff38 	bl	800c558 <but_state_reset>
		current_page = DISPLAY_PRODUCT_NORM_PAGE;
 800c6e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c718 <page_select_by_button+0x48>)
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	701a      	strb	r2, [r3, #0]
		return current_page;
 800c6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c718 <page_select_by_button+0x48>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	e00f      	b.n	800c714 <page_select_by_button+0x44>
	}
	else if(current_page == DISPLAY_PRODUCT_NORM_PAGE && but_state_left == BUT_LONG)
 800c6f4:	4b08      	ldr	r3, [pc, #32]	@ (800c718 <page_select_by_button+0x48>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d10b      	bne.n	800c714 <page_select_by_button+0x44>
 800c6fc:	4b08      	ldr	r3, [pc, #32]	@ (800c720 <page_select_by_button+0x50>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d107      	bne.n	800c714 <page_select_by_button+0x44>
	{
		but_state_reset();
 800c704:	f7ff ff28 	bl	800c558 <but_state_reset>
		current_page = SELECT_PRODUCT_LIST_PAGE;
 800c708:	4b03      	ldr	r3, [pc, #12]	@ (800c718 <page_select_by_button+0x48>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	701a      	strb	r2, [r3, #0]
		return current_page;
 800c70e:	4b02      	ldr	r3, [pc, #8]	@ (800c718 <page_select_by_button+0x48>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	e7ff      	b.n	800c714 <page_select_by_button+0x44>
	}
}
 800c714:	4618      	mov	r0, r3
 800c716:	bd80      	pop	{r7, pc}
 800c718:	20000103 	.word	0x20000103
 800c71c:	20001d5d 	.word	0x20001d5d
 800c720:	20001d5c 	.word	0x20001d5c

0800c724 <page_action>:

void page_action(uint8_t page)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	71fb      	strb	r3, [r7, #7]
	switch(page)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d002      	beq.n	800c73a <page_action+0x16>
 800c734:	2b02      	cmp	r3, #2
 800c736:	d006      	beq.n	800c746 <page_action+0x22>
			prod_sel_flag.root = 0;
		break;

	}//default:

}
 800c738:	e00f      	b.n	800c75a <page_action+0x36>
			select_product_list_action();
 800c73a:	f000 f86b 	bl	800c814 <select_product_list_action>
			prod_sel_flag.sub_norm = 0;
 800c73e:	4b09      	ldr	r3, [pc, #36]	@ (800c764 <page_action+0x40>)
 800c740:	2200      	movs	r2, #0
 800c742:	705a      	strb	r2, [r3, #1]
		break;
 800c744:	e009      	b.n	800c75a <page_action+0x36>
			display_product_norm(gl_id_to_display, ENGLISH);
 800c746:	4b08      	ldr	r3, [pc, #32]	@ (800c768 <page_action+0x44>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2101      	movs	r1, #1
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff ff15 	bl	800c57c <display_product_norm>
			prod_sel_flag.root = 0;
 800c752:	4b04      	ldr	r3, [pc, #16]	@ (800c764 <page_action+0x40>)
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
		break;
 800c758:	bf00      	nop
}
 800c75a:	bf00      	nop
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20001d70 	.word	0x20001d70
 800c768:	20000935 	.word	0x20000935

0800c76c <SPI_Flash_to_LCD>:

void SPI_Flash_to_LCD(uint16_t block, uint32_t offset, uint16_t w, uint16_t h, uint16_t x, uint16_t y)

{
 800c76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c770:	b08b      	sub	sp, #44	@ 0x2c
 800c772:	af02      	add	r7, sp, #8
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	4611      	mov	r1, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	4603      	mov	r3, r0
 800c77c:	81fb      	strh	r3, [r7, #14]
 800c77e:	460b      	mov	r3, r1
 800c780:	81bb      	strh	r3, [r7, #12]
 800c782:	4613      	mov	r3, r2
 800c784:	80fb      	strh	r3, [r7, #6]
 800c786:	466b      	mov	r3, sp
 800c788:	461e      	mov	r6, r3
	uint32_t img_byte_amount = w*h*2;
 800c78a:	89bb      	ldrh	r3, [r7, #12]
 800c78c:	88fa      	ldrh	r2, [r7, #6]
 800c78e:	fb02 f303 	mul.w	r3, r2, r3
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	61fb      	str	r3, [r7, #28]
	uint16_t img_buffer[img_byte_amount/2];
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	0859      	lsrs	r1, r3, #1
 800c79a:	460b      	mov	r3, r1
 800c79c:	3b01      	subs	r3, #1
 800c79e:	61bb      	str	r3, [r7, #24]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4688      	mov	r8, r1
 800c7a4:	4699      	mov	r9, r3
 800c7a6:	f04f 0200 	mov.w	r2, #0
 800c7aa:	f04f 0300 	mov.w	r3, #0
 800c7ae:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c7b2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c7b6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	460c      	mov	r4, r1
 800c7be:	461d      	mov	r5, r3
 800c7c0:	f04f 0200 	mov.w	r2, #0
 800c7c4:	f04f 0300 	mov.w	r3, #0
 800c7c8:	012b      	lsls	r3, r5, #4
 800c7ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c7ce:	0122      	lsls	r2, r4, #4
 800c7d0:	004b      	lsls	r3, r1, #1
 800c7d2:	3307      	adds	r3, #7
 800c7d4:	08db      	lsrs	r3, r3, #3
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	ebad 0d03 	sub.w	sp, sp, r3
 800c7dc:	ab02      	add	r3, sp, #8
 800c7de:	3301      	adds	r3, #1
 800c7e0:	085b      	lsrs	r3, r3, #1
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	617b      	str	r3, [r7, #20]
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
 800c7e6:	89f9      	ldrh	r1, [r7, #14]
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	6978      	ldr	r0, [r7, #20]
 800c7ee:	f000 fe0b 	bl	800d408 <W25qxx_ReadBlock>
	ST7735_DrawImage(x, y, w, h, img_buffer);
 800c7f2:	88fc      	ldrh	r4, [r7, #6]
 800c7f4:	89ba      	ldrh	r2, [r7, #12]
 800c7f6:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800c7fa:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	4623      	mov	r3, r4
 800c804:	f7ff f89f 	bl	800b946 <ST7735_DrawImage>
 800c808:	46b5      	mov	sp, r6
}
 800c80a:	bf00      	nop
 800c80c:	3724      	adds	r7, #36	@ 0x24
 800c80e:	46bd      	mov	sp, r7
 800c810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c814 <select_product_list_action>:

product_select_flag_struct prod_sel_flag;


void select_product_list_action()
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
	if(touch_irq){
 800c818:	4b0a      	ldr	r3, [pc, #40]	@ (800c844 <select_product_list_action+0x30>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <select_product_list_action+0x10>

		touch_slider();
 800c820:	f000 f9ec 	bl	800cbfc <touch_slider>
	}

	 gl_id_to_display  = select_product_id(gl_id_to_display);
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <select_product_list_action+0x34>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 f80f 	bl	800c84c <select_product_id>
 800c82e:	4603      	mov	r3, r0
 800c830:	b2da      	uxtb	r2, r3
 800c832:	4b05      	ldr	r3, [pc, #20]	@ (800c848 <select_product_list_action+0x34>)
 800c834:	701a      	strb	r2, [r3, #0]
	 display_selected_product(gl_id_to_display);
 800c836:	4b04      	ldr	r3, [pc, #16]	@ (800c848 <select_product_list_action+0x34>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 f834 	bl	800c8a8 <display_selected_product>
}
 800c840:	bf00      	nop
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20000934 	.word	0x20000934
 800c848:	20000935 	.word	0x20000935

0800c84c <select_product_id>:

int select_product_id(uint8_t id)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	4603      	mov	r3, r0
 800c854:	71fb      	strb	r3, [r7, #7]
	//Select product using buttons
	 if(but_state_right == BUT_SHORT)
 800c856:	4b12      	ldr	r3, [pc, #72]	@ (800c8a0 <select_product_id+0x54>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d10b      	bne.n	800c876 <select_product_id+0x2a>
		  {
//		 	 HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
//		 	 HAL_Delay(42);
//		 	 HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
			  if(id<60){
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	2b3b      	cmp	r3, #59	@ 0x3b
 800c862:	d803      	bhi.n	800c86c <select_product_id+0x20>

				  id++;
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	3301      	adds	r3, #1
 800c868:	71fb      	strb	r3, [r7, #7]
 800c86a:	e001      	b.n	800c870 <select_product_id+0x24>
			  }
			  else
			  {
				  id = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	71fb      	strb	r3, [r7, #7]
			  }
			 //gl_selected_flag = 1;
			  //gl_selected_pause = 0;
			  //gl_selected_pause = 1;
			  but_state_reset();
 800c870:	f7ff fe72 	bl	800c558 <but_state_reset>
 800c874:	e00e      	b.n	800c894 <select_product_id+0x48>

		  }
		  else if(but_state_left==BUT_SHORT)
 800c876:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a4 <select_product_id+0x58>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d10a      	bne.n	800c894 <select_product_id+0x48>
		  {
			 // HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
		//	  HAL_Delay(42);
		//	  HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
			  if(id>0)
 800c87e:	79fb      	ldrb	r3, [r7, #7]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d003      	beq.n	800c88c <select_product_id+0x40>
			  {
				  id--;
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	3b01      	subs	r3, #1
 800c888:	71fb      	strb	r3, [r7, #7]
 800c88a:	e001      	b.n	800c890 <select_product_id+0x44>
			  }
			  else
			  {
				  id = 60;
 800c88c:	233c      	movs	r3, #60	@ 0x3c
 800c88e:	71fb      	strb	r3, [r7, #7]
			  }
			  //gl_selected_flag = 1;
			  //gl_selected_pause = 0;
			 // gl_selected_pause = 1;
			  but_state_reset();
 800c890:	f7ff fe62 	bl	800c558 <but_state_reset>
		  }
	 //Select product using touch slider sensor

	 return id;
 800c894:	79fb      	ldrb	r3, [r7, #7]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20001d5d 	.word	0x20001d5d
 800c8a4:	20001d5c 	.word	0x20001d5c

0800c8a8 <display_selected_product>:

void display_selected_product(uint8_t id)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af04      	add	r7, sp, #16
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	71fb      	strb	r3, [r7, #7]

	if(prod_sel_flag.root == 0)
 800c8b2:	4bb3      	ldr	r3, [pc, #716]	@ (800cb80 <display_selected_product+0x2d8>)
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d105      	bne.n	800c8c6 <display_selected_product+0x1e>
	{
		prod_sel_flag.root = 1;
 800c8ba:	4bb1      	ldr	r3, [pc, #708]	@ (800cb80 <display_selected_product+0x2d8>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f7ff f82f 	bl	800b924 <ST7735_FillScreen>
	}
	ST7735_WriteString(50, 2,  product_array[id].name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800c8c6:	79fa      	ldrb	r2, [r7, #7]
 800c8c8:	49ae      	ldr	r1, [pc, #696]	@ (800cb84 <display_selected_product+0x2dc>)
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	440b      	add	r3, r1
 800c8d4:	3310      	adds	r3, #16
 800c8d6:	6819      	ldr	r1, [r3, #0]
 800c8d8:	4bab      	ldr	r3, [pc, #684]	@ (800cb88 <display_selected_product+0x2e0>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	9202      	str	r2, [sp, #8]
 800c8de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8e2:	9201      	str	r2, [sp, #4]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	9200      	str	r2, [sp, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	460a      	mov	r2, r1
 800c8ec:	2102      	movs	r1, #2
 800c8ee:	2032      	movs	r0, #50	@ 0x32
 800c8f0:	f7fe ff5b 	bl	800b7aa <ST7735_WriteString>
	if(id == 0)
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d15a      	bne.n	800c9b0 <display_selected_product+0x108>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	49a1      	ldr	r1, [pc, #644]	@ (800cb84 <display_selected_product+0x2dc>)
 800c8fe:	4613      	mov	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	440b      	add	r3, r1
 800c908:	330a      	adds	r3, #10
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	79fa      	ldrb	r2, [r7, #7]
 800c910:	499c      	ldr	r1, [pc, #624]	@ (800cb84 <display_selected_product+0x2dc>)
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	440b      	add	r3, r1
 800c91c:	330c      	adds	r3, #12
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	4619      	mov	r1, r3
 800c922:	2315      	movs	r3, #21
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	233a      	movs	r3, #58	@ 0x3a
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	232e      	movs	r3, #46	@ 0x2e
 800c92c:	222e      	movs	r2, #46	@ 0x2e
 800c92e:	f7ff ff1d 	bl	800c76c <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	4993      	ldr	r1, [pc, #588]	@ (800cb84 <display_selected_product+0x2dc>)
 800c938:	4613      	mov	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	440b      	add	r3, r1
 800c942:	3307      	adds	r3, #7
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	498d      	ldr	r1, [pc, #564]	@ (800cb84 <display_selected_product+0x2dc>)
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	440b      	add	r3, r1
 800c958:	3308      	adds	r3, #8
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	4619      	mov	r1, r3
 800c95e:	2319      	movs	r3, #25
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	2376      	movs	r3, #118	@ 0x76
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2324      	movs	r3, #36	@ 0x24
 800c968:	2224      	movs	r2, #36	@ 0x24
 800c96a:	f7ff feff 	bl	800c76c <SPI_Flash_to_LCD>
		ST7735_FillRectangle(LEFT_PIC, ST7735_BLACK);
 800c96e:	2300      	movs	r3, #0
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	2319      	movs	r3, #25
 800c974:	2205      	movs	r2, #5
 800c976:	2124      	movs	r1, #36	@ 0x24
 800c978:	2024      	movs	r0, #36	@ 0x24
 800c97a:	f7fe ff61 	bl	800b840 <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	b29b      	uxth	r3, r3
 800c982:	332e      	adds	r3, #46	@ 0x2e
 800c984:	b29a      	uxth	r2, r3
 800c986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	234b      	movs	r3, #75	@ 0x4b
 800c98e:	2102      	movs	r1, #2
 800c990:	2008      	movs	r0, #8
 800c992:	f7fe ff55 	bl	800b840 <ST7735_FillRectangle>
		ST7735_FillRectangle(60,2, 46+8+id,75, ST7735_BG_DEF); // правый прямоугольник
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3336      	adds	r3, #54	@ 0x36
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	f641 1325 	movw	r3, #6437	@ 0x1925
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	234b      	movs	r3, #75	@ 0x4b
 800c9a6:	2102      	movs	r1, #2
 800c9a8:	203c      	movs	r0, #60	@ 0x3c
 800c9aa:	f7fe ff49 	bl	800b840 <ST7735_FillRectangle>
 800c9ae:	e0e0      	b.n	800cb72 <display_selected_product+0x2ca>
	}
	else if(id>0 && id<60)
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 8082 	beq.w	800cabc <display_selected_product+0x214>
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b3b      	cmp	r3, #59	@ 0x3b
 800c9bc:	d87e      	bhi.n	800cabc <display_selected_product+0x214>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800c9be:	79fa      	ldrb	r2, [r7, #7]
 800c9c0:	4970      	ldr	r1, [pc, #448]	@ (800cb84 <display_selected_product+0x2dc>)
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	440b      	add	r3, r1
 800c9cc:	330a      	adds	r3, #10
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	79fa      	ldrb	r2, [r7, #7]
 800c9d4:	496b      	ldr	r1, [pc, #428]	@ (800cb84 <display_selected_product+0x2dc>)
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	440b      	add	r3, r1
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	2315      	movs	r3, #21
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	233a      	movs	r3, #58	@ 0x3a
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	232e      	movs	r3, #46	@ 0x2e
 800c9f0:	222e      	movs	r2, #46	@ 0x2e
 800c9f2:	f7ff febb 	bl	800c76c <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	4962      	ldr	r1, [pc, #392]	@ (800cb84 <display_selected_product+0x2dc>)
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	440b      	add	r3, r1
 800ca06:	3307      	adds	r3, #7
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	495c      	ldr	r1, [pc, #368]	@ (800cb84 <display_selected_product+0x2dc>)
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	440b      	add	r3, r1
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	4619      	mov	r1, r3
 800ca22:	2319      	movs	r3, #25
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	2376      	movs	r3, #118	@ 0x76
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	2324      	movs	r3, #36	@ 0x24
 800ca2c:	2224      	movs	r2, #36	@ 0x24
 800ca2e:	f7ff fe9d 	bl	800c76c <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800ca32:	79fb      	ldrb	r3, [r7, #7]
 800ca34:	1e5a      	subs	r2, r3, #1
 800ca36:	4953      	ldr	r1, [pc, #332]	@ (800cb84 <display_selected_product+0x2dc>)
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	440b      	add	r3, r1
 800ca42:	3307      	adds	r3, #7
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	4618      	mov	r0, r3
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	1e5a      	subs	r2, r3, #1
 800ca4c:	494d      	ldr	r1, [pc, #308]	@ (800cb84 <display_selected_product+0x2dc>)
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	440b      	add	r3, r1
 800ca58:	3308      	adds	r3, #8
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	2319      	movs	r3, #25
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	2305      	movs	r3, #5
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	2324      	movs	r3, #36	@ 0x24
 800ca68:	2224      	movs	r2, #36	@ 0x24
 800ca6a:	f7ff fe7f 	bl	800c76c <SPI_Flash_to_LCD>

		ST7735_FillRectangle(60-id,2, 46+8+id,75, ST7735_BG_DEF);// правый прямоугольник
 800ca6e:	79fb      	ldrb	r3, [r7, #7]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800ca76:	b298      	uxth	r0, r3
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	3336      	adds	r3, #54	@ 0x36
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	f641 1325 	movw	r3, #6437	@ 0x1925
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	234b      	movs	r3, #75	@ 0x4b
 800ca88:	2102      	movs	r1, #2
 800ca8a:	f7fe fed9 	bl	800b840 <ST7735_FillRectangle>
		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	332e      	adds	r3, #46	@ 0x2e
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	234b      	movs	r3, #75	@ 0x4b
 800ca9e:	2102      	movs	r1, #2
 800caa0:	2008      	movs	r0, #8
 800caa2:	f7fe fecd 	bl	800b840 <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	b298      	uxth	r0, r3
 800caaa:	f641 1325 	movw	r3, #6437	@ 0x1925
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	234b      	movs	r3, #75	@ 0x4b
 800cab2:	222e      	movs	r2, #46	@ 0x2e
 800cab4:	2102      	movs	r1, #2
 800cab6:	f7fe fec3 	bl	800b840 <ST7735_FillRectangle>
 800caba:	e05a      	b.n	800cb72 <display_selected_product+0x2ca>
	}
	else if(id==60)
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b3c      	cmp	r3, #60	@ 0x3c
 800cac0:	d157      	bne.n	800cb72 <display_selected_product+0x2ca>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800cac2:	79fa      	ldrb	r2, [r7, #7]
 800cac4:	492f      	ldr	r1, [pc, #188]	@ (800cb84 <display_selected_product+0x2dc>)
 800cac6:	4613      	mov	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	440b      	add	r3, r1
 800cad0:	330a      	adds	r3, #10
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	4618      	mov	r0, r3
 800cad6:	79fa      	ldrb	r2, [r7, #7]
 800cad8:	492a      	ldr	r1, [pc, #168]	@ (800cb84 <display_selected_product+0x2dc>)
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	440b      	add	r3, r1
 800cae4:	330c      	adds	r3, #12
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	4619      	mov	r1, r3
 800caea:	2315      	movs	r3, #21
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	233a      	movs	r3, #58	@ 0x3a
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	232e      	movs	r3, #46	@ 0x2e
 800caf4:	222e      	movs	r2, #46	@ 0x2e
 800caf6:	f7ff fe39 	bl	800c76c <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	1e5a      	subs	r2, r3, #1
 800cafe:	4921      	ldr	r1, [pc, #132]	@ (800cb84 <display_selected_product+0x2dc>)
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	3307      	adds	r3, #7
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	79fb      	ldrb	r3, [r7, #7]
 800cb12:	1e5a      	subs	r2, r3, #1
 800cb14:	491b      	ldr	r1, [pc, #108]	@ (800cb84 <display_selected_product+0x2dc>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	3308      	adds	r3, #8
 800cb22:	881b      	ldrh	r3, [r3, #0]
 800cb24:	4619      	mov	r1, r3
 800cb26:	2319      	movs	r3, #25
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	2305      	movs	r3, #5
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	2324      	movs	r3, #36	@ 0x24
 800cb30:	2224      	movs	r2, #36	@ 0x24
 800cb32:	f7ff fe1b 	bl	800c76c <SPI_Flash_to_LCD>
		ST7735_FillRectangle(RIGHT_PIC, ST7735_BLACK);
 800cb36:	2300      	movs	r3, #0
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	2319      	movs	r3, #25
 800cb3c:	2276      	movs	r2, #118	@ 0x76
 800cb3e:	2124      	movs	r1, #36	@ 0x24
 800cb40:	2024      	movs	r0, #36	@ 0x24
 800cb42:	f7fe fe7d 	bl	800b840 <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	332e      	adds	r3, #46	@ 0x2e
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	234b      	movs	r3, #75	@ 0x4b
 800cb56:	2102      	movs	r1, #2
 800cb58:	2008      	movs	r0, #8
 800cb5a:	f7fe fe71 	bl	800b840 <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	b298      	uxth	r0, r3
 800cb62:	f641 1325 	movw	r3, #6437	@ 0x1925
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	234b      	movs	r3, #75	@ 0x4b
 800cb6a:	222e      	movs	r2, #46	@ 0x2e
 800cb6c:	2102      	movs	r1, #2
 800cb6e:	f7fe fe67 	bl	800b840 <ST7735_FillRectangle>
	}
	//HAL_TIM_Base_Start_IT(&htim2);

	//gl_selected_pause = 1;

	gl_selected_flag = 0;
 800cb72:	4b06      	ldr	r3, [pc, #24]	@ (800cb8c <display_selected_product+0x2e4>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	701a      	strb	r2, [r3, #0]
}
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	20001d70 	.word	0x20001d70
 800cb84:	20000108 	.word	0x20000108
 800cb88:	20000098 	.word	0x20000098
 800cb8c:	20000104 	.word	0x20000104

0800cb90 <MPR121_setregister>:
uint8_t left_treshold = 0;
uint8_t right_treshold = 0;
uint8_t touch_direction = 0; //1 -up ,2-down

void MPR121_setregister(uint16_t regaddress, uint8_t value)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af04      	add	r7, sp, #16
 800cb96:	4603      	mov	r3, r0
 800cb98:	460a      	mov	r2, r1
 800cb9a:	80fb      	strh	r3, [r7, #6]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800cba0:	88fa      	ldrh	r2, [r7, #6]
 800cba2:	2364      	movs	r3, #100	@ 0x64
 800cba4:	9302      	str	r3, [sp, #8]
 800cba6:	2301      	movs	r3, #1
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	1d7b      	adds	r3, r7, #5
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	21b4      	movs	r1, #180	@ 0xb4
 800cbb2:	4803      	ldr	r0, [pc, #12]	@ (800cbc0 <MPR121_setregister+0x30>)
 800cbb4:	f7f6 f84a 	bl	8002c4c <HAL_I2C_Mem_Write>
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	20000688 	.word	0x20000688

0800cbc4 <MPR121_readregister>:
int MPR121_readregister(uint16_t regaddress, uint8_t value)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af04      	add	r7, sp, #16
 800cbca:	4603      	mov	r3, r0
 800cbcc:	460a      	mov	r2, r1
 800cbce:	80fb      	strh	r3, [r7, #6]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Read(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800cbd4:	88fa      	ldrh	r2, [r7, #6]
 800cbd6:	2364      	movs	r3, #100	@ 0x64
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	1d7b      	adds	r3, r7, #5
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	21b4      	movs	r1, #180	@ 0xb4
 800cbe6:	4804      	ldr	r0, [pc, #16]	@ (800cbf8 <MPR121_readregister+0x34>)
 800cbe8:	f7f6 f92a 	bl	8002e40 <HAL_I2C_Mem_Read>
	 return value;
 800cbec:	797b      	ldrb	r3, [r7, #5]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000688 	.word	0x20000688

0800cbfc <touch_slider>:

void touch_slider()
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800cc02:	488a      	ldr	r0, [pc, #552]	@ (800ce2c <touch_slider+0x230>)
 800cc04:	f7fa f856 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
		  		uint8_t j= 0x04;
 800cc08:	2304      	movs	r3, #4
 800cc0a:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60bb      	str	r3, [r7, #8]
 800cc10:	e014      	b.n	800cc3c <touch_slider+0x40>
		  		{
		  			capreadbuffer[i] = MPR121_readregister(j,test1);
 800cc12:	7bfb      	ldrb	r3, [r7, #15]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	4a86      	ldr	r2, [pc, #536]	@ (800ce30 <touch_slider+0x234>)
 800cc18:	7812      	ldrb	r2, [r2, #0]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff ffd1 	bl	800cbc4 <MPR121_readregister>
 800cc22:	4603      	mov	r3, r0
 800cc24:	b2d9      	uxtb	r1, r3
 800cc26:	4a83      	ldr	r2, [pc, #524]	@ (800ce34 <touch_slider+0x238>)
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	701a      	strb	r2, [r3, #0]
		  			j+=2;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	3302      	adds	r3, #2
 800cc34:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	60bb      	str	r3, [r7, #8]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2b04      	cmp	r3, #4
 800cc40:	dde7      	ble.n	800cc12 <touch_slider+0x16>
		  		}

		  		for(int i = 0;i<5;i++)
 800cc42:	2300      	movs	r3, #0
 800cc44:	607b      	str	r3, [r7, #4]
 800cc46:	e019      	b.n	800cc7c <touch_slider+0x80>
		  		{
		//  			sprintf(char_buffer, "%03d", capreadbuffer[i]);
		  //			ST7735_WriteString(32*i,0 , char_buffer, Font_7x10, ST7735_WHITE, ST7735_BG_DEF);

		  			if(capreadbuffer[i] <= touch_thrsh[i] && first_touch <= 0)
 800cc48:	4a7a      	ldr	r2, [pc, #488]	@ (800ce34 <touch_slider+0x238>)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	781a      	ldrb	r2, [r3, #0]
 800cc50:	4979      	ldr	r1, [pc, #484]	@ (800ce38 <touch_slider+0x23c>)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	440b      	add	r3, r1
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d80c      	bhi.n	800cc76 <touch_slider+0x7a>
 800cc5c:	4b77      	ldr	r3, [pc, #476]	@ (800ce3c <touch_slider+0x240>)
 800cc5e:	f993 3000 	ldrsb.w	r3, [r3]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	dc07      	bgt.n	800cc76 <touch_slider+0x7a>
		  			{
		  				gl_touch_accel = 1;
 800cc66:	4b76      	ldr	r3, [pc, #472]	@ (800ce40 <touch_slider+0x244>)
 800cc68:	2201      	movs	r2, #1
 800cc6a:	801a      	strh	r2, [r3, #0]
		  				first_touch = i;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	b25a      	sxtb	r2, r3
 800cc70:	4b72      	ldr	r3, [pc, #456]	@ (800ce3c <touch_slider+0x240>)
 800cc72:	701a      	strb	r2, [r3, #0]
		  		//		sprintf(char_buffer, "%01d", first_touch);
		  		//		ST7735_WriteString(15,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);
		  //				HAL_TIM_Base_Start_IT(&htim5);
		  				break;
 800cc74:	e005      	b.n	800cc82 <touch_slider+0x86>
		  		for(int i = 0;i<5;i++)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	dde2      	ble.n	800cc48 <touch_slider+0x4c>
		  			}

		  		}
		  		if(first_touch >= 0 && second_touch!=first_touch) //second_flag == 0)
 800cc82:	4b6e      	ldr	r3, [pc, #440]	@ (800ce3c <touch_slider+0x240>)
 800cc84:	f993 3000 	ldrsb.w	r3, [r3]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f2c0 80c8 	blt.w	800ce1e <touch_slider+0x222>
 800cc8e:	4b6d      	ldr	r3, [pc, #436]	@ (800ce44 <touch_slider+0x248>)
 800cc90:	f993 2000 	ldrsb.w	r2, [r3]
 800cc94:	4b69      	ldr	r3, [pc, #420]	@ (800ce3c <touch_slider+0x240>)
 800cc96:	f993 3000 	ldrsb.w	r3, [r3]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	f000 80bf 	beq.w	800ce1e <touch_slider+0x222>
		  		{
		  			if(second_touch>=0)
 800cca0:	4b68      	ldr	r3, [pc, #416]	@ (800ce44 <touch_slider+0x248>)
 800cca2:	f993 3000 	ldrsb.w	r3, [r3]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	db66      	blt.n	800cd78 <touch_slider+0x17c>
		  			{
		  				//sprintf(char_buffer, "%01d", second_touch);
		  				//ST7735_WriteString(40,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);


		  				if((second_touch-first_touch == -1 || second_touch-first_touch == -2 )&& left_treshold!=1)//
 800ccaa:	4b66      	ldr	r3, [pc, #408]	@ (800ce44 <touch_slider+0x248>)
 800ccac:	f993 3000 	ldrsb.w	r3, [r3]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4b62      	ldr	r3, [pc, #392]	@ (800ce3c <touch_slider+0x240>)
 800ccb4:	f993 3000 	ldrsb.w	r3, [r3]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d00a      	beq.n	800ccd6 <touch_slider+0xda>
 800ccc0:	4b60      	ldr	r3, [pc, #384]	@ (800ce44 <touch_slider+0x248>)
 800ccc2:	f993 3000 	ldrsb.w	r3, [r3]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	4b5c      	ldr	r3, [pc, #368]	@ (800ce3c <touch_slider+0x240>)
 800ccca:	f993 3000 	ldrsb.w	r3, [r3]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	f113 0f02 	cmn.w	r3, #2
 800ccd4:	d11b      	bne.n	800cd0e <touch_slider+0x112>
 800ccd6:	4b5c      	ldr	r3, [pc, #368]	@ (800ce48 <touch_slider+0x24c>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d017      	beq.n	800cd0e <touch_slider+0x112>
		  				{
		  					gl_touch_change_id = 1;
 800ccde:	4b5b      	ldr	r3, [pc, #364]	@ (800ce4c <touch_slider+0x250>)
 800cce0:	2201      	movs	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]

		  					//touch_accel_to_disp = gl_touch_accel_inc;
		  					//gl_touch_accel = 0;
		  					//gl_touch_accel_inc = 0;

		  					touch_direction = UP;
 800cce4:	4b5a      	ldr	r3, [pc, #360]	@ (800ce50 <touch_slider+0x254>)
 800cce6:	2201      	movs	r2, #1
 800cce8:	701a      	strb	r2, [r3, #0]

		  					if(gl_id_to_display<60)
 800ccea:	4b5a      	ldr	r3, [pc, #360]	@ (800ce54 <touch_slider+0x258>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b3b      	cmp	r3, #59	@ 0x3b
 800ccf0:	d806      	bhi.n	800cd00 <touch_slider+0x104>
		  						//	id_to_display+=3;
		  						//	id_to_displ_fast_scroll = 1 ;
		  					//	}
		  						//else
		  						//{
		  						gl_id_to_display++;
 800ccf2:	4b58      	ldr	r3, [pc, #352]	@ (800ce54 <touch_slider+0x258>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b56      	ldr	r3, [pc, #344]	@ (800ce54 <touch_slider+0x258>)
 800ccfc:	701a      	strb	r2, [r3, #0]
 800ccfe:	e002      	b.n	800cd06 <touch_slider+0x10a>
		  						//}
		  					}
		  					else
		  					{
		  						gl_id_to_display = 0;
 800cd00:	4b54      	ldr	r3, [pc, #336]	@ (800ce54 <touch_slider+0x258>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800cd06:	4b54      	ldr	r3, [pc, #336]	@ (800ce58 <touch_slider+0x25c>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
 800cd0c:	e034      	b.n	800cd78 <touch_slider+0x17c>
		  				//	HAL_TIM_Base_Stop_IT(&htim2);
		  				}
		  				else if((second_touch-first_touch == 1 || second_touch-first_touch == 2)&& right_treshold!=1)//
 800cd0e:	4b4d      	ldr	r3, [pc, #308]	@ (800ce44 <touch_slider+0x248>)
 800cd10:	f993 3000 	ldrsb.w	r3, [r3]
 800cd14:	461a      	mov	r2, r3
 800cd16:	4b49      	ldr	r3, [pc, #292]	@ (800ce3c <touch_slider+0x240>)
 800cd18:	f993 3000 	ldrsb.w	r3, [r3]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d009      	beq.n	800cd36 <touch_slider+0x13a>
 800cd22:	4b48      	ldr	r3, [pc, #288]	@ (800ce44 <touch_slider+0x248>)
 800cd24:	f993 3000 	ldrsb.w	r3, [r3]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	4b44      	ldr	r3, [pc, #272]	@ (800ce3c <touch_slider+0x240>)
 800cd2c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d120      	bne.n	800cd78 <touch_slider+0x17c>
 800cd36:	4b49      	ldr	r3, [pc, #292]	@ (800ce5c <touch_slider+0x260>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d01c      	beq.n	800cd78 <touch_slider+0x17c>
		  				{
		  					gl_touch_change_id = 1;
 800cd3e:	4b43      	ldr	r3, [pc, #268]	@ (800ce4c <touch_slider+0x250>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]

		  						  					//touch_accel_to_disp = gl_touch_accel_inc;
		  						  							gl_touch_accel = 0;
 800cd44:	4b3e      	ldr	r3, [pc, #248]	@ (800ce40 <touch_slider+0x244>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	801a      	strh	r2, [r3, #0]
		  						  							gl_touch_accel_inc = 0;
 800cd4a:	4b45      	ldr	r3, [pc, #276]	@ (800ce60 <touch_slider+0x264>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	801a      	strh	r2, [r3, #0]
		  					touch_direction = DOWN;
 800cd50:	4b3f      	ldr	r3, [pc, #252]	@ (800ce50 <touch_slider+0x254>)
 800cd52:	2202      	movs	r2, #2
 800cd54:	701a      	strb	r2, [r3, #0]
		  					if(gl_id_to_display>0)
 800cd56:	4b3f      	ldr	r3, [pc, #252]	@ (800ce54 <touch_slider+0x258>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <touch_slider+0x170>
	//	  							id_to_display-=3;
	//	  							//id_to_displ_fast_scroll = 2 ;
	//	  						}
	//	  						else
		  					//	{
		  						gl_id_to_display--;//id_changed_by_touch = 0;
 800cd5e:	4b3d      	ldr	r3, [pc, #244]	@ (800ce54 <touch_slider+0x258>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	3b01      	subs	r3, #1
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	4b3b      	ldr	r3, [pc, #236]	@ (800ce54 <touch_slider+0x258>)
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	e002      	b.n	800cd72 <touch_slider+0x176>


		  					}
		  					else
		  					{
		  						gl_id_to_display = 60;
 800cd6c:	4b39      	ldr	r3, [pc, #228]	@ (800ce54 <touch_slider+0x258>)
 800cd6e:	223c      	movs	r2, #60	@ 0x3c
 800cd70:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800cd72:	4b39      	ldr	r3, [pc, #228]	@ (800ce58 <touch_slider+0x25c>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]
		  				//	HAL_TIM_Base_Stop_IT(&htim2);

		  				}

		  			}
		  			if(left_treshold==1)
 800cd78:	4b33      	ldr	r3, [pc, #204]	@ (800ce48 <touch_slider+0x24c>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d115      	bne.n	800cdac <touch_slider+0x1b0>
		  			{
		  				if((first_touch == 1 ||  first_touch == 2) && second_touch == 0)
 800cd80:	4b2e      	ldr	r3, [pc, #184]	@ (800ce3c <touch_slider+0x240>)
 800cd82:	f993 3000 	ldrsb.w	r3, [r3]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d004      	beq.n	800cd94 <touch_slider+0x198>
 800cd8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce3c <touch_slider+0x240>)
 800cd8c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d108      	bne.n	800cda6 <touch_slider+0x1aa>
 800cd94:	4b2b      	ldr	r3, [pc, #172]	@ (800ce44 <touch_slider+0x248>)
 800cd96:	f993 3000 	ldrsb.w	r3, [r3]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <touch_slider+0x1aa>
		  				{
		  					left_treshold = 2;
 800cd9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ce48 <touch_slider+0x24c>)
 800cda0:	2202      	movs	r2, #2
 800cda2:	701a      	strb	r2, [r3, #0]
 800cda4:	e002      	b.n	800cdac <touch_slider+0x1b0>
		  				}
		  				else
		  				{
		  					left_treshold  = 0;
 800cda6:	4b28      	ldr	r3, [pc, #160]	@ (800ce48 <touch_slider+0x24c>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 0 && second_touch == 1)
 800cdac:	4b23      	ldr	r3, [pc, #140]	@ (800ce3c <touch_slider+0x240>)
 800cdae:	f993 3000 	ldrsb.w	r3, [r3]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d107      	bne.n	800cdc6 <touch_slider+0x1ca>
 800cdb6:	4b23      	ldr	r3, [pc, #140]	@ (800ce44 <touch_slider+0x248>)
 800cdb8:	f993 3000 	ldrsb.w	r3, [r3]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d102      	bne.n	800cdc6 <touch_slider+0x1ca>
		  			{
		  				left_treshold = 1;
 800cdc0:	4b21      	ldr	r3, [pc, #132]	@ (800ce48 <touch_slider+0x24c>)
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	701a      	strb	r2, [r3, #0]
		  			}

		  			if(right_treshold==1)
 800cdc6:	4b25      	ldr	r3, [pc, #148]	@ (800ce5c <touch_slider+0x260>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d115      	bne.n	800cdfa <touch_slider+0x1fe>
		  			{
		  				if((first_touch == 3 ||  first_touch == 2) && second_touch == 4)
 800cdce:	4b1b      	ldr	r3, [pc, #108]	@ (800ce3c <touch_slider+0x240>)
 800cdd0:	f993 3000 	ldrsb.w	r3, [r3]
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d004      	beq.n	800cde2 <touch_slider+0x1e6>
 800cdd8:	4b18      	ldr	r3, [pc, #96]	@ (800ce3c <touch_slider+0x240>)
 800cdda:	f993 3000 	ldrsb.w	r3, [r3]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d108      	bne.n	800cdf4 <touch_slider+0x1f8>
 800cde2:	4b18      	ldr	r3, [pc, #96]	@ (800ce44 <touch_slider+0x248>)
 800cde4:	f993 3000 	ldrsb.w	r3, [r3]
 800cde8:	2b04      	cmp	r3, #4
 800cdea:	d103      	bne.n	800cdf4 <touch_slider+0x1f8>
		  				{
		  					right_treshold = 2;
 800cdec:	4b1b      	ldr	r3, [pc, #108]	@ (800ce5c <touch_slider+0x260>)
 800cdee:	2202      	movs	r2, #2
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	e002      	b.n	800cdfa <touch_slider+0x1fe>
		  				}
		  				else
		  				{
		  					right_treshold  = 0;
 800cdf4:	4b19      	ldr	r3, [pc, #100]	@ (800ce5c <touch_slider+0x260>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 4 && second_touch == 3)
 800cdfa:	4b10      	ldr	r3, [pc, #64]	@ (800ce3c <touch_slider+0x240>)
 800cdfc:	f993 3000 	ldrsb.w	r3, [r3]
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d107      	bne.n	800ce14 <touch_slider+0x218>
 800ce04:	4b0f      	ldr	r3, [pc, #60]	@ (800ce44 <touch_slider+0x248>)
 800ce06:	f993 3000 	ldrsb.w	r3, [r3]
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d102      	bne.n	800ce14 <touch_slider+0x218>
		  			{
		  				right_treshold = 1;
 800ce0e:	4b13      	ldr	r3, [pc, #76]	@ (800ce5c <touch_slider+0x260>)
 800ce10:	2201      	movs	r2, #1
 800ce12:	701a      	strb	r2, [r3, #0]
		  			}
		  			second_touch = first_touch;
 800ce14:	4b09      	ldr	r3, [pc, #36]	@ (800ce3c <touch_slider+0x240>)
 800ce16:	f993 2000 	ldrsb.w	r2, [r3]
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce44 <touch_slider+0x248>)
 800ce1c:	701a      	strb	r2, [r3, #0]

		  		else if(touch_direction == NONE)
		  		{

		  		}
		  		first_touch = -100;
 800ce1e:	4b07      	ldr	r3, [pc, #28]	@ (800ce3c <touch_slider+0x240>)
 800ce20:	229c      	movs	r2, #156	@ 0x9c
 800ce22:	701a      	strb	r2, [r3, #0]
}
 800ce24:	bf00      	nop
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	2000085c 	.word	0x2000085c
 800ce30:	20001d82 	.word	0x20001d82
 800ce34:	20001d78 	.word	0x20001d78
 800ce38:	200005cc 	.word	0x200005cc
 800ce3c:	200005d1 	.word	0x200005d1
 800ce40:	20000942 	.word	0x20000942
 800ce44:	200005d2 	.word	0x200005d2
 800ce48:	20001d83 	.word	0x20001d83
 800ce4c:	20000940 	.word	0x20000940
 800ce50:	20001d85 	.word	0x20001d85
 800ce54:	20000935 	.word	0x20000935
 800ce58:	20000934 	.word	0x20000934
 800ce5c:	20001d84 	.word	0x20001d84
 800ce60:	20000944 	.word	0x20000944

0800ce64 <touch_init>:

void touch_init()
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
	MPR121_setregister(MHD_R,0x01);
 800ce68:	2101      	movs	r1, #1
 800ce6a:	202b      	movs	r0, #43	@ 0x2b
 800ce6c:	f7ff fe90 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(NHD_R,0x01);
 800ce70:	2101      	movs	r1, #1
 800ce72:	202c      	movs	r0, #44	@ 0x2c
 800ce74:	f7ff fe8c 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(NCL_R,0x00);
 800ce78:	2100      	movs	r1, #0
 800ce7a:	202d      	movs	r0, #45	@ 0x2d
 800ce7c:	f7ff fe88 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(FDL_R,0x00);
 800ce80:	2100      	movs	r1, #0
 800ce82:	202e      	movs	r0, #46	@ 0x2e
 800ce84:	f7ff fe84 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(MHD_F,0x01);
 800ce88:	2101      	movs	r1, #1
 800ce8a:	202f      	movs	r0, #47	@ 0x2f
 800ce8c:	f7ff fe80 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(NHD_F,0x01);
 800ce90:	2101      	movs	r1, #1
 800ce92:	2030      	movs	r0, #48	@ 0x30
 800ce94:	f7ff fe7c 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(NCL_F,0xFF);
 800ce98:	21ff      	movs	r1, #255	@ 0xff
 800ce9a:	2031      	movs	r0, #49	@ 0x31
 800ce9c:	f7ff fe78 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(FDL_F,0x02);
 800cea0:	2102      	movs	r1, #2
 800cea2:	2032      	movs	r0, #50	@ 0x32
 800cea4:	f7ff fe74 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE0_T,TOU_THRESH);
 800cea8:	2106      	movs	r1, #6
 800ceaa:	2041      	movs	r0, #65	@ 0x41
 800ceac:	f7ff fe70 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE0_R,TOU_THRESH);
 800ceb0:	2106      	movs	r1, #6
 800ceb2:	2042      	movs	r0, #66	@ 0x42
 800ceb4:	f7ff fe6c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE1_T,TOU_THRESH);
 800ceb8:	2106      	movs	r1, #6
 800ceba:	2043      	movs	r0, #67	@ 0x43
 800cebc:	f7ff fe68 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE1_R,TOU_THRESH);
 800cec0:	2106      	movs	r1, #6
 800cec2:	2044      	movs	r0, #68	@ 0x44
 800cec4:	f7ff fe64 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE2_T,TOU_THRESH);
 800cec8:	2106      	movs	r1, #6
 800ceca:	2045      	movs	r0, #69	@ 0x45
 800cecc:	f7ff fe60 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE2_R,TOU_THRESH);
 800ced0:	2106      	movs	r1, #6
 800ced2:	2046      	movs	r0, #70	@ 0x46
 800ced4:	f7ff fe5c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE3_T,TOU_THRESH);
 800ced8:	2106      	movs	r1, #6
 800ceda:	2047      	movs	r0, #71	@ 0x47
 800cedc:	f7ff fe58 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE3_R,TOU_THRESH);
 800cee0:	2106      	movs	r1, #6
 800cee2:	2048      	movs	r0, #72	@ 0x48
 800cee4:	f7ff fe54 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE4_T,TOU_THRESH);
 800cee8:	2106      	movs	r1, #6
 800ceea:	2049      	movs	r0, #73	@ 0x49
 800ceec:	f7ff fe50 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE4_R,TOU_THRESH);
 800cef0:	2106      	movs	r1, #6
 800cef2:	204a      	movs	r0, #74	@ 0x4a
 800cef4:	f7ff fe4c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE5_T,TOU_THRESH);
 800cef8:	2106      	movs	r1, #6
 800cefa:	204b      	movs	r0, #75	@ 0x4b
 800cefc:	f7ff fe48 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE5_R,TOU_THRESH);
 800cf00:	2106      	movs	r1, #6
 800cf02:	204c      	movs	r0, #76	@ 0x4c
 800cf04:	f7ff fe44 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE6_T,TOU_THRESH);
 800cf08:	2106      	movs	r1, #6
 800cf0a:	204d      	movs	r0, #77	@ 0x4d
 800cf0c:	f7ff fe40 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE6_R,TOU_THRESH);
 800cf10:	2106      	movs	r1, #6
 800cf12:	204e      	movs	r0, #78	@ 0x4e
 800cf14:	f7ff fe3c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE7_T,TOU_THRESH);
 800cf18:	2106      	movs	r1, #6
 800cf1a:	204f      	movs	r0, #79	@ 0x4f
 800cf1c:	f7ff fe38 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE7_R,TOU_THRESH);
 800cf20:	2106      	movs	r1, #6
 800cf22:	2050      	movs	r0, #80	@ 0x50
 800cf24:	f7ff fe34 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE8_T,TOU_THRESH);
 800cf28:	2106      	movs	r1, #6
 800cf2a:	2051      	movs	r0, #81	@ 0x51
 800cf2c:	f7ff fe30 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE8_R,TOU_THRESH);
 800cf30:	2106      	movs	r1, #6
 800cf32:	2052      	movs	r0, #82	@ 0x52
 800cf34:	f7ff fe2c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE9_T,TOU_THRESH);
 800cf38:	2106      	movs	r1, #6
 800cf3a:	2053      	movs	r0, #83	@ 0x53
 800cf3c:	f7ff fe28 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE9_R,TOU_THRESH);
 800cf40:	2106      	movs	r1, #6
 800cf42:	2054      	movs	r0, #84	@ 0x54
 800cf44:	f7ff fe24 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE10_T,TOU_THRESH);
 800cf48:	2106      	movs	r1, #6
 800cf4a:	2055      	movs	r0, #85	@ 0x55
 800cf4c:	f7ff fe20 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE10_R,TOU_THRESH);
 800cf50:	2106      	movs	r1, #6
 800cf52:	2056      	movs	r0, #86	@ 0x56
 800cf54:	f7ff fe1c 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(ELE11_T,TOU_THRESH);
 800cf58:	2106      	movs	r1, #6
 800cf5a:	2057      	movs	r0, #87	@ 0x57
 800cf5c:	f7ff fe18 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE11_R,TOU_THRESH);
 800cf60:	2106      	movs	r1, #6
 800cf62:	2058      	movs	r0, #88	@ 0x58
 800cf64:	f7ff fe14 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(AFE_CFG1,0x15);
 800cf68:	2115      	movs	r1, #21
 800cf6a:	205c      	movs	r0, #92	@ 0x5c
 800cf6c:	f7ff fe10 	bl	800cb90 <MPR121_setregister>

	MPR121_setregister(FIL_CFG,0x04);
 800cf70:	2104      	movs	r1, #4
 800cf72:	205d      	movs	r0, #93	@ 0x5d
 800cf74:	f7ff fe0c 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800cf78:	210c      	movs	r1, #12
 800cf7a:	205e      	movs	r0, #94	@ 0x5e
 800cf7c:	f7ff fe08 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800cf80:	210c      	movs	r1, #12
 800cf82:	205e      	movs	r0, #94	@ 0x5e
 800cf84:	f7ff fe04 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ATO_CFG0,0x0F);
 800cf88:	210f      	movs	r1, #15
 800cf8a:	207b      	movs	r0, #123	@ 0x7b
 800cf8c:	f7ff fe00 	bl	800cb90 <MPR121_setregister>
	MPR121_setregister(ATO_CFGU,0xC8);
 800cf90:	21c8      	movs	r1, #200	@ 0xc8
 800cf92:	207d      	movs	r0, #125	@ 0x7d
 800cf94:	f7ff fdfc 	bl	800cb90 <MPR121_setregister>
}
 800cf98:	bf00      	nop
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af02      	add	r7, sp, #8
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800cfa6:	f107 020f 	add.w	r2, r7, #15
 800cfaa:	1df9      	adds	r1, r7, #7
 800cfac:	2364      	movs	r3, #100	@ 0x64
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4804      	ldr	r0, [pc, #16]	@ (800cfc4 <W25qxx_Spi+0x28>)
 800cfb4:	f7f9 fb5b 	bl	800666e <HAL_SPI_TransmitReceive>
	return ret;
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200006fc 	.word	0x200006fc

0800cfc8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60fb      	str	r3, [r7, #12]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cfe4:	4813      	ldr	r0, [pc, #76]	@ (800d034 <W25qxx_ReadID+0x6c>)
 800cfe6:	f7f5 fcbb 	bl	8002960 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800cfea:	209f      	movs	r0, #159	@ 0x9f
 800cfec:	f7ff ffd6 	bl	800cf9c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cff0:	20a5      	movs	r0, #165	@ 0xa5
 800cff2:	f7ff ffd3 	bl	800cf9c <W25qxx_Spi>
 800cff6:	4603      	mov	r3, r0
 800cff8:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cffa:	20a5      	movs	r0, #165	@ 0xa5
 800cffc:	f7ff ffce 	bl	800cf9c <W25qxx_Spi>
 800d000:	4603      	mov	r3, r0
 800d002:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d004:	20a5      	movs	r0, #165	@ 0xa5
 800d006:	f7ff ffc9 	bl	800cf9c <W25qxx_Spi>
 800d00a:	4603      	mov	r3, r0
 800d00c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d00e:	2201      	movs	r2, #1
 800d010:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d014:	4807      	ldr	r0, [pc, #28]	@ (800d034 <W25qxx_ReadID+0x6c>)
 800d016:	f7f5 fca3 	bl	8002960 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	041a      	lsls	r2, r3, #16
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	4313      	orrs	r3, r2
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	4313      	orrs	r3, r2
 800d028:	60fb      	str	r3, [r7, #12]
	return Temp;
 800d02a:	68fb      	ldr	r3, [r7, #12]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	40020800 	.word	0x40020800

0800d038 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800d038:	b590      	push	{r4, r7, lr}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d03e:	2200      	movs	r2, #0
 800d040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d044:	4816      	ldr	r0, [pc, #88]	@ (800d0a0 <W25qxx_ReadUniqID+0x68>)
 800d046:	f7f5 fc8b 	bl	8002960 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800d04a:	204b      	movs	r0, #75	@ 0x4b
 800d04c:	f7ff ffa6 	bl	800cf9c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800d050:	2300      	movs	r3, #0
 800d052:	71fb      	strb	r3, [r7, #7]
 800d054:	e005      	b.n	800d062 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d056:	20a5      	movs	r0, #165	@ 0xa5
 800d058:	f7ff ffa0 	bl	800cf9c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	3301      	adds	r3, #1
 800d060:	71fb      	strb	r3, [r7, #7]
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d9f6      	bls.n	800d056 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 800d068:	2300      	movs	r3, #0
 800d06a:	71bb      	strb	r3, [r7, #6]
 800d06c:	e00b      	b.n	800d086 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d06e:	79bc      	ldrb	r4, [r7, #6]
 800d070:	20a5      	movs	r0, #165	@ 0xa5
 800d072:	f7ff ff93 	bl	800cf9c <W25qxx_Spi>
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
 800d07a:	4b0a      	ldr	r3, [pc, #40]	@ (800d0a4 <W25qxx_ReadUniqID+0x6c>)
 800d07c:	4423      	add	r3, r4
 800d07e:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800d080:	79bb      	ldrb	r3, [r7, #6]
 800d082:	3301      	adds	r3, #1
 800d084:	71bb      	strb	r3, [r7, #6]
 800d086:	79bb      	ldrb	r3, [r7, #6]
 800d088:	2b07      	cmp	r3, #7
 800d08a:	d9f0      	bls.n	800d06e <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d08c:	2201      	movs	r2, #1
 800d08e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d092:	4803      	ldr	r0, [pc, #12]	@ (800d0a0 <W25qxx_ReadUniqID+0x68>)
 800d094:	f7f5 fc64 	bl	8002960 <HAL_GPIO_WritePin>
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd90      	pop	{r4, r7, pc}
 800d0a0:	40020800 	.word	0x40020800
 800d0a4:	20001d88 	.word	0x20001d88

0800d0a8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d0bc:	481c      	ldr	r0, [pc, #112]	@ (800d130 <W25qxx_ReadStatusRegister+0x88>)
 800d0be:	f7f5 fc4f 	bl	8002960 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d10c      	bne.n	800d0e2 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800d0c8:	2005      	movs	r0, #5
 800d0ca:	f7ff ff67 	bl	800cf9c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d0ce:	20a5      	movs	r0, #165	@ 0xa5
 800d0d0:	f7ff ff64 	bl	800cf9c <W25qxx_Spi>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800d0d8:	4a16      	ldr	r2, [pc, #88]	@ (800d134 <W25qxx_ReadStatusRegister+0x8c>)
 800d0da:	7bfb      	ldrb	r3, [r7, #15]
 800d0dc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800d0e0:	e01b      	b.n	800d11a <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d10c      	bne.n	800d102 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800d0e8:	2035      	movs	r0, #53	@ 0x35
 800d0ea:	f7ff ff57 	bl	800cf9c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d0ee:	20a5      	movs	r0, #165	@ 0xa5
 800d0f0:	f7ff ff54 	bl	800cf9c <W25qxx_Spi>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800d0f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d134 <W25qxx_ReadStatusRegister+0x8c>)
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 800d100:	e00b      	b.n	800d11a <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800d102:	2015      	movs	r0, #21
 800d104:	f7ff ff4a 	bl	800cf9c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800d108:	20a5      	movs	r0, #165	@ 0xa5
 800d10a:	f7ff ff47 	bl	800cf9c <W25qxx_Spi>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800d112:	4a08      	ldr	r2, [pc, #32]	@ (800d134 <W25qxx_ReadStatusRegister+0x8c>)
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d11a:	2201      	movs	r2, #1
 800d11c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d120:	4803      	ldr	r0, [pc, #12]	@ (800d130 <W25qxx_ReadStatusRegister+0x88>)
 800d122:	f7f5 fc1d 	bl	8002960 <HAL_GPIO_WritePin>
	return status;
 800d126:	7bfb      	ldrb	r3, [r7, #15]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	40020800 	.word	0x40020800
 800d134:	20001d88 	.word	0x20001d88

0800d138 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800d13e:	4b65      	ldr	r3, [pc, #404]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800d146:	e002      	b.n	800d14e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800d148:	2001      	movs	r0, #1
 800d14a:	f7f4 fbeb 	bl	8001924 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800d14e:	f7f4 fbdd 	bl	800190c <HAL_GetTick>
 800d152:	4603      	mov	r3, r0
 800d154:	2b63      	cmp	r3, #99	@ 0x63
 800d156:	d9f7      	bls.n	800d148 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d158:	2201      	movs	r2, #1
 800d15a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d15e:	485e      	ldr	r0, [pc, #376]	@ (800d2d8 <W25qxx_Init+0x1a0>)
 800d160:	f7f5 fbfe 	bl	8002960 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800d164:	2064      	movs	r0, #100	@ 0x64
 800d166:	f7f4 fbdd 	bl	8001924 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800d16a:	f7ff ff2d 	bl	800cfc8 <W25qxx_ReadID>
 800d16e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	3b11      	subs	r3, #17
 800d176:	2b0f      	cmp	r3, #15
 800d178:	d86b      	bhi.n	800d252 <W25qxx_Init+0x11a>
 800d17a:	a201      	add	r2, pc, #4	@ (adr r2, 800d180 <W25qxx_Init+0x48>)
 800d17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d180:	0800d245 	.word	0x0800d245
 800d184:	0800d237 	.word	0x0800d237
 800d188:	0800d229 	.word	0x0800d229
 800d18c:	0800d21b 	.word	0x0800d21b
 800d190:	0800d20d 	.word	0x0800d20d
 800d194:	0800d1ff 	.word	0x0800d1ff
 800d198:	0800d1f1 	.word	0x0800d1f1
 800d19c:	0800d1e1 	.word	0x0800d1e1
 800d1a0:	0800d1d1 	.word	0x0800d1d1
 800d1a4:	0800d253 	.word	0x0800d253
 800d1a8:	0800d253 	.word	0x0800d253
 800d1ac:	0800d253 	.word	0x0800d253
 800d1b0:	0800d253 	.word	0x0800d253
 800d1b4:	0800d253 	.word	0x0800d253
 800d1b8:	0800d253 	.word	0x0800d253
 800d1bc:	0800d1c1 	.word	0x0800d1c1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800d1c0:	4b44      	ldr	r3, [pc, #272]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1c2:	220a      	movs	r2, #10
 800d1c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800d1c6:	4b43      	ldr	r3, [pc, #268]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d1cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800d1ce:	e046      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800d1d0:	4b40      	ldr	r3, [pc, #256]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1d2:	2209      	movs	r2, #9
 800d1d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800d1d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800d1de:	e03e      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800d1e0:	4b3c      	ldr	r3, [pc, #240]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1e2:	2208      	movs	r2, #8
 800d1e4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800d1e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800d1ee:	e036      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800d1f0:	4b38      	ldr	r3, [pc, #224]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1f2:	2207      	movs	r2, #7
 800d1f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800d1f6:	4b37      	ldr	r3, [pc, #220]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d1f8:	2280      	movs	r2, #128	@ 0x80
 800d1fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800d1fc:	e02f      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800d1fe:	4b35      	ldr	r3, [pc, #212]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d200:	2206      	movs	r2, #6
 800d202:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800d204:	4b33      	ldr	r3, [pc, #204]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d206:	2240      	movs	r2, #64	@ 0x40
 800d208:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800d20a:	e028      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800d20c:	4b31      	ldr	r3, [pc, #196]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d20e:	2205      	movs	r2, #5
 800d210:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800d212:	4b30      	ldr	r3, [pc, #192]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d214:	2220      	movs	r2, #32
 800d216:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800d218:	e021      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800d21a:	4b2e      	ldr	r3, [pc, #184]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d21c:	2204      	movs	r2, #4
 800d21e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800d220:	4b2c      	ldr	r3, [pc, #176]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d222:	2210      	movs	r2, #16
 800d224:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800d226:	e01a      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800d228:	4b2a      	ldr	r3, [pc, #168]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d22a:	2203      	movs	r2, #3
 800d22c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800d22e:	4b29      	ldr	r3, [pc, #164]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d230:	2208      	movs	r2, #8
 800d232:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800d234:	e013      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800d236:	4b27      	ldr	r3, [pc, #156]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d238:	2202      	movs	r2, #2
 800d23a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800d23c:	4b25      	ldr	r3, [pc, #148]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d23e:	2204      	movs	r2, #4
 800d240:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800d242:	e00c      	b.n	800d25e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800d244:	4b23      	ldr	r3, [pc, #140]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d246:	2201      	movs	r2, #1
 800d248:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800d24a:	4b22      	ldr	r3, [pc, #136]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d24c:	2202      	movs	r2, #2
 800d24e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800d250:	e005      	b.n	800d25e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800d252:	4b20      	ldr	r3, [pc, #128]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e036      	b.n	800d2cc <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800d25e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d260:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d264:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800d266:	4b1b      	ldr	r3, [pc, #108]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d268:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d26c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800d26e:	4b19      	ldr	r3, [pc, #100]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	011b      	lsls	r3, r3, #4
 800d274:	4a17      	ldr	r2, [pc, #92]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d276:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800d278:	4b16      	ldr	r3, [pc, #88]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	4a15      	ldr	r2, [pc, #84]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d27e:	6912      	ldr	r2, [r2, #16]
 800d280:	fb02 f303 	mul.w	r3, r2, r3
 800d284:	4a13      	ldr	r2, [pc, #76]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d286:	8952      	ldrh	r2, [r2, #10]
 800d288:	fbb3 f3f2 	udiv	r3, r3, r2
 800d28c:	4a11      	ldr	r2, [pc, #68]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d28e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800d290:	4b10      	ldr	r3, [pc, #64]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	011b      	lsls	r3, r3, #4
 800d296:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d298:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800d29a:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	4a0d      	ldr	r2, [pc, #52]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d2a0:	6912      	ldr	r2, [r2, #16]
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	0a9b      	lsrs	r3, r3, #10
 800d2a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d2aa:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800d2ac:	f7ff fec4 	bl	800d038 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f7ff fef9 	bl	800d0a8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800d2b6:	2002      	movs	r0, #2
 800d2b8:	f7ff fef6 	bl	800d0a8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800d2bc:	2003      	movs	r0, #3
 800d2be:	f7ff fef3 	bl	800d0a8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800d2c2:	4b04      	ldr	r3, [pc, #16]	@ (800d2d4 <W25qxx_Init+0x19c>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 800d2ca:	2301      	movs	r3, #1
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	20001d88 	.word	0x20001d88
 800d2d8:	40020800 	.word	0x40020800

0800d2dc <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800d2e4:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <W25qxx_BlockToPage+0x28>)
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	fb02 f303 	mul.w	r3, r2, r3
 800d2ee:	4a05      	ldr	r2, [pc, #20]	@ (800d304 <W25qxx_BlockToPage+0x28>)
 800d2f0:	8952      	ldrh	r2, [r2, #10]
 800d2f2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20001d88 	.word	0x20001d88

0800d308 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800d316:	e002      	b.n	800d31e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800d318:	2001      	movs	r0, #1
 800d31a:	f7f4 fb03 	bl	8001924 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800d31e:	4b37      	ldr	r3, [pc, #220]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d320:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d324:	2b01      	cmp	r3, #1
 800d326:	d0f7      	beq.n	800d318 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800d328:	4b34      	ldr	r3, [pc, #208]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800d330:	4b32      	ldr	r3, [pc, #200]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d332:	895b      	ldrh	r3, [r3, #10]
 800d334:	461a      	mov	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	4293      	cmp	r3, r2
 800d33a:	d802      	bhi.n	800d342 <W25qxx_ReadPage+0x3a>
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d102      	bne.n	800d348 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800d342:	4b2e      	ldr	r3, [pc, #184]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d344:	895b      	ldrh	r3, [r3, #10]
 800d346:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	4413      	add	r3, r2
 800d34e:	4a2b      	ldr	r2, [pc, #172]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d350:	8952      	ldrh	r2, [r2, #10]
 800d352:	4293      	cmp	r3, r2
 800d354:	d905      	bls.n	800d362 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800d356:	4b29      	ldr	r3, [pc, #164]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d358:	895b      	ldrh	r3, [r3, #10]
 800d35a:	461a      	mov	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800d362:	4b26      	ldr	r3, [pc, #152]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d364:	895b      	ldrh	r3, [r3, #10]
 800d366:	461a      	mov	r2, r3
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	fb02 f303 	mul.w	r3, r2, r3
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d374:	2200      	movs	r2, #0
 800d376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d37a:	4821      	ldr	r0, [pc, #132]	@ (800d400 <W25qxx_ReadPage+0xf8>)
 800d37c:	f7f5 faf0 	bl	8002960 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800d380:	4b1e      	ldr	r3, [pc, #120]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b08      	cmp	r3, #8
 800d386:	d909      	bls.n	800d39c <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800d388:	200c      	movs	r0, #12
 800d38a:	f7ff fe07 	bl	800cf9c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	0e1b      	lsrs	r3, r3, #24
 800d392:	b2db      	uxtb	r3, r3
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fe01 	bl	800cf9c <W25qxx_Spi>
 800d39a:	e002      	b.n	800d3a2 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800d39c:	200b      	movs	r0, #11
 800d39e:	f7ff fdfd 	bl	800cf9c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	0c1b      	lsrs	r3, r3, #16
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff fdf7 	bl	800cf9c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	0a1b      	lsrs	r3, r3, #8
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff fdf1 	bl	800cf9c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff fdec 	bl	800cf9c <W25qxx_Spi>
	W25qxx_Spi(0);
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f7ff fde9 	bl	800cf9c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	2364      	movs	r3, #100	@ 0x64
 800d3d0:	68f9      	ldr	r1, [r7, #12]
 800d3d2:	480c      	ldr	r0, [pc, #48]	@ (800d404 <W25qxx_ReadPage+0xfc>)
 800d3d4:	f7f9 f83a 	bl	800644c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d3de:	4808      	ldr	r0, [pc, #32]	@ (800d400 <W25qxx_ReadPage+0xf8>)
 800d3e0:	f7f5 fabe 	bl	8002960 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	f7f4 fa9d 	bl	8001924 <HAL_Delay>
	w25qxx.Lock = 0;
 800d3ea:	4b04      	ldr	r3, [pc, #16]	@ (800d3fc <W25qxx_ReadPage+0xf4>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800d3f2:	bf00      	nop
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20001d88 	.word	0x20001d88
 800d400:	40020800 	.word	0x40020800
 800d404:	200006fc 	.word	0x200006fc

0800d408 <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800d416:	4b2c      	ldr	r3, [pc, #176]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d802      	bhi.n	800d426 <W25qxx_ReadBlock+0x1e>
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800d426:	4b28      	ldr	r3, [pc, #160]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800d42c:	4b26      	ldr	r3, [pc, #152]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	429a      	cmp	r2, r3
 800d434:	d243      	bcs.n	800d4be <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	441a      	add	r2, r3
 800d43c:	4b22      	ldr	r3, [pc, #136]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	429a      	cmp	r2, r3
 800d442:	d905      	bls.n	800d450 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800d444:	4b20      	ldr	r3, [pc, #128]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d446:	699a      	ldr	r2, [r3, #24]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	61bb      	str	r3, [r7, #24]
 800d44e:	e001      	b.n	800d454 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800d454:	68b8      	ldr	r0, [r7, #8]
 800d456:	f7ff ff41 	bl	800d2dc <W25qxx_BlockToPage>
 800d45a:	4602      	mov	r2, r0
 800d45c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d45e:	895b      	ldrh	r3, [r3, #10]
 800d460:	4619      	mov	r1, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	fbb3 f3f1 	udiv	r3, r3, r1
 800d468:	4413      	add	r3, r2
 800d46a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800d46c:	4b16      	ldr	r3, [pc, #88]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	461a      	mov	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	fbb3 f1f2 	udiv	r1, r3, r2
 800d478:	fb01 f202 	mul.w	r2, r1, r2
 800d47c:	1a9b      	subs	r3, r3, r2
 800d47e:	617b      	str	r3, [r7, #20]
	do
	{

		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	69f9      	ldr	r1, [r7, #28]
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff ff3e 	bl	800d308 <W25qxx_ReadPage>
		StartPage++;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	3301      	adds	r3, #1
 800d490:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800d492:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d494:	895b      	ldrh	r3, [r3, #10]
 800d496:	461a      	mov	r2, r3
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	1a9a      	subs	r2, r3, r2
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	4413      	add	r3, r2
 800d4a0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800d4a2:	4b09      	ldr	r3, [pc, #36]	@ (800d4c8 <W25qxx_ReadBlock+0xc0>)
 800d4a4:	895b      	ldrh	r3, [r3, #10]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	dce1      	bgt.n	800d480 <W25qxx_ReadBlock+0x78>
 800d4bc:	e000      	b.n	800d4c0 <W25qxx_ReadBlock+0xb8>
		return;
 800d4be:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20001d88 	.word	0x20001d88

0800d4cc <siprintf>:
 800d4cc:	b40e      	push	{r1, r2, r3}
 800d4ce:	b500      	push	{lr}
 800d4d0:	b09c      	sub	sp, #112	@ 0x70
 800d4d2:	ab1d      	add	r3, sp, #116	@ 0x74
 800d4d4:	9002      	str	r0, [sp, #8]
 800d4d6:	9006      	str	r0, [sp, #24]
 800d4d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d4dc:	4809      	ldr	r0, [pc, #36]	@ (800d504 <siprintf+0x38>)
 800d4de:	9107      	str	r1, [sp, #28]
 800d4e0:	9104      	str	r1, [sp, #16]
 800d4e2:	4909      	ldr	r1, [pc, #36]	@ (800d508 <siprintf+0x3c>)
 800d4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e8:	9105      	str	r1, [sp, #20]
 800d4ea:	6800      	ldr	r0, [r0, #0]
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	a902      	add	r1, sp, #8
 800d4f0:	f000 f994 	bl	800d81c <_svfiprintf_r>
 800d4f4:	9b02      	ldr	r3, [sp, #8]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
 800d4fa:	b01c      	add	sp, #112	@ 0x70
 800d4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d500:	b003      	add	sp, #12
 800d502:	4770      	bx	lr
 800d504:	200005d4 	.word	0x200005d4
 800d508:	ffff0208 	.word	0xffff0208

0800d50c <memset>:
 800d50c:	4402      	add	r2, r0
 800d50e:	4603      	mov	r3, r0
 800d510:	4293      	cmp	r3, r2
 800d512:	d100      	bne.n	800d516 <memset+0xa>
 800d514:	4770      	bx	lr
 800d516:	f803 1b01 	strb.w	r1, [r3], #1
 800d51a:	e7f9      	b.n	800d510 <memset+0x4>

0800d51c <__errno>:
 800d51c:	4b01      	ldr	r3, [pc, #4]	@ (800d524 <__errno+0x8>)
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	200005d4 	.word	0x200005d4

0800d528 <__libc_init_array>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	4d0d      	ldr	r5, [pc, #52]	@ (800d560 <__libc_init_array+0x38>)
 800d52c:	4c0d      	ldr	r4, [pc, #52]	@ (800d564 <__libc_init_array+0x3c>)
 800d52e:	1b64      	subs	r4, r4, r5
 800d530:	10a4      	asrs	r4, r4, #2
 800d532:	2600      	movs	r6, #0
 800d534:	42a6      	cmp	r6, r4
 800d536:	d109      	bne.n	800d54c <__libc_init_array+0x24>
 800d538:	4d0b      	ldr	r5, [pc, #44]	@ (800d568 <__libc_init_array+0x40>)
 800d53a:	4c0c      	ldr	r4, [pc, #48]	@ (800d56c <__libc_init_array+0x44>)
 800d53c:	f000 fc66 	bl	800de0c <_init>
 800d540:	1b64      	subs	r4, r4, r5
 800d542:	10a4      	asrs	r4, r4, #2
 800d544:	2600      	movs	r6, #0
 800d546:	42a6      	cmp	r6, r4
 800d548:	d105      	bne.n	800d556 <__libc_init_array+0x2e>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d550:	4798      	blx	r3
 800d552:	3601      	adds	r6, #1
 800d554:	e7ee      	b.n	800d534 <__libc_init_array+0xc>
 800d556:	f855 3b04 	ldr.w	r3, [r5], #4
 800d55a:	4798      	blx	r3
 800d55c:	3601      	adds	r6, #1
 800d55e:	e7f2      	b.n	800d546 <__libc_init_array+0x1e>
 800d560:	0800ee74 	.word	0x0800ee74
 800d564:	0800ee74 	.word	0x0800ee74
 800d568:	0800ee74 	.word	0x0800ee74
 800d56c:	0800ee78 	.word	0x0800ee78

0800d570 <__retarget_lock_acquire_recursive>:
 800d570:	4770      	bx	lr

0800d572 <__retarget_lock_release_recursive>:
 800d572:	4770      	bx	lr

0800d574 <_free_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	2900      	cmp	r1, #0
 800d57a:	d041      	beq.n	800d600 <_free_r+0x8c>
 800d57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d580:	1f0c      	subs	r4, r1, #4
 800d582:	2b00      	cmp	r3, #0
 800d584:	bfb8      	it	lt
 800d586:	18e4      	addlt	r4, r4, r3
 800d588:	f000 f8e0 	bl	800d74c <__malloc_lock>
 800d58c:	4a1d      	ldr	r2, [pc, #116]	@ (800d604 <_free_r+0x90>)
 800d58e:	6813      	ldr	r3, [r2, #0]
 800d590:	b933      	cbnz	r3, 800d5a0 <_free_r+0x2c>
 800d592:	6063      	str	r3, [r4, #4]
 800d594:	6014      	str	r4, [r2, #0]
 800d596:	4628      	mov	r0, r5
 800d598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d59c:	f000 b8dc 	b.w	800d758 <__malloc_unlock>
 800d5a0:	42a3      	cmp	r3, r4
 800d5a2:	d908      	bls.n	800d5b6 <_free_r+0x42>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	1821      	adds	r1, r4, r0
 800d5a8:	428b      	cmp	r3, r1
 800d5aa:	bf01      	itttt	eq
 800d5ac:	6819      	ldreq	r1, [r3, #0]
 800d5ae:	685b      	ldreq	r3, [r3, #4]
 800d5b0:	1809      	addeq	r1, r1, r0
 800d5b2:	6021      	streq	r1, [r4, #0]
 800d5b4:	e7ed      	b.n	800d592 <_free_r+0x1e>
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	b10b      	cbz	r3, 800d5c0 <_free_r+0x4c>
 800d5bc:	42a3      	cmp	r3, r4
 800d5be:	d9fa      	bls.n	800d5b6 <_free_r+0x42>
 800d5c0:	6811      	ldr	r1, [r2, #0]
 800d5c2:	1850      	adds	r0, r2, r1
 800d5c4:	42a0      	cmp	r0, r4
 800d5c6:	d10b      	bne.n	800d5e0 <_free_r+0x6c>
 800d5c8:	6820      	ldr	r0, [r4, #0]
 800d5ca:	4401      	add	r1, r0
 800d5cc:	1850      	adds	r0, r2, r1
 800d5ce:	4283      	cmp	r3, r0
 800d5d0:	6011      	str	r1, [r2, #0]
 800d5d2:	d1e0      	bne.n	800d596 <_free_r+0x22>
 800d5d4:	6818      	ldr	r0, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	6053      	str	r3, [r2, #4]
 800d5da:	4408      	add	r0, r1
 800d5dc:	6010      	str	r0, [r2, #0]
 800d5de:	e7da      	b.n	800d596 <_free_r+0x22>
 800d5e0:	d902      	bls.n	800d5e8 <_free_r+0x74>
 800d5e2:	230c      	movs	r3, #12
 800d5e4:	602b      	str	r3, [r5, #0]
 800d5e6:	e7d6      	b.n	800d596 <_free_r+0x22>
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	1821      	adds	r1, r4, r0
 800d5ec:	428b      	cmp	r3, r1
 800d5ee:	bf04      	itt	eq
 800d5f0:	6819      	ldreq	r1, [r3, #0]
 800d5f2:	685b      	ldreq	r3, [r3, #4]
 800d5f4:	6063      	str	r3, [r4, #4]
 800d5f6:	bf04      	itt	eq
 800d5f8:	1809      	addeq	r1, r1, r0
 800d5fa:	6021      	streq	r1, [r4, #0]
 800d5fc:	6054      	str	r4, [r2, #4]
 800d5fe:	e7ca      	b.n	800d596 <_free_r+0x22>
 800d600:	bd38      	pop	{r3, r4, r5, pc}
 800d602:	bf00      	nop
 800d604:	20001ef4 	.word	0x20001ef4

0800d608 <sbrk_aligned>:
 800d608:	b570      	push	{r4, r5, r6, lr}
 800d60a:	4e0f      	ldr	r6, [pc, #60]	@ (800d648 <sbrk_aligned+0x40>)
 800d60c:	460c      	mov	r4, r1
 800d60e:	6831      	ldr	r1, [r6, #0]
 800d610:	4605      	mov	r5, r0
 800d612:	b911      	cbnz	r1, 800d61a <sbrk_aligned+0x12>
 800d614:	f000 fba6 	bl	800dd64 <_sbrk_r>
 800d618:	6030      	str	r0, [r6, #0]
 800d61a:	4621      	mov	r1, r4
 800d61c:	4628      	mov	r0, r5
 800d61e:	f000 fba1 	bl	800dd64 <_sbrk_r>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	d103      	bne.n	800d62e <sbrk_aligned+0x26>
 800d626:	f04f 34ff 	mov.w	r4, #4294967295
 800d62a:	4620      	mov	r0, r4
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	1cc4      	adds	r4, r0, #3
 800d630:	f024 0403 	bic.w	r4, r4, #3
 800d634:	42a0      	cmp	r0, r4
 800d636:	d0f8      	beq.n	800d62a <sbrk_aligned+0x22>
 800d638:	1a21      	subs	r1, r4, r0
 800d63a:	4628      	mov	r0, r5
 800d63c:	f000 fb92 	bl	800dd64 <_sbrk_r>
 800d640:	3001      	adds	r0, #1
 800d642:	d1f2      	bne.n	800d62a <sbrk_aligned+0x22>
 800d644:	e7ef      	b.n	800d626 <sbrk_aligned+0x1e>
 800d646:	bf00      	nop
 800d648:	20001ef0 	.word	0x20001ef0

0800d64c <_malloc_r>:
 800d64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d650:	1ccd      	adds	r5, r1, #3
 800d652:	f025 0503 	bic.w	r5, r5, #3
 800d656:	3508      	adds	r5, #8
 800d658:	2d0c      	cmp	r5, #12
 800d65a:	bf38      	it	cc
 800d65c:	250c      	movcc	r5, #12
 800d65e:	2d00      	cmp	r5, #0
 800d660:	4606      	mov	r6, r0
 800d662:	db01      	blt.n	800d668 <_malloc_r+0x1c>
 800d664:	42a9      	cmp	r1, r5
 800d666:	d904      	bls.n	800d672 <_malloc_r+0x26>
 800d668:	230c      	movs	r3, #12
 800d66a:	6033      	str	r3, [r6, #0]
 800d66c:	2000      	movs	r0, #0
 800d66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d748 <_malloc_r+0xfc>
 800d676:	f000 f869 	bl	800d74c <__malloc_lock>
 800d67a:	f8d8 3000 	ldr.w	r3, [r8]
 800d67e:	461c      	mov	r4, r3
 800d680:	bb44      	cbnz	r4, 800d6d4 <_malloc_r+0x88>
 800d682:	4629      	mov	r1, r5
 800d684:	4630      	mov	r0, r6
 800d686:	f7ff ffbf 	bl	800d608 <sbrk_aligned>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	4604      	mov	r4, r0
 800d68e:	d158      	bne.n	800d742 <_malloc_r+0xf6>
 800d690:	f8d8 4000 	ldr.w	r4, [r8]
 800d694:	4627      	mov	r7, r4
 800d696:	2f00      	cmp	r7, #0
 800d698:	d143      	bne.n	800d722 <_malloc_r+0xd6>
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	d04b      	beq.n	800d736 <_malloc_r+0xea>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	eb04 0903 	add.w	r9, r4, r3
 800d6a8:	f000 fb5c 	bl	800dd64 <_sbrk_r>
 800d6ac:	4581      	cmp	r9, r0
 800d6ae:	d142      	bne.n	800d736 <_malloc_r+0xea>
 800d6b0:	6821      	ldr	r1, [r4, #0]
 800d6b2:	1a6d      	subs	r5, r5, r1
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7ff ffa6 	bl	800d608 <sbrk_aligned>
 800d6bc:	3001      	adds	r0, #1
 800d6be:	d03a      	beq.n	800d736 <_malloc_r+0xea>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	442b      	add	r3, r5
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	bb62      	cbnz	r2, 800d728 <_malloc_r+0xdc>
 800d6ce:	f8c8 7000 	str.w	r7, [r8]
 800d6d2:	e00f      	b.n	800d6f4 <_malloc_r+0xa8>
 800d6d4:	6822      	ldr	r2, [r4, #0]
 800d6d6:	1b52      	subs	r2, r2, r5
 800d6d8:	d420      	bmi.n	800d71c <_malloc_r+0xd0>
 800d6da:	2a0b      	cmp	r2, #11
 800d6dc:	d917      	bls.n	800d70e <_malloc_r+0xc2>
 800d6de:	1961      	adds	r1, r4, r5
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	6025      	str	r5, [r4, #0]
 800d6e4:	bf18      	it	ne
 800d6e6:	6059      	strne	r1, [r3, #4]
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	bf08      	it	eq
 800d6ec:	f8c8 1000 	streq.w	r1, [r8]
 800d6f0:	5162      	str	r2, [r4, r5]
 800d6f2:	604b      	str	r3, [r1, #4]
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f000 f82f 	bl	800d758 <__malloc_unlock>
 800d6fa:	f104 000b 	add.w	r0, r4, #11
 800d6fe:	1d23      	adds	r3, r4, #4
 800d700:	f020 0007 	bic.w	r0, r0, #7
 800d704:	1ac2      	subs	r2, r0, r3
 800d706:	bf1c      	itt	ne
 800d708:	1a1b      	subne	r3, r3, r0
 800d70a:	50a3      	strne	r3, [r4, r2]
 800d70c:	e7af      	b.n	800d66e <_malloc_r+0x22>
 800d70e:	6862      	ldr	r2, [r4, #4]
 800d710:	42a3      	cmp	r3, r4
 800d712:	bf0c      	ite	eq
 800d714:	f8c8 2000 	streq.w	r2, [r8]
 800d718:	605a      	strne	r2, [r3, #4]
 800d71a:	e7eb      	b.n	800d6f4 <_malloc_r+0xa8>
 800d71c:	4623      	mov	r3, r4
 800d71e:	6864      	ldr	r4, [r4, #4]
 800d720:	e7ae      	b.n	800d680 <_malloc_r+0x34>
 800d722:	463c      	mov	r4, r7
 800d724:	687f      	ldr	r7, [r7, #4]
 800d726:	e7b6      	b.n	800d696 <_malloc_r+0x4a>
 800d728:	461a      	mov	r2, r3
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	42a3      	cmp	r3, r4
 800d72e:	d1fb      	bne.n	800d728 <_malloc_r+0xdc>
 800d730:	2300      	movs	r3, #0
 800d732:	6053      	str	r3, [r2, #4]
 800d734:	e7de      	b.n	800d6f4 <_malloc_r+0xa8>
 800d736:	230c      	movs	r3, #12
 800d738:	6033      	str	r3, [r6, #0]
 800d73a:	4630      	mov	r0, r6
 800d73c:	f000 f80c 	bl	800d758 <__malloc_unlock>
 800d740:	e794      	b.n	800d66c <_malloc_r+0x20>
 800d742:	6005      	str	r5, [r0, #0]
 800d744:	e7d6      	b.n	800d6f4 <_malloc_r+0xa8>
 800d746:	bf00      	nop
 800d748:	20001ef4 	.word	0x20001ef4

0800d74c <__malloc_lock>:
 800d74c:	4801      	ldr	r0, [pc, #4]	@ (800d754 <__malloc_lock+0x8>)
 800d74e:	f7ff bf0f 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800d752:	bf00      	nop
 800d754:	20001eec 	.word	0x20001eec

0800d758 <__malloc_unlock>:
 800d758:	4801      	ldr	r0, [pc, #4]	@ (800d760 <__malloc_unlock+0x8>)
 800d75a:	f7ff bf0a 	b.w	800d572 <__retarget_lock_release_recursive>
 800d75e:	bf00      	nop
 800d760:	20001eec 	.word	0x20001eec

0800d764 <__ssputs_r>:
 800d764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d768:	688e      	ldr	r6, [r1, #8]
 800d76a:	461f      	mov	r7, r3
 800d76c:	42be      	cmp	r6, r7
 800d76e:	680b      	ldr	r3, [r1, #0]
 800d770:	4682      	mov	sl, r0
 800d772:	460c      	mov	r4, r1
 800d774:	4690      	mov	r8, r2
 800d776:	d82d      	bhi.n	800d7d4 <__ssputs_r+0x70>
 800d778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d77c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d780:	d026      	beq.n	800d7d0 <__ssputs_r+0x6c>
 800d782:	6965      	ldr	r5, [r4, #20]
 800d784:	6909      	ldr	r1, [r1, #16]
 800d786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d78a:	eba3 0901 	sub.w	r9, r3, r1
 800d78e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d792:	1c7b      	adds	r3, r7, #1
 800d794:	444b      	add	r3, r9
 800d796:	106d      	asrs	r5, r5, #1
 800d798:	429d      	cmp	r5, r3
 800d79a:	bf38      	it	cc
 800d79c:	461d      	movcc	r5, r3
 800d79e:	0553      	lsls	r3, r2, #21
 800d7a0:	d527      	bpl.n	800d7f2 <__ssputs_r+0x8e>
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	f7ff ff52 	bl	800d64c <_malloc_r>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	b360      	cbz	r0, 800d806 <__ssputs_r+0xa2>
 800d7ac:	6921      	ldr	r1, [r4, #16]
 800d7ae:	464a      	mov	r2, r9
 800d7b0:	f000 fae8 	bl	800dd84 <memcpy>
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7be:	81a3      	strh	r3, [r4, #12]
 800d7c0:	6126      	str	r6, [r4, #16]
 800d7c2:	6165      	str	r5, [r4, #20]
 800d7c4:	444e      	add	r6, r9
 800d7c6:	eba5 0509 	sub.w	r5, r5, r9
 800d7ca:	6026      	str	r6, [r4, #0]
 800d7cc:	60a5      	str	r5, [r4, #8]
 800d7ce:	463e      	mov	r6, r7
 800d7d0:	42be      	cmp	r6, r7
 800d7d2:	d900      	bls.n	800d7d6 <__ssputs_r+0x72>
 800d7d4:	463e      	mov	r6, r7
 800d7d6:	6820      	ldr	r0, [r4, #0]
 800d7d8:	4632      	mov	r2, r6
 800d7da:	4641      	mov	r1, r8
 800d7dc:	f000 faa8 	bl	800dd30 <memmove>
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	1b9b      	subs	r3, r3, r6
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	4433      	add	r3, r6
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	f000 fad4 	bl	800dda0 <_realloc_r>
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d1e0      	bne.n	800d7c0 <__ssputs_r+0x5c>
 800d7fe:	6921      	ldr	r1, [r4, #16]
 800d800:	4650      	mov	r0, sl
 800d802:	f7ff feb7 	bl	800d574 <_free_r>
 800d806:	230c      	movs	r3, #12
 800d808:	f8ca 3000 	str.w	r3, [sl]
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	f04f 30ff 	mov.w	r0, #4294967295
 800d818:	e7e9      	b.n	800d7ee <__ssputs_r+0x8a>
	...

0800d81c <_svfiprintf_r>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	4698      	mov	r8, r3
 800d822:	898b      	ldrh	r3, [r1, #12]
 800d824:	061b      	lsls	r3, r3, #24
 800d826:	b09d      	sub	sp, #116	@ 0x74
 800d828:	4607      	mov	r7, r0
 800d82a:	460d      	mov	r5, r1
 800d82c:	4614      	mov	r4, r2
 800d82e:	d510      	bpl.n	800d852 <_svfiprintf_r+0x36>
 800d830:	690b      	ldr	r3, [r1, #16]
 800d832:	b973      	cbnz	r3, 800d852 <_svfiprintf_r+0x36>
 800d834:	2140      	movs	r1, #64	@ 0x40
 800d836:	f7ff ff09 	bl	800d64c <_malloc_r>
 800d83a:	6028      	str	r0, [r5, #0]
 800d83c:	6128      	str	r0, [r5, #16]
 800d83e:	b930      	cbnz	r0, 800d84e <_svfiprintf_r+0x32>
 800d840:	230c      	movs	r3, #12
 800d842:	603b      	str	r3, [r7, #0]
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	b01d      	add	sp, #116	@ 0x74
 800d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84e:	2340      	movs	r3, #64	@ 0x40
 800d850:	616b      	str	r3, [r5, #20]
 800d852:	2300      	movs	r3, #0
 800d854:	9309      	str	r3, [sp, #36]	@ 0x24
 800d856:	2320      	movs	r3, #32
 800d858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d85c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d860:	2330      	movs	r3, #48	@ 0x30
 800d862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da00 <_svfiprintf_r+0x1e4>
 800d866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d86a:	f04f 0901 	mov.w	r9, #1
 800d86e:	4623      	mov	r3, r4
 800d870:	469a      	mov	sl, r3
 800d872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d876:	b10a      	cbz	r2, 800d87c <_svfiprintf_r+0x60>
 800d878:	2a25      	cmp	r2, #37	@ 0x25
 800d87a:	d1f9      	bne.n	800d870 <_svfiprintf_r+0x54>
 800d87c:	ebba 0b04 	subs.w	fp, sl, r4
 800d880:	d00b      	beq.n	800d89a <_svfiprintf_r+0x7e>
 800d882:	465b      	mov	r3, fp
 800d884:	4622      	mov	r2, r4
 800d886:	4629      	mov	r1, r5
 800d888:	4638      	mov	r0, r7
 800d88a:	f7ff ff6b 	bl	800d764 <__ssputs_r>
 800d88e:	3001      	adds	r0, #1
 800d890:	f000 80a7 	beq.w	800d9e2 <_svfiprintf_r+0x1c6>
 800d894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d896:	445a      	add	r2, fp
 800d898:	9209      	str	r2, [sp, #36]	@ 0x24
 800d89a:	f89a 3000 	ldrb.w	r3, [sl]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 809f 	beq.w	800d9e2 <_svfiprintf_r+0x1c6>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ae:	f10a 0a01 	add.w	sl, sl, #1
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9307      	str	r3, [sp, #28]
 800d8b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2205      	movs	r2, #5
 800d8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c4:	484e      	ldr	r0, [pc, #312]	@ (800da00 <_svfiprintf_r+0x1e4>)
 800d8c6:	f7f2 fc8b 	bl	80001e0 <memchr>
 800d8ca:	9a04      	ldr	r2, [sp, #16]
 800d8cc:	b9d8      	cbnz	r0, 800d906 <_svfiprintf_r+0xea>
 800d8ce:	06d0      	lsls	r0, r2, #27
 800d8d0:	bf44      	itt	mi
 800d8d2:	2320      	movmi	r3, #32
 800d8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8d8:	0711      	lsls	r1, r2, #28
 800d8da:	bf44      	itt	mi
 800d8dc:	232b      	movmi	r3, #43	@ 0x2b
 800d8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e8:	d015      	beq.n	800d916 <_svfiprintf_r+0xfa>
 800d8ea:	9a07      	ldr	r2, [sp, #28]
 800d8ec:	4654      	mov	r4, sl
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f04f 0c0a 	mov.w	ip, #10
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8fa:	3b30      	subs	r3, #48	@ 0x30
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	d94b      	bls.n	800d998 <_svfiprintf_r+0x17c>
 800d900:	b1b0      	cbz	r0, 800d930 <_svfiprintf_r+0x114>
 800d902:	9207      	str	r2, [sp, #28]
 800d904:	e014      	b.n	800d930 <_svfiprintf_r+0x114>
 800d906:	eba0 0308 	sub.w	r3, r0, r8
 800d90a:	fa09 f303 	lsl.w	r3, r9, r3
 800d90e:	4313      	orrs	r3, r2
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	46a2      	mov	sl, r4
 800d914:	e7d2      	b.n	800d8bc <_svfiprintf_r+0xa0>
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	1d19      	adds	r1, r3, #4
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	9103      	str	r1, [sp, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfbb      	ittet	lt
 800d922:	425b      	neglt	r3, r3
 800d924:	f042 0202 	orrlt.w	r2, r2, #2
 800d928:	9307      	strge	r3, [sp, #28]
 800d92a:	9307      	strlt	r3, [sp, #28]
 800d92c:	bfb8      	it	lt
 800d92e:	9204      	strlt	r2, [sp, #16]
 800d930:	7823      	ldrb	r3, [r4, #0]
 800d932:	2b2e      	cmp	r3, #46	@ 0x2e
 800d934:	d10a      	bne.n	800d94c <_svfiprintf_r+0x130>
 800d936:	7863      	ldrb	r3, [r4, #1]
 800d938:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93a:	d132      	bne.n	800d9a2 <_svfiprintf_r+0x186>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	9203      	str	r2, [sp, #12]
 800d944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d948:	3402      	adds	r4, #2
 800d94a:	9305      	str	r3, [sp, #20]
 800d94c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da10 <_svfiprintf_r+0x1f4>
 800d950:	7821      	ldrb	r1, [r4, #0]
 800d952:	2203      	movs	r2, #3
 800d954:	4650      	mov	r0, sl
 800d956:	f7f2 fc43 	bl	80001e0 <memchr>
 800d95a:	b138      	cbz	r0, 800d96c <_svfiprintf_r+0x150>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	eba0 000a 	sub.w	r0, r0, sl
 800d962:	2240      	movs	r2, #64	@ 0x40
 800d964:	4082      	lsls	r2, r0
 800d966:	4313      	orrs	r3, r2
 800d968:	3401      	adds	r4, #1
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d970:	4824      	ldr	r0, [pc, #144]	@ (800da04 <_svfiprintf_r+0x1e8>)
 800d972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d976:	2206      	movs	r2, #6
 800d978:	f7f2 fc32 	bl	80001e0 <memchr>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d036      	beq.n	800d9ee <_svfiprintf_r+0x1d2>
 800d980:	4b21      	ldr	r3, [pc, #132]	@ (800da08 <_svfiprintf_r+0x1ec>)
 800d982:	bb1b      	cbnz	r3, 800d9cc <_svfiprintf_r+0x1b0>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	3307      	adds	r3, #7
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	3308      	adds	r3, #8
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d992:	4433      	add	r3, r6
 800d994:	9309      	str	r3, [sp, #36]	@ 0x24
 800d996:	e76a      	b.n	800d86e <_svfiprintf_r+0x52>
 800d998:	fb0c 3202 	mla	r2, ip, r2, r3
 800d99c:	460c      	mov	r4, r1
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7a8      	b.n	800d8f4 <_svfiprintf_r+0xd8>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9305      	str	r3, [sp, #20]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f04f 0c0a 	mov.w	ip, #10
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9b4:	3a30      	subs	r2, #48	@ 0x30
 800d9b6:	2a09      	cmp	r2, #9
 800d9b8:	d903      	bls.n	800d9c2 <_svfiprintf_r+0x1a6>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0c6      	beq.n	800d94c <_svfiprintf_r+0x130>
 800d9be:	9105      	str	r1, [sp, #20]
 800d9c0:	e7c4      	b.n	800d94c <_svfiprintf_r+0x130>
 800d9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e7f0      	b.n	800d9ae <_svfiprintf_r+0x192>
 800d9cc:	ab03      	add	r3, sp, #12
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4b0e      	ldr	r3, [pc, #56]	@ (800da0c <_svfiprintf_r+0x1f0>)
 800d9d4:	a904      	add	r1, sp, #16
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	f3af 8000 	nop.w
 800d9dc:	1c42      	adds	r2, r0, #1
 800d9de:	4606      	mov	r6, r0
 800d9e0:	d1d6      	bne.n	800d990 <_svfiprintf_r+0x174>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	065b      	lsls	r3, r3, #25
 800d9e6:	f53f af2d 	bmi.w	800d844 <_svfiprintf_r+0x28>
 800d9ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9ec:	e72c      	b.n	800d848 <_svfiprintf_r+0x2c>
 800d9ee:	ab03      	add	r3, sp, #12
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	462a      	mov	r2, r5
 800d9f4:	4b05      	ldr	r3, [pc, #20]	@ (800da0c <_svfiprintf_r+0x1f0>)
 800d9f6:	a904      	add	r1, sp, #16
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	f000 f879 	bl	800daf0 <_printf_i>
 800d9fe:	e7ed      	b.n	800d9dc <_svfiprintf_r+0x1c0>
 800da00:	0800ee37 	.word	0x0800ee37
 800da04:	0800ee41 	.word	0x0800ee41
 800da08:	00000000 	.word	0x00000000
 800da0c:	0800d765 	.word	0x0800d765
 800da10:	0800ee3d 	.word	0x0800ee3d

0800da14 <_printf_common>:
 800da14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da18:	4616      	mov	r6, r2
 800da1a:	4698      	mov	r8, r3
 800da1c:	688a      	ldr	r2, [r1, #8]
 800da1e:	690b      	ldr	r3, [r1, #16]
 800da20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da24:	4293      	cmp	r3, r2
 800da26:	bfb8      	it	lt
 800da28:	4613      	movlt	r3, r2
 800da2a:	6033      	str	r3, [r6, #0]
 800da2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da30:	4607      	mov	r7, r0
 800da32:	460c      	mov	r4, r1
 800da34:	b10a      	cbz	r2, 800da3a <_printf_common+0x26>
 800da36:	3301      	adds	r3, #1
 800da38:	6033      	str	r3, [r6, #0]
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	0699      	lsls	r1, r3, #26
 800da3e:	bf42      	ittt	mi
 800da40:	6833      	ldrmi	r3, [r6, #0]
 800da42:	3302      	addmi	r3, #2
 800da44:	6033      	strmi	r3, [r6, #0]
 800da46:	6825      	ldr	r5, [r4, #0]
 800da48:	f015 0506 	ands.w	r5, r5, #6
 800da4c:	d106      	bne.n	800da5c <_printf_common+0x48>
 800da4e:	f104 0a19 	add.w	sl, r4, #25
 800da52:	68e3      	ldr	r3, [r4, #12]
 800da54:	6832      	ldr	r2, [r6, #0]
 800da56:	1a9b      	subs	r3, r3, r2
 800da58:	42ab      	cmp	r3, r5
 800da5a:	dc26      	bgt.n	800daaa <_printf_common+0x96>
 800da5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da60:	6822      	ldr	r2, [r4, #0]
 800da62:	3b00      	subs	r3, #0
 800da64:	bf18      	it	ne
 800da66:	2301      	movne	r3, #1
 800da68:	0692      	lsls	r2, r2, #26
 800da6a:	d42b      	bmi.n	800dac4 <_printf_common+0xb0>
 800da6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da70:	4641      	mov	r1, r8
 800da72:	4638      	mov	r0, r7
 800da74:	47c8      	blx	r9
 800da76:	3001      	adds	r0, #1
 800da78:	d01e      	beq.n	800dab8 <_printf_common+0xa4>
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	6922      	ldr	r2, [r4, #16]
 800da7e:	f003 0306 	and.w	r3, r3, #6
 800da82:	2b04      	cmp	r3, #4
 800da84:	bf02      	ittt	eq
 800da86:	68e5      	ldreq	r5, [r4, #12]
 800da88:	6833      	ldreq	r3, [r6, #0]
 800da8a:	1aed      	subeq	r5, r5, r3
 800da8c:	68a3      	ldr	r3, [r4, #8]
 800da8e:	bf0c      	ite	eq
 800da90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da94:	2500      	movne	r5, #0
 800da96:	4293      	cmp	r3, r2
 800da98:	bfc4      	itt	gt
 800da9a:	1a9b      	subgt	r3, r3, r2
 800da9c:	18ed      	addgt	r5, r5, r3
 800da9e:	2600      	movs	r6, #0
 800daa0:	341a      	adds	r4, #26
 800daa2:	42b5      	cmp	r5, r6
 800daa4:	d11a      	bne.n	800dadc <_printf_common+0xc8>
 800daa6:	2000      	movs	r0, #0
 800daa8:	e008      	b.n	800dabc <_printf_common+0xa8>
 800daaa:	2301      	movs	r3, #1
 800daac:	4652      	mov	r2, sl
 800daae:	4641      	mov	r1, r8
 800dab0:	4638      	mov	r0, r7
 800dab2:	47c8      	blx	r9
 800dab4:	3001      	adds	r0, #1
 800dab6:	d103      	bne.n	800dac0 <_printf_common+0xac>
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac0:	3501      	adds	r5, #1
 800dac2:	e7c6      	b.n	800da52 <_printf_common+0x3e>
 800dac4:	18e1      	adds	r1, r4, r3
 800dac6:	1c5a      	adds	r2, r3, #1
 800dac8:	2030      	movs	r0, #48	@ 0x30
 800daca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dace:	4422      	add	r2, r4
 800dad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dad8:	3302      	adds	r3, #2
 800dada:	e7c7      	b.n	800da6c <_printf_common+0x58>
 800dadc:	2301      	movs	r3, #1
 800dade:	4622      	mov	r2, r4
 800dae0:	4641      	mov	r1, r8
 800dae2:	4638      	mov	r0, r7
 800dae4:	47c8      	blx	r9
 800dae6:	3001      	adds	r0, #1
 800dae8:	d0e6      	beq.n	800dab8 <_printf_common+0xa4>
 800daea:	3601      	adds	r6, #1
 800daec:	e7d9      	b.n	800daa2 <_printf_common+0x8e>
	...

0800daf0 <_printf_i>:
 800daf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daf4:	7e0f      	ldrb	r7, [r1, #24]
 800daf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800daf8:	2f78      	cmp	r7, #120	@ 0x78
 800dafa:	4691      	mov	r9, r2
 800dafc:	4680      	mov	r8, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	469a      	mov	sl, r3
 800db02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db06:	d807      	bhi.n	800db18 <_printf_i+0x28>
 800db08:	2f62      	cmp	r7, #98	@ 0x62
 800db0a:	d80a      	bhi.n	800db22 <_printf_i+0x32>
 800db0c:	2f00      	cmp	r7, #0
 800db0e:	f000 80d2 	beq.w	800dcb6 <_printf_i+0x1c6>
 800db12:	2f58      	cmp	r7, #88	@ 0x58
 800db14:	f000 80b9 	beq.w	800dc8a <_printf_i+0x19a>
 800db18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db20:	e03a      	b.n	800db98 <_printf_i+0xa8>
 800db22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db26:	2b15      	cmp	r3, #21
 800db28:	d8f6      	bhi.n	800db18 <_printf_i+0x28>
 800db2a:	a101      	add	r1, pc, #4	@ (adr r1, 800db30 <_printf_i+0x40>)
 800db2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db30:	0800db89 	.word	0x0800db89
 800db34:	0800db9d 	.word	0x0800db9d
 800db38:	0800db19 	.word	0x0800db19
 800db3c:	0800db19 	.word	0x0800db19
 800db40:	0800db19 	.word	0x0800db19
 800db44:	0800db19 	.word	0x0800db19
 800db48:	0800db9d 	.word	0x0800db9d
 800db4c:	0800db19 	.word	0x0800db19
 800db50:	0800db19 	.word	0x0800db19
 800db54:	0800db19 	.word	0x0800db19
 800db58:	0800db19 	.word	0x0800db19
 800db5c:	0800dc9d 	.word	0x0800dc9d
 800db60:	0800dbc7 	.word	0x0800dbc7
 800db64:	0800dc57 	.word	0x0800dc57
 800db68:	0800db19 	.word	0x0800db19
 800db6c:	0800db19 	.word	0x0800db19
 800db70:	0800dcbf 	.word	0x0800dcbf
 800db74:	0800db19 	.word	0x0800db19
 800db78:	0800dbc7 	.word	0x0800dbc7
 800db7c:	0800db19 	.word	0x0800db19
 800db80:	0800db19 	.word	0x0800db19
 800db84:	0800dc5f 	.word	0x0800dc5f
 800db88:	6833      	ldr	r3, [r6, #0]
 800db8a:	1d1a      	adds	r2, r3, #4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6032      	str	r2, [r6, #0]
 800db90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db98:	2301      	movs	r3, #1
 800db9a:	e09d      	b.n	800dcd8 <_printf_i+0x1e8>
 800db9c:	6833      	ldr	r3, [r6, #0]
 800db9e:	6820      	ldr	r0, [r4, #0]
 800dba0:	1d19      	adds	r1, r3, #4
 800dba2:	6031      	str	r1, [r6, #0]
 800dba4:	0606      	lsls	r6, r0, #24
 800dba6:	d501      	bpl.n	800dbac <_printf_i+0xbc>
 800dba8:	681d      	ldr	r5, [r3, #0]
 800dbaa:	e003      	b.n	800dbb4 <_printf_i+0xc4>
 800dbac:	0645      	lsls	r5, r0, #25
 800dbae:	d5fb      	bpl.n	800dba8 <_printf_i+0xb8>
 800dbb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbb4:	2d00      	cmp	r5, #0
 800dbb6:	da03      	bge.n	800dbc0 <_printf_i+0xd0>
 800dbb8:	232d      	movs	r3, #45	@ 0x2d
 800dbba:	426d      	negs	r5, r5
 800dbbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbc0:	4859      	ldr	r0, [pc, #356]	@ (800dd28 <_printf_i+0x238>)
 800dbc2:	230a      	movs	r3, #10
 800dbc4:	e011      	b.n	800dbea <_printf_i+0xfa>
 800dbc6:	6821      	ldr	r1, [r4, #0]
 800dbc8:	6833      	ldr	r3, [r6, #0]
 800dbca:	0608      	lsls	r0, r1, #24
 800dbcc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbd0:	d402      	bmi.n	800dbd8 <_printf_i+0xe8>
 800dbd2:	0649      	lsls	r1, r1, #25
 800dbd4:	bf48      	it	mi
 800dbd6:	b2ad      	uxthmi	r5, r5
 800dbd8:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbda:	4853      	ldr	r0, [pc, #332]	@ (800dd28 <_printf_i+0x238>)
 800dbdc:	6033      	str	r3, [r6, #0]
 800dbde:	bf14      	ite	ne
 800dbe0:	230a      	movne	r3, #10
 800dbe2:	2308      	moveq	r3, #8
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbea:	6866      	ldr	r6, [r4, #4]
 800dbec:	60a6      	str	r6, [r4, #8]
 800dbee:	2e00      	cmp	r6, #0
 800dbf0:	bfa2      	ittt	ge
 800dbf2:	6821      	ldrge	r1, [r4, #0]
 800dbf4:	f021 0104 	bicge.w	r1, r1, #4
 800dbf8:	6021      	strge	r1, [r4, #0]
 800dbfa:	b90d      	cbnz	r5, 800dc00 <_printf_i+0x110>
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	d04b      	beq.n	800dc98 <_printf_i+0x1a8>
 800dc00:	4616      	mov	r6, r2
 800dc02:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc06:	fb03 5711 	mls	r7, r3, r1, r5
 800dc0a:	5dc7      	ldrb	r7, [r0, r7]
 800dc0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc10:	462f      	mov	r7, r5
 800dc12:	42bb      	cmp	r3, r7
 800dc14:	460d      	mov	r5, r1
 800dc16:	d9f4      	bls.n	800dc02 <_printf_i+0x112>
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d10b      	bne.n	800dc34 <_printf_i+0x144>
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	07df      	lsls	r7, r3, #31
 800dc20:	d508      	bpl.n	800dc34 <_printf_i+0x144>
 800dc22:	6923      	ldr	r3, [r4, #16]
 800dc24:	6861      	ldr	r1, [r4, #4]
 800dc26:	4299      	cmp	r1, r3
 800dc28:	bfde      	ittt	le
 800dc2a:	2330      	movle	r3, #48	@ 0x30
 800dc2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc34:	1b92      	subs	r2, r2, r6
 800dc36:	6122      	str	r2, [r4, #16]
 800dc38:	f8cd a000 	str.w	sl, [sp]
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	aa03      	add	r2, sp, #12
 800dc40:	4621      	mov	r1, r4
 800dc42:	4640      	mov	r0, r8
 800dc44:	f7ff fee6 	bl	800da14 <_printf_common>
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d14a      	bne.n	800dce2 <_printf_i+0x1f2>
 800dc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc50:	b004      	add	sp, #16
 800dc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	f043 0320 	orr.w	r3, r3, #32
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	4833      	ldr	r0, [pc, #204]	@ (800dd2c <_printf_i+0x23c>)
 800dc60:	2778      	movs	r7, #120	@ 0x78
 800dc62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	6831      	ldr	r1, [r6, #0]
 800dc6a:	061f      	lsls	r7, r3, #24
 800dc6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc70:	d402      	bmi.n	800dc78 <_printf_i+0x188>
 800dc72:	065f      	lsls	r7, r3, #25
 800dc74:	bf48      	it	mi
 800dc76:	b2ad      	uxthmi	r5, r5
 800dc78:	6031      	str	r1, [r6, #0]
 800dc7a:	07d9      	lsls	r1, r3, #31
 800dc7c:	bf44      	itt	mi
 800dc7e:	f043 0320 	orrmi.w	r3, r3, #32
 800dc82:	6023      	strmi	r3, [r4, #0]
 800dc84:	b11d      	cbz	r5, 800dc8e <_printf_i+0x19e>
 800dc86:	2310      	movs	r3, #16
 800dc88:	e7ac      	b.n	800dbe4 <_printf_i+0xf4>
 800dc8a:	4827      	ldr	r0, [pc, #156]	@ (800dd28 <_printf_i+0x238>)
 800dc8c:	e7e9      	b.n	800dc62 <_printf_i+0x172>
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	f023 0320 	bic.w	r3, r3, #32
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	e7f6      	b.n	800dc86 <_printf_i+0x196>
 800dc98:	4616      	mov	r6, r2
 800dc9a:	e7bd      	b.n	800dc18 <_printf_i+0x128>
 800dc9c:	6833      	ldr	r3, [r6, #0]
 800dc9e:	6825      	ldr	r5, [r4, #0]
 800dca0:	6961      	ldr	r1, [r4, #20]
 800dca2:	1d18      	adds	r0, r3, #4
 800dca4:	6030      	str	r0, [r6, #0]
 800dca6:	062e      	lsls	r6, r5, #24
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	d501      	bpl.n	800dcb0 <_printf_i+0x1c0>
 800dcac:	6019      	str	r1, [r3, #0]
 800dcae:	e002      	b.n	800dcb6 <_printf_i+0x1c6>
 800dcb0:	0668      	lsls	r0, r5, #25
 800dcb2:	d5fb      	bpl.n	800dcac <_printf_i+0x1bc>
 800dcb4:	8019      	strh	r1, [r3, #0]
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6123      	str	r3, [r4, #16]
 800dcba:	4616      	mov	r6, r2
 800dcbc:	e7bc      	b.n	800dc38 <_printf_i+0x148>
 800dcbe:	6833      	ldr	r3, [r6, #0]
 800dcc0:	1d1a      	adds	r2, r3, #4
 800dcc2:	6032      	str	r2, [r6, #0]
 800dcc4:	681e      	ldr	r6, [r3, #0]
 800dcc6:	6862      	ldr	r2, [r4, #4]
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7f2 fa88 	bl	80001e0 <memchr>
 800dcd0:	b108      	cbz	r0, 800dcd6 <_printf_i+0x1e6>
 800dcd2:	1b80      	subs	r0, r0, r6
 800dcd4:	6060      	str	r0, [r4, #4]
 800dcd6:	6863      	ldr	r3, [r4, #4]
 800dcd8:	6123      	str	r3, [r4, #16]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dce0:	e7aa      	b.n	800dc38 <_printf_i+0x148>
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	4632      	mov	r2, r6
 800dce6:	4649      	mov	r1, r9
 800dce8:	4640      	mov	r0, r8
 800dcea:	47d0      	blx	sl
 800dcec:	3001      	adds	r0, #1
 800dcee:	d0ad      	beq.n	800dc4c <_printf_i+0x15c>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	079b      	lsls	r3, r3, #30
 800dcf4:	d413      	bmi.n	800dd1e <_printf_i+0x22e>
 800dcf6:	68e0      	ldr	r0, [r4, #12]
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	4298      	cmp	r0, r3
 800dcfc:	bfb8      	it	lt
 800dcfe:	4618      	movlt	r0, r3
 800dd00:	e7a6      	b.n	800dc50 <_printf_i+0x160>
 800dd02:	2301      	movs	r3, #1
 800dd04:	4632      	mov	r2, r6
 800dd06:	4649      	mov	r1, r9
 800dd08:	4640      	mov	r0, r8
 800dd0a:	47d0      	blx	sl
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	d09d      	beq.n	800dc4c <_printf_i+0x15c>
 800dd10:	3501      	adds	r5, #1
 800dd12:	68e3      	ldr	r3, [r4, #12]
 800dd14:	9903      	ldr	r1, [sp, #12]
 800dd16:	1a5b      	subs	r3, r3, r1
 800dd18:	42ab      	cmp	r3, r5
 800dd1a:	dcf2      	bgt.n	800dd02 <_printf_i+0x212>
 800dd1c:	e7eb      	b.n	800dcf6 <_printf_i+0x206>
 800dd1e:	2500      	movs	r5, #0
 800dd20:	f104 0619 	add.w	r6, r4, #25
 800dd24:	e7f5      	b.n	800dd12 <_printf_i+0x222>
 800dd26:	bf00      	nop
 800dd28:	0800ee48 	.word	0x0800ee48
 800dd2c:	0800ee59 	.word	0x0800ee59

0800dd30 <memmove>:
 800dd30:	4288      	cmp	r0, r1
 800dd32:	b510      	push	{r4, lr}
 800dd34:	eb01 0402 	add.w	r4, r1, r2
 800dd38:	d902      	bls.n	800dd40 <memmove+0x10>
 800dd3a:	4284      	cmp	r4, r0
 800dd3c:	4623      	mov	r3, r4
 800dd3e:	d807      	bhi.n	800dd50 <memmove+0x20>
 800dd40:	1e43      	subs	r3, r0, #1
 800dd42:	42a1      	cmp	r1, r4
 800dd44:	d008      	beq.n	800dd58 <memmove+0x28>
 800dd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd4e:	e7f8      	b.n	800dd42 <memmove+0x12>
 800dd50:	4402      	add	r2, r0
 800dd52:	4601      	mov	r1, r0
 800dd54:	428a      	cmp	r2, r1
 800dd56:	d100      	bne.n	800dd5a <memmove+0x2a>
 800dd58:	bd10      	pop	{r4, pc}
 800dd5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd62:	e7f7      	b.n	800dd54 <memmove+0x24>

0800dd64 <_sbrk_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	4d06      	ldr	r5, [pc, #24]	@ (800dd80 <_sbrk_r+0x1c>)
 800dd68:	2300      	movs	r3, #0
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	f7f3 fcf4 	bl	800175c <_sbrk>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d102      	bne.n	800dd7e <_sbrk_r+0x1a>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	b103      	cbz	r3, 800dd7e <_sbrk_r+0x1a>
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	20001ee8 	.word	0x20001ee8

0800dd84 <memcpy>:
 800dd84:	440a      	add	r2, r1
 800dd86:	4291      	cmp	r1, r2
 800dd88:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd8c:	d100      	bne.n	800dd90 <memcpy+0xc>
 800dd8e:	4770      	bx	lr
 800dd90:	b510      	push	{r4, lr}
 800dd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd9a:	4291      	cmp	r1, r2
 800dd9c:	d1f9      	bne.n	800dd92 <memcpy+0xe>
 800dd9e:	bd10      	pop	{r4, pc}

0800dda0 <_realloc_r>:
 800dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda4:	4680      	mov	r8, r0
 800dda6:	4615      	mov	r5, r2
 800dda8:	460c      	mov	r4, r1
 800ddaa:	b921      	cbnz	r1, 800ddb6 <_realloc_r+0x16>
 800ddac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	f7ff bc4b 	b.w	800d64c <_malloc_r>
 800ddb6:	b92a      	cbnz	r2, 800ddc4 <_realloc_r+0x24>
 800ddb8:	f7ff fbdc 	bl	800d574 <_free_r>
 800ddbc:	2400      	movs	r4, #0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc4:	f000 f81a 	bl	800ddfc <_malloc_usable_size_r>
 800ddc8:	4285      	cmp	r5, r0
 800ddca:	4606      	mov	r6, r0
 800ddcc:	d802      	bhi.n	800ddd4 <_realloc_r+0x34>
 800ddce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddd2:	d8f4      	bhi.n	800ddbe <_realloc_r+0x1e>
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	f7ff fc38 	bl	800d64c <_malloc_r>
 800dddc:	4607      	mov	r7, r0
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d0ec      	beq.n	800ddbc <_realloc_r+0x1c>
 800dde2:	42b5      	cmp	r5, r6
 800dde4:	462a      	mov	r2, r5
 800dde6:	4621      	mov	r1, r4
 800dde8:	bf28      	it	cs
 800ddea:	4632      	movcs	r2, r6
 800ddec:	f7ff ffca 	bl	800dd84 <memcpy>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	f7ff fbbe 	bl	800d574 <_free_r>
 800ddf8:	463c      	mov	r4, r7
 800ddfa:	e7e0      	b.n	800ddbe <_realloc_r+0x1e>

0800ddfc <_malloc_usable_size_r>:
 800ddfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de00:	1f18      	subs	r0, r3, #4
 800de02:	2b00      	cmp	r3, #0
 800de04:	bfbc      	itt	lt
 800de06:	580b      	ldrlt	r3, [r1, r0]
 800de08:	18c0      	addlt	r0, r0, r3
 800de0a:	4770      	bx	lr

0800de0c <_init>:
 800de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0e:	bf00      	nop
 800de10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de12:	bc08      	pop	{r3}
 800de14:	469e      	mov	lr, r3
 800de16:	4770      	bx	lr

0800de18 <_fini>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	bf00      	nop
 800de1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1e:	bc08      	pop	{r3}
 800de20:	469e      	mov	lr, r3
 800de22:	4770      	bx	lr
