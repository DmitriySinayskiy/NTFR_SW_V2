
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001004  0800d244  0800d244  0000e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e248  0800e248  000105d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e248  0800e248  0000f248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e250  0800e250  000105d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e250  0800e250  0000f250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e254  0800e254  0000f254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005d0  20000000  0800e258  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001784  200005d0  0800e828  000105d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  0800e828  00010d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fff8  00000000  00000000  00010600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005040  00000000  00000000  000305f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00035638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001600  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e57b  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a3a  00000000  00000000  00056e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8d70  00000000  00000000  0007e855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001275c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007690  00000000  00000000  00127608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200005d0 	.word	0x200005d0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800d22c 	.word	0x0800d22c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200005d4 	.word	0x200005d4
 80001d0:	0800d22c 	.word	0x0800d22c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

 uint16_t test_inc = 1000;
 uint8_t gl_id_to_display = 0;
 //TIM3->CCR3 = 50;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d102      	bne.n	80004da <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
	}
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200008e0 	.word	0x200008e0

080004ec <SPI_Flash_to_LCD>:
        Error_Handler();
    }
}
void SPI_Flash_to_LCD(uint16_t block, uint32_t offset, uint16_t w, uint16_t h, uint16_t x, uint16_t y)

{
 80004ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004f0:	b08b      	sub	sp, #44	@ 0x2c
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	4611      	mov	r1, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	4603      	mov	r3, r0
 80004fc:	81fb      	strh	r3, [r7, #14]
 80004fe:	460b      	mov	r3, r1
 8000500:	81bb      	strh	r3, [r7, #12]
 8000502:	4613      	mov	r3, r2
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	466b      	mov	r3, sp
 8000508:	461e      	mov	r6, r3
	uint32_t img_byte_amount = w*h*2;
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	88fa      	ldrh	r2, [r7, #6]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	61fb      	str	r3, [r7, #28]
	uint16_t img_buffer[img_byte_amount/2];
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	0859      	lsrs	r1, r3, #1
 800051a:	460b      	mov	r3, r1
 800051c:	3b01      	subs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
 8000520:	2300      	movs	r3, #0
 8000522:	4688      	mov	r8, r1
 8000524:	4699      	mov	r9, r3
 8000526:	f04f 0200 	mov.w	r2, #0
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000532:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000536:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800053a:	2300      	movs	r3, #0
 800053c:	460c      	mov	r4, r1
 800053e:	461d      	mov	r5, r3
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	012b      	lsls	r3, r5, #4
 800054a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800054e:	0122      	lsls	r2, r4, #4
 8000550:	004b      	lsls	r3, r1, #1
 8000552:	3307      	adds	r3, #7
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	ebad 0d03 	sub.w	sp, sp, r3
 800055c:	ab02      	add	r3, sp, #8
 800055e:	3301      	adds	r3, #1
 8000560:	085b      	lsrs	r3, r3, #1
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	617b      	str	r3, [r7, #20]
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
 8000566:	89f9      	ldrh	r1, [r7, #14]
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	6978      	ldr	r0, [r7, #20]
 800056e:	f00c fdcf 	bl	800d110 <W25qxx_ReadBlock>
	ST7735_DrawImage(x, y, w, h, img_buffer);
 8000572:	88fc      	ldrh	r4, [r7, #6]
 8000574:	89ba      	ldrh	r2, [r7, #12]
 8000576:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800057a:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4623      	mov	r3, r4
 8000584:	f00b fa8d 	bl	800baa2 <ST7735_DrawImage>
 8000588:	46b5      	mov	sp, r6
}
 800058a:	bf00      	nop
 800058c:	3724      	adds	r7, #36	@ 0x24
 800058e:	46bd      	mov	sp, r7
 8000590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000594 <button_state_determ>:

void button_state_determ()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

		  uint32_t ms = HAL_GetTick();
 800059a:	f001 fa65 	bl	8001a68 <HAL_GetTick>
 800059e:	6078      	str	r0, [r7, #4]
		  uint8_t key_state_l = HAL_GPIO_ReadPin(BUT_0_GPIO_Port, BUT_0_Pin);
 80005a0:	2108      	movs	r1, #8
 80005a2:	4850      	ldr	r0, [pc, #320]	@ (80006e4 <button_state_determ+0x150>)
 80005a4:	f002 fa72 	bl	8002a8c <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	70fb      	strb	r3, [r7, #3]

		  if(key_state_l == 1 && !short_state_l && (ms - time_key_l) > 50)
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d113      	bne.n	80005da <button_state_determ+0x46>
 80005b2:	4b4d      	ldr	r3, [pc, #308]	@ (80006e8 <button_state_determ+0x154>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10f      	bne.n	80005da <button_state_determ+0x46>
 80005ba:	4b4c      	ldr	r3, [pc, #304]	@ (80006ec <button_state_determ+0x158>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	2b32      	cmp	r3, #50	@ 0x32
 80005c4:	d909      	bls.n	80005da <button_state_determ+0x46>
		  {
		    short_state_l = 1;
 80005c6:	4b48      	ldr	r3, [pc, #288]	@ (80006e8 <button_state_determ+0x154>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
		    long_state_l = 0;
 80005cc:	4b48      	ldr	r3, [pc, #288]	@ (80006f0 <button_state_determ+0x15c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 80005d2:	4a46      	ldr	r2, [pc, #280]	@ (80006ec <button_state_determ+0x158>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e02e      	b.n	8000638 <button_state_determ+0xa4>
		  }
		  else if(key_state_l == 1 && !long_state_l && (ms - time_key_l) > 700)
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d111      	bne.n	8000604 <button_state_determ+0x70>
 80005e0:	4b43      	ldr	r3, [pc, #268]	@ (80006f0 <button_state_determ+0x15c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10d      	bne.n	8000604 <button_state_determ+0x70>
 80005e8:	4b40      	ldr	r3, [pc, #256]	@ (80006ec <button_state_determ+0x158>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80005f4:	d906      	bls.n	8000604 <button_state_determ+0x70>
		  {

		    long_state_l = 1;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <button_state_determ+0x15c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
		    but_state_left = BUT_LONG;
 80005fc:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <button_state_determ+0x160>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e019      	b.n	8000638 <button_state_determ+0xa4>
		   // sleep_counter = 0;
		  }
		  else if(key_state_l == 0 && short_state_l && (ms - time_key_l) > 50)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d116      	bne.n	8000638 <button_state_determ+0xa4>
 800060a:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <button_state_determ+0x154>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d012      	beq.n	8000638 <button_state_determ+0xa4>
 8000612:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <button_state_determ+0x158>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	2b32      	cmp	r3, #50	@ 0x32
 800061c:	d90c      	bls.n	8000638 <button_state_determ+0xa4>
		  {
		    short_state_l = 0;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <button_state_determ+0x154>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <button_state_determ+0x158>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]

		    if(!long_state_l)
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <button_state_determ+0x15c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <button_state_determ+0xa4>
		    {
		      // левая кнопка , действие на короткое нажатие
		    	but_state_left = BUT_SHORT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <button_state_determ+0x160>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
		    	//sleep_counter = 0;
		    }
		  }
	          ms = HAL_GetTick();
 8000638:	f001 fa16 	bl	8001a68 <HAL_GetTick>
 800063c:	6078      	str	r0, [r7, #4]
		  	  uint8_t key_state_r = HAL_GPIO_ReadPin(BUT_1_GPIO_Port, BUT_1_Pin);
 800063e:	2104      	movs	r1, #4
 8000640:	4828      	ldr	r0, [pc, #160]	@ (80006e4 <button_state_determ+0x150>)
 8000642:	f002 fa23 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	70bb      	strb	r3, [r7, #2]

		  	  if(key_state_r == 1 && !short_state_r && (ms - time_key_r) > 50)
 800064a:	78bb      	ldrb	r3, [r7, #2]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d113      	bne.n	8000678 <button_state_determ+0xe4>
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <button_state_determ+0x164>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10f      	bne.n	8000678 <button_state_determ+0xe4>
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <button_state_determ+0x168>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	2b32      	cmp	r3, #50	@ 0x32
 8000662:	d909      	bls.n	8000678 <button_state_determ+0xe4>
		  	  {
		  	    short_state_r = 1;
 8000664:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <button_state_determ+0x164>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		  	    long_state_r = 0;
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <button_state_determ+0x16c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 8000670:	4a22      	ldr	r2, [pc, #136]	@ (80006fc <button_state_determ+0x168>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	e02e      	b.n	80006d6 <button_state_determ+0x142>
		  	  }
		  	  else if(key_state_r == 1 && !long_state_r && (ms - time_key_r) > 700)
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d111      	bne.n	80006a2 <button_state_determ+0x10e>
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <button_state_determ+0x16c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10d      	bne.n	80006a2 <button_state_determ+0x10e>
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <button_state_determ+0x168>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000692:	d906      	bls.n	80006a2 <button_state_determ+0x10e>
		  	  {
		  		// левая кнопка , действие на длительное нажатие
		  		but_state_right = BUT_LONG;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <button_state_determ+0x170>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		  		long_state_r = 1;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <button_state_determ+0x16c>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e019      	b.n	80006d6 <button_state_determ+0x142>
		  		//sleep_counter = 0;
		  	  }
		  	  else if(key_state_r == 0 && short_state_r && (ms - time_key_r) > 50)
 80006a2:	78bb      	ldrb	r3, [r7, #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d116      	bne.n	80006d6 <button_state_determ+0x142>
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <button_state_determ+0x164>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d012      	beq.n	80006d6 <button_state_determ+0x142>
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <button_state_determ+0x168>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	2b32      	cmp	r3, #50	@ 0x32
 80006ba:	d90c      	bls.n	80006d6 <button_state_determ+0x142>
		  	  {
		  	    short_state_r = 0;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <button_state_determ+0x164>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <button_state_determ+0x168>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]

		  	 if(!long_state_r)
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <button_state_determ+0x16c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <button_state_determ+0x142>
		  	    {
		  		 	 but_state_right = BUT_SHORT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <button_state_determ+0x170>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
		  		 	 //sleep_counter = 0;
		  	    }
		  	  }
		  	 but_flag_ext = 0;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <button_state_determ+0x174>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020800 	.word	0x40020800
 80006e8:	200008e3 	.word	0x200008e3
 80006ec:	200008e8 	.word	0x200008e8
 80006f0:	200008e4 	.word	0x200008e4
 80006f4:	200008e1 	.word	0x200008e1
 80006f8:	200008ec 	.word	0x200008ec
 80006fc:	200008f0 	.word	0x200008f0
 8000700:	200008ed 	.word	0x200008ed
 8000704:	200008e2 	.word	0x200008e2
 8000708:	200008f4 	.word	0x200008f4

0800070c <but_state_reset>:

void but_state_reset()
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	    but_state_left = BUT_RESET;
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <but_state_reset+0x1c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	    but_state_right = BUT_RESET;
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <but_state_reset+0x20>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200008e1 	.word	0x200008e1
 800072c:	200008e2 	.word	0x200008e2

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f001 f931 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f88f 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 fc1f 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000742:	f000 fbf5 	bl	8000f30 <MX_DMA_Init>
  MX_I2C1_Init();
 8000746:	f000 f947 	bl	80009d8 <MX_I2C1_Init>
  MX_RTC_Init();
 800074a:	f000 f973 	bl	8000a34 <MX_RTC_Init>
  MX_SPI1_Init();
 800074e:	f000 f9ff 	bl	8000b50 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000752:	f000 f8ef 	bl	8000934 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000756:	f000 fb47 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800075a:	f000 facf 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM4_Init();
 800075e:	f000 fb99 	bl	8000e94 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000762:	f000 fa2b 	bl	8000bbc <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000766:	f00b f9ff 	bl	800bb68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */




  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000770:	4832      	ldr	r0, [pc, #200]	@ (800083c <main+0x10c>)
 8000772:	f002 f9a3 	bl	8002abc <HAL_GPIO_WritePin>
  ST7735_Init();
 8000776:	f00b f827 	bl	800b7c8 <ST7735_Init>
  ST7735_InvertColors(0);
 800077a:	2000      	movs	r0, #0
 800077c:	f00b f9dd 	bl	800bb3a <ST7735_InvertColors>
  ST7735_FillScreen(ST7735_BLACK);
 8000780:	2000      	movs	r0, #0
 8000782:	f00b f97d 	bl	800ba80 <ST7735_FillScreen>
  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078c:	482b      	ldr	r0, [pc, #172]	@ (800083c <main+0x10c>)
 800078e:	f002 f995 	bl	8002abc <HAL_GPIO_WritePin>

  W25qxx_Init();
 8000792:	f00c fb55 	bl	800ce40 <W25qxx_Init>
  MX_I2C1_Init();
 8000796:	f000 f91f 	bl	80009d8 <MX_I2C1_Init>
  touch_init();
 800079a:	f00c f9e7 	bl	800cb6c <touch_init>

  HAL_TIM_Base_Start_IT(&htim4);
 800079e:	4828      	ldr	r0, [pc, #160]	@ (8000840 <main+0x110>)
 80007a0:	f006 fb36 	bl	8006e10 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007aa:	4826      	ldr	r0, [pc, #152]	@ (8000844 <main+0x114>)
 80007ac:	f002 f986 	bl	8002abc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b6:	4823      	ldr	r0, [pc, #140]	@ (8000844 <main+0x114>)
 80007b8:	f002 f980 	bl	8002abc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <main+0x114>)
 80007c4:	f002 f97a 	bl	8002abc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80007c8:	481f      	ldr	r0, [pc, #124]	@ (8000848 <main+0x118>)
 80007ca:	f006 fb21 	bl	8006e10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	481e      	ldr	r0, [pc, #120]	@ (800084c <main+0x11c>)
 80007d2:	f006 fbd9 	bl	8006f88 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 50;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <main+0x120>)
 80007d8:	2232      	movs	r2, #50	@ 0x32
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34

  char char_buffer[10];

   uint16_t conduct0 = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	82fb      	strh	r3, [r7, #22]
   uint16_t conduct1 = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	82bb      	strh	r3, [r7, #20]
   uint16_t conduct2 = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	827b      	strh	r3, [r7, #18]
   uint16_t conduct_avg = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	823b      	strh	r3, [r7, #16]
   uint8_t gl_id = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
   uint8_t id_changed_by_touch = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73bb      	strb	r3, [r7, #14]
   uint16_t touch_accel_to_disp = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	81bb      	strh	r3, [r7, #12]
   uint8_t id_to_displ_fast_scroll = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  button_state_determ();
 80007fc:	f7ff feca 	bl	8000594 <button_state_determ>
	  gl_id_to_display  = select_product_id(gl_id_to_display);
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <main+0x124>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f00b fea1 	bl	800c54c <select_product_id>
 800080a:	4603      	mov	r3, r0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <main+0x124>)
 8000810:	701a      	strb	r2, [r3, #0]

	  page_select();
 8000812:	f00b fe93 	bl	800c53c <page_select>

	  display_selected_product(gl_id_to_display);
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <main+0x124>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f00b fed4 	bl	800c5c8 <display_selected_product>

	  MPR121_setregister(MHD_R,0x01);
 8000820:	2101      	movs	r1, #1
 8000822:	202b      	movs	r0, #43	@ 0x2b
 8000824:	f00c f838 	bl	800c898 <MPR121_setregister>

	  if(touch_irq){
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <main+0x128>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <main+0x104>

		  touch_slider();
 8000830:	f00c f868 	bl	800c904 <touch_slider>
//	  	//  sprintf(char_buffer, "%04d", conduct2);
//	  	//  ST7735_WriteString(55, 43, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
//
//	  	  conduct_avg = (conduct0+conduct1+conduct2)/3;

	  	  but_state_reset();
 8000834:	f7ff ff6a 	bl	800070c <but_state_reset>
  {
 8000838:	e7e0      	b.n	80007fc <main+0xcc>
 800083a:	bf00      	nop
 800083c:	40020800 	.word	0x40020800
 8000840:	20000898 	.word	0x20000898
 8000844:	40020400 	.word	0x40020400
 8000848:	20000808 	.word	0x20000808
 800084c:	200007c0 	.word	0x200007c0
 8000850:	40010000 	.word	0x40010000
 8000854:	200008f5 	.word	0x200008f5
 8000858:	200008e0 	.word	0x200008e0

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	@ 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00c fcb2 	bl	800d1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a28      	ldr	r2, [pc, #160]	@ (800092c <SystemClock_Config+0xd0>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <SystemClock_Config+0xd0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <SystemClock_Config+0xd4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SystemClock_Config+0xd4>)
 80008aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemClock_Config+0xd4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80008bc:	2305      	movs	r3, #5
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008d8:	23a8      	movs	r3, #168	@ 0xa8
 80008da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008dc:	2304      	movs	r3, #4
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e0:	2307      	movs	r3, #7
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fb55 	bl	8004f98 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008f4:	f000 fc32 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f004 fdb7 	bl	8005488 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000920:	f000 fc1c 	bl	800115c <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	@ 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000948:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <MX_ADC1_Init+0x9c>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_ADC1_Init+0x98>)
 800094e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000952:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_ADC1_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_ADC1_Init+0xa0>)
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000990:	2201      	movs	r2, #1
 8000992:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_ADC1_Init+0x98>)
 8000996:	f001 f897 	bl	8001ac8 <HAL_ADC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 fbdc 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80009ac:	2305      	movs	r3, #5
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_ADC1_Init+0x98>)
 80009b6:	f001 f8cb 	bl	8001b50 <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009c0:	f000 fbcc 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200005ec 	.word	0x200005ec
 80009d0:	40012000 	.word	0x40012000
 80009d4:	0f000001 	.word	0x0f000001

080009d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <MX_I2C1_Init+0x54>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x58>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a16:	f002 f883 	bl	8002b20 <HAL_I2C_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a20:	f000 fb9c 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000634 	.word	0x20000634
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	000186a0 	.word	0x000186a0

08000a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	@ 0x40
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2228      	movs	r2, #40	@ 0x28
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00c fbbd 	bl	800d1d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b4c <MX_RTC_Init+0x118>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a60:	4b39      	ldr	r3, [pc, #228]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a66:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a68:	227f      	movs	r2, #127	@ 0x7f
 8000a6a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a6c:	4b36      	ldr	r3, [pc, #216]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a6e:	22ff      	movs	r2, #255	@ 0xff
 8000a70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a78:	4b33      	ldr	r3, [pc, #204]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a84:	4830      	ldr	r0, [pc, #192]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000a86:	f004 fff9 	bl	8005a7c <HAL_RTC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 fb64 	bl	800115c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000ab8:	f005 f856 	bl	8005b68 <HAL_RTC_SetTime>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ac2:	f000 fb4b 	bl	800115c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000acc:	2301      	movs	r3, #1
 8000ace:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000ae8:	f005 f8d8 	bl	8005c9c <HAL_RTC_SetDate>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000af2:	f000 fb33 	bl	800115c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000b0e:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8000b12:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_RTC_Init+0x114>)
 8000b30:	f005 f938 	bl	8005da4 <HAL_RTC_SetAlarm_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000b3a:	f000 fb0f 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3740      	adds	r7, #64	@ 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000688 	.word	0x20000688
 8000b4c:	40002800 	.word	0x40002800

08000b50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_SPI1_Init+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_SPI1_Init+0x64>)
 8000ba2:	f005 fb3c 	bl	800621e <HAL_SPI_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bac:	f000 fad6 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200006a8 	.word	0x200006a8
 8000bb8:	40013000 	.word	0x40013000

08000bbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	@ 0x58
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00c faed 	bl	800d1d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8000cf8 <MX_TIM1_Init+0x13c>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000c00:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c02:	f240 3233 	movw	r2, #819	@ 0x333
 8000c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c0e:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c10:	2263      	movs	r2, #99	@ 0x63
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b34      	ldr	r3, [pc, #208]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c26:	4833      	ldr	r0, [pc, #204]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c28:	f006 f8a2 	bl	8006d70 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c32:	f000 fa93 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c40:	4619      	mov	r1, r3
 8000c42:	482c      	ldr	r0, [pc, #176]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c44:	f006 fc74 	bl	8007530 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c4e:	f000 fa85 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c52:	4828      	ldr	r0, [pc, #160]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c54:	f006 f93e 	bl	8006ed4 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c5e:	f000 fa7d 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4820      	ldr	r0, [pc, #128]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000c72:	f007 f823 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c7c:	f000 fa6e 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	@ 0x60
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000ca6:	f006 fb81 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cb0:	f000 fa54 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ccc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000cd8:	f007 f85e 	bl	8007d98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ce2:	f000 fa3b 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <MX_TIM1_Init+0x138>)
 8000ce8:	f000 fc52 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	@ 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200007c0 	.word	0x200007c0
 8000cf8:	40010000 	.word	0x40010000

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d36:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d44:	2263      	movs	r2, #99	@ 0x63
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4823      	ldr	r0, [pc, #140]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d56:	f006 f80b 	bl	8006d70 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d60:	f000 f9fc 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d72:	f006 fbdd 	bl	8007530 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d7c:	f000 f9ee 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d80:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d82:	f006 f8a7 	bl	8006ed4 <HAL_TIM_PWM_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d8c:	f000 f9e6 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000da0:	f006 ff8c 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f000 f9d7 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	@ 0x60
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dc6:	f006 faf1 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dd0:	f000 f9c4 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dd6:	f000 fbdb 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	@ 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000808 	.word	0x20000808

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e06:	4a22      	ldr	r2, [pc, #136]	@ (8000e90 <MX_TIM3_Init+0xa8>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e0c:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e1a:	2263      	movs	r2, #99	@ 0x63
 8000e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e2c:	f005 ffa0 	bl	8006d70 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f991 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e48:	f006 fb72 	bl	8007530 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f983 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e56:	2108      	movs	r1, #8
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e5a:	f006 f945 	bl	80070e8 <HAL_TIM_OnePulse_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e64:	f000 f97a 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_TIM3_Init+0xa4>)
 8000e76:	f006 ff21 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e80:	f000 f96c 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000850 	.word	0x20000850
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <MX_TIM4_Init+0x98>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000eb8:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25-1;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ec6:	2218      	movs	r2, #24
 8000ec8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ed6:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ed8:	f005 ff4a 	bl	8006d70 <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 f93b 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000ef4:	f006 fb1c 	bl	8007530 <HAL_TIM_ConfigClockSource>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 f92d 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_TIM4_Init+0x94>)
 8000f10:	f006 fed4 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f1a:	f000 f91f 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000898 	.word	0x20000898
 8000f2c:	40000800 	.word	0x40000800

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_DMA_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <MX_DMA_Init+0x4c>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MX_DMA_Init+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2038      	movs	r0, #56	@ 0x38
 8000f58:	f001 f8f3 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f5c:	2038      	movs	r0, #56	@ 0x38
 8000f5e:	f001 f90c 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	203b      	movs	r0, #59	@ 0x3b
 8000f68:	f001 f8eb 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f6c:	203b      	movs	r0, #59	@ 0x3b
 8000f6e:	f001 f904 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b68      	ldr	r3, [pc, #416]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b64      	ldr	r3, [pc, #400]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a63      	ldr	r2, [pc, #396]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b61      	ldr	r3, [pc, #388]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x1c8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8001028:	4848      	ldr	r0, [pc, #288]	@ (800114c <MX_GPIO_Init+0x1cc>)
 800102a:	f001 fd47 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 800102e:	2201      	movs	r2, #1
 8001030:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8001034:	4845      	ldr	r0, [pc, #276]	@ (800114c <MX_GPIO_Init+0x1cc>)
 8001036:	f001 fd41 	bl	8002abc <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001040:	4843      	ldr	r0, [pc, #268]	@ (8001150 <MX_GPIO_Init+0x1d0>)
 8001042:	f001 fd3b 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VIBRO_Pin|S1_Pin|OE_Pin|DFU_FORCE_Pin
 8001046:	2200      	movs	r2, #0
 8001048:	f24d 2101 	movw	r1, #53761	@ 0xd201
 800104c:	4841      	ldr	r0, [pc, #260]	@ (8001154 <MX_GPIO_Init+0x1d4>)
 800104e:	f001 fd35 	bl	8002abc <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x1d4>)
 800105a:	f001 fd2f 	bl	8002abc <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 800105e:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8001062:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x1cc>)
 8001078:	f001 fb84 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 800107c:	230c      	movs	r3, #12
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	482f      	ldr	r0, [pc, #188]	@ (800114c <MX_GPIO_Init+0x1cc>)
 8001090:	f001 fb78 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 8001094:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <MX_GPIO_Init+0x1d0>)
 80010ae:	f001 fb69 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : VIBRO_Pin LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin
                           OE_Pin DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_BLUE_1_Pin LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = VIBRO_Pin|LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin
 80010b2:	f24d 333f 	movw	r3, #54079	@ 0xd33f
 80010b6:	617b      	str	r3, [r7, #20]
                          |OE_Pin|DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_BLUE_1_Pin|LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4822      	ldr	r0, [pc, #136]	@ (8001154 <MX_GPIO_Init+0x1d4>)
 80010cc:	f001 fb5a 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 80010d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	481b      	ldr	r0, [pc, #108]	@ (8001154 <MX_GPIO_Init+0x1d4>)
 80010e6:	f001 fb4d 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 80010ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	@ (8001150 <MX_GPIO_Init+0x1d0>)
 8001102:	f001 fb3f 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 8001106:	2304      	movs	r3, #4
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480f      	ldr	r0, [pc, #60]	@ (8001158 <MX_GPIO_Init+0x1d8>)
 800111c:	f001 fb32 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2008      	movs	r0, #8
 8001126:	f001 f80c 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800112a:	2008      	movs	r0, #8
 800112c:	f001 f825 	bl	800217a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f001 f804 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f001 f81d 	bl	800217a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020c00 	.word	0x40020c00

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <Error_Handler+0x8>

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_ADC_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d127      	bne.n	800122a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a15      	ldr	r2, [pc, #84]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_ADC_MspInit+0x80>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 8001212:	230e      	movs	r3, #14
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_ADC_MspInit+0x84>)
 8001226:	f001 faad 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40012000 	.word	0x40012000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_I2C_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23c0      	movs	r3, #192	@ 0xc0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128e:	2304      	movs	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <HAL_I2C_MspInit+0x8c>)
 800129a:	f001 fa73 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <HAL_RTC_MspInit+0x60>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d119      	bne.n	8001326 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012f2:	2302      	movs	r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f004 facd 	bl	80058a0 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800130c:	f7ff ff26 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_RTC_MspInit+0x64>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2029      	movs	r0, #41	@ 0x29
 800131c:	f000 ff11 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001320:	2029      	movs	r0, #41	@ 0x29
 8001322:	f000 ff2a 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40002800 	.word	0x40002800
 8001334:	42470e3c 	.word	0x42470e3c

08001338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a47      	ldr	r2, [pc, #284]	@ (8001474 <HAL_SPI_MspInit+0x13c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	f040 8088 	bne.w	800146c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001364:	4a44      	ldr	r2, [pc, #272]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 8001366:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136a:	6453      	str	r3, [r2, #68]	@ 0x44
 800136c:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_SPI_MspInit+0x140>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23e0      	movs	r3, #224	@ 0xe0
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a4:	2305      	movs	r3, #5
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4833      	ldr	r0, [pc, #204]	@ (800147c <HAL_SPI_MspInit+0x144>)
 80013b0:	f001 f9e8 	bl	8002784 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80013b4:	4b32      	ldr	r3, [pc, #200]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013b6:	4a33      	ldr	r2, [pc, #204]	@ (8001484 <HAL_SPI_MspInit+0x14c>)
 80013b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013ba:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013e2:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f4:	4822      	ldr	r0, [pc, #136]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 80013f6:	f000 fedb 	bl	80021b0 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001400:	f7ff feac 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 8001408:	64da      	str	r2, [r3, #76]	@ 0x4c
 800140a:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_SPI_MspInit+0x148>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001412:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <HAL_SPI_MspInit+0x154>)
 8001414:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001418:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800141c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001420:	2240      	movs	r2, #64	@ 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800143e:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001452:	f000 fead 	bl	80021b0 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800145c:	f7ff fe7e 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001464:	649a      	str	r2, [r3, #72]	@ 0x48
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <HAL_SPI_MspInit+0x150>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	20000700 	.word	0x20000700
 8001484:	40026410 	.word	0x40026410
 8001488:	20000760 	.word	0x20000760
 800148c:	40026458 	.word	0x40026458

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a38      	ldr	r2, [pc, #224]	@ (8001580 <HAL_TIM_Base_MspInit+0xf0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d116      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a36      	ldr	r2, [pc, #216]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2019      	movs	r0, #25
 80014c4:	f000 fe3d 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014c8:	2019      	movs	r0, #25
 80014ca:	f000 fe56 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014ce:	e052      	b.n	8001576 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d8:	d116      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	201c      	movs	r0, #28
 80014fc:	f000 fe21 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001500:	201c      	movs	r0, #28
 8001502:	f000 fe3a 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001506:	e036      	b.n	8001576 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <HAL_TIM_Base_MspInit+0xf8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d116      	bne.n	8001540 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201d      	movs	r0, #29
 8001534:	f000 fe05 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001538:	201d      	movs	r0, #29
 800153a:	f000 fe1e 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 800153e:	e01a      	b.n	8001576 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a11      	ldr	r2, [pc, #68]	@ (800158c <HAL_TIM_Base_MspInit+0xfc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d115      	bne.n	8001576 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_TIM_Base_MspInit+0xf4>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	201e      	movs	r0, #30
 800156c:	f000 fde9 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001570:	201e      	movs	r0, #30
 8001572:	f000 fe02 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010000 	.word	0x40010000
 8001584:	40023800 	.word	0x40023800
 8001588:	40000400 	.word	0x40000400
 800158c:	40000800 	.word	0x40000800

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	@ (8001644 <HAL_TIM_MspPostInit+0xb4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11f      	bne.n	80015f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4818      	ldr	r0, [pc, #96]	@ (800164c <HAL_TIM_MspPostInit+0xbc>)
 80015ec:	f001 f8ca 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f0:	e023      	b.n	800163a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fa:	d11e      	bne.n	800163a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	6313      	str	r3, [r2, #48]	@ 0x30
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_TIM_MspPostInit+0xb8>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	@ (8001650 <HAL_TIM_MspPostInit+0xc0>)
 8001636:	f001 f8a5 	bl	8002784 <HAL_GPIO_Init>
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40010000 	.word	0x40010000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <UsageFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 f9c9 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 80016b6:	2004      	movs	r0, #4
 80016b8:	f001 fa1a 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016c6:	f005 fd69 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200007c0 	.word	0x200007c0

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(gl_touch_accel)
 80016d8:	4b54      	ldr	r3, [pc, #336]	@ (800182c <TIM2_IRQHandler+0x158>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <TIM2_IRQHandler+0x18>
	{
		gl_touch_accel_inc++;
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <TIM2_IRQHandler+0x15c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <TIM2_IRQHandler+0x15c>)
 80016ea:	801a      	strh	r2, [r3, #0]
	}
	if(gl_touch_change_id)
 80016ec:	4b51      	ldr	r3, [pc, #324]	@ (8001834 <TIM2_IRQHandler+0x160>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d016      	beq.n	8001722 <TIM2_IRQHandler+0x4e>
	{
		gl_touch_change_id++;
 80016f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001834 <TIM2_IRQHandler+0x160>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <TIM2_IRQHandler+0x160>)
 80016fe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2101      	movs	r1, #1
 8001704:	484c      	ldr	r0, [pc, #304]	@ (8001838 <TIM2_IRQHandler+0x164>)
 8001706:	f001 f9d9 	bl	8002abc <HAL_GPIO_WritePin>
		if(gl_touch_change_id == 70)
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <TIM2_IRQHandler+0x160>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b46      	cmp	r3, #70	@ 0x46
 8001710:	d107      	bne.n	8001722 <TIM2_IRQHandler+0x4e>
		{
			HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2101      	movs	r1, #1
 8001716:	4848      	ldr	r0, [pc, #288]	@ (8001838 <TIM2_IRQHandler+0x164>)
 8001718:	f001 f9d0 	bl	8002abc <HAL_GPIO_WritePin>
			gl_touch_change_id = 0;
 800171c:	4b45      	ldr	r3, [pc, #276]	@ (8001834 <TIM2_IRQHandler+0x160>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(&htim2);
		}
	}

	gl_counter_1000hz_tim2++;
 8001722:	4b46      	ldr	r3, [pc, #280]	@ (800183c <TIM2_IRQHandler+0x168>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b44      	ldr	r3, [pc, #272]	@ (800183c <TIM2_IRQHandler+0x168>)
 800172c:	801a      	strh	r2, [r3, #0]
	gl_selected_pause++;
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b42      	ldr	r3, [pc, #264]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 8001738:	801a      	strh	r2, [r3, #0]
	if(gl_selected_pause >0 && gl_selected_pause < 5000)
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <TIM2_IRQHandler+0x86>
 8001742:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	f241 3287 	movw	r2, #4999	@ 0x1387
 800174a:	4293      	cmp	r3, r2
 800174c:	d805      	bhi.n	800175a <TIM2_IRQHandler+0x86>
	{
		gl_selected_pause++;
 800174e:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <TIM2_IRQHandler+0x16c>)
 8001758:	801a      	strh	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 500 == 0)
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <TIM2_IRQHandler+0x168>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	4a39      	ldr	r2, [pc, #228]	@ (8001844 <TIM2_IRQHandler+0x170>)
 8001760:	fba2 1203 	umull	r1, r2, r2, r3
 8001764:	0952      	lsrs	r2, r2, #5
 8001766:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800176a:	fb01 f202 	mul.w	r2, r1, r2
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <TIM2_IRQHandler+0xb4>
	{
		gl_int_5hz_tim2 = 1;
 8001776:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <TIM2_IRQHandler+0x174>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
		gl_int_5hz_tim2_for_pic ++;
 800177c:	4b33      	ldr	r3, [pc, #204]	@ (800184c <TIM2_IRQHandler+0x178>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b31      	ldr	r3, [pc, #196]	@ (800184c <TIM2_IRQHandler+0x178>)
 8001786:	701a      	strb	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 50 == 0 && gl_led_pwm_state == LED_PWM_CCR_CHANGEBALE )
 8001788:	4b2c      	ldr	r3, [pc, #176]	@ (800183c <TIM2_IRQHandler+0x168>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <TIM2_IRQHandler+0x17c>)
 800178e:	fba2 1203 	umull	r1, r2, r2, r3
 8001792:	0912      	lsrs	r2, r2, #4
 8001794:	2132      	movs	r1, #50	@ 0x32
 8001796:	fb01 f202 	mul.w	r2, r1, r2
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d13f      	bne.n	8001822 <TIM2_IRQHandler+0x14e>
 80017a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <TIM2_IRQHandler+0x180>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d13b      	bne.n	8001822 <TIM2_IRQHandler+0x14e>
	{
		ch3_counter += 3;
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <TIM2_IRQHandler+0x184>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3303      	adds	r3, #3
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <TIM2_IRQHandler+0x184>)
 80017b4:	801a      	strh	r2, [r3, #0]
		if(ch3_counter < 300)
 80017b6:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <TIM2_IRQHandler+0x184>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017be:	d20b      	bcs.n	80017d8 <TIM2_IRQHandler+0x104>
		{
			CH3_DC = ch3_counter;
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <TIM2_IRQHandler+0x184>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <TIM2_IRQHandler+0x188>)
 80017c8:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = CH3_DC;
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <TIM2_IRQHandler+0x188>)
 80017cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d6:	e024      	b.n	8001822 <TIM2_IRQHandler+0x14e>
		}
		else if(ch3_counter >= 300)
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <TIM2_IRQHandler+0x184>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017e0:	d31f      	bcc.n	8001822 <TIM2_IRQHandler+0x14e>
		{
			TIM2->CCR3 = CH3_DC;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <TIM2_IRQHandler+0x188>)
 80017e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c
			CH3_DC -= 3;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <TIM2_IRQHandler+0x188>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b03      	subs	r3, #3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <TIM2_IRQHandler+0x188>)
 80017fe:	801a      	strh	r2, [r3, #0]
			if(CH3_DC <=0)
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <TIM2_IRQHandler+0x188>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc0b      	bgt.n	8001822 <TIM2_IRQHandler+0x14e>
			{
				CH3_DC = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <TIM2_IRQHandler+0x188>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
				ch3_counter = 0;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <TIM2_IRQHandler+0x184>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
				gl_led_color_result_blink_counter++;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <TIM2_IRQHandler+0x18c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <TIM2_IRQHandler+0x18c>)
 8001820:	701a      	strb	r2, [r3, #0]
		}


	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001822:	4810      	ldr	r0, [pc, #64]	@ (8001864 <TIM2_IRQHandler+0x190>)
 8001824:	f005 fcba 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000902 	.word	0x20000902
 8001830:	20000904 	.word	0x20000904
 8001834:	20000900 	.word	0x20000900
 8001838:	40020400 	.word	0x40020400
 800183c:	200008fa 	.word	0x200008fa
 8001840:	20001d18 	.word	0x20001d18
 8001844:	10624dd3 	.word	0x10624dd3
 8001848:	200008fc 	.word	0x200008fc
 800184c:	200008fd 	.word	0x200008fd
 8001850:	51eb851f 	.word	0x51eb851f
 8001854:	20000102 	.word	0x20000102
 8001858:	200008f8 	.word	0x200008f8
 800185c:	200008f6 	.word	0x200008f6
 8001860:	200008ff 	.word	0x200008ff
 8001864:	20000808 	.word	0x20000808

08001868 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM3_IRQHandler+0x10>)
 800186e:	f005 fc95 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000850 	.word	0x20000850

0800187c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM4_IRQHandler+0x10>)
 8001882:	f005 fc8b 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000898 	.word	0x20000898

08001890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8001894:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001898:	f001 f92a 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	led_1hz_counter++;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <RTC_Alarm_IRQHandler+0x38>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <RTC_Alarm_IRQHandler+0x38>)
 80018ae:	701a      	strb	r2, [r3, #0]

	if(gl_selected_pause == 0 && gl_selected_flag == 1)
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <RTC_Alarm_IRQHandler+0x3c>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <RTC_Alarm_IRQHandler+0x2c>
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <RTC_Alarm_IRQHandler+0x40>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <RTC_Alarm_IRQHandler+0x2c>
	{
		gl_selected_pause = 1;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <RTC_Alarm_IRQHandler+0x3c>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	801a      	strh	r2, [r3, #0]
		gl_selected_flag = 0;
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <RTC_Alarm_IRQHandler+0x40>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <RTC_Alarm_IRQHandler+0x44>)
 80018ce:	f004 fbab 	bl	8006028 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200008fe 	.word	0x200008fe
 80018dc:	20001d18 	.word	0x20001d18
 80018e0:	20000103 	.word	0x20000103
 80018e4:	20000688 	.word	0x20000688

080018e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <DMA2_Stream0_IRQHandler+0x10>)
 80018ee:	f000 fd0d 	bl	800230c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000700 	.word	0x20000700

080018fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <DMA2_Stream3_IRQHandler+0x10>)
 8001902:	f000 fd03 	bl	800230c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000760 	.word	0x20000760

08001910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <OTG_FS_IRQHandler+0x10>)
 8001916:	f002 fa12 	bl	8003d3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200015ec 	.word	0x200015ec

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	@ (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	@ (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	@ (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	@ (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001972:	f7ff ffd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f00b fc35 	bl	800d1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7fe fed9 	bl	8000730 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200005d0 	.word	0x200005d0
  ldr r2, =_sidata
 800198c:	0800e258 	.word	0x0800e258
  ldr r2, =_sbss
 8001990:	200005d0 	.word	0x200005d0
  ldr r4, =_ebss
 8001994:	20001d54 	.word	0x20001d54

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fbb1 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fbca 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbc9 	bl	8002196 <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 fb91 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000908 	.word	0x20000908

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000908 	.word	0x20000908

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e033      	b.n	8001b46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fb66 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b0e:	f023 0302 	bic.w	r3, r3, #2
 8001b12:	f043 0202 	orr.w	r2, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f93a 	bl	8001d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e105      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x228>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d925      	bls.n	8001bc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4403      	add	r3, r0
 8001bba:	3b1e      	subs	r3, #30
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	e022      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	2207      	movs	r2, #7
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4403      	add	r3, r0
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d824      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b05      	subs	r3, #5
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b05      	subs	r3, #5
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5e:	e04c      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d824      	bhi.n	8001cb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b23      	subs	r3, #35	@ 0x23
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	@ 0x23
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb0:	e023      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b41      	subs	r3, #65	@ 0x41
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b41      	subs	r3, #65	@ 0x41
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_ADC_ConfigChannel+0x234>)
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <HAL_ADC_ConfigChannel+0x238>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1cc>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_ADC_ConfigChannel+0x238>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d123      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d003      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x1e6>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b11      	cmp	r3, #17
 8001d34:	d11b      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d111      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_ADC_ConfigChannel+0x23c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a10      	ldr	r2, [pc, #64]	@ (8001d90 <HAL_ADC_ConfigChannel+0x240>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9a      	lsrs	r2, r3, #18
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40012300 	.word	0x40012300
 8001d88:	40012000 	.word	0x40012000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b79      	ldr	r3, [pc, #484]	@ (8001f84 <ADC_Init+0x1f0>)
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <ADC_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0202 	bic.w	r2, r2, #2
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e1b      	ldrb	r3, [r3, #24]
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	035a      	lsls	r2, r3, #13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	051a      	lsls	r2, r3, #20
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	029a      	lsls	r2, r3, #10
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	@ (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	@ (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	@ (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff fc54 	bl	8001a68 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e099      	b.n	8002300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ec:	e00f      	b.n	800220e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ee:	f7ff fc3b 	bl	8001a68 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d908      	bls.n	800220e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e078      	b.n	8002300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e8      	bne.n	80021ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4b38      	ldr	r3, [pc, #224]	@ (8002308 <HAL_DMA_Init+0x158>)
 8002228:	4013      	ands	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	4313      	orrs	r3, r2
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0307 	bic.w	r3, r3, #7
 800228e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d117      	bne.n	80022d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f9e9 	bl	800268c <DMA_CheckFifoParam>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022ce:	2301      	movs	r3, #1
 80022d0:	e016      	b.n	8002300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9a0 	bl	8002620 <DMA_CalcBaseAndBitshift>
 80022e0:	4603      	mov	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	223f      	movs	r2, #63	@ 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	f010803f 	.word	0xf010803f

0800230c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002318:	4b8e      	ldr	r3, [pc, #568]	@ (8002554 <HAL_DMA_IRQHandler+0x248>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8e      	ldr	r2, [pc, #568]	@ (8002558 <HAL_DMA_IRQHandler+0x24c>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0a9b      	lsrs	r3, r3, #10
 8002324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2208      	movs	r2, #8
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01a      	beq.n	8002378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0204 	bic.w	r2, r2, #4
 800235e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	2208      	movs	r2, #8
 8002366:	409a      	lsls	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	2201      	movs	r2, #1
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	f043 0202 	orr.w	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	2204      	movs	r2, #4
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2204      	movs	r2, #4
 80023d2:	409a      	lsls	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	f043 0204 	orr.w	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	2210      	movs	r2, #16
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d043      	beq.n	800247c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d03c      	beq.n	800247c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	2210      	movs	r2, #16
 8002408:	409a      	lsls	r2, r3
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d018      	beq.n	800244e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d108      	bne.n	800243c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d024      	beq.n	800247c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
 800243a:	e01f      	b.n	800247c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e016      	b.n	800247c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0208 	bic.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	2220      	movs	r2, #32
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 808f 	beq.w	80025ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8087 	beq.w	80025ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	2220      	movs	r2, #32
 80024a4:	409a      	lsls	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d136      	bne.n	8002524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0216 	bic.w	r2, r2, #22
 80024c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x1da>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0208 	bic.w	r2, r2, #8
 80024f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	223f      	movs	r2, #63	@ 0x3f
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d07e      	beq.n	8002618 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
        }
        return;
 8002522:	e079      	b.n	8002618 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01d      	beq.n	800256e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002544:	2b00      	cmp	r3, #0
 8002546:	d031      	beq.n	80025ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
 8002550:	e02c      	b.n	80025ac <HAL_DMA_IRQHandler+0x2a0>
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000
 8002558:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e01e      	b.n	80025ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0210 	bic.w	r2, r2, #16
 800258a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d032      	beq.n	800261a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d022      	beq.n	8002606 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2205      	movs	r2, #5
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3301      	adds	r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d307      	bcc.n	80025f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f2      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x2cc>
 80025f2:	e000      	b.n	80025f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
 8002616:	e000      	b.n	800261a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002618:	bf00      	nop
    }
  }
}
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3b10      	subs	r3, #16
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <DMA_CalcBaseAndBitshift+0x64>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d909      	bls.n	8002662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002660:	e007      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	0800d46c 	.word	0x0800d46c

0800268c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d856      	bhi.n	800275a <DMA_CheckFifoParam+0xce>
 80026ac:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <DMA_CheckFifoParam+0x28>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026d7 	.word	0x080026d7
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	0800275b 	.word	0x0800275b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d046      	beq.n	800275e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e043      	b.n	800275e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026de:	d140      	bne.n	8002762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e4:	e03d      	b.n	8002762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ee:	d121      	bne.n	8002734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d837      	bhi.n	8002766 <DMA_CheckFifoParam+0xda>
 80026f6:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <DMA_CheckFifoParam+0x70>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002713 	.word	0x08002713
 8002704:	0800270d 	.word	0x0800270d
 8002708:	08002725 	.word	0x08002725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e030      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d025      	beq.n	800276a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e022      	b.n	800276a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800272c:	d11f      	bne.n	800276e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002732:	e01c      	b.n	800276e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d903      	bls.n	8002742 <DMA_CheckFifoParam+0xb6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002740:	e018      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      break;
 8002746:	e015      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e00b      	b.n	8002772 <DMA_CheckFifoParam+0xe6>
      break;
 800275a:	bf00      	nop
 800275c:	e00a      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e008      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e006      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e004      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;   
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
    }
  } 
  
  return status; 
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e159      	b.n	8002a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8148 	bne.w	8002a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d130      	bne.n	8002838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a2 	beq.w	8002a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a56      	ldr	r2, [pc, #344]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002926:	4a52      	ldr	r2, [pc, #328]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	@ (8002a74 <HAL_GPIO_Init+0x2f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x202>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a48      	ldr	r2, [pc, #288]	@ (8002a78 <HAL_GPIO_Init+0x2f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x1fe>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_GPIO_Init+0x2f8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x1fa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a46      	ldr	r2, [pc, #280]	@ (8002a80 <HAL_GPIO_Init+0x2fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x1f6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a45      	ldr	r2, [pc, #276]	@ (8002a84 <HAL_GPIO_Init+0x300>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x1f2>
 8002972:	2304      	movs	r3, #4
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002976:	2307      	movs	r3, #7
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002998:	4935      	ldr	r1, [pc, #212]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a24      	ldr	r2, [pc, #144]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fa:	4b23      	ldr	r3, [pc, #140]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a48:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f aea2 	bls.w	80027a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	@ 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b06:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fcd8 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e12b      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb7a 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b84:	f002 fe78 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a81      	ldr	r2, [pc, #516]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d807      	bhi.n	8002ba4 <HAL_I2C_Init+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a80      	ldr	r2, [pc, #512]	@ (8002d98 <HAL_I2C_Init+0x278>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e006      	b.n	8002bb2 <HAL_I2C_Init+0x92>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8002d9c <HAL_I2C_Init+0x27c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e7      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	@ (8002da0 <HAL_I2C_Init+0x280>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d802      	bhi.n	8002bf4 <HAL_I2C_Init+0xd4>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	e009      	b.n	8002c08 <HAL_I2C_Init+0xe8>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a69      	ldr	r2, [pc, #420]	@ (8002da4 <HAL_I2C_Init+0x284>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	3301      	adds	r3, #1
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	495c      	ldr	r1, [pc, #368]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d819      	bhi.n	8002c5c <HAL_I2C_Init+0x13c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e59      	subs	r1, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_I2C_Init+0x138>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e59      	subs	r1, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	e051      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e04f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <HAL_I2C_Init+0x168>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_I2C_Init+0x18e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x196>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e022      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <HAL_I2C_Init+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e58      	subs	r0, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6809      	ldr	r1, [r1, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6911      	ldr	r1, [r2, #16]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	000186a0 	.word	0x000186a0
 8002d98:	001e847f 	.word	0x001e847f
 8002d9c:	003d08ff 	.word	0x003d08ff
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc2:	f7fe fe51 	bl	8001a68 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	f040 80d9 	bne.w	8002f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2319      	movs	r3, #25
 8002ddc:	2201      	movs	r2, #1
 8002dde:	496d      	ldr	r1, [pc, #436]	@ (8002f94 <HAL_I2C_Mem_Write+0x1ec>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fc7f 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0cc      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_I2C_Mem_Write+0x56>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0c5      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d007      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2221      	movs	r2, #33	@ 0x21
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2240      	movs	r2, #64	@ 0x40
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a4d      	ldr	r2, [pc, #308]	@ (8002f98 <HAL_I2C_Mem_Write+0x1f0>)
 8002e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e66:	88f8      	ldrh	r0, [r7, #6]
 8002e68:	893a      	ldrh	r2, [r7, #8]
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4603      	mov	r3, r0
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fab6 	bl	80033e8 <I2C_RequestMemoryWrite>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d052      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e081      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fd00 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06b      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11b      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x180>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d017      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1aa      	bne.n	8002e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fcec 	bl	8003912 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e016      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	00100002 	.word	0x00100002
 8002f98:	ffff0000 	.word	0xffff0000

08002f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	@ 0x30
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb6:	f7fe fd57 	bl	8001a68 <HAL_GetTick>
 8002fba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	f040 8208 	bne.w	80033da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2319      	movs	r3, #25
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	497b      	ldr	r1, [pc, #492]	@ (80031c0 <HAL_I2C_Mem_Read+0x224>)
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fb85 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e1fb      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x56>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e1f4      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d007      	beq.n	8003018 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2222      	movs	r2, #34	@ 0x22
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2240      	movs	r2, #64	@ 0x40
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a5b      	ldr	r2, [pc, #364]	@ (80031c4 <HAL_I2C_Mem_Read+0x228>)
 8003058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800305a:	88f8      	ldrh	r0, [r7, #6]
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4603      	mov	r3, r0
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa52 	bl	8003514 <I2C_RequestMemoryRead>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1b0      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d113      	bne.n	80030aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e184      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d11b      	bne.n	80030ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e164      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d11b      	bne.n	800312a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	e144      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003140:	e138      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	2b03      	cmp	r3, #3
 8003148:	f200 80f1 	bhi.w	800332e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	2b01      	cmp	r3, #1
 8003152:	d123      	bne.n	800319c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fc1b 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e139      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800319a:	e10b      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d14e      	bne.n	8003242 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	2200      	movs	r2, #0
 80031ac:	4906      	ldr	r1, [pc, #24]	@ (80031c8 <HAL_I2C_Mem_Read+0x22c>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa98 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e10e      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
 80031be:	bf00      	nop
 80031c0:	00100002 	.word	0x00100002
 80031c4:	ffff0000 	.word	0xffff0000
 80031c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003240:	e0b8      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003248:	2200      	movs	r2, #0
 800324a:	4966      	ldr	r1, [pc, #408]	@ (80033e4 <HAL_I2C_Mem_Read+0x448>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa49 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0bf      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	2200      	movs	r2, #0
 80032a6:	494f      	ldr	r1, [pc, #316]	@ (80033e4 <HAL_I2C_Mem_Read+0x448>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fa1b 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e091      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800332c:	e042      	b.n	80033b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb2e 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e04c      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d118      	bne.n	80033b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f aec2 	bne.w	8003142 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	@ 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010004 	.word	0x00010004

080033e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	2200      	movs	r2, #0
 800341a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f960 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d103      	bne.n	8003442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e05f      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	492d      	ldr	r1, [pc, #180]	@ (8003510 <I2C_RequestMemoryWrite+0x128>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f998 	bl	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04c      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003484:	6a39      	ldr	r1, [r7, #32]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa02 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b04      	cmp	r3, #4
 8003498:	d107      	bne.n	80034aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02b      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b4:	893b      	ldrh	r3, [r7, #8]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e021      	b.n	8003504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f9dc 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e005      	b.n	8003506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034fa:	893b      	ldrh	r3, [r7, #8]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800353c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2200      	movs	r2, #0
 8003556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8c2 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003574:	d103      	bne.n	800357e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0aa      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	4952      	ldr	r1, [pc, #328]	@ (80036e0 <I2C_RequestMemoryRead+0x1cc>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8fa 	bl	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e097      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	6a39      	ldr	r1, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f964 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e076      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]
 80035fa:	e021      	b.n	8003640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f93e 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e050      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003636:	893b      	ldrh	r3, [r7, #8]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f923 	bl	8003890 <I2C_WaitOnTXEFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e035      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	2200      	movs	r2, #0
 8003684:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f82b 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a2:	d103      	bne.n	80036ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e013      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036b0:	897b      	ldrh	r3, [r7, #10]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	4906      	ldr	r1, [pc, #24]	@ (80036e0 <I2C_RequestMemoryRead+0x1cc>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f863 	bl	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e025      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d021      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe f9b3 	bl	8001a68 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e023      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10d      	bne.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	e00c      	b.n	8003782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	429a      	cmp	r2, r3
 8003786:	d0b6      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a0:	e051      	b.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b0:	d123      	bne.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f043 0204 	orr.w	r2, r3, #4
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e046      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d021      	beq.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe f931 	bl	8001a68 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e020      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10c      	bne.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e00b      	b.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d18d      	bne.n	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800389c:	e02d      	b.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f8ce 	bl	8003a40 <I2C_IsAcknowledgeFailed>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e02d      	b.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d021      	beq.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fe f8d7 	bl	8001a68 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d116      	bne.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e007      	b.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003904:	2b80      	cmp	r3, #128	@ 0x80
 8003906:	d1ca      	bne.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391e:	e02d      	b.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f88d 	bl	8003a40 <I2C_IsAcknowledgeFailed>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e02d      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d021      	beq.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7fe f896 	bl	8001a68 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d1ca      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a0:	e042      	b.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d119      	bne.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0210 	mvn.w	r2, #16
 80039b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e029      	b.n	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fe f840 	bl	8001a68 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e007      	b.n	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b40      	cmp	r3, #64	@ 0x40
 8003a34:	d1b5      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d11b      	bne.n	8003a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa0:	b08f      	sub	sp, #60	@ 0x3c
 8003aa2:	af0a      	add	r7, sp, #40	@ 0x28
 8003aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e10f      	b.n	8003cd0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f008 fa2c 	bl	800bf28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 facd 	bl	800808e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	687e      	ldr	r6, [r7, #4]
 8003afc:	466d      	mov	r5, sp
 8003afe:	f106 0410 	add.w	r4, r6, #16
 8003b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b12:	1d33      	adds	r3, r6, #4
 8003b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b16:	6838      	ldr	r0, [r7, #0]
 8003b18:	f004 f9a4 	bl	8007e64 <USB_CoreInit>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0d0      	b.n	8003cd0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 fabb 	bl	80080b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	e04a      	b.n	8003bd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	333d      	adds	r3, #61	@ 0x3d
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	333c      	adds	r3, #60	@ 0x3c
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	b298      	uxth	r0, r3
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3344      	adds	r3, #68	@ 0x44
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3340      	adds	r3, #64	@ 0x40
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3348      	adds	r3, #72	@ 0x48
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	334c      	adds	r3, #76	@ 0x4c
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3354      	adds	r3, #84	@ 0x54
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3af      	bcc.n	8003b40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	e044      	b.n	8003c70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3b5      	bcc.n	8003be6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	687e      	ldr	r6, [r7, #4]
 8003c82:	466d      	mov	r5, sp
 8003c84:	f106 0410 	add.w	r4, r6, #16
 8003c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c98:	1d33      	adds	r3, r6, #4
 8003c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c9c:	6838      	ldr	r0, [r7, #0]
 8003c9e:	f004 fa53 	bl	8008148 <USB_DevInit>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e00d      	b.n	8003cd0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f005 fba2 	bl	8009412 <USB_DevDisconnect>

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_Start+0x1c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e020      	b.n	8003d36 <HAL_PCD_Start+0x5e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d005      	beq.n	8003d18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 f9a5 	bl	800806c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fb52 	bl	80093d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d3e:	b590      	push	{r4, r7, lr}
 8003d40:	b08d      	sub	sp, #52	@ 0x34
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 fc10 	bl	800957a <USB_GetMode>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 848a 	bne.w	8004676 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f005 fb74 	bl	8009454 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8480 	beq.w	8004674 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f005 fb61 	bl	8009454 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d107      	bne.n	8003dac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f002 0202 	and.w	r2, r2, #2
 8003daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 fb4f 	bl	8009454 <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d161      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0210 	bic.w	r2, r2, #16
 8003dce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	0c5b      	lsrs	r3, r3, #17
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d124      	bne.n	8003e46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d035      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6a38      	ldr	r0, [r7, #32]
 8003e1c:	f005 f986 	bl	800912c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2c:	441a      	add	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e3e:	441a      	add	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
 8003e44:	e016      	b.n	8003e74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	0c5b      	lsrs	r3, r3, #17
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d110      	bne.n	8003e74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6a38      	ldr	r0, [r7, #32]
 8003e5e:	f005 f965 	bl	800912c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e6e:	441a      	add	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0210 	orr.w	r2, r2, #16
 8003e82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fae3 	bl	8009454 <USB_ReadInterrupts>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e98:	f040 80a7 	bne.w	8003fea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 fae8 	bl	800947a <USB_ReadDevAllOutEpInterrupt>
 8003eaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003eac:	e099      	b.n	8003fe2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 808e 	beq.w	8003fd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f005 fb0c 	bl	80094e2 <USB_ReadDevOutEPInterrupt>
 8003eca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fec2 	bl	8004c74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f06:	461a      	mov	r2, r3
 8003f08:	2308      	movs	r3, #8
 8003f0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ff98 	bl	8004e44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d030      	beq.n	8003f9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b80      	cmp	r3, #128	@ 0x80
 8003f44:	d109      	bne.n	8003f5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	78db      	ldrb	r3, [r3, #3]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f008 f8cb 	bl	800c120 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	2302      	movs	r3, #2
 8003f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f af62 	bne.w	8003eae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f005 fa30 	bl	8009454 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ffa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ffe:	f040 80db 	bne.w	80041b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f005 fa51 	bl	80094ae <USB_ReadDevAllInEpInterrupt>
 800400c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004012:	e0cd      	b.n	80041b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80c2 	beq.w	80041a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f005 fa77 	bl	800951e <USB_ReadDevInEPInterrupt>
 8004030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d057      	beq.n	80040ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800405c:	4013      	ands	r3, r2
 800405e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	2301      	movs	r3, #1
 8004070:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d132      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	334c      	adds	r3, #76	@ 0x4c
 800408a:	6819      	ldr	r1, [r3, #0]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4403      	add	r3, r0
 800409a:	3348      	adds	r3, #72	@ 0x48
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4419      	add	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	334c      	adds	r3, #76	@ 0x4c
 80040b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3354      	adds	r3, #84	@ 0x54
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80040d8:	461a      	mov	r2, r3
 80040da:	2101      	movs	r1, #1
 80040dc:	f005 fa7e 	bl	80095dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f007 ff9f 	bl	800c02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	461a      	mov	r2, r3
 8004104:	2308      	movs	r3, #8
 8004106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2310      	movs	r3, #16
 8004122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413a:	461a      	mov	r2, r3
 800413c:	2340      	movs	r3, #64	@ 0x40
 800413e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d023      	beq.n	8004192 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800414a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800414c:	6a38      	ldr	r0, [r7, #32]
 800414e:	f004 f95f 	bl	8008410 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3338      	adds	r3, #56	@ 0x38
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	3304      	adds	r3, #4
 8004164:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	78db      	ldrb	r3, [r3, #3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f007 ffe2 	bl	800c144 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	2302      	movs	r3, #2
 8004190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800419c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcdb 	bl	8004b5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	3301      	adds	r3, #1
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f47f af2e 	bne.w	8004014 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 f949 	bl	8009454 <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041cc:	d122      	bne.n	8004214 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d108      	bne.n	80041fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041f4:	2100      	movs	r1, #0
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fec2 	bl	8004f80 <HAL_PCDEx_LPM_Callback>
 80041fc:	e002      	b.n	8004204 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f007 ff80 	bl	800c104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f005 f91b 	bl	8009454 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004228:	d112      	bne.n	8004250 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f007 ff3c 	bl	800c0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800424e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f005 f8fd 	bl	8009454 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004264:	f040 80b7 	bne.w	80043d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2110      	movs	r1, #16
 8004282:	4618      	mov	r0, r3
 8004284:	f004 f8c4 	bl	8008410 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004288:	2300      	movs	r3, #0
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800428c:	e046      	b.n	800431c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800429a:	461a      	mov	r2, r3
 800429c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004310:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004314:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004318:	3301      	adds	r3, #1
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d3b3      	bcc.n	800428e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004334:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004338:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004352:	f043 030b 	orr.w	r3, r3, #11
 8004356:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004368:	f043 030b 	orr.w	r3, r3, #11
 800436c:	6453      	str	r3, [r2, #68]	@ 0x44
 800436e:	e015      	b.n	800439c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800437e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004382:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004386:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004396:	f043 030b 	orr.w	r3, r3, #11
 800439a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80043ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043c0:	461a      	mov	r2, r3
 80043c2:	f005 f90b 	bl	80095dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80043d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f005 f83a 	bl	8009454 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ea:	d124      	bne.n	8004436 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 f8d0 	bl	8009596 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 f885 	bl	800850a <USB_GetDevSpeed>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681c      	ldr	r4, [r3, #0]
 800440c:	f001 fa28 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8004410:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	4620      	mov	r0, r4
 800441c:	f003 fd84 	bl	8007f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f007 fe2a 	bl	800c07a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004434:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f005 f80a 	bl	8009454 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d10a      	bne.n	8004460 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f007 fe07 	bl	800c05e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f002 0208 	and.w	r2, r2, #8
 800445e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f004 fff5 	bl	8009454 <USB_ReadInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d122      	bne.n	80044ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004480:	2301      	movs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	e014      	b.n	80044b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb27 	bl	8004af8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3e5      	bcc.n	8004486 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 ffc8 	bl	8009454 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ce:	d13b      	bne.n	8004548 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d0:	2301      	movs	r3, #1
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	e02b      	b.n	800452e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3340      	adds	r3, #64	@ 0x40
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d115      	bne.n	8004528 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80044fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da12      	bge.n	8004528 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	333f      	adds	r3, #63	@ 0x3f
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fae8 	bl	8004af8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	3301      	adds	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ce      	bcc.n	80044d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f004 ff81 	bl	8009454 <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800455c:	d155      	bne.n	800460a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800455e:	2301      	movs	r3, #1
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
 8004562:	e045      	b.n	80045f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d12e      	bne.n	80045ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800458c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	da2b      	bge.n	80045ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800459e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d121      	bne.n	80045ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045e6:	6053      	str	r3, [r2, #4]
            break;
 80045e8:	e007      	b.n	80045fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	3301      	adds	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d3b4      	bcc.n	8004564 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f004 ff20 	bl	8009454 <USB_ReadInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d10a      	bne.n	8004636 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f007 fda1 	bl	800c168 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 ff0a 	bl	8009454 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d115      	bne.n	8004676 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f007 fd91 	bl	800c184 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	e000      	b.n	8004676 <HAL_PCD_IRQHandler+0x938>
      return;
 8004674:	bf00      	nop
    }
  }
}
 8004676:	3734      	adds	r7, #52	@ 0x34
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_PCD_SetAddress+0x1a>
 8004692:	2302      	movs	r3, #2
 8004694:	e013      	b.n	80046be <HAL_PCD_SetAddress+0x42>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f004 fe68 	bl	8009384 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	461a      	mov	r2, r3
 80046d4:	4603      	mov	r3, r0
 80046d6:	70fb      	strb	r3, [r7, #3]
 80046d8:	460b      	mov	r3, r1
 80046da:	803b      	strh	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da0f      	bge.n	800470c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	3338      	adds	r3, #56	@ 0x38
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	3304      	adds	r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	705a      	strb	r2, [r3, #1]
 800470a:	e00f      	b.n	800472c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	f003 020f 	and.w	r2, r3, #15
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	3304      	adds	r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004738:	883a      	ldrh	r2, [r7, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	78ba      	ldrb	r2, [r7, #2]
 8004742:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004756:	78bb      	ldrb	r3, [r7, #2]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d102      	bne.n	8004762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_PCD_EP_Open+0xaa>
 800476c:	2302      	movs	r3, #2
 800476e:	e00e      	b.n	800478e <HAL_PCD_EP_Open+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	4618      	mov	r0, r3
 8004780:	f003 fee8 	bl	8008554 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800478c:	7afb      	ldrb	r3, [r7, #11]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da0f      	bge.n	80047ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	3338      	adds	r3, #56	@ 0x38
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	3304      	adds	r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	705a      	strb	r2, [r3, #1]
 80047c8:	e00f      	b.n	80047ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	3304      	adds	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_PCD_EP_Close+0x6e>
 8004800:	2302      	movs	r3, #2
 8004802:	e00e      	b.n	8004822 <HAL_PCD_EP_Close+0x8c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 ff26 	bl	8008664 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	460b      	mov	r3, r1
 8004838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800483a:	7afb      	ldrb	r3, [r7, #11]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2200      	movs	r2, #0
 800486a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	b2da      	uxtb	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d102      	bne.n	8004886 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6979      	ldr	r1, [r7, #20]
 800489e:	f004 fa05 	bl	8008cac <USB_EP0StartXfer>
 80048a2:	e008      	b.n	80048b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	f003 ffb3 	bl	800881c <USB_EPStartXfer>
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	460b      	mov	r3, r1
 80048fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004900:	7afb      	ldrb	r3, [r7, #11]
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3338      	adds	r3, #56	@ 0x38
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2200      	movs	r2, #0
 8004928:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2201      	movs	r2, #1
 800492e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004930:	7afb      	ldrb	r3, [r7, #11]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	b2da      	uxtb	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	f004 f9a3 	bl	8008cac <USB_EP0StartXfer>
 8004966:	e008      	b.n	800497a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	f003 ff51 	bl	800881c <USB_EPStartXfer>
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d901      	bls.n	80049a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e050      	b.n	8004a44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0f      	bge.n	80049ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3338      	adds	r3, #56	@ 0x38
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
 80049c8:	e00d      	b.n	80049e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_EP_SetStall+0x82>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e01e      	b.n	8004a44 <HAL_PCD_EP_SetStall+0xc0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f004 fbe1 	bl	80091dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	b2d9      	uxtb	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a34:	461a      	mov	r2, r3
 8004a36:	f004 fdd1 	bl	80095dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 020f 	and.w	r2, r3, #15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d901      	bls.n	8004a6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e042      	b.n	8004af0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da0f      	bge.n	8004a92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	3338      	adds	r3, #56	@ 0x38
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	3304      	adds	r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	705a      	strb	r2, [r3, #1]
 8004a90:	e00f      	b.n	8004ab2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	4613      	mov	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_PCD_EP_ClrStall+0x86>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e00e      	b.n	8004af0 <HAL_PCD_EP_ClrStall+0xa4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f004 fbe9 	bl	80092b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da0c      	bge.n	8004b26 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 020f 	and.w	r2, r3, #15
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	3338      	adds	r3, #56	@ 0x38
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e00c      	b.n	8004b40 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f003 020f 	and.w	r2, r3, #15
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f004 fa08 	bl	8008f5c <USB_EPStopXfer>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b50:	7afb      	ldrb	r3, [r7, #11]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08a      	sub	sp, #40	@ 0x28
 8004b5e:	af02      	add	r7, sp, #8
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3338      	adds	r3, #56	@ 0x38
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3304      	adds	r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d901      	bls.n	8004b92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e06c      	b.n	8004c6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d902      	bls.n	8004bae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3303      	adds	r3, #3
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bb6:	e02b      	b.n	8004c10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d902      	bls.n	8004bd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3303      	adds	r3, #3
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6919      	ldr	r1, [r3, #16]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f004 fa5c 	bl	80090b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	441a      	add	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	441a      	add	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d809      	bhi.n	8004c3a <PCD_WriteEmptyTxFifo+0xe0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d203      	bcs.n	8004c3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1be      	bne.n	8004bb8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d811      	bhi.n	8004c6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	6939      	ldr	r1, [r7, #16]
 8004c62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c66:	4013      	ands	r3, r2
 8004c68:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	333c      	adds	r3, #60	@ 0x3c
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d17b      	bne.n	8004da2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d015      	beq.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4a61      	ldr	r2, [pc, #388]	@ (8004e3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f240 80b9 	bls.w	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80b3 	beq.w	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	e0a7      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	6093      	str	r3, [r2, #8]
 8004cfc:	e098      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 8093 	bne.w	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d90f      	bls.n	8004d32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	6093      	str	r3, [r2, #8]
 8004d30:	e07e      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	0159      	lsls	r1, r3, #5
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d114      	bne.n	8004d94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2101      	movs	r1, #1
 8004d80:	f004 fc2c 	bl	80095dc <USB_EP0_OutStart>
 8004d84:	e006      	b.n	8004d94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	441a      	add	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f007 f92a 	bl	800bff4 <HAL_PCD_DataOutStageCallback>
 8004da0:	e046      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d124      	bne.n	8004df4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	e032      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	2320      	movs	r3, #32
 8004de4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f007 f901 	bl	800bff4 <HAL_PCD_DataOutStageCallback>
 8004df2:	e01d      	b.n	8004e30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d114      	bne.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2100      	movs	r1, #0
 8004e20:	f004 fbdc 	bl	80095dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f007 f8e2 	bl	800bff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	4f54300a 	.word	0x4f54300a
 8004e40:	4f54310a 	.word	0x4f54310a

08004e44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	333c      	adds	r3, #60	@ 0x3c
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d90e      	bls.n	8004e98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f007 f899 	bl	800bfd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d90c      	bls.n	8004ec0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d108      	bne.n	8004ec0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2101      	movs	r1, #1
 8004ebc:	f004 fb8e 	bl	80095dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	4f54300a 	.word	0x4f54300a

08004ed0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
 8004edc:	4613      	mov	r3, r2
 8004ede:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eee:	883b      	ldrh	r3, [r7, #0]
 8004ef0:	0419      	lsls	r1, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004efc:	e028      	b.n	8004f50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e00d      	b.n	8004f2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	3340      	adds	r3, #64	@ 0x40
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d3ec      	bcc.n	8004f12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f38:	883b      	ldrh	r3, [r7, #0]
 8004f3a:	0418      	lsls	r0, r3, #16
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4302      	orrs	r2, r0
 8004f48:	3340      	adds	r3, #64	@ 0x40
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e267      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d075      	beq.n	80050a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb6:	4b88      	ldr	r3, [pc, #544]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d00c      	beq.n	8004fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b85      	ldr	r3, [pc, #532]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d112      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fce:	4b82      	ldr	r3, [pc, #520]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05b      	beq.n	80050a0 <HAL_RCC_OscConfig+0x108>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d157      	bne.n	80050a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e242      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffc:	d106      	bne.n	800500c <HAL_RCC_OscConfig+0x74>
 8004ffe:	4b76      	ldr	r3, [pc, #472]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a75      	ldr	r2, [pc, #468]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e01d      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x98>
 8005016:	4b70      	ldr	r3, [pc, #448]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6f      	ldr	r2, [pc, #444]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 800501c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b6d      	ldr	r3, [pc, #436]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6c      	ldr	r2, [pc, #432]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0xb0>
 8005030:	4b69      	ldr	r3, [pc, #420]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a68      	ldr	r2, [pc, #416]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b66      	ldr	r3, [pc, #408]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a65      	ldr	r2, [pc, #404]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d013      	beq.n	8005078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fc fd0a 	bl	8001a68 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005058:	f7fc fd06 	bl	8001a68 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	@ 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e207      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b5b      	ldr	r3, [pc, #364]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0xc0>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fc fcf6 	bl	8001a68 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005080:	f7fc fcf2 	bl	8001a68 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e1f3      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	4b51      	ldr	r3, [pc, #324]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0xe8>
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d063      	beq.n	8005176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ae:	4b4a      	ldr	r3, [pc, #296]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b47      	ldr	r3, [pc, #284]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d11c      	bne.n	8005100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c6:	4b44      	ldr	r3, [pc, #272]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d116      	bne.n	8005100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d2:	4b41      	ldr	r3, [pc, #260]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_RCC_OscConfig+0x152>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e1c7      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ea:	4b3b      	ldr	r3, [pc, #236]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4937      	ldr	r1, [pc, #220]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	e03a      	b.n	8005176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005108:	4b34      	ldr	r3, [pc, #208]	@ (80051dc <HAL_RCC_OscConfig+0x244>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fc fcab 	bl	8001a68 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005116:	f7fc fca7 	bl	8001a68 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e1a8      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005134:	4b28      	ldr	r3, [pc, #160]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4925      	ldr	r1, [pc, #148]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 8005144:	4313      	orrs	r3, r2
 8005146:	600b      	str	r3, [r1, #0]
 8005148:	e015      	b.n	8005176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514a:	4b24      	ldr	r3, [pc, #144]	@ (80051dc <HAL_RCC_OscConfig+0x244>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fc fc8a 	bl	8001a68 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005158:	f7fc fc86 	bl	8001a68 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e187      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d036      	beq.n	80051f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518a:	4b15      	ldr	r3, [pc, #84]	@ (80051e0 <HAL_RCC_OscConfig+0x248>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fc fc6a 	bl	8001a68 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005198:	f7fc fc66 	bl	8001a68 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e167      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCC_OscConfig+0x240>)
 80051ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0x200>
 80051b6:	e01b      	b.n	80051f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <HAL_RCC_OscConfig+0x248>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fc fc53 	bl	8001a68 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	e00e      	b.n	80051e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fc fc4f 	bl	8001a68 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d907      	bls.n	80051e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e150      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	42470000 	.word	0x42470000
 80051e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e4:	4b88      	ldr	r3, [pc, #544]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80051e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ea      	bne.n	80051c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8097 	beq.w	800532c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b81      	ldr	r3, [pc, #516]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	4b7d      	ldr	r3, [pc, #500]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	4a7c      	ldr	r2, [pc, #496]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800521c:	6413      	str	r3, [r2, #64]	@ 0x40
 800521e:	4b7a      	ldr	r3, [pc, #488]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522e:	4b77      	ldr	r3, [pc, #476]	@ (800540c <HAL_RCC_OscConfig+0x474>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d118      	bne.n	800526c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523a:	4b74      	ldr	r3, [pc, #464]	@ (800540c <HAL_RCC_OscConfig+0x474>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a73      	ldr	r2, [pc, #460]	@ (800540c <HAL_RCC_OscConfig+0x474>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005246:	f7fc fc0f 	bl	8001a68 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fc fc0b 	bl	8001a68 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e10c      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <HAL_RCC_OscConfig+0x474>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x2ea>
 8005274:	4b64      	ldr	r3, [pc, #400]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a63      	ldr	r2, [pc, #396]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005280:	e01c      	b.n	80052bc <HAL_RCC_OscConfig+0x324>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x30c>
 800528a:	4b5f      	ldr	r3, [pc, #380]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a5e      	ldr	r2, [pc, #376]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	4b5c      	ldr	r3, [pc, #368]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a5b      	ldr	r2, [pc, #364]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0x324>
 80052a4:	4b58      	ldr	r3, [pc, #352]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a57      	ldr	r2, [pc, #348]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b0:	4b55      	ldr	r3, [pc, #340]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b4:	4a54      	ldr	r2, [pc, #336]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc fbd0 	bl	8001a68 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7fc fbcc 	bl	8001a68 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0cb      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e2:	4b49      	ldr	r3, [pc, #292]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ee      	beq.n	80052cc <HAL_RCC_OscConfig+0x334>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f0:	f7fc fbba 	bl	8001a68 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fc fbb6 	bl	8001a68 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0b5      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530e:	4b3e      	ldr	r3, [pc, #248]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005320:	4b39      	ldr	r3, [pc, #228]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	4a38      	ldr	r2, [pc, #224]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800532a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a1 	beq.w	8005478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005336:	4b34      	ldr	r3, [pc, #208]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b08      	cmp	r3, #8
 8005340:	d05c      	beq.n	80053fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d141      	bne.n	80053ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534a:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <HAL_RCC_OscConfig+0x478>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fc fb8a 	bl	8001a68 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005358:	f7fc fb86 	bl	8001a68 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e087      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	3b01      	subs	r3, #1
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	491b      	ldr	r1, [pc, #108]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <HAL_RCC_OscConfig+0x478>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fc fb5f 	bl	8001a68 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fc fb5b 	bl	8001a68 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e05c      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c0:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x416>
 80053cc:	e054      	b.n	8005478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <HAL_RCC_OscConfig+0x478>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc fb48 	bl	8001a68 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fb44 	bl	8001a68 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e045      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_RCC_OscConfig+0x470>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x444>
 80053fa:	e03d      	b.n	8005478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e038      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000
 8005410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x4ec>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d028      	beq.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d121      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d11a      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800544a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	3b01      	subs	r3, #1
 800545e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d107      	bne.n	8005474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800

08005488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0cc      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800549c:	4b68      	ldr	r3, [pc, #416]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d90c      	bls.n	80054c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b65      	ldr	r3, [pc, #404]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b63      	ldr	r3, [pc, #396]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0b8      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054dc:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a58      	ldr	r2, [pc, #352]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f4:	4b53      	ldr	r3, [pc, #332]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a52      	ldr	r2, [pc, #328]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005500:	4b50      	ldr	r3, [pc, #320]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	494d      	ldr	r1, [pc, #308]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d044      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005526:	4b47      	ldr	r3, [pc, #284]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d119      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e07f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d003      	beq.n	8005546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005542:	2b03      	cmp	r3, #3
 8005544:	d107      	bne.n	8005556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005546:	4b3f      	ldr	r3, [pc, #252]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005556:	4b3b      	ldr	r3, [pc, #236]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e067      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005566:	4b37      	ldr	r3, [pc, #220]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4934      	ldr	r1, [pc, #208]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005578:	f7fc fa76 	bl	8001a68 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	e00a      	b.n	8005596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fc fa72 	bl	8001a68 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e04f      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005596:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 020c 	and.w	r2, r3, #12
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1eb      	bne.n	8005580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a8:	4b25      	ldr	r3, [pc, #148]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d20c      	bcs.n	80055d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b6:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <HAL_RCC_ClockConfig+0x1b8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d001      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e032      	b.n	8005636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055dc:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4916      	ldr	r1, [pc, #88]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fa:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	490e      	ldr	r1, [pc, #56]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800560e:	f000 f821 	bl	8005654 <HAL_RCC_GetSysClockFreq>
 8005612:	4602      	mov	r2, r0
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	490a      	ldr	r1, [pc, #40]	@ (8005648 <HAL_RCC_ClockConfig+0x1c0>)
 8005620:	5ccb      	ldrb	r3, [r1, r3]
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	4a09      	ldr	r2, [pc, #36]	@ (800564c <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800562a:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_RCC_ClockConfig+0x1c8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc f9d6 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023c00 	.word	0x40023c00
 8005644:	40023800 	.word	0x40023800
 8005648:	0800d454 	.word	0x0800d454
 800564c:	20000000 	.word	0x20000000
 8005650:	20000004 	.word	0x20000004

08005654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005658:	b094      	sub	sp, #80	@ 0x50
 800565a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005660:	2300      	movs	r3, #0
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005664:	2300      	movs	r3, #0
 8005666:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800566c:	4b79      	ldr	r3, [pc, #484]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b08      	cmp	r3, #8
 8005676:	d00d      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x40>
 8005678:	2b08      	cmp	r3, #8
 800567a:	f200 80e1 	bhi.w	8005840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0x34>
 8005682:	2b04      	cmp	r3, #4
 8005684:	d003      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x3a>
 8005686:	e0db      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005688:	4b73      	ldr	r3, [pc, #460]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x204>)
 800568a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800568c:	e0db      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568e:	4b73      	ldr	r3, [pc, #460]	@ (800585c <HAL_RCC_GetSysClockFreq+0x208>)
 8005690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005692:	e0d8      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005694:	4b6f      	ldr	r3, [pc, #444]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800569c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569e:	4b6d      	ldr	r3, [pc, #436]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d063      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	099b      	lsrs	r3, r3, #6
 80056b0:	2200      	movs	r2, #0
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056c6:	4622      	mov	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f04f 0000 	mov.w	r0, #0
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	0159      	lsls	r1, r3, #5
 80056d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d8:	0150      	lsls	r0, r2, #5
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4621      	mov	r1, r4
 80056e0:	1a51      	subs	r1, r2, r1
 80056e2:	6139      	str	r1, [r7, #16]
 80056e4:	4629      	mov	r1, r5
 80056e6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f8:	4659      	mov	r1, fp
 80056fa:	018b      	lsls	r3, r1, #6
 80056fc:	4651      	mov	r1, sl
 80056fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005702:	4651      	mov	r1, sl
 8005704:	018a      	lsls	r2, r1, #6
 8005706:	4651      	mov	r1, sl
 8005708:	ebb2 0801 	subs.w	r8, r2, r1
 800570c:	4659      	mov	r1, fp
 800570e:	eb63 0901 	sbc.w	r9, r3, r1
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800571e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005726:	4690      	mov	r8, r2
 8005728:	4699      	mov	r9, r3
 800572a:	4623      	mov	r3, r4
 800572c:	eb18 0303 	adds.w	r3, r8, r3
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	462b      	mov	r3, r5
 8005734:	eb49 0303 	adc.w	r3, r9, r3
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005746:	4629      	mov	r1, r5
 8005748:	024b      	lsls	r3, r1, #9
 800574a:	4621      	mov	r1, r4
 800574c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005750:	4621      	mov	r1, r4
 8005752:	024a      	lsls	r2, r1, #9
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575a:	2200      	movs	r2, #0
 800575c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005764:	f7fa fd36 	bl	80001d4 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005770:	e058      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005772:	4b38      	ldr	r3, [pc, #224]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	2200      	movs	r2, #0
 800577a:	4618      	mov	r0, r3
 800577c:	4611      	mov	r1, r2
 800577e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24
 8005788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	0159      	lsls	r1, r3, #5
 800579a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579e:	0150      	lsls	r0, r2, #5
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4641      	mov	r1, r8
 80057a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057c4:	ebb2 040a 	subs.w	r4, r2, sl
 80057c8:	eb63 050b 	sbc.w	r5, r3, fp
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	00eb      	lsls	r3, r5, #3
 80057d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057da:	00e2      	lsls	r2, r4, #3
 80057dc:	4614      	mov	r4, r2
 80057de:	461d      	mov	r5, r3
 80057e0:	4643      	mov	r3, r8
 80057e2:	18e3      	adds	r3, r4, r3
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	464b      	mov	r3, r9
 80057e8:	eb45 0303 	adc.w	r3, r5, r3
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057fa:	4629      	mov	r1, r5
 80057fc:	028b      	lsls	r3, r1, #10
 80057fe:	4621      	mov	r1, r4
 8005800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005804:	4621      	mov	r1, r4
 8005806:	028a      	lsls	r2, r1, #10
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580e:	2200      	movs	r2, #0
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	61fa      	str	r2, [r7, #28]
 8005814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005818:	f7fa fcdc 	bl	80001d4 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x200>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	3301      	adds	r3, #1
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800583e:	e002      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x204>)
 8005842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005848:	4618      	mov	r0, r3
 800584a:	3750      	adds	r7, #80	@ 0x50
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	00f42400 	.word	0x00f42400
 800585c:	007a1200 	.word	0x007a1200

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800587c:	f7ff fff0 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0a9b      	lsrs	r3, r3, #10
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	@ (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	0800d464 	.word	0x0800d464

080058a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d035      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058c8:	4b67      	ldr	r3, [pc, #412]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ce:	f7fc f8cb 	bl	8001a68 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058d6:	f7fc f8c7 	bl	8001a68 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e0ba      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e8:	4b60      	ldr	r3, [pc, #384]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	019a      	lsls	r2, r3, #6
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	071b      	lsls	r3, r3, #28
 8005900:	495a      	ldr	r1, [pc, #360]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005908:	4b57      	ldr	r3, [pc, #348]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800590e:	f7fc f8ab 	bl	8001a68 <HAL_GetTick>
 8005912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005914:	e008      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005916:	f7fc f8a7 	bl	8001a68 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e09a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005928:	4b50      	ldr	r3, [pc, #320]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8083 	beq.w	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	4b49      	ldr	r3, [pc, #292]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	4a48      	ldr	r2, [pc, #288]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005950:	6413      	str	r3, [r2, #64]	@ 0x40
 8005952:	4b46      	ldr	r3, [pc, #280]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800595e:	4b44      	ldr	r3, [pc, #272]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a43      	ldr	r2, [pc, #268]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005968:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800596a:	f7fc f87d 	bl	8001a68 <HAL_GetTick>
 800596e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005972:	f7fc f879 	bl	8001a68 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e06c      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005984:	4b3a      	ldr	r3, [pc, #232]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005990:	4b36      	ldr	r3, [pc, #216]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005998:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02f      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d028      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ae:	4b2f      	ldr	r3, [pc, #188]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059be:	4b2d      	ldr	r3, [pc, #180]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059c4:	4a29      	ldr	r2, [pc, #164]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ca:	4b28      	ldr	r3, [pc, #160]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d114      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059d6:	f7fc f847 	bl	8001a68 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc f843 	bl	8001a68 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e034      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ee      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0c:	d10d      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a0e:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a22:	4912      	ldr	r1, [pc, #72]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]
 8005a28:	e005      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a2a:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a30:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a34:	6093      	str	r3, [r2, #8]
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a42:	490a      	ldr	r1, [pc, #40]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7c1a      	ldrb	r2, [r3, #16]
 8005a58:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a5a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	42470068 	.word	0x42470068
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40007000 	.word	0x40007000
 8005a74:	42470e40 	.word	0x42470e40
 8005a78:	424711e0 	.word	0x424711e0

08005a7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e066      	b.n	8005b60 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7f5b      	ldrb	r3, [r3, #29]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fc14 	bl	80012d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	22ca      	movs	r2, #202	@ 0xca
 8005ab4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2253      	movs	r2, #83	@ 0x53
 8005abc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb2a 	bl	8006118 <RTC_EnterInitMode>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d12c      	bne.n	8005b28 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	68d2      	ldr	r2, [r2, #12]
 8005b08:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6919      	ldr	r1, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	041a      	lsls	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb31 	bl	8006186 <RTC_ExitInitMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d113      	bne.n	8005b56 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	7f1b      	ldrb	r3, [r3, #28]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_RTC_SetTime+0x1c>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e087      	b.n	8005c94 <HAL_RTC_SetTime+0x12c>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d126      	bne.n	8005be4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fb0e 	bl	80061d0 <RTC_ByteToBcd2>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fb07 	bl	80061d0 <RTC_ByteToBcd2>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bc6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	789b      	ldrb	r3, [r3, #2]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 faff 	bl	80061d0 <RTC_ByteToBcd2>
 8005bd2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bd4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e018      	b.n	8005c16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c04:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	78db      	ldrb	r3, [r3, #3]
 8005c10:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	22ca      	movs	r2, #202	@ 0xca
 8005c1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2253      	movs	r2, #83	@ 0x53
 8005c24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa76 	bl	8006118 <RTC_EnterInitMode>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d120      	bne.n	8005c78 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005c40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005c44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6899      	ldr	r1, [r3, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fa89 	bl	8006186 <RTC_ExitInitMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	771a      	strb	r2, [r3, #28]

  return status;
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd90      	pop	{r4, r7, pc}

08005c9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	7f1b      	ldrb	r3, [r3, #28]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RTC_SetDate+0x1c>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e071      	b.n	8005d9c <HAL_RTC_SetDate+0x100>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_RTC_SetDate+0x4c>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	f023 0310 	bic.w	r3, r3, #16
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	330a      	adds	r3, #10
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11c      	bne.n	8005d28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	78db      	ldrb	r3, [r3, #3]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fa6c 	bl	80061d0 <RTC_ByteToBcd2>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fa65 	bl	80061d0 <RTC_ByteToBcd2>
 8005d06:	4603      	mov	r3, r0
 8005d08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	789b      	ldrb	r3, [r3, #2]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fa5d 	bl	80061d0 <RTC_ByteToBcd2>
 8005d16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e00e      	b.n	8005d46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d34:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	22ca      	movs	r2, #202	@ 0xca
 8005d4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2253      	movs	r2, #83	@ 0x53
 8005d54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f9de 	bl	8006118 <RTC_EnterInitMode>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d60:	7cfb      	ldrb	r3, [r7, #19]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa05 	bl	8006186 <RTC_ExitInitMode>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	22ff      	movs	r2, #255	@ 0xff
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]

  return status;
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}

08005da4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005db0:	4b9a      	ldr	r3, [pc, #616]	@ (800601c <HAL_RTC_SetAlarm_IT+0x278>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a9a      	ldr	r2, [pc, #616]	@ (8006020 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0adb      	lsrs	r3, r3, #11
 8005dbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	7f1b      	ldrb	r3, [r3, #28]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_RTC_SetAlarm_IT+0x36>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e11c      	b.n	8006014 <HAL_RTC_SetAlarm_IT+0x270>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2202      	movs	r2, #2
 8005de4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d137      	bne.n	8005e5c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f9e3 	bl	80061d0 <RTC_ByteToBcd2>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f9dc 	bl	80061d0 <RTC_ByteToBcd2>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e1c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f9d4 	bl	80061d0 <RTC_ByteToBcd2>
 8005e28:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e2a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	78db      	ldrb	r3, [r3, #3]
 8005e32:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e34:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f9c6 	bl	80061d0 <RTC_ByteToBcd2>
 8005e44:	4603      	mov	r3, r0
 8005e46:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e48:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e50:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e023      	b.n	8005ea4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005e7c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005e82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	78db      	ldrb	r3, [r3, #3]
 8005e88:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005e8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e92:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005e94:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005e9a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	22ca      	movs	r2, #202	@ 0xca
 8005eb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2253      	movs	r2, #83	@ 0x53
 8005ebe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec8:	d141      	bne.n	8005f4e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005eea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	617a      	str	r2, [r7, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	22ff      	movs	r2, #255	@ 0xff
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2203      	movs	r2, #3
 8005f02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e082      	b.n	8006014 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0e7      	beq.n	8005eec <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f3a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	e04b      	b.n	8005fe6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005f5c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005f6e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005f70:	4b2a      	ldr	r3, [pc, #168]	@ (800601c <HAL_RTC_SetAlarm_IT+0x278>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	@ (8006020 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0adb      	lsrs	r3, r3, #11
 8005f7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	617a      	str	r2, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	22ff      	movs	r2, #255	@ 0xff
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e035      	b.n	8006014 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0e7      	beq.n	8005f86 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fe4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <HAL_RTC_SetAlarm_IT+0x280>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a0e      	ldr	r2, [pc, #56]	@ (8006024 <HAL_RTC_SetAlarm_IT+0x280>)
 8005fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <HAL_RTC_SetAlarm_IT+0x280>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8006024 <HAL_RTC_SetAlarm_IT+0x280>)
 8005ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ff      	movs	r2, #255	@ 0xff
 8006004:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3724      	adds	r7, #36	@ 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd90      	pop	{r4, r7, pc}
 800601c:	20000000 	.word	0x20000000
 8006020:	10624dd3 	.word	0x10624dd3
 8006024:	40013c00 	.word	0x40013c00

08006028 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f831 	bl	80060b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006062:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d012      	beq.n	8006098 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8c2 	bl	800620a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006096:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006098:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800609a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800609e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	775a      	strb	r2, [r3, #29]
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060e4:	f7fb fcc0 	bl	8001a68 <HAL_GetTick>
 80060e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060ea:	e009      	b.n	8006100 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060ec:	f7fb fcbc 	bl	8001a68 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060fa:	d901      	bls.n	8006100 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e007      	b.n	8006110 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d122      	bne.n	800617c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006144:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006146:	f7fb fc8f 	bl	8001a68 <HAL_GetTick>
 800614a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800614c:	e00c      	b.n	8006168 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800614e:	f7fb fc8b 	bl	8001a68 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800615c:	d904      	bls.n	8006168 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <RTC_EnterInitMode+0x64>
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d1e8      	bne.n	800614e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff89 	bl	80060c8 <HAL_RTC_WaitForSynchro>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2204      	movs	r2, #4
 80061c0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80061de:	e005      	b.n	80061ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	3301      	adds	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	3b0a      	subs	r3, #10
 80061ea:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b09      	cmp	r3, #9
 80061f0:	d8f6      	bhi.n	80061e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	b2db      	uxtb	r3, r3
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e07b      	b.n	8006328 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006240:	d009      	beq.n	8006256 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	61da      	str	r2, [r3, #28]
 8006248:	e005      	b.n	8006256 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb f861 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	ea42 0103 	orr.w	r1, r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	f003 0104 	and.w	r1, r3, #4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	f003 0210 	and.w	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_SPI_Transmit+0x22>
 800634e:	2302      	movs	r3, #2
 8006350:	e126      	b.n	80065a0 <HAL_SPI_Transmit+0x270>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800635a:	f7fb fb85 	bl	8001a68 <HAL_GetTick>
 800635e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006370:	2302      	movs	r3, #2
 8006372:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006374:	e10b      	b.n	800658e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_Transmit+0x52>
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006386:	e102      	b.n	800658e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2203      	movs	r2, #3
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ce:	d10f      	bne.n	80063f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d007      	beq.n	800640e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800640c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006416:	d14b      	bne.n	80064b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_SPI_Transmit+0xf6>
 8006420:	8afb      	ldrh	r3, [r7, #22]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d13e      	bne.n	80064a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800644a:	e02b      	b.n	80064a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	d112      	bne.n	8006480 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800647e:	e011      	b.n	80064a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006480:	f7fb faf2 	bl	8001a68 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d803      	bhi.n	8006498 <HAL_SPI_Transmit+0x168>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006496:	d102      	bne.n	800649e <HAL_SPI_Transmit+0x16e>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064a2:	e074      	b.n	800658e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1ce      	bne.n	800644c <HAL_SPI_Transmit+0x11c>
 80064ae:	e04c      	b.n	800654a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit+0x18e>
 80064b8:	8afb      	ldrh	r3, [r7, #22]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d140      	bne.n	8006540 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064e4:	e02c      	b.n	8006540 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d113      	bne.n	800651c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	86da      	strh	r2, [r3, #54]	@ 0x36
 800651a:	e011      	b.n	8006540 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800651c:	f7fb faa4 	bl	8001a68 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d803      	bhi.n	8006534 <HAL_SPI_Transmit+0x204>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d102      	bne.n	800653a <HAL_SPI_Transmit+0x20a>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800653e:	e026      	b.n	800658e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1cd      	bne.n	80064e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fbcc 	bl	8006cec <SPI_EndRxTxTransaction>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e000      	b.n	800658e <HAL_SPI_Transmit+0x25e>
  }

error:
 800658c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800659e:	7ffb      	ldrb	r3, [r7, #31]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065c4:	d112      	bne.n	80065ec <HAL_SPI_Receive+0x44>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10e      	bne.n	80065ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2204      	movs	r2, #4
 80065d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f8f1 	bl	80067ca <HAL_SPI_TransmitReceive>
 80065e8:	4603      	mov	r3, r0
 80065ea:	e0ea      	b.n	80067c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_SPI_Receive+0x52>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e0e3      	b.n	80067c2 <HAL_SPI_Receive+0x21a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006602:	f7fb fa31 	bl	8001a68 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d002      	beq.n	800661a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006614:	2302      	movs	r3, #2
 8006616:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006618:	e0ca      	b.n	80067b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_SPI_Receive+0x7e>
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800662a:	e0c1      	b.n	80067b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2204      	movs	r2, #4
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006672:	d10f      	bne.n	8006694 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006682:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669e:	2b40      	cmp	r3, #64	@ 0x40
 80066a0:	d007      	beq.n	80066b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d162      	bne.n	8006780 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066ba:	e02e      	b.n	800671a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d115      	bne.n	80066f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f103 020c 	add.w	r2, r3, #12
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d6:	7812      	ldrb	r2, [r2, #0]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066f4:	e011      	b.n	800671a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f6:	f7fb f9b7 	bl	8001a68 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d803      	bhi.n	800670e <HAL_SPI_Receive+0x166>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d102      	bne.n	8006714 <HAL_SPI_Receive+0x16c>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006718:	e04a      	b.n	80067b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1cb      	bne.n	80066bc <HAL_SPI_Receive+0x114>
 8006724:	e031      	b.n	800678a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d113      	bne.n	800675c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	b292      	uxth	r2, r2
 8006740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800675a:	e011      	b.n	8006780 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675c:	f7fb f984 	bl	8001a68 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d803      	bhi.n	8006774 <HAL_SPI_Receive+0x1cc>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <HAL_SPI_Receive+0x1d2>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800677e:	e017      	b.n	80067b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1cd      	bne.n	8006726 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fa46 	bl	8006c20 <SPI_EndRxTransaction>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
 80067ac:	e000      	b.n	80067b0 <HAL_SPI_Receive+0x208>
  }

error :
 80067ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b08c      	sub	sp, #48	@ 0x30
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067d8:	2301      	movs	r3, #1
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x26>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e18a      	b.n	8006b06 <HAL_SPI_TransmitReceive+0x33c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f8:	f7fb f936 	bl	8001a68 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00f      	beq.n	800683a <HAL_SPI_TransmitReceive+0x70>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006820:	d107      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x68>
 800682a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800682e:	2b04      	cmp	r3, #4
 8006830:	d003      	beq.n	800683a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006832:	2302      	movs	r3, #2
 8006834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006838:	e15b      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_SPI_TransmitReceive+0x82>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_SPI_TransmitReceive+0x82>
 8006846:	887b      	ldrh	r3, [r7, #2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006852:	e14e      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b04      	cmp	r3, #4
 800685e:	d003      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2205      	movs	r2, #5
 8006864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	887a      	ldrh	r2, [r7, #2]
 8006878:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	887a      	ldrh	r2, [r7, #2]
 800687e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	887a      	ldrh	r2, [r7, #2]
 800688a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	887a      	ldrh	r2, [r7, #2]
 8006890:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a8:	2b40      	cmp	r3, #64	@ 0x40
 80068aa:	d007      	beq.n	80068bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c4:	d178      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_TransmitReceive+0x10a>
 80068ce:	8b7b      	ldrh	r3, [r7, #26]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d166      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	881a      	ldrh	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f8:	e053      	b.n	80069a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d11b      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x176>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_SPI_TransmitReceive+0x176>
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d113      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	d119      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x1b8>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d014      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	b292      	uxth	r2, r2
 8006964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800697e:	2301      	movs	r3, #1
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006982:	f7fb f871 	bl	8001a68 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800698e:	429a      	cmp	r2, r3
 8006990:	d807      	bhi.n	80069a2 <HAL_SPI_TransmitReceive+0x1d8>
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d003      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80069a0:	e0a7      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1a6      	bne.n	80068fa <HAL_SPI_TransmitReceive+0x130>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1a1      	bne.n	80068fa <HAL_SPI_TransmitReceive+0x130>
 80069b6:	e07c      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_SPI_TransmitReceive+0x1fc>
 80069c0:	8b7b      	ldrh	r3, [r7, #26]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d16b      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ec:	e057      	b.n	8006a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d11c      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x26c>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d017      	beq.n	8006a36 <HAL_SPI_TransmitReceive+0x26c>
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d114      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d119      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x2ae>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d014      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a74:	2301      	movs	r3, #1
 8006a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a78:	f7fa fff6 	bl	8001a68 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d803      	bhi.n	8006a90 <HAL_SPI_TransmitReceive+0x2c6>
 8006a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d102      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x2cc>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006a9c:	e029      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1a2      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x224>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d19d      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f918 	bl	8006cec <SPI_EndRxTxTransaction>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d006      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006ace:	e010      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e000      	b.n	8006af2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3730      	adds	r7, #48	@ 0x30
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b20:	f7fa ffa2 	bl	8001a68 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b30:	f7fa ff9a 	bl	8001a68 <HAL_GetTick>
 8006b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b36:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	015b      	lsls	r3, r3, #5
 8006b3c:	0d1b      	lsrs	r3, r3, #20
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b46:	e054      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d050      	beq.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b50:	f7fa ff8a 	bl	8001a68 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d902      	bls.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13d      	bne.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b7e:	d111      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b88:	d004      	beq.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b92:	d107      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bac:	d10f      	bne.n	8006bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e017      	b.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d19b      	bne.n	8006b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000000 	.word	0x20000000

08006c20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c34:	d111      	bne.n	8006c5a <SPI_EndRxTransaction+0x3a>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3e:	d004      	beq.n	8006c4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c48:	d107      	bne.n	8006c5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c62:	d12a      	bne.n	8006cba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6c:	d012      	beq.n	8006c94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2180      	movs	r1, #128	@ 0x80
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff ff49 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d02d      	beq.n	8006ce0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e026      	b.n	8006ce2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff ff36 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01a      	beq.n	8006ce0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e013      	b.n	8006ce2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff ff23 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd4:	f043 0220 	orr.w	r2, r3, #32
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e000      	b.n	8006ce2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d68 <SPI_EndRxTxTransaction+0x7c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <SPI_EndRxTxTransaction+0x80>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0d5b      	lsrs	r3, r3, #21
 8006d04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d16:	d112      	bne.n	8006d3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2180      	movs	r1, #128	@ 0x80
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fef4 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	f043 0220 	orr.w	r2, r3, #32
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e00f      	b.n	8006d5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d54:	2b80      	cmp	r3, #128	@ 0x80
 8006d56:	d0f2      	beq.n	8006d3e <SPI_EndRxTxTransaction+0x52>
 8006d58:	e000      	b.n	8006d5c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d5a:	bf00      	nop
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	165e9f81 	.word	0x165e9f81

08006d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e041      	b.n	8006e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fa fb7a 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f000 fcb8 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d001      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e044      	b.n	8006eb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x6c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e52:	d013      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x6c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x6c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x6c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ecc <HAL_TIM_Base_Start_IT+0xbc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x6c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a16      	ldr	r2, [pc, #88]	@ (8006ed0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d111      	bne.n	8006ea0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b06      	cmp	r3, #6
 8006e8c:	d010      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0201 	orr.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	e007      	b.n	8006eb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800
 8006ecc:	40000c00 	.word	0x40000c00
 8006ed0:	40014000 	.word	0x40014000

08006ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e041      	b.n	8006f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f839 	bl	8006f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f000 fc06 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_TIM_PWM_Start+0x24>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e022      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d109      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x3e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e015      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d109      	bne.n	8006fe0 <HAL_TIM_PWM_Start+0x58>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e008      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e068      	b.n	80070cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0x82>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007008:	e013      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0x92>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007018:	e00b      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007028:	e003      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fe18 	bl	8007c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a23      	ldr	r2, [pc, #140]	@ (80070d4 <HAL_TIM_PWM_Start+0x14c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d107      	bne.n	800705a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <HAL_TIM_PWM_Start+0x14c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_TIM_PWM_Start+0x10e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706c:	d013      	beq.n	8007096 <HAL_TIM_PWM_Start+0x10e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <HAL_TIM_PWM_Start+0x150>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIM_PWM_Start+0x10e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a17      	ldr	r2, [pc, #92]	@ (80070dc <HAL_TIM_PWM_Start+0x154>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_TIM_PWM_Start+0x10e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <HAL_TIM_PWM_Start+0x158>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIM_PWM_Start+0x10e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a14      	ldr	r2, [pc, #80]	@ (80070e4 <HAL_TIM_PWM_Start+0x15c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d111      	bne.n	80070ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d010      	beq.n	80070ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e007      	b.n	80070ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	40014000 	.word	0x40014000

080070e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e041      	b.n	8007180 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f839 	bl	8007188 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f000 fafb 	bl	8007724 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0208 	bic.w	r2, r2, #8
 800713c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa81 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa73 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa84 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b04      	cmp	r3, #4
 8007204:	d122      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d11b      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa57 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa49 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa5a 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b08      	cmp	r3, #8
 8007258:	d122      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d11b      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0208 	mvn.w	r2, #8
 8007270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa2d 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 800728c:	e005      	b.n	800729a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa1f 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa30 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0210 	mvn.w	r2, #16
 80072c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2208      	movs	r2, #8
 80072ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa03 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9f5 	bl	80076d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fa06 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0201 	mvn.w	r2, #1
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9cf 	bl	80076be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732a:	2b80      	cmp	r3, #128	@ 0x80
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd82 	bl	8007e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007356:	2b40      	cmp	r3, #64	@ 0x40
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9cb 	bl	800770e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b20      	cmp	r3, #32
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0220 	mvn.w	r2, #32
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fd4c 	bl	8007e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0ae      	b.n	8007528 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	f200 809f 	bhi.w	8007518 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073da:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007415 	.word	0x08007415
 80073e4:	08007519 	.word	0x08007519
 80073e8:	08007519 	.word	0x08007519
 80073ec:	08007519 	.word	0x08007519
 80073f0:	08007455 	.word	0x08007455
 80073f4:	08007519 	.word	0x08007519
 80073f8:	08007519 	.word	0x08007519
 80073fc:	08007519 	.word	0x08007519
 8007400:	08007497 	.word	0x08007497
 8007404:	08007519 	.word	0x08007519
 8007408:	08007519 	.word	0x08007519
 800740c:	08007519 	.word	0x08007519
 8007410:	080074d7 	.word	0x080074d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fa02 	bl	8007824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0208 	orr.w	r2, r2, #8
 800742e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0204 	bic.w	r2, r2, #4
 800743e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6999      	ldr	r1, [r3, #24]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	619a      	str	r2, [r3, #24]
      break;
 8007452:	e064      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fa48 	bl	80078f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800746e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800747e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6999      	ldr	r1, [r3, #24]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	619a      	str	r2, [r3, #24]
      break;
 8007494:	e043      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fa93 	bl	80079c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0208 	orr.w	r2, r2, #8
 80074b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0204 	bic.w	r2, r2, #4
 80074c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69d9      	ldr	r1, [r3, #28]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	61da      	str	r2, [r3, #28]
      break;
 80074d4:	e023      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fadd 	bl	8007a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69d9      	ldr	r1, [r3, #28]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	021a      	lsls	r2, r3, #8
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	61da      	str	r2, [r3, #28]
      break;
 8007516:	e002      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
      break;
 800751c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_TIM_ConfigClockSource+0x1c>
 8007548:	2302      	movs	r3, #2
 800754a:	e0b4      	b.n	80076b6 <HAL_TIM_ConfigClockSource+0x186>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800756a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007584:	d03e      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0xd4>
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800758a:	f200 8087 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007592:	f000 8086 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x172>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759a:	d87f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b70      	cmp	r3, #112	@ 0x70
 800759e:	d01a      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xa6>
 80075a0:	2b70      	cmp	r3, #112	@ 0x70
 80075a2:	d87b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b60      	cmp	r3, #96	@ 0x60
 80075a6:	d050      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x11a>
 80075a8:	2b60      	cmp	r3, #96	@ 0x60
 80075aa:	d877      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b50      	cmp	r3, #80	@ 0x50
 80075ae:	d03c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0xfa>
 80075b0:	2b50      	cmp	r3, #80	@ 0x50
 80075b2:	d873      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b40      	cmp	r3, #64	@ 0x40
 80075b6:	d058      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x13a>
 80075b8:	2b40      	cmp	r3, #64	@ 0x40
 80075ba:	d86f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b30      	cmp	r3, #48	@ 0x30
 80075be:	d064      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b30      	cmp	r3, #48	@ 0x30
 80075c2:	d86b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d060      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d867      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d05a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d4:	e062      	b.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f000 fb23 	bl	8007c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
      break;
 8007602:	e04f      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f000 fb0c 	bl	8007c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e03c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	461a      	mov	r2, r3
 8007638:	f000 fa80 	bl	8007b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2150      	movs	r1, #80	@ 0x50
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fad9 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 8007648:	e02c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	461a      	mov	r2, r3
 8007658:	f000 fa9f 	bl	8007b9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2160      	movs	r1, #96	@ 0x60
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fac9 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 8007668:	e01c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fa60 	bl	8007b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2140      	movs	r1, #64	@ 0x40
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fab9 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f000 fab0 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 800769a:	e003      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a34      	ldr	r2, [pc, #208]	@ (8007808 <TIM_Base_SetConfig+0xe4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00f      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007742:	d00b      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a31      	ldr	r2, [pc, #196]	@ (800780c <TIM_Base_SetConfig+0xe8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d007      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a30      	ldr	r2, [pc, #192]	@ (8007810 <TIM_Base_SetConfig+0xec>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a2f      	ldr	r2, [pc, #188]	@ (8007814 <TIM_Base_SetConfig+0xf0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a25      	ldr	r2, [pc, #148]	@ (8007808 <TIM_Base_SetConfig+0xe4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01b      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777c:	d017      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a22      	ldr	r2, [pc, #136]	@ (800780c <TIM_Base_SetConfig+0xe8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a21      	ldr	r2, [pc, #132]	@ (8007810 <TIM_Base_SetConfig+0xec>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a20      	ldr	r2, [pc, #128]	@ (8007814 <TIM_Base_SetConfig+0xf0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <TIM_Base_SetConfig+0xf4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <TIM_Base_SetConfig+0xf8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <TIM_Base_SetConfig+0xfc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d108      	bne.n	80077c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a08      	ldr	r2, [pc, #32]	@ (8007808 <TIM_Base_SetConfig+0xe4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d103      	bne.n	80077f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	615a      	str	r2, [r3, #20]
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800

08007824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0302 	bic.w	r3, r3, #2
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1c      	ldr	r2, [pc, #112]	@ (80078ec <TIM_OC1_SetConfig+0xc8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10c      	bne.n	800789a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0308 	bic.w	r3, r3, #8
 8007886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a13      	ldr	r2, [pc, #76]	@ (80078ec <TIM_OC1_SetConfig+0xc8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d111      	bne.n	80078c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	bf00      	nop
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	40010000 	.word	0x40010000

080078f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0210 	bic.w	r2, r3, #16
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1e      	ldr	r2, [pc, #120]	@ (80079c4 <TIM_OC2_SetConfig+0xd4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10d      	bne.n	800796c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800796a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a15      	ldr	r2, [pc, #84]	@ (80079c4 <TIM_OC2_SetConfig+0xd4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d113      	bne.n	800799c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800797a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000

080079c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1d      	ldr	r2, [pc, #116]	@ (8007a98 <TIM_OC3_SetConfig+0xd0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10d      	bne.n	8007a42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a14      	ldr	r2, [pc, #80]	@ (8007a98 <TIM_OC3_SetConfig+0xd0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d113      	bne.n	8007a72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	621a      	str	r2, [r3, #32]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000

08007a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	031b      	lsls	r3, r3, #12
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a10      	ldr	r2, [pc, #64]	@ (8007b38 <TIM_OC4_SetConfig+0x9c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d109      	bne.n	8007b10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	019b      	lsls	r3, r3, #6
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40010000 	.word	0x40010000

08007b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0201 	bic.w	r2, r3, #1
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f023 030a 	bic.w	r3, r3, #10
 8007b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b087      	sub	sp, #28
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0210 	bic.w	r2, r3, #16
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	031b      	lsls	r3, r3, #12
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f043 0307 	orr.w	r3, r3, #7
 8007c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	609a      	str	r2, [r3, #8]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	609a      	str	r2, [r3, #8]
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 031f 	and.w	r3, r3, #31
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e050      	b.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1c      	ldr	r2, [pc, #112]	@ (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d018      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d20:	d013      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	@ (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00e      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a16      	ldr	r2, [pc, #88]	@ (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d009      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a13      	ldr	r2, [pc, #76]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d10c      	bne.n	8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40014000 	.word	0x40014000

08007d98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e03d      	b.n	8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e64:	b084      	sub	sp, #16
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	f107 001c 	add.w	r0, r7, #28
 8007e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d122      	bne.n	8007ec2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d105      	bne.n	8007eb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fbee 	bl	8009698 <USB_CoreReset>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	e01a      	b.n	8007ef8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fbe2 	bl	8009698 <USB_CoreReset>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007eea:	e005      	b.n	8007ef8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d10b      	bne.n	8007f16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f043 0206 	orr.w	r2, r3, #6
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f043 0220 	orr.w	r2, r3, #32
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f22:	b004      	add	sp, #16
 8007f24:	4770      	bx	lr
	...

08007f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d165      	bne.n	8008008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4a41      	ldr	r2, [pc, #260]	@ (8008044 <USB_SetTurnaroundTime+0x11c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d906      	bls.n	8007f52 <USB_SetTurnaroundTime+0x2a>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a40      	ldr	r2, [pc, #256]	@ (8008048 <USB_SetTurnaroundTime+0x120>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d202      	bcs.n	8007f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f4c:	230f      	movs	r3, #15
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e062      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4a3c      	ldr	r2, [pc, #240]	@ (8008048 <USB_SetTurnaroundTime+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d306      	bcc.n	8007f68 <USB_SetTurnaroundTime+0x40>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800804c <USB_SetTurnaroundTime+0x124>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d202      	bcs.n	8007f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f62:	230e      	movs	r3, #14
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e057      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a38      	ldr	r2, [pc, #224]	@ (800804c <USB_SetTurnaroundTime+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d306      	bcc.n	8007f7e <USB_SetTurnaroundTime+0x56>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4a37      	ldr	r2, [pc, #220]	@ (8008050 <USB_SetTurnaroundTime+0x128>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d202      	bcs.n	8007f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f78:	230d      	movs	r3, #13
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e04c      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4a33      	ldr	r2, [pc, #204]	@ (8008050 <USB_SetTurnaroundTime+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d306      	bcc.n	8007f94 <USB_SetTurnaroundTime+0x6c>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4a32      	ldr	r2, [pc, #200]	@ (8008054 <USB_SetTurnaroundTime+0x12c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d802      	bhi.n	8007f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f8e:	230c      	movs	r3, #12
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e041      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4a2f      	ldr	r2, [pc, #188]	@ (8008054 <USB_SetTurnaroundTime+0x12c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d906      	bls.n	8007faa <USB_SetTurnaroundTime+0x82>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8008058 <USB_SetTurnaroundTime+0x130>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d802      	bhi.n	8007faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007fa4:	230b      	movs	r3, #11
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e036      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4a2a      	ldr	r2, [pc, #168]	@ (8008058 <USB_SetTurnaroundTime+0x130>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d906      	bls.n	8007fc0 <USB_SetTurnaroundTime+0x98>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4a29      	ldr	r2, [pc, #164]	@ (800805c <USB_SetTurnaroundTime+0x134>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d802      	bhi.n	8007fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007fba:	230a      	movs	r3, #10
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e02b      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4a26      	ldr	r2, [pc, #152]	@ (800805c <USB_SetTurnaroundTime+0x134>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d906      	bls.n	8007fd6 <USB_SetTurnaroundTime+0xae>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4a25      	ldr	r2, [pc, #148]	@ (8008060 <USB_SetTurnaroundTime+0x138>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d202      	bcs.n	8007fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007fd0:	2309      	movs	r3, #9
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e020      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	@ (8008060 <USB_SetTurnaroundTime+0x138>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d306      	bcc.n	8007fec <USB_SetTurnaroundTime+0xc4>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	@ (8008064 <USB_SetTurnaroundTime+0x13c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d802      	bhi.n	8007fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e015      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4a1d      	ldr	r2, [pc, #116]	@ (8008064 <USB_SetTurnaroundTime+0x13c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d906      	bls.n	8008002 <USB_SetTurnaroundTime+0xda>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8008068 <USB_SetTurnaroundTime+0x140>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d202      	bcs.n	8008002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ffc:	2307      	movs	r3, #7
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e00a      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008002:	2306      	movs	r3, #6
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e007      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800800e:	2309      	movs	r3, #9
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e001      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008014:	2309      	movs	r3, #9
 8008016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	029b      	lsls	r3, r3, #10
 800802c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008030:	431a      	orrs	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	00d8acbf 	.word	0x00d8acbf
 8008048:	00e4e1c0 	.word	0x00e4e1c0
 800804c:	00f42400 	.word	0x00f42400
 8008050:	01067380 	.word	0x01067380
 8008054:	011a499f 	.word	0x011a499f
 8008058:	01312cff 	.word	0x01312cff
 800805c:	014ca43f 	.word	0x014ca43f
 8008060:	016e3600 	.word	0x016e3600
 8008064:	01a6ab1f 	.word	0x01a6ab1f
 8008068:	01e84800 	.word	0x01e84800

0800806c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f043 0201 	orr.w	r2, r3, #1
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d115      	bne.n	80080fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080de:	2001      	movs	r0, #1
 80080e0:	f7f9 fcce 	bl	8001a80 <HAL_Delay>
      ms++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fa45 	bl	800957a <USB_GetMode>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d01e      	beq.n	8008134 <USB_SetCurrentMode+0x84>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b31      	cmp	r3, #49	@ 0x31
 80080fa:	d9f0      	bls.n	80080de <USB_SetCurrentMode+0x2e>
 80080fc:	e01a      	b.n	8008134 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d115      	bne.n	8008130 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008110:	2001      	movs	r0, #1
 8008112:	f7f9 fcb5 	bl	8001a80 <HAL_Delay>
      ms++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fa2c 	bl	800957a <USB_GetMode>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <USB_SetCurrentMode+0x84>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b31      	cmp	r3, #49	@ 0x31
 800812c:	d9f0      	bls.n	8008110 <USB_SetCurrentMode+0x60>
 800812e:	e001      	b.n	8008134 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e005      	b.n	8008140 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b32      	cmp	r3, #50	@ 0x32
 8008138:	d101      	bne.n	800813e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008148:	b084      	sub	sp, #16
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e009      	b.n	800817c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3340      	adds	r3, #64	@ 0x40
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	2200      	movs	r2, #0
 8008174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b0e      	cmp	r3, #14
 8008180:	d9f2      	bls.n	8008168 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11c      	bne.n	80081c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008196:	f043 0302 	orr.w	r3, r3, #2
 800819a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	639a      	str	r2, [r3, #56]	@ 0x38
 80081c0:	e00b      	b.n	80081da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ec:	4619      	mov	r1, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f4:	461a      	mov	r2, r3
 80081f6:	680b      	ldr	r3, [r1, #0]
 80081f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d10c      	bne.n	800821a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f965 	bl	80084d8 <USB_SetDevSpeed>
 800820e:	e008      	b.n	8008222 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008210:	2101      	movs	r1, #1
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f960 	bl	80084d8 <USB_SetDevSpeed>
 8008218:	e003      	b.n	8008222 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800821a:	2103      	movs	r1, #3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f95b 	bl	80084d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008222:	2110      	movs	r1, #16
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8f3 	bl	8008410 <USB_FlushTxFifo>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f91f 	bl	8008478 <USB_FlushRxFifo>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824a:	461a      	mov	r2, r3
 800824c:	2300      	movs	r3, #0
 800824e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008256:	461a      	mov	r2, r3
 8008258:	2300      	movs	r3, #0
 800825a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008262:	461a      	mov	r2, r3
 8008264:	2300      	movs	r3, #0
 8008266:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	e043      	b.n	80082f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008284:	d118      	bne.n	80082b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	461a      	mov	r2, r3
 800829a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e013      	b.n	80082ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ae:	461a      	mov	r2, r3
 80082b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	e008      	b.n	80082ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	461a      	mov	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d6:	461a      	mov	r2, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	461a      	mov	r2, r3
 80082ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3301      	adds	r3, #1
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d3b7      	bcc.n	800826e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	e043      	b.n	800838c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800831a:	d118      	bne.n	800834e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832e:	461a      	mov	r2, r3
 8008330:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	e013      	b.n	8008360 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008344:	461a      	mov	r2, r3
 8008346:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	e008      	b.n	8008360 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835a:	461a      	mov	r2, r3
 800835c:	2300      	movs	r3, #0
 800835e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836c:	461a      	mov	r2, r3
 800836e:	2300      	movs	r3, #0
 8008370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837e:	461a      	mov	r2, r3
 8008380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	d3b7      	bcc.n	8008304 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80083b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d105      	bne.n	80083c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f043 0210 	orr.w	r2, r3, #16
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <USB_DevInit+0x2c4>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f043 0208 	orr.w	r2, r3, #8
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d107      	bne.n	80083fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083f4:	f043 0304 	orr.w	r3, r3, #4
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008408:	b004      	add	sp, #16
 800840a:	4770      	bx	lr
 800840c:	803c3800 	.word	0x803c3800

08008410 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a13      	ldr	r2, [pc, #76]	@ (8008474 <USB_FlushTxFifo+0x64>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e01b      	b.n	8008468 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	daf2      	bge.n	800841e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	019b      	lsls	r3, r3, #6
 8008440:	f043 0220 	orr.w	r2, r3, #32
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a08      	ldr	r2, [pc, #32]	@ (8008474 <USB_FlushTxFifo+0x64>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e006      	b.n	8008468 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b20      	cmp	r3, #32
 8008464:	d0f0      	beq.n	8008448 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	00030d40 	.word	0x00030d40

08008478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a11      	ldr	r2, [pc, #68]	@ (80084d4 <USB_FlushRxFifo+0x5c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d901      	bls.n	8008496 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e018      	b.n	80084c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	daf2      	bge.n	8008484 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2210      	movs	r2, #16
 80084a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3301      	adds	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4a08      	ldr	r2, [pc, #32]	@ (80084d4 <USB_FlushRxFifo+0x5c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e006      	b.n	80084c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0310 	and.w	r3, r3, #16
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d0f0      	beq.n	80084a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	00030d40 	.word	0x00030d40

080084d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800850a:	b480      	push	{r7}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 0306 	and.w	r3, r3, #6
 8008522:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
 800852e:	e00a      	b.n	8008546 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d002      	beq.n	800853c <USB_GetDevSpeed+0x32>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b06      	cmp	r3, #6
 800853a:	d102      	bne.n	8008542 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800853c:	2302      	movs	r3, #2
 800853e:	75fb      	strb	r3, [r7, #23]
 8008540:	e001      	b.n	8008546 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008542:	230f      	movs	r3, #15
 8008544:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d13a      	bne.n	80085e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	2101      	movs	r1, #1
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	b29b      	uxth	r3, r3
 8008588:	68f9      	ldr	r1, [r7, #12]
 800858a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800858e:	4313      	orrs	r3, r2
 8008590:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d155      	bne.n	8008654 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80085c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	059b      	lsls	r3, r3, #22
 80085ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80085cc:	4313      	orrs	r3, r2
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	0151      	lsls	r1, r2, #5
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	440a      	add	r2, r1
 80085d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	e036      	b.n	8008654 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ec:	69da      	ldr	r2, [r3, #28]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	2101      	movs	r1, #1
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008604:	4313      	orrs	r3, r2
 8008606:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d11a      	bne.n	8008654 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	791b      	ldrb	r3, [r3, #4]
 8008638:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800863a:	430b      	orrs	r3, r1
 800863c:	4313      	orrs	r3, r2
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800864a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008652:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d161      	bne.n	8008744 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008696:	d11f      	bne.n	80086d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086f8:	4013      	ands	r3, r2
 80086fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 030f 	and.w	r3, r3, #15
 800870c:	2101      	movs	r1, #1
 800870e:	fa01 f303 	lsl.w	r3, r1, r3
 8008712:	b29b      	uxth	r3, r3
 8008714:	43db      	mvns	r3, r3
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871c:	4013      	ands	r3, r2
 800871e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	0159      	lsls	r1, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	440b      	add	r3, r1
 8008736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800873a:	4619      	mov	r1, r3
 800873c:	4b35      	ldr	r3, [pc, #212]	@ (8008814 <USB_DeactivateEndpoint+0x1b0>)
 800873e:	4013      	ands	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
 8008742:	e060      	b.n	8008806 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800875a:	d11f      	bne.n	800879c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008776:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800877a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008796:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800879a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	2101      	movs	r1, #1
 80087ae:	fa01 f303 	lsl.w	r3, r1, r3
 80087b2:	041b      	lsls	r3, r3, #16
 80087b4:	43db      	mvns	r3, r3
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087bc:	4013      	ands	r3, r2
 80087be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	2101      	movs	r1, #1
 80087d2:	fa01 f303 	lsl.w	r3, r1, r3
 80087d6:	041b      	lsls	r3, r3, #16
 80087d8:	43db      	mvns	r3, r3
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087e0:	4013      	ands	r3, r2
 80087e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	0159      	lsls	r1, r3, #5
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	440b      	add	r3, r1
 80087fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fe:	4619      	mov	r1, r3
 8008800:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <USB_DeactivateEndpoint+0x1b4>)
 8008802:	4013      	ands	r3, r2
 8008804:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	ec337800 	.word	0xec337800
 8008818:	eff37800 	.word	0xeff37800

0800881c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b01      	cmp	r3, #1
 800883a:	f040 815c 	bne.w	8008af6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d132      	bne.n	80088ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	0151      	lsls	r1, r2, #5
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	440a      	add	r2, r1
 800885c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008860:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008864:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008868:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008884:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	0151      	lsls	r1, r2, #5
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	440a      	add	r2, r1
 80088a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a4:	0cdb      	lsrs	r3, r3, #19
 80088a6:	04db      	lsls	r3, r3, #19
 80088a8:	6113      	str	r3, [r2, #16]
 80088aa:	e074      	b.n	8008996 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c6:	0cdb      	lsrs	r3, r3, #19
 80088c8:	04db      	lsls	r3, r3, #19
 80088ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	0151      	lsls	r1, r2, #5
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	440a      	add	r2, r1
 80088e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6999      	ldr	r1, [r3, #24]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	440b      	add	r3, r1
 8008908:	1e59      	subs	r1, r3, #1
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008912:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008914:	4b9d      	ldr	r3, [pc, #628]	@ (8008b8c <USB_EPStartXfer+0x370>)
 8008916:	400b      	ands	r3, r1
 8008918:	69b9      	ldr	r1, [r7, #24]
 800891a:	0148      	lsls	r0, r1, #5
 800891c:	69f9      	ldr	r1, [r7, #28]
 800891e:	4401      	add	r1, r0
 8008920:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008924:	4313      	orrs	r3, r2
 8008926:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893e:	69b9      	ldr	r1, [r7, #24]
 8008940:	0148      	lsls	r0, r1, #5
 8008942:	69f9      	ldr	r1, [r7, #28]
 8008944:	4401      	add	r1, r0
 8008946:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800894a:	4313      	orrs	r3, r2
 800894c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	791b      	ldrb	r3, [r3, #4]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d11f      	bne.n	8008996 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008970:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008974:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008990:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008994:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d14b      	bne.n	8008a34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b0:	461a      	mov	r2, r3
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d128      	bne.n	8008a12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d110      	bne.n	80089f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	e00f      	b.n	8008a12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	e133      	b.n	8008c9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	791b      	ldrb	r3, [r3, #4]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d015      	beq.n	8008a88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 811b 	beq.w	8008c9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	2101      	movs	r1, #1
 8008a78:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7c:	69f9      	ldr	r1, [r7, #28]
 8008a7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a82:	4313      	orrs	r3, r2
 8008a84:	634b      	str	r3, [r1, #52]	@ 0x34
 8008a86:	e109      	b.n	8008c9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d110      	bne.n	8008aba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	e00f      	b.n	8008ada <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6919      	ldr	r1, [r3, #16]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	b298      	uxth	r0, r3
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4603      	mov	r3, r0
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fade 	bl	80090b0 <USB_WritePacket>
 8008af4:	e0d2      	b.n	8008c9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b10:	0cdb      	lsrs	r3, r3, #19
 8008b12:	04db      	lsls	r3, r3, #19
 8008b14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d126      	bne.n	8008b90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	0148      	lsls	r0, r1, #5
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	4401      	add	r1, r0
 8008b60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b64:	4313      	orrs	r3, r2
 8008b66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b86:	6113      	str	r3, [r2, #16]
 8008b88:	e03a      	b.n	8008c00 <USB_EPStartXfer+0x3e4>
 8008b8a:	bf00      	nop
 8008b8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	1e5a      	subs	r2, r3, #1
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	8afa      	ldrh	r2, [r7, #22]
 8008bac:	fb03 f202 	mul.w	r2, r3, r2
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	8afb      	ldrh	r3, [r7, #22]
 8008bc4:	04d9      	lsls	r1, r3, #19
 8008bc6:	4b38      	ldr	r3, [pc, #224]	@ (8008ca8 <USB_EPStartXfer+0x48c>)
 8008bc8:	400b      	ands	r3, r1
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	0148      	lsls	r0, r1, #5
 8008bce:	69f9      	ldr	r1, [r7, #28]
 8008bd0:	4401      	add	r1, r0
 8008bd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	0148      	lsls	r0, r1, #5
 8008bf4:	69f9      	ldr	r1, [r7, #28]
 8008bf6:	4401      	add	r1, r0
 8008bf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10d      	bne.n	8008c22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6919      	ldr	r1, [r3, #16]
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1e:	460a      	mov	r2, r1
 8008c20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	791b      	ldrb	r3, [r3, #4]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d128      	bne.n	8008c7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d110      	bne.n	8008c5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	0151      	lsls	r1, r2, #5
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	440a      	add	r2, r1
 8008c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e00f      	b.n	8008c7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3720      	adds	r7, #32
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	1ff80000 	.word	0x1ff80000

08008cac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	f040 80ce 	bne.w	8008e6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d132      	bne.n	8008d3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cf4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d34:	0cdb      	lsrs	r3, r3, #19
 8008d36:	04db      	lsls	r3, r3, #19
 8008d38:	6113      	str	r3, [r2, #16]
 8008d3a:	e04e      	b.n	8008dda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d56:	0cdb      	lsrs	r3, r3, #19
 8008d58:	04db      	lsls	r3, r3, #19
 8008d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d903      	bls.n	8008d94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dca:	6939      	ldr	r1, [r7, #16]
 8008dcc:	0148      	lsls	r0, r1, #5
 8008dce:	6979      	ldr	r1, [r7, #20]
 8008dd0:	4401      	add	r1, r0
 8008dd2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d11e      	bne.n	8008e1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008df4:	461a      	mov	r2, r3
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	e097      	b.n	8008f4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	0151      	lsls	r1, r2, #5
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	440a      	add	r2, r1
 8008e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8083 	beq.w	8008f4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	2101      	movs	r1, #1
 8008e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5e:	6979      	ldr	r1, [r7, #20]
 8008e60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e64:	4313      	orrs	r3, r2
 8008e66:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e68:	e071      	b.n	8008f4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e84:	0cdb      	lsrs	r3, r3, #19
 8008e86:	04db      	lsls	r3, r3, #19
 8008e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ea8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008eac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008efc:	6939      	ldr	r1, [r7, #16]
 8008efe:	0148      	lsls	r0, r1, #5
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	4401      	add	r1, r0
 8008f04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d10d      	bne.n	8008f2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6919      	ldr	r1, [r3, #16]
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2a:	460a      	mov	r2, r1
 8008f2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f48:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	785b      	ldrb	r3, [r3, #1]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d14a      	bne.n	8009010 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f92:	f040 8086 	bne.w	80090a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	7812      	ldrb	r2, [r2, #0]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	7812      	ldrb	r2, [r2, #0]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d902      	bls.n	8008ff4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ff2:	e056      	b.n	80090a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800900c:	d0e7      	beq.n	8008fde <USB_EPStopXfer+0x82>
 800900e:	e048      	b.n	80090a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009028:	d13b      	bne.n	80090a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	7812      	ldrb	r2, [r2, #0]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800904c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800906c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009070:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800907e:	4293      	cmp	r3, r2
 8009080:	d902      	bls.n	8009088 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	75fb      	strb	r3, [r7, #23]
          break;
 8009086:	e00c      	b.n	80090a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800909c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090a0:	d0e7      	beq.n	8009072 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	460b      	mov	r3, r1
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d123      	bne.n	800911e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090d6:	88bb      	ldrh	r3, [r7, #4]
 80090d8:	3303      	adds	r3, #3
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	e018      	b.n	8009116 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	031a      	lsls	r2, r3, #12
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090f0:	461a      	mov	r2, r3
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3301      	adds	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3301      	adds	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	3301      	adds	r3, #1
 800910e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	3301      	adds	r3, #1
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	429a      	cmp	r2, r3
 800911c:	d3e2      	bcc.n	80090e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3724      	adds	r7, #36	@ 0x24
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800912c:	b480      	push	{r7}
 800912e:	b08b      	sub	sp, #44	@ 0x2c
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	089b      	lsrs	r3, r3, #2
 8009146:	b29b      	uxth	r3, r3
 8009148:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	f003 0303 	and.w	r3, r3, #3
 8009150:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009152:	2300      	movs	r3, #0
 8009154:	623b      	str	r3, [r7, #32]
 8009156:	e014      	b.n	8009182 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	601a      	str	r2, [r3, #0]
    pDest++;
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	3301      	adds	r3, #1
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	3301      	adds	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	3301      	adds	r3, #1
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	3301      	adds	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	3301      	adds	r3, #1
 8009180:	623b      	str	r3, [r7, #32]
 8009182:	6a3a      	ldr	r2, [r7, #32]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	429a      	cmp	r2, r3
 8009188:	d3e6      	bcc.n	8009158 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800918a:	8bfb      	ldrh	r3, [r7, #30]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01e      	beq.n	80091ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800919a:	461a      	mov	r2, r3
 800919c:	f107 0310 	add.w	r3, r7, #16
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	701a      	strb	r2, [r3, #0]
      i++;
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	3301      	adds	r3, #1
 80091ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	3301      	adds	r3, #1
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80091c2:	8bfb      	ldrh	r3, [r7, #30]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091c8:	8bfb      	ldrh	r3, [r7, #30]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1ea      	bne.n	80091a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	372c      	adds	r7, #44	@ 0x2c
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d12c      	bne.n	8009252 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	db12      	blt.n	8009230 <USB_EPSetStall+0x54>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00f      	beq.n	8009230 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800922a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800922e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800924a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	e02b      	b.n	80092aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	db12      	blt.n	800928a <USB_EPSetStall+0xae>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00f      	beq.n	800928a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	0151      	lsls	r1, r2, #5
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	440a      	add	r2, r1
 8009280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009284:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009288:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	785b      	ldrb	r3, [r3, #1]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d128      	bne.n	8009326 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	0151      	lsls	r1, r2, #5
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	440a      	add	r2, r1
 80092ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	791b      	ldrb	r3, [r3, #4]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d003      	beq.n	8009304 <USB_EPClearStall+0x4c>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	791b      	ldrb	r3, [r3, #4]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d138      	bne.n	8009376 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800931e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	e027      	b.n	8009376 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009340:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009344:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	791b      	ldrb	r3, [r3, #4]
 800934a:	2b03      	cmp	r3, #3
 800934c:	d003      	beq.n	8009356 <USB_EPClearStall+0x9e>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	791b      	ldrb	r3, [r3, #4]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d10f      	bne.n	8009376 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009374:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80093a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80093b8:	68f9      	ldr	r1, [r7, #12]
 80093ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093be:	4313      	orrs	r3, r2
 80093c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093fe:	f023 0302 	bic.w	r3, r3, #2
 8009402:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009440:	f043 0302 	orr.w	r3, r3, #2
 8009444:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4013      	ands	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800946c:	68fb      	ldr	r3, [r7, #12]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	4013      	ands	r3, r2
 800949c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	0c1b      	lsrs	r3, r3, #16
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	4013      	ands	r3, r2
 80094d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	b29b      	uxth	r3, r3
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4013      	ands	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009510:	68bb      	ldr	r3, [r7, #8]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800951e:	b480      	push	{r7}
 8009520:	b087      	sub	sp, #28
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800953e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009540:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	fa22 f303 	lsr.w	r3, r2, r3
 800954e:	01db      	lsls	r3, r3, #7
 8009550:	b2db      	uxtb	r3, r3
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4013      	ands	r3, r2
 800956a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800956c:	68bb      	ldr	r3, [r7, #8]
}
 800956e:	4618      	mov	r0, r3
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	f003 0301 	and.w	r3, r3, #1
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80095b4:	f023 0307 	bic.w	r3, r3, #7
 80095b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	460b      	mov	r3, r1
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	333c      	adds	r3, #60	@ 0x3c
 80095f2:	3304      	adds	r3, #4
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4a26      	ldr	r2, [pc, #152]	@ (8009694 <USB_EP0_OutStart+0xb8>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d90a      	bls.n	8009616 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800960c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009610:	d101      	bne.n	8009616 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	e037      	b.n	8009686 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961c:	461a      	mov	r2, r3
 800961e:	2300      	movs	r3, #0
 8009620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009630:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009644:	f043 0318 	orr.w	r3, r3, #24
 8009648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009658:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800965c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d10f      	bne.n	8009684 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800967e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	4f54300a 	.word	0x4f54300a

08009698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3301      	adds	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4a13      	ldr	r2, [pc, #76]	@ (80096fc <USB_CoreReset+0x64>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d901      	bls.n	80096b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e01b      	b.n	80096ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	daf2      	bge.n	80096a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	f043 0201 	orr.w	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a09      	ldr	r2, [pc, #36]	@ (80096fc <USB_CoreReset+0x64>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e006      	b.n	80096ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d0f0      	beq.n	80096ce <USB_CoreReset+0x36>

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	00030d40 	.word	0x00030d40

08009700 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800970c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009710:	f002 fed0 	bl	800c4b4 <USBD_static_malloc>
 8009714:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d109      	bne.n	8009730 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	32b0      	adds	r2, #176	@ 0xb0
 8009726:	2100      	movs	r1, #0
 8009728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800972c:	2302      	movs	r3, #2
 800972e:	e0d4      	b.n	80098da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009730:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009734:	2100      	movs	r1, #0
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f003 fd4c 	bl	800d1d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	32b0      	adds	r2, #176	@ 0xb0
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	32b0      	adds	r2, #176	@ 0xb0
 8009756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	7c1b      	ldrb	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d138      	bne.n	80097da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009768:	4b5e      	ldr	r3, [pc, #376]	@ (80098e4 <USBD_CDC_Init+0x1e4>)
 800976a:	7819      	ldrb	r1, [r3, #0]
 800976c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009770:	2202      	movs	r2, #2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f002 fd7b 	bl	800c26e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009778:	4b5a      	ldr	r3, [pc, #360]	@ (80098e4 <USBD_CDC_Init+0x1e4>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 020f 	and.w	r2, r3, #15
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	3324      	adds	r3, #36	@ 0x24
 800978e:	2201      	movs	r2, #1
 8009790:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009792:	4b55      	ldr	r3, [pc, #340]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 8009794:	7819      	ldrb	r1, [r3, #0]
 8009796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800979a:	2202      	movs	r2, #2
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f002 fd66 	bl	800c26e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097a2:	4b51      	ldr	r3, [pc, #324]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 020f 	and.w	r2, r3, #15
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097ba:	2201      	movs	r2, #1
 80097bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097be:	4b4b      	ldr	r3, [pc, #300]	@ (80098ec <USBD_CDC_Init+0x1ec>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 020f 	and.w	r2, r3, #15
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	3326      	adds	r3, #38	@ 0x26
 80097d4:	2210      	movs	r2, #16
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	e035      	b.n	8009846 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097da:	4b42      	ldr	r3, [pc, #264]	@ (80098e4 <USBD_CDC_Init+0x1e4>)
 80097dc:	7819      	ldrb	r1, [r3, #0]
 80097de:	2340      	movs	r3, #64	@ 0x40
 80097e0:	2202      	movs	r2, #2
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f002 fd43 	bl	800c26e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097e8:	4b3e      	ldr	r3, [pc, #248]	@ (80098e4 <USBD_CDC_Init+0x1e4>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	f003 020f 	and.w	r2, r3, #15
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	3324      	adds	r3, #36	@ 0x24
 80097fe:	2201      	movs	r2, #1
 8009800:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009802:	4b39      	ldr	r3, [pc, #228]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 8009804:	7819      	ldrb	r1, [r3, #0]
 8009806:	2340      	movs	r3, #64	@ 0x40
 8009808:	2202      	movs	r2, #2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f002 fd2f 	bl	800c26e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009810:	4b35      	ldr	r3, [pc, #212]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009828:	2201      	movs	r2, #1
 800982a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800982c:	4b2f      	ldr	r3, [pc, #188]	@ (80098ec <USBD_CDC_Init+0x1ec>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f003 020f 	and.w	r2, r3, #15
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3326      	adds	r3, #38	@ 0x26
 8009842:	2210      	movs	r2, #16
 8009844:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009846:	4b29      	ldr	r3, [pc, #164]	@ (80098ec <USBD_CDC_Init+0x1ec>)
 8009848:	7819      	ldrb	r1, [r3, #0]
 800984a:	2308      	movs	r3, #8
 800984c:	2203      	movs	r2, #3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f002 fd0d 	bl	800c26e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009854:	4b25      	ldr	r3, [pc, #148]	@ (80098ec <USBD_CDC_Init+0x1ec>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 020f 	and.w	r2, r3, #15
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	440b      	add	r3, r1
 8009868:	3324      	adds	r3, #36	@ 0x24
 800986a:	2201      	movs	r2, #1
 800986c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	33b0      	adds	r3, #176	@ 0xb0
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80098a4:	2302      	movs	r3, #2
 80098a6:	e018      	b.n	80098da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7c1b      	ldrb	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098b0:	4b0d      	ldr	r3, [pc, #52]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 80098b2:	7819      	ldrb	r1, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f002 fdc4 	bl	800c44c <USBD_LL_PrepareReceive>
 80098c4:	e008      	b.n	80098d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098c6:	4b08      	ldr	r3, [pc, #32]	@ (80098e8 <USBD_CDC_Init+0x1e8>)
 80098c8:	7819      	ldrb	r1, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098d0:	2340      	movs	r3, #64	@ 0x40
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f002 fdba 	bl	800c44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000093 	.word	0x20000093
 80098e8:	20000094 	.word	0x20000094
 80098ec:	20000095 	.word	0x20000095

080098f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80098fc:	4b3a      	ldr	r3, [pc, #232]	@ (80099e8 <USBD_CDC_DeInit+0xf8>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f002 fcd9 	bl	800c2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009908:	4b37      	ldr	r3, [pc, #220]	@ (80099e8 <USBD_CDC_DeInit+0xf8>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3324      	adds	r3, #36	@ 0x24
 800991e:	2200      	movs	r2, #0
 8009920:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009922:	4b32      	ldr	r3, [pc, #200]	@ (80099ec <USBD_CDC_DeInit+0xfc>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f002 fcc6 	bl	800c2ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800992e:	4b2f      	ldr	r3, [pc, #188]	@ (80099ec <USBD_CDC_DeInit+0xfc>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 020f 	and.w	r2, r3, #15
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009946:	2200      	movs	r2, #0
 8009948:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800994a:	4b29      	ldr	r3, [pc, #164]	@ (80099f0 <USBD_CDC_DeInit+0x100>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f002 fcb2 	bl	800c2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009956:	4b26      	ldr	r3, [pc, #152]	@ (80099f0 <USBD_CDC_DeInit+0x100>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 020f 	and.w	r2, r3, #15
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	3324      	adds	r3, #36	@ 0x24
 800996c:	2200      	movs	r2, #0
 800996e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009970:	4b1f      	ldr	r3, [pc, #124]	@ (80099f0 <USBD_CDC_DeInit+0x100>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	f003 020f 	and.w	r2, r3, #15
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	440b      	add	r3, r1
 8009984:	3326      	adds	r3, #38	@ 0x26
 8009986:	2200      	movs	r2, #0
 8009988:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	32b0      	adds	r2, #176	@ 0xb0
 8009994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01f      	beq.n	80099dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	33b0      	adds	r3, #176	@ 0xb0
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32b0      	adds	r2, #176	@ 0xb0
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	4618      	mov	r0, r3
 80099c0:	f002 fd86 	bl	800c4d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32b0      	adds	r2, #176	@ 0xb0
 80099ce:	2100      	movs	r1, #0
 80099d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20000093 	.word	0x20000093
 80099ec:	20000094 	.word	0x20000094
 80099f0:	20000095 	.word	0x20000095

080099f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	32b0      	adds	r2, #176	@ 0xb0
 8009a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e0bf      	b.n	8009ba4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d050      	beq.n	8009ad2 <USBD_CDC_Setup+0xde>
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	f040 80af 	bne.w	8009b94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	88db      	ldrh	r3, [r3, #6]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d03a      	beq.n	8009ab4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da1b      	bge.n	8009a80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	33b0      	adds	r3, #176	@ 0xb0
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009a5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	88d2      	ldrh	r2, [r2, #6]
 8009a64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88db      	ldrh	r3, [r3, #6]
 8009a6a:	2b07      	cmp	r3, #7
 8009a6c:	bf28      	it	cs
 8009a6e:	2307      	movcs	r3, #7
 8009a70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	89fa      	ldrh	r2, [r7, #14]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fd41 	bl	800b500 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a7e:	e090      	b.n	8009ba2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	785a      	ldrb	r2, [r3, #1]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	88db      	ldrh	r3, [r3, #6]
 8009a8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009a90:	d803      	bhi.n	8009a9a <USBD_CDC_Setup+0xa6>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	88db      	ldrh	r3, [r3, #6]
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	e000      	b.n	8009a9c <USBD_CDC_Setup+0xa8>
 8009a9a:	2240      	movs	r2, #64	@ 0x40
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009aa2:	6939      	ldr	r1, [r7, #16]
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 fd53 	bl	800b558 <USBD_CtlPrepareRx>
      break;
 8009ab2:	e076      	b.n	8009ba2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	33b0      	adds	r3, #176	@ 0xb0
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	7850      	ldrb	r0, [r2, #1]
 8009aca:	2200      	movs	r2, #0
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	4798      	blx	r3
      break;
 8009ad0:	e067      	b.n	8009ba2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b0b      	cmp	r3, #11
 8009ad8:	d851      	bhi.n	8009b7e <USBD_CDC_Setup+0x18a>
 8009ada:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <USBD_CDC_Setup+0xec>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b11 	.word	0x08009b11
 8009ae4:	08009b8d 	.word	0x08009b8d
 8009ae8:	08009b7f 	.word	0x08009b7f
 8009aec:	08009b7f 	.word	0x08009b7f
 8009af0:	08009b7f 	.word	0x08009b7f
 8009af4:	08009b7f 	.word	0x08009b7f
 8009af8:	08009b7f 	.word	0x08009b7f
 8009afc:	08009b7f 	.word	0x08009b7f
 8009b00:	08009b7f 	.word	0x08009b7f
 8009b04:	08009b7f 	.word	0x08009b7f
 8009b08:	08009b3b 	.word	0x08009b3b
 8009b0c:	08009b65 	.word	0x08009b65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d107      	bne.n	8009b2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b1c:	f107 030a 	add.w	r3, r7, #10
 8009b20:	2202      	movs	r2, #2
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fceb 	bl	800b500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b2a:	e032      	b.n	8009b92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fc75 	bl	800b41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	75fb      	strb	r3, [r7, #23]
          break;
 8009b38:	e02b      	b.n	8009b92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d107      	bne.n	8009b56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b46:	f107 030d 	add.w	r3, r7, #13
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fcd6 	bl	800b500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b54:	e01d      	b.n	8009b92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 fc60 	bl	800b41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	75fb      	strb	r3, [r7, #23]
          break;
 8009b62:	e016      	b.n	8009b92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d00f      	beq.n	8009b90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f001 fc53 	bl	800b41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b7c:	e008      	b.n	8009b90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 fc4c 	bl	800b41e <USBD_CtlError>
          ret = USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	75fb      	strb	r3, [r7, #23]
          break;
 8009b8a:	e002      	b.n	8009b92 <USBD_CDC_Setup+0x19e>
          break;
 8009b8c:	bf00      	nop
 8009b8e:	e008      	b.n	8009ba2 <USBD_CDC_Setup+0x1ae>
          break;
 8009b90:	bf00      	nop
      }
      break;
 8009b92:	e006      	b.n	8009ba2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 fc41 	bl	800b41e <USBD_CtlError>
      ret = USBD_FAIL;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32b0      	adds	r2, #176	@ 0xb0
 8009bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e065      	b.n	8009ca2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	32b0      	adds	r2, #176	@ 0xb0
 8009be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3318      	adds	r3, #24
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d02f      	beq.n	8009c60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	f003 020f 	and.w	r2, r3, #15
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	3318      	adds	r3, #24
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	f003 010f 	and.w	r1, r3, #15
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	440b      	add	r3, r1
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4403      	add	r3, r0
 8009c28:	3348      	adds	r3, #72	@ 0x48
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c30:	fb01 f303 	mul.w	r3, r1, r3
 8009c34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d112      	bne.n	8009c60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	f003 020f 	and.w	r2, r3, #15
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3318      	adds	r3, #24
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c52:	78f9      	ldrb	r1, [r7, #3]
 8009c54:	2300      	movs	r3, #0
 8009c56:	2200      	movs	r2, #0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f002 fbd6 	bl	800c40a <USBD_LL_Transmit>
 8009c5e:	e01f      	b.n	8009ca0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	33b0      	adds	r3, #176	@ 0xb0
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d010      	beq.n	8009ca0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	33b0      	adds	r3, #176	@ 0xb0
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	32b0      	adds	r2, #176	@ 0xb0
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	32b0      	adds	r2, #176	@ 0xb0
 8009cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e01a      	b.n	8009d12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f002 fbd4 	bl	800c48e <USBD_LL_GetRxDataSize>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	33b0      	adds	r3, #176	@ 0xb0
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	32b0      	adds	r2, #176	@ 0xb0
 8009d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e024      	b.n	8009d86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	33b0      	adds	r3, #176	@ 0xb0
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d019      	beq.n	8009d84 <USBD_CDC_EP0_RxReady+0x6a>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009d56:	2bff      	cmp	r3, #255	@ 0xff
 8009d58:	d014      	beq.n	8009d84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	33b0      	adds	r3, #176	@ 0xb0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009d72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	22ff      	movs	r2, #255	@ 0xff
 8009d80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d98:	2182      	movs	r1, #130	@ 0x82
 8009d9a:	4818      	ldr	r0, [pc, #96]	@ (8009dfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d9c:	f000 fd09 	bl	800a7b2 <USBD_GetEpDesc>
 8009da0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009da2:	2101      	movs	r1, #1
 8009da4:	4815      	ldr	r0, [pc, #84]	@ (8009dfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009da6:	f000 fd04 	bl	800a7b2 <USBD_GetEpDesc>
 8009daa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009dac:	2181      	movs	r1, #129	@ 0x81
 8009dae:	4813      	ldr	r0, [pc, #76]	@ (8009dfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009db0:	f000 fcff 	bl	800a7b2 <USBD_GetEpDesc>
 8009db4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2210      	movs	r2, #16
 8009dc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dd0:	711a      	strb	r2, [r3, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009de4:	711a      	strb	r2, [r3, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2243      	movs	r2, #67	@ 0x43
 8009dee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000050 	.word	0x20000050

08009e00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e08:	2182      	movs	r1, #130	@ 0x82
 8009e0a:	4818      	ldr	r0, [pc, #96]	@ (8009e6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e0c:	f000 fcd1 	bl	800a7b2 <USBD_GetEpDesc>
 8009e10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e12:	2101      	movs	r1, #1
 8009e14:	4815      	ldr	r0, [pc, #84]	@ (8009e6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e16:	f000 fccc 	bl	800a7b2 <USBD_GetEpDesc>
 8009e1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e1c:	2181      	movs	r1, #129	@ 0x81
 8009e1e:	4813      	ldr	r0, [pc, #76]	@ (8009e6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e20:	f000 fcc7 	bl	800a7b2 <USBD_GetEpDesc>
 8009e24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2210      	movs	r2, #16
 8009e30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d006      	beq.n	8009e46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	711a      	strb	r2, [r3, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f042 0202 	orr.w	r2, r2, #2
 8009e44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d006      	beq.n	8009e5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	711a      	strb	r2, [r3, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f042 0202 	orr.w	r2, r2, #2
 8009e58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2243      	movs	r2, #67	@ 0x43
 8009e5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e60:	4b02      	ldr	r3, [pc, #8]	@ (8009e6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20000050 	.word	0x20000050

08009e70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e78:	2182      	movs	r1, #130	@ 0x82
 8009e7a:	4818      	ldr	r0, [pc, #96]	@ (8009edc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e7c:	f000 fc99 	bl	800a7b2 <USBD_GetEpDesc>
 8009e80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e82:	2101      	movs	r1, #1
 8009e84:	4815      	ldr	r0, [pc, #84]	@ (8009edc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e86:	f000 fc94 	bl	800a7b2 <USBD_GetEpDesc>
 8009e8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e8c:	2181      	movs	r1, #129	@ 0x81
 8009e8e:	4813      	ldr	r0, [pc, #76]	@ (8009edc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e90:	f000 fc8f 	bl	800a7b2 <USBD_GetEpDesc>
 8009e94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2210      	movs	r2, #16
 8009ea0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d006      	beq.n	8009eb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009eb0:	711a      	strb	r2, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d006      	beq.n	8009eca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ec4:	711a      	strb	r2, [r3, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2243      	movs	r2, #67	@ 0x43
 8009ece:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ed0:	4b02      	ldr	r3, [pc, #8]	@ (8009edc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000050 	.word	0x20000050

08009ee0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220a      	movs	r2, #10
 8009eec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009eee:	4b03      	ldr	r3, [pc, #12]	@ (8009efc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	2000000c 	.word	0x2000000c

08009f00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e009      	b.n	8009f28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	33b0      	adds	r3, #176	@ 0xb0
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	32b0      	adds	r2, #176	@ 0xb0
 8009f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e008      	b.n	8009f6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	32b0      	adds	r2, #176	@ 0xb0
 8009f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e004      	b.n	8009fa6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
	...

08009fb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32b0      	adds	r2, #176	@ 0xb0
 8009fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32b0      	adds	r2, #176	@ 0xb0
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e018      	b.n	800a014 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	7c1b      	ldrb	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <USBD_CDC_ReceivePacket+0x68>)
 8009fec:	7819      	ldrb	r1, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f002 fa27 	bl	800c44c <USBD_LL_PrepareReceive>
 8009ffe:	e008      	b.n	800a012 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <USBD_CDC_ReceivePacket+0x68>)
 800a002:	7819      	ldrb	r1, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a00a:	2340      	movs	r3, #64	@ 0x40
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f002 fa1d 	bl	800c44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000094 	.word	0x20000094

0800a020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a034:	2303      	movs	r3, #3
 800a036:	e01f      	b.n	800a078 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	79fa      	ldrb	r2, [r7, #7]
 800a06a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f002 f897 	bl	800c1a0 <USBD_LL_Init>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	e025      	b.n	800a0e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	32ae      	adds	r2, #174	@ 0xae
 800a0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00f      	beq.n	800a0d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	32ae      	adds	r2, #174	@ 0xae
 800a0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	f107 020e 	add.w	r2, r7, #14
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 f89f 	bl	800c238 <USBD_LL_Start>
 800a0fa:	4603      	mov	r3, r0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	4611      	mov	r1, r2
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	4611      	mov	r1, r2
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a178:	2303      	movs	r3, #3
 800a17a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 f906 	bl	800b3aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1ba:	f003 031f 	and.w	r3, r3, #31
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d01a      	beq.n	800a1f8 <USBD_LL_SetupStage+0x72>
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d822      	bhi.n	800a20c <USBD_LL_SetupStage+0x86>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <USBD_LL_SetupStage+0x4a>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d00a      	beq.n	800a1e4 <USBD_LL_SetupStage+0x5e>
 800a1ce:	e01d      	b.n	800a20c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fb5d 	bl	800a898 <USBD_StdDevReq>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e2:	e020      	b.n	800a226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fbc5 	bl	800a97c <USBD_StdItfReq>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f6:	e016      	b.n	800a226 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fc27 	bl	800aa54 <USBD_StdEPReq>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
      break;
 800a20a:	e00c      	b.n	800a226 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a212:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a216:	b2db      	uxtb	r3, r3
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f002 f86c 	bl	800c2f8 <USBD_LL_StallEP>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
      break;
 800a224:	bf00      	nop
  }

  return ret;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	460b      	mov	r3, r1
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a242:	7afb      	ldrb	r3, [r7, #11]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d16e      	bne.n	800a326 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a24e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a256:	2b03      	cmp	r3, #3
 800a258:	f040 8098 	bne.w	800a38c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	429a      	cmp	r2, r3
 800a266:	d913      	bls.n	800a290 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	4293      	cmp	r3, r2
 800a280:	bf28      	it	cs
 800a282:	4613      	movcs	r3, r2
 800a284:	461a      	mov	r2, r3
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f001 f982 	bl	800b592 <USBD_CtlContinueRx>
 800a28e:	e07d      	b.n	800a38c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d014      	beq.n	800a2c8 <USBD_LL_DataOutStage+0x98>
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d81d      	bhi.n	800a2de <USBD_LL_DataOutStage+0xae>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <USBD_LL_DataOutStage+0x7c>
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d003      	beq.n	800a2b2 <USBD_LL_DataOutStage+0x82>
 800a2aa:	e018      	b.n	800a2de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	75bb      	strb	r3, [r7, #22]
            break;
 800a2b0:	e018      	b.n	800a2e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fa5e 	bl	800a77e <USBD_CoreFindIF>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a2c6:	e00d      	b.n	800a2e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fa60 	bl	800a798 <USBD_CoreFindEP>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75bb      	strb	r3, [r7, #22]
            break;
 800a2dc:	e002      	b.n	800a2e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	75bb      	strb	r3, [r7, #22]
            break;
 800a2e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2e4:	7dbb      	ldrb	r3, [r7, #22]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d119      	bne.n	800a31e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d113      	bne.n	800a31e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2f6:	7dba      	ldrb	r2, [r7, #22]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	32ae      	adds	r2, #174	@ 0xae
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a306:	7dba      	ldrb	r2, [r7, #22]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a30e:	7dba      	ldrb	r2, [r7, #22]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	32ae      	adds	r2, #174	@ 0xae
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 f948 	bl	800b5b4 <USBD_CtlSendStatus>
 800a324:	e032      	b.n	800a38c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a326:	7afb      	ldrb	r3, [r7, #11]
 800a328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	4619      	mov	r1, r3
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fa31 	bl	800a798 <USBD_CoreFindEP>
 800a336:	4603      	mov	r3, r0
 800a338:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a33a:	7dbb      	ldrb	r3, [r7, #22]
 800a33c:	2bff      	cmp	r3, #255	@ 0xff
 800a33e:	d025      	beq.n	800a38c <USBD_LL_DataOutStage+0x15c>
 800a340:	7dbb      	ldrb	r3, [r7, #22]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d122      	bne.n	800a38c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d117      	bne.n	800a382 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a352:	7dba      	ldrb	r2, [r7, #22]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	32ae      	adds	r2, #174	@ 0xae
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00f      	beq.n	800a382 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a362:	7dba      	ldrb	r2, [r7, #22]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a36a:	7dba      	ldrb	r2, [r7, #22]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	32ae      	adds	r2, #174	@ 0xae
 800a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	7afa      	ldrb	r2, [r7, #11]
 800a378:	4611      	mov	r1, r2
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	4798      	blx	r3
 800a37e:	4603      	mov	r3, r0
 800a380:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	e000      	b.n	800a38e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b086      	sub	sp, #24
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d16f      	bne.n	800a48a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3314      	adds	r3, #20
 800a3ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d15a      	bne.n	800a470 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d914      	bls.n	800a3f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f001 f8aa 	bl	800b536 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f002 f82f 	bl	800c44c <USBD_LL_PrepareReceive>
 800a3ee:	e03f      	b.n	800a470 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	68da      	ldr	r2, [r3, #12]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d11c      	bne.n	800a436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a404:	429a      	cmp	r2, r3
 800a406:	d316      	bcc.n	800a436 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a412:	429a      	cmp	r2, r3
 800a414:	d20f      	bcs.n	800a436 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f001 f88b 	bl	800b536 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a428:	2300      	movs	r3, #0
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f002 f80c 	bl	800c44c <USBD_LL_PrepareReceive>
 800a434:	e01c      	b.n	800a470 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d10f      	bne.n	800a462 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a462:	2180      	movs	r1, #128	@ 0x80
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f001 ff47 	bl	800c2f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f001 f8b5 	bl	800b5da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d03a      	beq.n	800a4f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fe42 	bl	800a104 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a488:	e032      	b.n	800a4f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a490:	b2db      	uxtb	r3, r3
 800a492:	4619      	mov	r1, r3
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f97f 	bl	800a798 <USBD_CoreFindEP>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	2bff      	cmp	r3, #255	@ 0xff
 800a4a2:	d025      	beq.n	800a4f0 <USBD_LL_DataInStage+0x15a>
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d122      	bne.n	800a4f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d11c      	bne.n	800a4f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4b6:	7dfa      	ldrb	r2, [r7, #23]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	32ae      	adds	r2, #174	@ 0xae
 800a4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d014      	beq.n	800a4f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4c6:	7dfa      	ldrb	r2, [r7, #23]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4ce:	7dfa      	ldrb	r2, [r7, #23]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	32ae      	adds	r2, #174	@ 0xae
 800a4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	7afa      	ldrb	r2, [r7, #11]
 800a4dc:	4611      	mov	r1, r2
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	4798      	blx	r3
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4e6:	7dbb      	ldrb	r3, [r7, #22]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4ec:	7dbb      	ldrb	r3, [r7, #22]
 800a4ee:	e000      	b.n	800a4f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d014      	beq.n	800a560 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00e      	beq.n	800a560 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	6852      	ldr	r2, [r2, #4]
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	4611      	mov	r1, r2
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a560:	2340      	movs	r3, #64	@ 0x40
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fe81 	bl	800c26e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2240      	movs	r2, #64	@ 0x40
 800a578:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a57c:	2340      	movs	r3, #64	@ 0x40
 800a57e:	2200      	movs	r2, #0
 800a580:	2180      	movs	r1, #128	@ 0x80
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fe73 	bl	800c26e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2240      	movs	r2, #64	@ 0x40
 800a592:	621a      	str	r2, [r3, #32]

  return ret;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	78fa      	ldrb	r2, [r7, #3]
 800a5ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2204      	movs	r2, #4
 800a5d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d106      	bne.n	800a60c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a604:	b2da      	uxtb	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d110      	bne.n	800a650 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b082      	sub	sp, #8
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	32ae      	adds	r2, #174	@ 0xae
 800a670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	e01c      	b.n	800a6b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b03      	cmp	r3, #3
 800a686:	d115      	bne.n	800a6b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	32ae      	adds	r2, #174	@ 0xae
 800a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00b      	beq.n	800a6b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	32ae      	adds	r2, #174	@ 0xae
 800a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	32ae      	adds	r2, #174	@ 0xae
 800a6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e01c      	b.n	800a71a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d115      	bne.n	800a718 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	32ae      	adds	r2, #174	@ 0xae
 800a6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	@ 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	78fa      	ldrb	r2, [r7, #3]
 800a712:	4611      	mov	r1, r2
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00e      	beq.n	800a774 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6852      	ldr	r2, [r2, #4]
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	4611      	mov	r1, r2
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a770:	2303      	movs	r3, #3
 800a772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a78a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	7812      	ldrb	r2, [r2, #0]
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d91f      	bls.n	800a818 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7de:	e013      	b.n	800a808 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7e0:	f107 030a 	add.w	r3, r7, #10
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6978      	ldr	r0, [r7, #20]
 800a7e8:	f000 f81b 	bl	800a822 <USBD_GetNextDesc>
 800a7ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d108      	bne.n	800a808 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	789b      	ldrb	r3, [r3, #2]
 800a7fe:	78fa      	ldrb	r2, [r7, #3]
 800a800:	429a      	cmp	r2, r3
 800a802:	d008      	beq.n	800a816 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	885b      	ldrh	r3, [r3, #2]
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	897b      	ldrh	r3, [r7, #10]
 800a810:	429a      	cmp	r2, r3
 800a812:	d8e5      	bhi.n	800a7e0 <USBD_GetEpDesc+0x2e>
 800a814:	e000      	b.n	800a818 <USBD_GetEpDesc+0x66>
          break;
 800a816:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a818:	693b      	ldr	r3, [r7, #16]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a822:	b480      	push	{r7}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	4413      	add	r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a84c:	68fb      	ldr	r3, [r7, #12]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b087      	sub	sp, #28
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	3301      	adds	r3, #1
 800a870:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a878:	8a3b      	ldrh	r3, [r7, #16]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	b21a      	sxth	r2, r3
 800a87e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a882:	4313      	orrs	r3, r2
 800a884:	b21b      	sxth	r3, r3
 800a886:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a888:	89fb      	ldrh	r3, [r7, #14]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8ae:	2b40      	cmp	r3, #64	@ 0x40
 800a8b0:	d005      	beq.n	800a8be <USBD_StdDevReq+0x26>
 800a8b2:	2b40      	cmp	r3, #64	@ 0x40
 800a8b4:	d857      	bhi.n	800a966 <USBD_StdDevReq+0xce>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00f      	beq.n	800a8da <USBD_StdDevReq+0x42>
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d153      	bne.n	800a966 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	32ae      	adds	r2, #174	@ 0xae
 800a8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d8:	e04a      	b.n	800a970 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	785b      	ldrb	r3, [r3, #1]
 800a8de:	2b09      	cmp	r3, #9
 800a8e0:	d83b      	bhi.n	800a95a <USBD_StdDevReq+0xc2>
 800a8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e8 <USBD_StdDevReq+0x50>)
 800a8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a951 	.word	0x0800a951
 800a8f0:	0800a95b 	.word	0x0800a95b
 800a8f4:	0800a947 	.word	0x0800a947
 800a8f8:	0800a95b 	.word	0x0800a95b
 800a8fc:	0800a91b 	.word	0x0800a91b
 800a900:	0800a911 	.word	0x0800a911
 800a904:	0800a95b 	.word	0x0800a95b
 800a908:	0800a933 	.word	0x0800a933
 800a90c:	0800a925 	.word	0x0800a925
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fa3c 	bl	800ad90 <USBD_GetDescriptor>
          break;
 800a918:	e024      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fba1 	bl	800b064 <USBD_SetAddress>
          break;
 800a922:	e01f      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fbe0 	bl	800b0ec <USBD_SetConfig>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
          break;
 800a930:	e018      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc83 	bl	800b240 <USBD_GetConfig>
          break;
 800a93a:	e013      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fcb4 	bl	800b2ac <USBD_GetStatus>
          break;
 800a944:	e00e      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fce3 	bl	800b314 <USBD_SetFeature>
          break;
 800a94e:	e009      	b.n	800a964 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fd07 	bl	800b366 <USBD_ClrFeature>
          break;
 800a958:	e004      	b.n	800a964 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fd5e 	bl	800b41e <USBD_CtlError>
          break;
 800a962:	bf00      	nop
      }
      break;
 800a964:	e004      	b.n	800a970 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fd58 	bl	800b41e <USBD_CtlError>
      break;
 800a96e:	bf00      	nop
  }

  return ret;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop

0800a97c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a992:	2b40      	cmp	r3, #64	@ 0x40
 800a994:	d005      	beq.n	800a9a2 <USBD_StdItfReq+0x26>
 800a996:	2b40      	cmp	r3, #64	@ 0x40
 800a998:	d852      	bhi.n	800aa40 <USBD_StdItfReq+0xc4>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <USBD_StdItfReq+0x26>
 800a99e:	2b20      	cmp	r3, #32
 800a9a0:	d14e      	bne.n	800aa40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d840      	bhi.n	800aa32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	889b      	ldrh	r3, [r3, #4]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d836      	bhi.n	800aa28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	889b      	ldrh	r3, [r3, #4]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff fedb 	bl	800a77e <USBD_CoreFindIF>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2bff      	cmp	r3, #255	@ 0xff
 800a9d0:	d01d      	beq.n	800aa0e <USBD_StdItfReq+0x92>
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d11a      	bne.n	800aa0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9d8:	7bba      	ldrb	r2, [r7, #14]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	32ae      	adds	r2, #174	@ 0xae
 800a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00f      	beq.n	800aa08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9e8:	7bba      	ldrb	r2, [r7, #14]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9f0:	7bba      	ldrb	r2, [r7, #14]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32ae      	adds	r2, #174	@ 0xae
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	4798      	blx	r3
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa06:	e004      	b.n	800aa12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa0c:	e001      	b.n	800aa12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	88db      	ldrh	r3, [r3, #6]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d110      	bne.n	800aa3c <USBD_StdItfReq+0xc0>
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10d      	bne.n	800aa3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fdc7 	bl	800b5b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa26:	e009      	b.n	800aa3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fcf7 	bl	800b41e <USBD_CtlError>
          break;
 800aa30:	e004      	b.n	800aa3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fcf2 	bl	800b41e <USBD_CtlError>
          break;
 800aa3a:	e000      	b.n	800aa3e <USBD_StdItfReq+0xc2>
          break;
 800aa3c:	bf00      	nop
      }
      break;
 800aa3e:	e004      	b.n	800aa4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fceb 	bl	800b41e <USBD_CtlError>
      break;
 800aa48:	bf00      	nop
  }

  return ret;
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	889b      	ldrh	r3, [r3, #4]
 800aa66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa70:	2b40      	cmp	r3, #64	@ 0x40
 800aa72:	d007      	beq.n	800aa84 <USBD_StdEPReq+0x30>
 800aa74:	2b40      	cmp	r3, #64	@ 0x40
 800aa76:	f200 817f 	bhi.w	800ad78 <USBD_StdEPReq+0x324>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d02a      	beq.n	800aad4 <USBD_StdEPReq+0x80>
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	f040 817a 	bne.w	800ad78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fe85 	bl	800a798 <USBD_CoreFindEP>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa92:	7b7b      	ldrb	r3, [r7, #13]
 800aa94:	2bff      	cmp	r3, #255	@ 0xff
 800aa96:	f000 8174 	beq.w	800ad82 <USBD_StdEPReq+0x32e>
 800aa9a:	7b7b      	ldrb	r3, [r7, #13]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f040 8170 	bne.w	800ad82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aaa2:	7b7a      	ldrb	r2, [r7, #13]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	32ae      	adds	r2, #174	@ 0xae
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8163 	beq.w	800ad82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aabc:	7b7a      	ldrb	r2, [r7, #13]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	@ 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aad2:	e156      	b.n	800ad82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d008      	beq.n	800aaee <USBD_StdEPReq+0x9a>
 800aadc:	2b03      	cmp	r3, #3
 800aade:	f300 8145 	bgt.w	800ad6c <USBD_StdEPReq+0x318>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 809b 	beq.w	800ac1e <USBD_StdEPReq+0x1ca>
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d03c      	beq.n	800ab66 <USBD_StdEPReq+0x112>
 800aaec:	e13e      	b.n	800ad6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d002      	beq.n	800ab00 <USBD_StdEPReq+0xac>
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d016      	beq.n	800ab2c <USBD_StdEPReq+0xd8>
 800aafe:	e02c      	b.n	800ab5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00d      	beq.n	800ab22 <USBD_StdEPReq+0xce>
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	2b80      	cmp	r3, #128	@ 0x80
 800ab0a:	d00a      	beq.n	800ab22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f001 fbf1 	bl	800c2f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab16:	2180      	movs	r1, #128	@ 0x80
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 fbed 	bl	800c2f8 <USBD_LL_StallEP>
 800ab1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab20:	e020      	b.n	800ab64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fc7a 	bl	800b41e <USBD_CtlError>
              break;
 800ab2a:	e01b      	b.n	800ab64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	885b      	ldrh	r3, [r3, #2]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10e      	bne.n	800ab52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <USBD_StdEPReq+0xfe>
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
 800ab3c:	2b80      	cmp	r3, #128	@ 0x80
 800ab3e:	d008      	beq.n	800ab52 <USBD_StdEPReq+0xfe>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	88db      	ldrh	r3, [r3, #6]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d104      	bne.n	800ab52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 fbd3 	bl	800c2f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fd2e 	bl	800b5b4 <USBD_CtlSendStatus>

              break;
 800ab58:	e004      	b.n	800ab64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fc5e 	bl	800b41e <USBD_CtlError>
              break;
 800ab62:	bf00      	nop
          }
          break;
 800ab64:	e107      	b.n	800ad76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d002      	beq.n	800ab78 <USBD_StdEPReq+0x124>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d016      	beq.n	800aba4 <USBD_StdEPReq+0x150>
 800ab76:	e04b      	b.n	800ac10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00d      	beq.n	800ab9a <USBD_StdEPReq+0x146>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	2b80      	cmp	r3, #128	@ 0x80
 800ab82:	d00a      	beq.n	800ab9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 fbb5 	bl	800c2f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab8e:	2180      	movs	r1, #128	@ 0x80
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fbb1 	bl	800c2f8 <USBD_LL_StallEP>
 800ab96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab98:	e040      	b.n	800ac1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fc3e 	bl	800b41e <USBD_CtlError>
              break;
 800aba2:	e03b      	b.n	800ac1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d136      	bne.n	800ac1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 fbbb 	bl	800c336 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fcf7 	bl	800b5b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff fde4 	bl	800a798 <USBD_CoreFindEP>
 800abd0:	4603      	mov	r3, r0
 800abd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abd4:	7b7b      	ldrb	r3, [r7, #13]
 800abd6:	2bff      	cmp	r3, #255	@ 0xff
 800abd8:	d01f      	beq.n	800ac1a <USBD_StdEPReq+0x1c6>
 800abda:	7b7b      	ldrb	r3, [r7, #13]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11c      	bne.n	800ac1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800abe0:	7b7a      	ldrb	r2, [r7, #13]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abe8:	7b7a      	ldrb	r2, [r7, #13]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	@ 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d010      	beq.n	800ac1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abf8:	7b7a      	ldrb	r2, [r7, #13]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	32ae      	adds	r2, #174	@ 0xae
 800abfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	4798      	blx	r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac0e:	e004      	b.n	800ac1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fc03 	bl	800b41e <USBD_CtlError>
              break;
 800ac18:	e000      	b.n	800ac1c <USBD_StdEPReq+0x1c8>
              break;
 800ac1a:	bf00      	nop
          }
          break;
 800ac1c:	e0ab      	b.n	800ad76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d002      	beq.n	800ac30 <USBD_StdEPReq+0x1dc>
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d032      	beq.n	800ac94 <USBD_StdEPReq+0x240>
 800ac2e:	e097      	b.n	800ad60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <USBD_StdEPReq+0x1f2>
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b80      	cmp	r3, #128	@ 0x80
 800ac3a:	d004      	beq.n	800ac46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fbed 	bl	800b41e <USBD_CtlError>
                break;
 800ac44:	e091      	b.n	800ad6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	da0b      	bge.n	800ac66 <USBD_StdEPReq+0x212>
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4413      	add	r3, r2
 800ac62:	3304      	adds	r3, #4
 800ac64:	e00b      	b.n	800ac7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fc37 	bl	800b500 <USBD_CtlSendData>
              break;
 800ac92:	e06a      	b.n	800ad6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da11      	bge.n	800acc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	3324      	adds	r3, #36	@ 0x24
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d117      	bne.n	800ace6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fbb0 	bl	800b41e <USBD_CtlError>
                  break;
 800acbe:	e054      	b.n	800ad6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	f003 020f 	and.w	r2, r3, #15
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb9d 	bl	800b41e <USBD_CtlError>
                  break;
 800ace4:	e041      	b.n	800ad6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ace6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	da0b      	bge.n	800ad06 <USBD_StdEPReq+0x2b2>
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	3310      	adds	r3, #16
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	3304      	adds	r3, #4
 800ad04:	e00b      	b.n	800ad1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <USBD_StdEPReq+0x2d8>
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b80      	cmp	r3, #128	@ 0x80
 800ad2a:	d103      	bne.n	800ad34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e00e      	b.n	800ad52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fb1b 	bl	800c374 <USBD_LL_IsStallEP>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2201      	movs	r2, #1
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2202      	movs	r2, #2
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fbd1 	bl	800b500 <USBD_CtlSendData>
              break;
 800ad5e:	e004      	b.n	800ad6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb5b 	bl	800b41e <USBD_CtlError>
              break;
 800ad68:	bf00      	nop
          }
          break;
 800ad6a:	e004      	b.n	800ad76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fb55 	bl	800b41e <USBD_CtlError>
          break;
 800ad74:	bf00      	nop
      }
      break;
 800ad76:	e005      	b.n	800ad84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fb4f 	bl	800b41e <USBD_CtlError>
      break;
 800ad80:	e000      	b.n	800ad84 <USBD_StdEPReq+0x330>
      break;
 800ad82:	bf00      	nop
  }

  return ret;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	885b      	ldrh	r3, [r3, #2]
 800adaa:	0a1b      	lsrs	r3, r3, #8
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	2b06      	cmp	r3, #6
 800adb2:	f200 8128 	bhi.w	800b006 <USBD_GetDescriptor+0x276>
 800adb6:	a201      	add	r2, pc, #4	@ (adr r2, 800adbc <USBD_GetDescriptor+0x2c>)
 800adb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbc:	0800add9 	.word	0x0800add9
 800adc0:	0800adf1 	.word	0x0800adf1
 800adc4:	0800ae31 	.word	0x0800ae31
 800adc8:	0800b007 	.word	0x0800b007
 800adcc:	0800b007 	.word	0x0800b007
 800add0:	0800afa7 	.word	0x0800afa7
 800add4:	0800afd3 	.word	0x0800afd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	7c12      	ldrb	r2, [r2, #16]
 800ade4:	f107 0108 	add.w	r1, r7, #8
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	60f8      	str	r0, [r7, #12]
      break;
 800adee:	e112      	b.n	800b016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	7c1b      	ldrb	r3, [r3, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10d      	bne.n	800ae14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae00:	f107 0208 	add.w	r2, r7, #8
 800ae04:	4610      	mov	r0, r2
 800ae06:	4798      	blx	r3
 800ae08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	2202      	movs	r2, #2
 800ae10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae12:	e100      	b.n	800b016 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1c:	f107 0208 	add.w	r2, r7, #8
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	701a      	strb	r2, [r3, #0]
      break;
 800ae2e:	e0f2      	b.n	800b016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	885b      	ldrh	r3, [r3, #2]
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	f200 80ac 	bhi.w	800af94 <USBD_GetDescriptor+0x204>
 800ae3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae44 <USBD_GetDescriptor+0xb4>)
 800ae3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae42:	bf00      	nop
 800ae44:	0800ae5d 	.word	0x0800ae5d
 800ae48:	0800ae91 	.word	0x0800ae91
 800ae4c:	0800aec5 	.word	0x0800aec5
 800ae50:	0800aef9 	.word	0x0800aef9
 800ae54:	0800af2d 	.word	0x0800af2d
 800ae58:	0800af61 	.word	0x0800af61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	7c12      	ldrb	r2, [r2, #16]
 800ae74:	f107 0108 	add.w	r1, r7, #8
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7e:	e091      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 facb 	bl	800b41e <USBD_CtlError>
            err++;
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8e:	e089      	b.n	800afa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	7c12      	ldrb	r2, [r2, #16]
 800aea8:	f107 0108 	add.w	r1, r7, #8
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb2:	e077      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fab1 	bl	800b41e <USBD_CtlError>
            err++;
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	3301      	adds	r3, #1
 800aec0:	72fb      	strb	r3, [r7, #11]
          break;
 800aec2:	e06f      	b.n	800afa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00b      	beq.n	800aee8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	7c12      	ldrb	r2, [r2, #16]
 800aedc:	f107 0108 	add.w	r1, r7, #8
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
 800aee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee6:	e05d      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fa97 	bl	800b41e <USBD_CtlError>
            err++;
 800aef0:	7afb      	ldrb	r3, [r7, #11]
 800aef2:	3301      	adds	r3, #1
 800aef4:	72fb      	strb	r3, [r7, #11]
          break;
 800aef6:	e055      	b.n	800afa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00b      	beq.n	800af1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	7c12      	ldrb	r2, [r2, #16]
 800af10:	f107 0108 	add.w	r1, r7, #8
 800af14:	4610      	mov	r0, r2
 800af16:	4798      	blx	r3
 800af18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1a:	e043      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fa7d 	bl	800b41e <USBD_CtlError>
            err++;
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	3301      	adds	r3, #1
 800af28:	72fb      	strb	r3, [r7, #11]
          break;
 800af2a:	e03b      	b.n	800afa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	7c12      	ldrb	r2, [r2, #16]
 800af44:	f107 0108 	add.w	r1, r7, #8
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4e:	e029      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fa63 	bl	800b41e <USBD_CtlError>
            err++;
 800af58:	7afb      	ldrb	r3, [r7, #11]
 800af5a:	3301      	adds	r3, #1
 800af5c:	72fb      	strb	r3, [r7, #11]
          break;
 800af5e:	e021      	b.n	800afa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	7c12      	ldrb	r2, [r2, #16]
 800af78:	f107 0108 	add.w	r1, r7, #8
 800af7c:	4610      	mov	r0, r2
 800af7e:	4798      	blx	r3
 800af80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af82:	e00f      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa49 	bl	800b41e <USBD_CtlError>
            err++;
 800af8c:	7afb      	ldrb	r3, [r7, #11]
 800af8e:	3301      	adds	r3, #1
 800af90:	72fb      	strb	r3, [r7, #11]
          break;
 800af92:	e007      	b.n	800afa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa41 	bl	800b41e <USBD_CtlError>
          err++;
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	3301      	adds	r3, #1
 800afa0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800afa2:	bf00      	nop
      }
      break;
 800afa4:	e037      	b.n	800b016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	7c1b      	ldrb	r3, [r3, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d109      	bne.n	800afc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb6:	f107 0208 	add.w	r2, r7, #8
 800afba:	4610      	mov	r0, r2
 800afbc:	4798      	blx	r3
 800afbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afc0:	e029      	b.n	800b016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fa2a 	bl	800b41e <USBD_CtlError>
        err++;
 800afca:	7afb      	ldrb	r3, [r7, #11]
 800afcc:	3301      	adds	r3, #1
 800afce:	72fb      	strb	r3, [r7, #11]
      break;
 800afd0:	e021      	b.n	800b016 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	7c1b      	ldrb	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10d      	bne.n	800aff6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	f107 0208 	add.w	r2, r7, #8
 800afe6:	4610      	mov	r0, r2
 800afe8:	4798      	blx	r3
 800afea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
 800aff0:	2207      	movs	r2, #7
 800aff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aff4:	e00f      	b.n	800b016 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa10 	bl	800b41e <USBD_CtlError>
        err++;
 800affe:	7afb      	ldrb	r3, [r7, #11]
 800b000:	3301      	adds	r3, #1
 800b002:	72fb      	strb	r3, [r7, #11]
      break;
 800b004:	e007      	b.n	800b016 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa08 	bl	800b41e <USBD_CtlError>
      err++;
 800b00e:	7afb      	ldrb	r3, [r7, #11]
 800b010:	3301      	adds	r3, #1
 800b012:	72fb      	strb	r3, [r7, #11]
      break;
 800b014:	bf00      	nop
  }

  if (err != 0U)
 800b016:	7afb      	ldrb	r3, [r7, #11]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d11e      	bne.n	800b05a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	88db      	ldrh	r3, [r3, #6]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d016      	beq.n	800b052 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b024:	893b      	ldrh	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00e      	beq.n	800b048 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	88da      	ldrh	r2, [r3, #6]
 800b02e:	893b      	ldrh	r3, [r7, #8]
 800b030:	4293      	cmp	r3, r2
 800b032:	bf28      	it	cs
 800b034:	4613      	movcs	r3, r2
 800b036:	b29b      	uxth	r3, r3
 800b038:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b03a:	893b      	ldrh	r3, [r7, #8]
 800b03c:	461a      	mov	r2, r3
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fa5d 	bl	800b500 <USBD_CtlSendData>
 800b046:	e009      	b.n	800b05c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9e7 	bl	800b41e <USBD_CtlError>
 800b050:	e004      	b.n	800b05c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 faae 	bl	800b5b4 <USBD_CtlSendStatus>
 800b058:	e000      	b.n	800b05c <USBD_GetDescriptor+0x2cc>
    return;
 800b05a:	bf00      	nop
  }
}
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop

0800b064 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	889b      	ldrh	r3, [r3, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d131      	bne.n	800b0da <USBD_SetAddress+0x76>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d12d      	bne.n	800b0da <USBD_SetAddress+0x76>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	885b      	ldrh	r3, [r3, #2]
 800b082:	2b7f      	cmp	r3, #127	@ 0x7f
 800b084:	d829      	bhi.n	800b0da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	885b      	ldrh	r3, [r3, #2]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d104      	bne.n	800b0a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f9bc 	bl	800b41e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a6:	e01d      	b.n	800b0e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	7bfa      	ldrb	r2, [r7, #15]
 800b0ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 f989 	bl	800c3cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa7a 	bl	800b5b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ce:	e009      	b.n	800b0e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d8:	e004      	b.n	800b0e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f99e 	bl	800b41e <USBD_CtlError>
  }
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	885b      	ldrh	r3, [r3, #2]
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	4b4e      	ldr	r3, [pc, #312]	@ (800b23c <USBD_SetConfig+0x150>)
 800b102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b104:	4b4d      	ldr	r3, [pc, #308]	@ (800b23c <USBD_SetConfig+0x150>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d905      	bls.n	800b118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f985 	bl	800b41e <USBD_CtlError>
    return USBD_FAIL;
 800b114:	2303      	movs	r3, #3
 800b116:	e08c      	b.n	800b232 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d002      	beq.n	800b12a <USBD_SetConfig+0x3e>
 800b124:	2b03      	cmp	r3, #3
 800b126:	d029      	beq.n	800b17c <USBD_SetConfig+0x90>
 800b128:	e075      	b.n	800b216 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b12a:	4b44      	ldr	r3, [pc, #272]	@ (800b23c <USBD_SetConfig+0x150>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d020      	beq.n	800b174 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b132:	4b42      	ldr	r3, [pc, #264]	@ (800b23c <USBD_SetConfig+0x150>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b13c:	4b3f      	ldr	r3, [pc, #252]	@ (800b23c <USBD_SetConfig+0x150>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fe ffe9 	bl	800a11a <USBD_SetClassConfig>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d008      	beq.n	800b164 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f962 	bl	800b41e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b162:	e065      	b.n	800b230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fa25 	bl	800b5b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2203      	movs	r2, #3
 800b16e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b172:	e05d      	b.n	800b230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa1d 	bl	800b5b4 <USBD_CtlSendStatus>
      break;
 800b17a:	e059      	b.n	800b230 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b17c:	4b2f      	ldr	r3, [pc, #188]	@ (800b23c <USBD_SetConfig+0x150>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d112      	bne.n	800b1aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b18c:	4b2b      	ldr	r3, [pc, #172]	@ (800b23c <USBD_SetConfig+0x150>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	461a      	mov	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b196:	4b29      	ldr	r3, [pc, #164]	@ (800b23c <USBD_SetConfig+0x150>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7fe ffd8 	bl	800a152 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa06 	bl	800b5b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1a8:	e042      	b.n	800b230 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b1aa:	4b24      	ldr	r3, [pc, #144]	@ (800b23c <USBD_SetConfig+0x150>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d02a      	beq.n	800b20e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7fe ffc6 	bl	800a152 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b23c <USBD_SetConfig+0x150>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b23c <USBD_SetConfig+0x150>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7fe ff9f 	bl	800a11a <USBD_SetClassConfig>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00f      	beq.n	800b206 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f918 	bl	800b41e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fe ffab 	bl	800a152 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b204:	e014      	b.n	800b230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f9d4 	bl	800b5b4 <USBD_CtlSendStatus>
      break;
 800b20c:	e010      	b.n	800b230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f9d0 	bl	800b5b4 <USBD_CtlSendStatus>
      break;
 800b214:	e00c      	b.n	800b230 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f900 	bl	800b41e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b21e:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <USBD_SetConfig+0x150>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7fe ff94 	bl	800a152 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b22a:	2303      	movs	r3, #3
 800b22c:	73fb      	strb	r3, [r7, #15]
      break;
 800b22e:	bf00      	nop
  }

  return ret;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000090c 	.word	0x2000090c

0800b240 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	88db      	ldrh	r3, [r3, #6]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d004      	beq.n	800b25c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f8e2 	bl	800b41e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b25a:	e023      	b.n	800b2a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	dc02      	bgt.n	800b26e <USBD_GetConfig+0x2e>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dc03      	bgt.n	800b274 <USBD_GetConfig+0x34>
 800b26c:	e015      	b.n	800b29a <USBD_GetConfig+0x5a>
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d00b      	beq.n	800b28a <USBD_GetConfig+0x4a>
 800b272:	e012      	b.n	800b29a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3308      	adds	r3, #8
 800b27e:	2201      	movs	r2, #1
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f93c 	bl	800b500 <USBD_CtlSendData>
        break;
 800b288:	e00c      	b.n	800b2a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3304      	adds	r3, #4
 800b28e:	2201      	movs	r2, #1
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f934 	bl	800b500 <USBD_CtlSendData>
        break;
 800b298:	e004      	b.n	800b2a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f8be 	bl	800b41e <USBD_CtlError>
        break;
 800b2a2:	bf00      	nop
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d81e      	bhi.n	800b302 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	88db      	ldrh	r3, [r3, #6]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d004      	beq.n	800b2d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f8a5 	bl	800b41e <USBD_CtlError>
        break;
 800b2d4:	e01a      	b.n	800b30c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d005      	beq.n	800b2f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f043 0202 	orr.w	r2, r3, #2
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	330c      	adds	r3, #12
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f900 	bl	800b500 <USBD_CtlSendData>
      break;
 800b300:	e004      	b.n	800b30c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f88a 	bl	800b41e <USBD_CtlError>
      break;
 800b30a:	bf00      	nop
  }
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	885b      	ldrh	r3, [r3, #2]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d107      	bne.n	800b336 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f940 	bl	800b5b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b334:	e013      	b.n	800b35e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	885b      	ldrh	r3, [r3, #2]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d10b      	bne.n	800b356 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	889b      	ldrh	r3, [r3, #4]
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	b29b      	uxth	r3, r3
 800b346:	b2da      	uxtb	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f930 	bl	800b5b4 <USBD_CtlSendStatus>
}
 800b354:	e003      	b.n	800b35e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f860 	bl	800b41e <USBD_CtlError>
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b376:	b2db      	uxtb	r3, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d80b      	bhi.n	800b396 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	885b      	ldrh	r3, [r3, #2]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d10c      	bne.n	800b3a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f910 	bl	800b5b4 <USBD_CtlSendStatus>
      }
      break;
 800b394:	e004      	b.n	800b3a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f840 	bl	800b41e <USBD_CtlError>
      break;
 800b39e:	e000      	b.n	800b3a2 <USBD_ClrFeature+0x3c>
      break;
 800b3a0:	bf00      	nop
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f7ff fa40 	bl	800a85a <SWAPBYTE>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	461a      	mov	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fa33 	bl	800a85a <SWAPBYTE>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3301      	adds	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fa26 	bl	800a85a <SWAPBYTE>
 800b40e:	4603      	mov	r3, r0
 800b410:	461a      	mov	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	80da      	strh	r2, [r3, #6]
}
 800b416:	bf00      	nop
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b428:	2180      	movs	r1, #128	@ 0x80
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 ff64 	bl	800c2f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b430:	2100      	movs	r1, #0
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 ff60 	bl	800c2f8 <USBD_LL_StallEP>
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d036      	beq.n	800b4c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b45a:	6938      	ldr	r0, [r7, #16]
 800b45c:	f000 f836 	bl	800b4cc <USBD_GetLen>
 800b460:	4603      	mov	r3, r0
 800b462:	3301      	adds	r3, #1
 800b464:	b29b      	uxth	r3, r3
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b46e:	7dfb      	ldrb	r3, [r7, #23]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	4413      	add	r3, r2
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	701a      	strb	r2, [r3, #0]
  idx++;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	3301      	adds	r3, #1
 800b47e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	4413      	add	r3, r2
 800b486:	2203      	movs	r2, #3
 800b488:	701a      	strb	r2, [r3, #0]
  idx++;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	3301      	adds	r3, #1
 800b48e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b490:	e013      	b.n	800b4ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	4413      	add	r3, r2
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	7812      	ldrb	r2, [r2, #0]
 800b49c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	613b      	str	r3, [r7, #16]
    idx++;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1e7      	bne.n	800b492 <USBD_GetString+0x52>
 800b4c2:	e000      	b.n	800b4c6 <USBD_GetString+0x86>
    return;
 800b4c4:	bf00      	nop
  }
}
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4dc:	e005      	b.n	800b4ea <USBD_GetLen+0x1e>
  {
    len++;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1f5      	bne.n	800b4de <USBD_GetLen+0x12>
  }

  return len;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2202      	movs	r2, #2
 800b510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	2100      	movs	r1, #0
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 ff6f 	bl	800c40a <USBD_LL_Transmit>

  return USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	2100      	movs	r1, #0
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 ff5e 	bl	800c40a <USBD_LL_Transmit>

  return USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2203      	movs	r2, #3
 800b568:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	2100      	movs	r1, #0
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 ff62 	bl	800c44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 ff51 	bl	800c44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2204      	movs	r2, #4
 800b5c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 ff1d 	bl	800c40a <USBD_LL_Transmit>

  return USBD_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2205      	movs	r2, #5
 800b5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 ff2b 	bl	800c44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800b604:	2200      	movs	r2, #0
 800b606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b60a:	4802      	ldr	r0, [pc, #8]	@ (800b614 <ST7735_Select+0x14>)
 800b60c:	f7f7 fa56 	bl	8002abc <HAL_GPIO_WritePin>
}
 800b610:	bf00      	nop
 800b612:	bd80      	pop	{r7, pc}
 800b614:	40020000 	.word	0x40020000

0800b618 <ST7735_Unselect>:

void ST7735_Unselect() {
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800b61c:	2201      	movs	r2, #1
 800b61e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b622:	4802      	ldr	r0, [pc, #8]	@ (800b62c <ST7735_Unselect+0x14>)
 800b624:	f7f7 fa4a 	bl	8002abc <HAL_GPIO_WritePin>
}
 800b628:	bf00      	nop
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	40020000 	.word	0x40020000

0800b630 <ST7735_Reset>:

void ST7735_Reset() {
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800b634:	2200      	movs	r2, #0
 800b636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b63a:	4807      	ldr	r0, [pc, #28]	@ (800b658 <ST7735_Reset+0x28>)
 800b63c:	f7f7 fa3e 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800b640:	2005      	movs	r0, #5
 800b642:	f7f6 fa1d 	bl	8001a80 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800b646:	2201      	movs	r2, #1
 800b648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b64c:	4802      	ldr	r0, [pc, #8]	@ (800b658 <ST7735_Reset+0x28>)
 800b64e:	f7f7 fa35 	bl	8002abc <HAL_GPIO_WritePin>
}
 800b652:	bf00      	nop
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	40020000 	.word	0x40020000

0800b65c <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800b666:	2200      	movs	r2, #0
 800b668:	2110      	movs	r1, #16
 800b66a:	4807      	ldr	r0, [pc, #28]	@ (800b688 <ST7735_WriteCommand+0x2c>)
 800b66c:	f7f7 fa26 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b670:	1df9      	adds	r1, r7, #7
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	2201      	movs	r2, #1
 800b678:	4804      	ldr	r0, [pc, #16]	@ (800b68c <ST7735_WriteCommand+0x30>)
 800b67a:	f7fa fe59 	bl	8006330 <HAL_SPI_Transmit>
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	40020000 	.word	0x40020000
 800b68c:	200006a8 	.word	0x200006a8

0800b690 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b69a:	2201      	movs	r2, #1
 800b69c:	2110      	movs	r1, #16
 800b69e:	4807      	ldr	r0, [pc, #28]	@ (800b6bc <ST7735_WriteData+0x2c>)
 800b6a0:	f7f7 fa0c 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ac:	6879      	ldr	r1, [r7, #4]
 800b6ae:	4804      	ldr	r0, [pc, #16]	@ (800b6c0 <ST7735_WriteData+0x30>)
 800b6b0:	f7fa fe3e 	bl	8006330 <HAL_SPI_Transmit>
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40020000 	.word	0x40020000
 800b6c0:	200006a8 	.word	0x200006a8

0800b6c4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800b6d6:	e034      	b.n	800b742 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	607a      	str	r2, [r7, #4]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff ffb9 	bl	800b65c <ST7735_WriteCommand>

        numArgs = *addr++;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	1c5a      	adds	r2, r3, #1
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800b6f4:	7abb      	ldrb	r3, [r7, #10]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800b6fe:	7abb      	ldrb	r3, [r7, #10]
 800b700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b704:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800b706:	7abb      	ldrb	r3, [r7, #10]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800b70c:	7abb      	ldrb	r3, [r7, #10]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7ff ffbd 	bl	800b690 <ST7735_WriteData>
            addr += numArgs;
 800b716:	7abb      	ldrb	r3, [r7, #10]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	4413      	add	r3, r2
 800b71c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800b71e:	89bb      	ldrh	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00e      	beq.n	800b742 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	607a      	str	r2, [r7, #4]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800b72e:	89bb      	ldrh	r3, [r7, #12]
 800b730:	2bff      	cmp	r3, #255	@ 0xff
 800b732:	d102      	bne.n	800b73a <ST7735_ExecuteCommandList+0x76>
 800b734:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b738:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800b73a:	89bb      	ldrh	r3, [r7, #12]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f6 f99f 	bl	8001a80 <HAL_Delay>
    while(numCommands--) {
 800b742:	7bfb      	ldrb	r3, [r7, #15]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	73fa      	strb	r2, [r7, #15]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1c5      	bne.n	800b6d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800b756:	b590      	push	{r4, r7, lr}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	4604      	mov	r4, r0
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	461a      	mov	r2, r3
 800b764:	4623      	mov	r3, r4
 800b766:	71fb      	strb	r3, [r7, #7]
 800b768:	4603      	mov	r3, r0
 800b76a:	71bb      	strb	r3, [r7, #6]
 800b76c:	460b      	mov	r3, r1
 800b76e:	717b      	strb	r3, [r7, #5]
 800b770:	4613      	mov	r3, r2
 800b772:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800b774:	202a      	movs	r0, #42	@ 0x2a
 800b776:	f7ff ff71 	bl	800b65c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800b77a:	2300      	movs	r3, #0
 800b77c:	733b      	strb	r3, [r7, #12]
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	737b      	strb	r3, [r7, #13]
 800b782:	2300      	movs	r3, #0
 800b784:	73bb      	strb	r3, [r7, #14]
 800b786:	797b      	ldrb	r3, [r7, #5]
 800b788:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b78a:	f107 030c 	add.w	r3, r7, #12
 800b78e:	2104      	movs	r1, #4
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff ff7d 	bl	800b690 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800b796:	202b      	movs	r0, #43	@ 0x2b
 800b798:	f7ff ff60 	bl	800b65c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800b79c:	79bb      	ldrb	r3, [r7, #6]
 800b79e:	3318      	adds	r3, #24
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800b7a4:	793b      	ldrb	r3, [r7, #4]
 800b7a6:	3318      	adds	r3, #24
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	2104      	movs	r1, #4
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ff6c 	bl	800b690 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800b7b8:	202c      	movs	r0, #44	@ 0x2c
 800b7ba:	f7ff ff4f 	bl	800b65c <ST7735_WriteCommand>
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd90      	pop	{r4, r7, pc}
	...

0800b7c8 <ST7735_Init>:

void ST7735_Init() {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
    ST7735_Select();
 800b7cc:	f7ff ff18 	bl	800b600 <ST7735_Select>
    ST7735_Reset();
 800b7d0:	f7ff ff2e 	bl	800b630 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800b7d4:	4806      	ldr	r0, [pc, #24]	@ (800b7f0 <ST7735_Init+0x28>)
 800b7d6:	f7ff ff75 	bl	800b6c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800b7da:	4806      	ldr	r0, [pc, #24]	@ (800b7f4 <ST7735_Init+0x2c>)
 800b7dc:	f7ff ff72 	bl	800b6c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800b7e0:	4805      	ldr	r0, [pc, #20]	@ (800b7f8 <ST7735_Init+0x30>)
 800b7e2:	f7ff ff6f 	bl	800b6c4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800b7e6:	f7ff ff17 	bl	800b618 <ST7735_Unselect>
}
 800b7ea:	bf00      	nop
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800e1d0 	.word	0x0800e1d0
 800b7f4:	0800e20c 	.word	0x0800e20c
 800b7f8:	0800e21c 	.word	0x0800e21c

0800b7fc <ST7735_WriteChar>:
    uint8_t data[] = { color >> 8, color & 0xFF };
    ST7735_WriteData(data, sizeof(data));
    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	b590      	push	{r4, r7, lr}
 800b800:	b089      	sub	sp, #36	@ 0x24
 800b802:	af00      	add	r7, sp, #0
 800b804:	637b      	str	r3, [r7, #52]	@ 0x34
 800b806:	4603      	mov	r3, r0
 800b808:	80fb      	strh	r3, [r7, #6]
 800b80a:	460b      	mov	r3, r1
 800b80c:	80bb      	strh	r3, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800b812:	88fb      	ldrh	r3, [r7, #6]
 800b814:	b2d8      	uxtb	r0, r3
 800b816:	88bb      	ldrh	r3, [r7, #4]
 800b818:	b2d9      	uxtb	r1, r3
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b822:	4413      	add	r3, r2
 800b824:	b2db      	uxtb	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b2dc      	uxtb	r4, r3
 800b82a:	88bb      	ldrh	r3, [r7, #4]
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b832:	4413      	add	r3, r2
 800b834:	b2db      	uxtb	r3, r3
 800b836:	3b01      	subs	r3, #1
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	4622      	mov	r2, r4
 800b83c:	f7ff ff8b 	bl	800b756 <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 800b844:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d106      	bne.n	800b85a <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 800b84c:	230e      	movs	r3, #14
 800b84e:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	2b25      	cmp	r3, #37	@ 0x25
 800b854:	d101      	bne.n	800b85a <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 800b856:	2304      	movs	r3, #4
 800b858:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	e044      	b.n	800b8ea <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 800b860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b862:	78f9      	ldrb	r1, [r7, #3]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	1acb      	subs	r3, r1, r3
 800b868:	3b20      	subs	r3, #32
 800b86a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800b86e:	fb03 f101 	mul.w	r1, r3, r1
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	440b      	add	r3, r1
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4413      	add	r3, r2
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 800b87e:	2300      	movs	r3, #0
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	e029      	b.n	800b8d8 <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00e      	beq.n	800b8b2 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800b894:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b896:	0a1b      	lsrs	r3, r3, #8
 800b898:	b29b      	uxth	r3, r3
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	733b      	strb	r3, [r7, #12]
 800b89e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800b8a4:	f107 030c 	add.w	r3, r7, #12
 800b8a8:	2102      	movs	r1, #2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fef0 	bl	800b690 <ST7735_WriteData>
 800b8b0:	e00f      	b.n	800b8d2 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800b8b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	723b      	strb	r3, [r7, #8]
 800b8be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 800b8c6:	f107 0308 	add.w	r3, r7, #8
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fedf 	bl	800b690 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b8dc:	461a      	mov	r2, r3
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d3cf      	bcc.n	800b884 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d3b4      	bcc.n	800b860 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	3724      	adds	r7, #36	@ 0x24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b902:	b002      	add	sp, #8
 800b904:	4770      	bx	lr

0800b906 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800b906:	b082      	sub	sp, #8
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af04      	add	r7, sp, #16
 800b90e:	603a      	str	r2, [r7, #0]
 800b910:	617b      	str	r3, [r7, #20]
 800b912:	4603      	mov	r3, r0
 800b914:	80fb      	strh	r3, [r7, #6]
 800b916:	460b      	mov	r3, r1
 800b918:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800b91a:	f7ff fe71 	bl	800b600 <ST7735_Select>

    while(*str) {
 800b91e:	e02d      	b.n	800b97c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800b920:	88fb      	ldrh	r3, [r7, #6]
 800b922:	7d3a      	ldrb	r2, [r7, #20]
 800b924:	4413      	add	r3, r2
 800b926:	2b9f      	cmp	r3, #159	@ 0x9f
 800b928:	dd13      	ble.n	800b952 <ST7735_WriteString+0x4c>
            x = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800b92e:	7d7b      	ldrb	r3, [r7, #21]
 800b930:	461a      	mov	r2, r3
 800b932:	88bb      	ldrh	r3, [r7, #4]
 800b934:	4413      	add	r3, r2
 800b936:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800b938:	88bb      	ldrh	r3, [r7, #4]
 800b93a:	7d7a      	ldrb	r2, [r7, #21]
 800b93c:	4413      	add	r3, r2
 800b93e:	2b4f      	cmp	r3, #79	@ 0x4f
 800b940:	dc21      	bgt.n	800b986 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b20      	cmp	r3, #32
 800b948:	d103      	bne.n	800b952 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	603b      	str	r3, [r7, #0]
                continue;
 800b950:	e014      	b.n	800b97c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781a      	ldrb	r2, [r3, #0]
 800b956:	88b9      	ldrh	r1, [r7, #4]
 800b958:	88f8      	ldrh	r0, [r7, #6]
 800b95a:	8c3b      	ldrh	r3, [r7, #32]
 800b95c:	9302      	str	r3, [sp, #8]
 800b95e:	8bbb      	ldrh	r3, [r7, #28]
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f7ff ff48 	bl	800b7fc <ST7735_WriteChar>
        x += font.width;
 800b96c:	7d3b      	ldrb	r3, [r7, #20]
 800b96e:	461a      	mov	r2, r3
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	4413      	add	r3, r2
 800b974:	80fb      	strh	r3, [r7, #6]
        str++;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	3301      	adds	r3, #1
 800b97a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1cd      	bne.n	800b920 <ST7735_WriteString+0x1a>
 800b984:	e000      	b.n	800b988 <ST7735_WriteString+0x82>
                break;
 800b986:	bf00      	nop
    }

    ST7735_Unselect();
 800b988:	f7ff fe46 	bl	800b618 <ST7735_Unselect>
}
 800b98c:	bf00      	nop
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b996:	b002      	add	sp, #8
 800b998:	4770      	bx	lr
	...

0800b99c <ST7735_FillRectangle>:

void ST7735_FillRectangle( uint16_t w, uint16_t h,uint16_t x, uint16_t y, uint16_t color) {
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	4623      	mov	r3, r4
 800b9ac:	80fb      	strh	r3, [r7, #6]
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	80bb      	strh	r3, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	807b      	strh	r3, [r7, #2]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800b9ba:	887b      	ldrh	r3, [r7, #2]
 800b9bc:	2b9f      	cmp	r3, #159	@ 0x9f
 800b9be:	d857      	bhi.n	800ba70 <ST7735_FillRectangle+0xd4>
 800b9c0:	883b      	ldrh	r3, [r7, #0]
 800b9c2:	2b4f      	cmp	r3, #79	@ 0x4f
 800b9c4:	d854      	bhi.n	800ba70 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800b9c6:	887a      	ldrh	r2, [r7, #2]
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	2ba0      	cmp	r3, #160	@ 0xa0
 800b9ce:	dd03      	ble.n	800b9d8 <ST7735_FillRectangle+0x3c>
 800b9d0:	887b      	ldrh	r3, [r7, #2]
 800b9d2:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800b9d6:	80fb      	strh	r3, [r7, #6]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800b9d8:	883a      	ldrh	r2, [r7, #0]
 800b9da:	88bb      	ldrh	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	2b50      	cmp	r3, #80	@ 0x50
 800b9e0:	dd03      	ble.n	800b9ea <ST7735_FillRectangle+0x4e>
 800b9e2:	883b      	ldrh	r3, [r7, #0]
 800b9e4:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800b9e8:	80bb      	strh	r3, [r7, #4]

    ST7735_Select();
 800b9ea:	f7ff fe09 	bl	800b600 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b9ee:	887b      	ldrh	r3, [r7, #2]
 800b9f0:	b2d8      	uxtb	r0, r3
 800b9f2:	883b      	ldrh	r3, [r7, #0]
 800b9f4:	b2d9      	uxtb	r1, r3
 800b9f6:	887b      	ldrh	r3, [r7, #2]
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	4413      	add	r3, r2
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	3b01      	subs	r3, #1
 800ba04:	b2dc      	uxtb	r4, r3
 800ba06:	883b      	ldrh	r3, [r7, #0]
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	88bb      	ldrh	r3, [r7, #4]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	4413      	add	r3, r2
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	4622      	mov	r2, r4
 800ba18:	f7ff fe9d 	bl	800b756 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800ba1c:	8c3b      	ldrh	r3, [r7, #32]
 800ba1e:	0a1b      	lsrs	r3, r3, #8
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	733b      	strb	r3, [r7, #12]
 800ba26:	8c3b      	ldrh	r3, [r7, #32]
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	2110      	movs	r1, #16
 800ba30:	4811      	ldr	r0, [pc, #68]	@ (800ba78 <ST7735_FillRectangle+0xdc>)
 800ba32:	f7f7 f843 	bl	8002abc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800ba36:	88bb      	ldrh	r3, [r7, #4]
 800ba38:	803b      	strh	r3, [r7, #0]
 800ba3a:	e013      	b.n	800ba64 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800ba3c:	88fb      	ldrh	r3, [r7, #6]
 800ba3e:	807b      	strh	r3, [r7, #2]
 800ba40:	e00a      	b.n	800ba58 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800ba42:	f107 010c 	add.w	r1, r7, #12
 800ba46:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	480b      	ldr	r0, [pc, #44]	@ (800ba7c <ST7735_FillRectangle+0xe0>)
 800ba4e:	f7fa fc6f 	bl	8006330 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800ba52:	887b      	ldrh	r3, [r7, #2]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	807b      	strh	r3, [r7, #2]
 800ba58:	887b      	ldrh	r3, [r7, #2]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f1      	bne.n	800ba42 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800ba5e:	883b      	ldrh	r3, [r7, #0]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	803b      	strh	r3, [r7, #0]
 800ba64:	883b      	ldrh	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e8      	bne.n	800ba3c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800ba6a:	f7ff fdd5 	bl	800b618 <ST7735_Unselect>
 800ba6e:	e000      	b.n	800ba72 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800ba70:	bf00      	nop
}
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd90      	pop	{r4, r7, pc}
 800ba78:	40020000 	.word	0x40020000
 800ba7c:	200006a8 	.word	0x200006a8

0800ba80 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af02      	add	r7, sp, #8
 800ba86:	4603      	mov	r3, r0
 800ba88:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(ST7735_WIDTH, ST7735_HEIGHT, 0, 0,  color);
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2200      	movs	r2, #0
 800ba92:	2150      	movs	r1, #80	@ 0x50
 800ba94:	20a0      	movs	r0, #160	@ 0xa0
 800ba96:	f7ff ff81 	bl	800b99c <ST7735_FillRectangle>
}
 800ba9a:	bf00      	nop
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t* data) {
 800baa2:	b590      	push	{r4, r7, lr}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	4604      	mov	r4, r0
 800baaa:	4608      	mov	r0, r1
 800baac:	4611      	mov	r1, r2
 800baae:	461a      	mov	r2, r3
 800bab0:	4623      	mov	r3, r4
 800bab2:	80fb      	strh	r3, [r7, #6]
 800bab4:	4603      	mov	r3, r0
 800bab6:	80bb      	strh	r3, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	807b      	strh	r3, [r7, #2]
 800babc:	4613      	mov	r3, r2
 800babe:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	2b9f      	cmp	r3, #159	@ 0x9f
 800bac4:	d831      	bhi.n	800bb2a <ST7735_DrawImage+0x88>
 800bac6:	88bb      	ldrh	r3, [r7, #4]
 800bac8:	2b4f      	cmp	r3, #79	@ 0x4f
 800baca:	d82e      	bhi.n	800bb2a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bacc:	88fa      	ldrh	r2, [r7, #6]
 800bace:	887b      	ldrh	r3, [r7, #2]
 800bad0:	4413      	add	r3, r2
 800bad2:	2ba0      	cmp	r3, #160	@ 0xa0
 800bad4:	dc2b      	bgt.n	800bb2e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bad6:	88ba      	ldrh	r2, [r7, #4]
 800bad8:	883b      	ldrh	r3, [r7, #0]
 800bada:	4413      	add	r3, r2
 800badc:	2b50      	cmp	r3, #80	@ 0x50
 800bade:	dc28      	bgt.n	800bb32 <ST7735_DrawImage+0x90>

    ST7735_Select();
 800bae0:	f7ff fd8e 	bl	800b600 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800bae4:	88fb      	ldrh	r3, [r7, #6]
 800bae6:	b2d8      	uxtb	r0, r3
 800bae8:	88bb      	ldrh	r3, [r7, #4]
 800baea:	b2d9      	uxtb	r1, r3
 800baec:	88fb      	ldrh	r3, [r7, #6]
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	887b      	ldrh	r3, [r7, #2]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	4413      	add	r3, r2
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b2dc      	uxtb	r4, r3
 800bafc:	88bb      	ldrh	r3, [r7, #4]
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	883b      	ldrh	r3, [r7, #0]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	4413      	add	r3, r2
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	4622      	mov	r2, r4
 800bb0e:	f7ff fe22 	bl	800b756 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800bb12:	887b      	ldrh	r3, [r7, #2]
 800bb14:	883a      	ldrh	r2, [r7, #0]
 800bb16:	fb02 f303 	mul.w	r3, r2, r3
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	69b8      	ldr	r0, [r7, #24]
 800bb20:	f7ff fdb6 	bl	800b690 <ST7735_WriteData>
    ST7735_Unselect();
 800bb24:	f7ff fd78 	bl	800b618 <ST7735_Unselect>
 800bb28:	e004      	b.n	800bb34 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bb2a:	bf00      	nop
 800bb2c:	e002      	b.n	800bb34 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bb2e:	bf00      	nop
 800bb30:	e000      	b.n	800bb34 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bb32:	bf00      	nop
}
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd90      	pop	{r4, r7, pc}

0800bb3a <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert) {
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	4603      	mov	r3, r0
 800bb42:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800bb44:	f7ff fd5c 	bl	800b600 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <ST7735_InvertColors+0x18>
 800bb4e:	2321      	movs	r3, #33	@ 0x21
 800bb50:	e000      	b.n	800bb54 <ST7735_InvertColors+0x1a>
 800bb52:	2320      	movs	r3, #32
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff fd81 	bl	800b65c <ST7735_WriteCommand>
    ST7735_Unselect();
 800bb5a:	f7ff fd5d 	bl	800b618 <ST7735_Unselect>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4912      	ldr	r1, [pc, #72]	@ (800bbb8 <MX_USB_DEVICE_Init+0x50>)
 800bb70:	4812      	ldr	r0, [pc, #72]	@ (800bbbc <MX_USB_DEVICE_Init+0x54>)
 800bb72:	f7fe fa55 	bl	800a020 <USBD_Init>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb7c:	f7f5 faee 	bl	800115c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb80:	490f      	ldr	r1, [pc, #60]	@ (800bbc0 <MX_USB_DEVICE_Init+0x58>)
 800bb82:	480e      	ldr	r0, [pc, #56]	@ (800bbbc <MX_USB_DEVICE_Init+0x54>)
 800bb84:	f7fe fa7c 	bl	800a080 <USBD_RegisterClass>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb8e:	f7f5 fae5 	bl	800115c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb92:	490c      	ldr	r1, [pc, #48]	@ (800bbc4 <MX_USB_DEVICE_Init+0x5c>)
 800bb94:	4809      	ldr	r0, [pc, #36]	@ (800bbbc <MX_USB_DEVICE_Init+0x54>)
 800bb96:	f7fe f9b3 	bl	8009f00 <USBD_CDC_RegisterInterface>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bba0:	f7f5 fadc 	bl	800115c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bba4:	4805      	ldr	r0, [pc, #20]	@ (800bbbc <MX_USB_DEVICE_Init+0x54>)
 800bba6:	f7fe faa1 	bl	800a0ec <USBD_Start>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbb0:	f7f5 fad4 	bl	800115c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbb4:	bf00      	nop
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	200000b4 	.word	0x200000b4
 800bbbc:	20000910 	.word	0x20000910
 800bbc0:	20000018 	.word	0x20000018
 800bbc4:	200000a0 	.word	0x200000a0

0800bbc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4905      	ldr	r1, [pc, #20]	@ (800bbe4 <CDC_Init_FS+0x1c>)
 800bbd0:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <CDC_Init_FS+0x20>)
 800bbd2:	f7fe f9af 	bl	8009f34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbd6:	4905      	ldr	r1, [pc, #20]	@ (800bbec <CDC_Init_FS+0x24>)
 800bbd8:	4803      	ldr	r0, [pc, #12]	@ (800bbe8 <CDC_Init_FS+0x20>)
 800bbda:	f7fe f9cd 	bl	8009f78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20000fec 	.word	0x20000fec
 800bbe8:	20000910 	.word	0x20000910
 800bbec:	20000bec 	.word	0x20000bec

0800bbf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	6039      	str	r1, [r7, #0]
 800bc0a:	71fb      	strb	r3, [r7, #7]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	2b23      	cmp	r3, #35	@ 0x23
 800bc14:	d84a      	bhi.n	800bcac <CDC_Control_FS+0xac>
 800bc16:	a201      	add	r2, pc, #4	@ (adr r2, 800bc1c <CDC_Control_FS+0x1c>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bcad 	.word	0x0800bcad
 800bc20:	0800bcad 	.word	0x0800bcad
 800bc24:	0800bcad 	.word	0x0800bcad
 800bc28:	0800bcad 	.word	0x0800bcad
 800bc2c:	0800bcad 	.word	0x0800bcad
 800bc30:	0800bcad 	.word	0x0800bcad
 800bc34:	0800bcad 	.word	0x0800bcad
 800bc38:	0800bcad 	.word	0x0800bcad
 800bc3c:	0800bcad 	.word	0x0800bcad
 800bc40:	0800bcad 	.word	0x0800bcad
 800bc44:	0800bcad 	.word	0x0800bcad
 800bc48:	0800bcad 	.word	0x0800bcad
 800bc4c:	0800bcad 	.word	0x0800bcad
 800bc50:	0800bcad 	.word	0x0800bcad
 800bc54:	0800bcad 	.word	0x0800bcad
 800bc58:	0800bcad 	.word	0x0800bcad
 800bc5c:	0800bcad 	.word	0x0800bcad
 800bc60:	0800bcad 	.word	0x0800bcad
 800bc64:	0800bcad 	.word	0x0800bcad
 800bc68:	0800bcad 	.word	0x0800bcad
 800bc6c:	0800bcad 	.word	0x0800bcad
 800bc70:	0800bcad 	.word	0x0800bcad
 800bc74:	0800bcad 	.word	0x0800bcad
 800bc78:	0800bcad 	.word	0x0800bcad
 800bc7c:	0800bcad 	.word	0x0800bcad
 800bc80:	0800bcad 	.word	0x0800bcad
 800bc84:	0800bcad 	.word	0x0800bcad
 800bc88:	0800bcad 	.word	0x0800bcad
 800bc8c:	0800bcad 	.word	0x0800bcad
 800bc90:	0800bcad 	.word	0x0800bcad
 800bc94:	0800bcad 	.word	0x0800bcad
 800bc98:	0800bcad 	.word	0x0800bcad
 800bc9c:	0800bcad 	.word	0x0800bcad
 800bca0:	0800bcad 	.word	0x0800bcad
 800bca4:	0800bcad 	.word	0x0800bcad
 800bca8:	0800bcad 	.word	0x0800bcad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcac:	bf00      	nop
  }

  return (USBD_OK);
 800bcae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	4805      	ldr	r0, [pc, #20]	@ (800bce0 <CDC_Receive_FS+0x24>)
 800bcca:	f7fe f955 	bl	8009f78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcce:	4804      	ldr	r0, [pc, #16]	@ (800bce0 <CDC_Receive_FS+0x24>)
 800bcd0:	f7fe f970 	bl	8009fb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bcd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000910 	.word	0x20000910

0800bce4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b087      	sub	sp, #28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bcf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	6039      	str	r1, [r7, #0]
 800bd12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2212      	movs	r2, #18
 800bd18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd1a:	4b03      	ldr	r3, [pc, #12]	@ (800bd28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	200000d0 	.word	0x200000d0

0800bd2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	6039      	str	r1, [r7, #0]
 800bd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2204      	movs	r2, #4
 800bd3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd3e:	4b03      	ldr	r3, [pc, #12]	@ (800bd4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	200000e4 	.word	0x200000e4

0800bd50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4907      	ldr	r1, [pc, #28]	@ (800bd84 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd66:	4808      	ldr	r0, [pc, #32]	@ (800bd88 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd68:	f7ff fb6a 	bl	800b440 <USBD_GetString>
 800bd6c:	e004      	b.n	800bd78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	4904      	ldr	r1, [pc, #16]	@ (800bd84 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd72:	4805      	ldr	r0, [pc, #20]	@ (800bd88 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd74:	f7ff fb64 	bl	800b440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd78:	4b02      	ldr	r3, [pc, #8]	@ (800bd84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	200013ec 	.word	0x200013ec
 800bd88:	0800d244 	.word	0x0800d244

0800bd8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	6039      	str	r1, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	4904      	ldr	r1, [pc, #16]	@ (800bdac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd9c:	4804      	ldr	r0, [pc, #16]	@ (800bdb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd9e:	f7ff fb4f 	bl	800b440 <USBD_GetString>
  return USBD_StrDesc;
 800bda2:	4b02      	ldr	r3, [pc, #8]	@ (800bdac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	200013ec 	.word	0x200013ec
 800bdb0:	0800d25c 	.word	0x0800d25c

0800bdb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	221a      	movs	r2, #26
 800bdc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdc6:	f000 f843 	bl	800be50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdca:	4b02      	ldr	r3, [pc, #8]	@ (800bdd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	200000e8 	.word	0x200000e8

0800bdd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d105      	bne.n	800bdf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	4907      	ldr	r1, [pc, #28]	@ (800be0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdee:	4808      	ldr	r0, [pc, #32]	@ (800be10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdf0:	f7ff fb26 	bl	800b440 <USBD_GetString>
 800bdf4:	e004      	b.n	800be00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4904      	ldr	r1, [pc, #16]	@ (800be0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdfa:	4805      	ldr	r0, [pc, #20]	@ (800be10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdfc:	f7ff fb20 	bl	800b440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be00:	4b02      	ldr	r3, [pc, #8]	@ (800be0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	200013ec 	.word	0x200013ec
 800be10:	0800d270 	.word	0x0800d270

0800be14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d105      	bne.n	800be32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4907      	ldr	r1, [pc, #28]	@ (800be48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be2a:	4808      	ldr	r0, [pc, #32]	@ (800be4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be2c:	f7ff fb08 	bl	800b440 <USBD_GetString>
 800be30:	e004      	b.n	800be3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4904      	ldr	r1, [pc, #16]	@ (800be48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be36:	4805      	ldr	r0, [pc, #20]	@ (800be4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be38:	f7ff fb02 	bl	800b440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be3c:	4b02      	ldr	r3, [pc, #8]	@ (800be48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	200013ec 	.word	0x200013ec
 800be4c:	0800d27c 	.word	0x0800d27c

0800be50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be56:	4b0f      	ldr	r3, [pc, #60]	@ (800be94 <Get_SerialNum+0x44>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be5c:	4b0e      	ldr	r3, [pc, #56]	@ (800be98 <Get_SerialNum+0x48>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be62:	4b0e      	ldr	r3, [pc, #56]	@ (800be9c <Get_SerialNum+0x4c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be76:	2208      	movs	r2, #8
 800be78:	4909      	ldr	r1, [pc, #36]	@ (800bea0 <Get_SerialNum+0x50>)
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f814 	bl	800bea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be80:	2204      	movs	r2, #4
 800be82:	4908      	ldr	r1, [pc, #32]	@ (800bea4 <Get_SerialNum+0x54>)
 800be84:	68b8      	ldr	r0, [r7, #8]
 800be86:	f000 f80f 	bl	800bea8 <IntToUnicode>
  }
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	1fff7a10 	.word	0x1fff7a10
 800be98:	1fff7a14 	.word	0x1fff7a14
 800be9c:	1fff7a18 	.word	0x1fff7a18
 800bea0:	200000ea 	.word	0x200000ea
 800bea4:	200000fa 	.word	0x200000fa

0800bea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	4613      	mov	r3, r2
 800beb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beba:	2300      	movs	r3, #0
 800bebc:	75fb      	strb	r3, [r7, #23]
 800bebe:	e027      	b.n	800bf10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	0f1b      	lsrs	r3, r3, #28
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	d80b      	bhi.n	800bee0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	0f1b      	lsrs	r3, r3, #28
 800becc:	b2da      	uxtb	r2, r3
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	4619      	mov	r1, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	440b      	add	r3, r1
 800bed8:	3230      	adds	r2, #48	@ 0x30
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	e00a      	b.n	800bef6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	0f1b      	lsrs	r3, r3, #28
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	4619      	mov	r1, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	440b      	add	r3, r1
 800bef0:	3237      	adds	r2, #55	@ 0x37
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	3301      	adds	r3, #1
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	2200      	movs	r2, #0
 800bf08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	75fb      	strb	r3, [r7, #23]
 800bf10:	7dfa      	ldrb	r2, [r7, #23]
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d3d3      	bcc.n	800bec0 <IntToUnicode+0x18>
  }
}
 800bf18:	bf00      	nop
 800bf1a:	bf00      	nop
 800bf1c:	371c      	adds	r7, #28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
	...

0800bf28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08a      	sub	sp, #40	@ 0x28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf30:	f107 0314 	add.w	r3, r7, #20
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	605a      	str	r2, [r3, #4]
 800bf3a:	609a      	str	r2, [r3, #8]
 800bf3c:	60da      	str	r2, [r3, #12]
 800bf3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf48:	d13a      	bne.n	800bfc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	613b      	str	r3, [r7, #16]
 800bf4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf52:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf54:	f043 0301 	orr.w	r3, r3, #1
 800bf58:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	613b      	str	r3, [r7, #16]
 800bf64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bf6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf74:	2303      	movs	r3, #3
 800bf76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf78:	230a      	movs	r3, #10
 800bf7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf7c:	f107 0314 	add.w	r3, r7, #20
 800bf80:	4619      	mov	r1, r3
 800bf82:	4812      	ldr	r0, [pc, #72]	@ (800bfcc <HAL_PCD_MspInit+0xa4>)
 800bf84:	f7f6 fbfe 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf88:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf8c:	4a0e      	ldr	r2, [pc, #56]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf92:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	4b0b      	ldr	r3, [pc, #44]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9c:	4a0a      	ldr	r2, [pc, #40]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bf9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfa2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfa4:	4b08      	ldr	r3, [pc, #32]	@ (800bfc8 <HAL_PCD_MspInit+0xa0>)
 800bfa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2043      	movs	r0, #67	@ 0x43
 800bfb6:	f7f6 f8c4 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfba:	2043      	movs	r0, #67	@ 0x43
 800bfbc:	f7f6 f8dd 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfc0:	bf00      	nop
 800bfc2:	3728      	adds	r7, #40	@ 0x28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	40023800 	.word	0x40023800
 800bfcc:	40020000 	.word	0x40020000

0800bfd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	f7fe f8cd 	bl	800a186 <USBD_LL_SetupStage>
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c006:	78fa      	ldrb	r2, [r7, #3]
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4613      	mov	r3, r2
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	440b      	add	r3, r1
 800c014:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	78fb      	ldrb	r3, [r7, #3]
 800c01c:	4619      	mov	r1, r3
 800c01e:	f7fe f907 	bl	800a230 <USBD_LL_DataOutStage>
}
 800c022:	bf00      	nop
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4613      	mov	r3, r2
 800c042:	00db      	lsls	r3, r3, #3
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	334c      	adds	r3, #76	@ 0x4c
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	78fb      	ldrb	r3, [r7, #3]
 800c050:	4619      	mov	r1, r3
 800c052:	f7fe f9a0 	bl	800a396 <USBD_LL_DataInStage>
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fad4 	bl	800a61a <USBD_LL_SOF>
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c082:	2301      	movs	r3, #1
 800c084:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d001      	beq.n	800c092 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c08e:	f7f5 f865 	bl	800115c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c098:	7bfa      	ldrb	r2, [r7, #15]
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fe fa7e 	bl	800a59e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe fa26 	bl	800a4fa <USBD_LL_Reset>
}
 800c0ae:	bf00      	nop
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fa79 	bl	800a5be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0de:	f043 0301 	orr.w	r3, r3, #1
 800c0e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0ec:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <HAL_PCD_SuspendCallback+0x48>)
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	4a03      	ldr	r2, [pc, #12]	@ (800c100 <HAL_PCD_SuspendCallback+0x48>)
 800c0f2:	f043 0306 	orr.w	r3, r3, #6
 800c0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	e000ed00 	.word	0xe000ed00

0800c104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe fa69 	bl	800a5ea <USBD_LL_Resume>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c132:	78fa      	ldrb	r2, [r7, #3]
 800c134:	4611      	mov	r1, r2
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fac1 	bl	800a6be <USBD_LL_IsoOUTIncomplete>
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c156:	78fa      	ldrb	r2, [r7, #3]
 800c158:	4611      	mov	r1, r2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fa7d 	bl	800a65a <USBD_LL_IsoINIncomplete>
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fad3 	bl	800a722 <USBD_LL_DevConnected>
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fad0 	bl	800a738 <USBD_LL_DevDisconnected>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d13c      	bne.n	800c22a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1b0:	4a20      	ldr	r2, [pc, #128]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c1c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1ca:	2204      	movs	r2, #4
 800c1cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1ce:	4b19      	ldr	r3, [pc, #100]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1d4:	4b17      	ldr	r3, [pc, #92]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1da:	4b16      	ldr	r3, [pc, #88]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1dc:	2202      	movs	r2, #2
 800c1de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1e0:	4b14      	ldr	r3, [pc, #80]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c1e6:	4b13      	ldr	r3, [pc, #76]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c1ec:	4b11      	ldr	r3, [pc, #68]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c1f2:	4b10      	ldr	r3, [pc, #64]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c234 <USBD_LL_Init+0x94>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1fe:	480d      	ldr	r0, [pc, #52]	@ (800c234 <USBD_LL_Init+0x94>)
 800c200:	f7f7 fc4d 	bl	8003a9e <HAL_PCD_Init>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c20a:	f7f4 ffa7 	bl	800115c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c20e:	2180      	movs	r1, #128	@ 0x80
 800c210:	4808      	ldr	r0, [pc, #32]	@ (800c234 <USBD_LL_Init+0x94>)
 800c212:	f7f8 fea4 	bl	8004f5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c216:	2240      	movs	r2, #64	@ 0x40
 800c218:	2100      	movs	r1, #0
 800c21a:	4806      	ldr	r0, [pc, #24]	@ (800c234 <USBD_LL_Init+0x94>)
 800c21c:	f7f8 fe58 	bl	8004ed0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c220:	2280      	movs	r2, #128	@ 0x80
 800c222:	2101      	movs	r1, #1
 800c224:	4803      	ldr	r0, [pc, #12]	@ (800c234 <USBD_LL_Init+0x94>)
 800c226:	f7f8 fe53 	bl	8004ed0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	200015ec 	.word	0x200015ec

0800c238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f7 fd42 	bl	8003cd8 <HAL_PCD_Start>
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f942 	bl	800c4e4 <USBD_Get_USB_Status>
 800c260:	4603      	mov	r3, r0
 800c262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c264:	7bbb      	ldrb	r3, [r7, #14]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	4608      	mov	r0, r1
 800c278:	4611      	mov	r1, r2
 800c27a:	461a      	mov	r2, r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	70fb      	strb	r3, [r7, #3]
 800c280:	460b      	mov	r3, r1
 800c282:	70bb      	strb	r3, [r7, #2]
 800c284:	4613      	mov	r3, r2
 800c286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c296:	78bb      	ldrb	r3, [r7, #2]
 800c298:	883a      	ldrh	r2, [r7, #0]
 800c29a:	78f9      	ldrb	r1, [r7, #3]
 800c29c:	f7f8 fa13 	bl	80046c6 <HAL_PCD_EP_Open>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f91c 	bl	800c4e4 <USBD_Get_USB_Status>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2d4:	78fa      	ldrb	r2, [r7, #3]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f8 fa5c 	bl	8004796 <HAL_PCD_EP_Close>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f8fd 	bl	800c4e4 <USBD_Get_USB_Status>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c312:	78fa      	ldrb	r2, [r7, #3]
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7f8 fb34 	bl	8004984 <HAL_PCD_EP_SetStall>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4618      	mov	r0, r3
 800c324:	f000 f8de 	bl	800c4e4 <USBD_Get_USB_Status>
 800c328:	4603      	mov	r3, r0
 800c32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c350:	78fa      	ldrb	r2, [r7, #3]
 800c352:	4611      	mov	r1, r2
 800c354:	4618      	mov	r0, r3
 800c356:	f7f8 fb79 	bl	8004a4c <HAL_PCD_EP_ClrStall>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	4618      	mov	r0, r3
 800c362:	f000 f8bf 	bl	800c4e4 <USBD_Get_USB_Status>
 800c366:	4603      	mov	r3, r0
 800c368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	da0b      	bge.n	800c3a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c396:	68f9      	ldr	r1, [r7, #12]
 800c398:	4613      	mov	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	333e      	adds	r3, #62	@ 0x3e
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	e00b      	b.n	800c3c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3a8:	78fb      	ldrb	r3, [r7, #3]
 800c3aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	440b      	add	r3, r1
 800c3ba:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c3be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3e6:	78fa      	ldrb	r2, [r7, #3]
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7f8 f946 	bl	800467c <HAL_PCD_SetAddress>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f874 	bl	800c4e4 <USBD_Get_USB_Status>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c400:	7bbb      	ldrb	r3, [r7, #14]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b086      	sub	sp, #24
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
 800c416:	460b      	mov	r3, r1
 800c418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c428:	7af9      	ldrb	r1, [r7, #11]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	f7f8 fa5f 	bl	80048f0 <HAL_PCD_EP_Transmit>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 f853 	bl	800c4e4 <USBD_Get_USB_Status>
 800c43e:	4603      	mov	r3, r0
 800c440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c442:	7dbb      	ldrb	r3, [r7, #22]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	607a      	str	r2, [r7, #4]
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	460b      	mov	r3, r1
 800c45a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c46a:	7af9      	ldrb	r1, [r7, #11]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	f7f8 f9db 	bl	800482a <HAL_PCD_EP_Receive>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f832 	bl	800c4e4 <USBD_Get_USB_Status>
 800c480:	4603      	mov	r3, r0
 800c482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c484:	7dbb      	ldrb	r3, [r7, #22]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	460b      	mov	r3, r1
 800c498:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4a0:	78fa      	ldrb	r2, [r7, #3]
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f8 fa0b 	bl	80048c0 <HAL_PCD_EP_GetRxCount>
 800c4aa:	4603      	mov	r3, r0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4bc:	4b03      	ldr	r3, [pc, #12]	@ (800c4cc <USBD_static_malloc+0x18>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20001af8 	.word	0x20001af8

0800c4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d817      	bhi.n	800c528 <USBD_Get_USB_Status+0x44>
 800c4f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c500 <USBD_Get_USB_Status+0x1c>)
 800c4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fe:	bf00      	nop
 800c500:	0800c511 	.word	0x0800c511
 800c504:	0800c517 	.word	0x0800c517
 800c508:	0800c51d 	.word	0x0800c51d
 800c50c:	0800c523 	.word	0x0800c523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]
    break;
 800c514:	e00b      	b.n	800c52e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c516:	2303      	movs	r3, #3
 800c518:	73fb      	strb	r3, [r7, #15]
    break;
 800c51a:	e008      	b.n	800c52e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c51c:	2301      	movs	r3, #1
 800c51e:	73fb      	strb	r3, [r7, #15]
    break;
 800c520:	e005      	b.n	800c52e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c522:	2303      	movs	r3, #3
 800c524:	73fb      	strb	r3, [r7, #15]
    break;
 800c526:	e002      	b.n	800c52e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c528:	2303      	movs	r3, #3
 800c52a:	73fb      	strb	r3, [r7, #15]
    break;
 800c52c:	bf00      	nop
  }
  return usb_status;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <page_select>:

flag page_flag = {};


void page_select()
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
//
//		case SELECT_PRODUCT_NORM_PAGE :
//
//		break;
//	}
}
 800c540:	bf00      	nop
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
	...

0800c54c <select_product_id>:
uint16_t gl_selected_pause = 0;
uint8_t gl_selected_flag = 1;


int select_product_id(uint8_t id)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	71fb      	strb	r3, [r7, #7]
	//Select product using buttons
	 if(but_state_right == BUT_SHORT)
 800c556:	4b18      	ldr	r3, [pc, #96]	@ (800c5b8 <select_product_id+0x6c>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d111      	bne.n	800c582 <select_product_id+0x36>
		  {
//		 	 HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
//		 	 HAL_Delay(42);
//		 	 HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
			  if(id<60){
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	2b3b      	cmp	r3, #59	@ 0x3b
 800c562:	d803      	bhi.n	800c56c <select_product_id+0x20>

				  id++;
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	3301      	adds	r3, #1
 800c568:	71fb      	strb	r3, [r7, #7]
 800c56a:	e001      	b.n	800c570 <select_product_id+0x24>
			  }
			  else
			  {
				  id = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	71fb      	strb	r3, [r7, #7]
			  }
			  gl_selected_flag = 1;
 800c570:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <select_product_id+0x70>)
 800c572:	2201      	movs	r2, #1
 800c574:	701a      	strb	r2, [r3, #0]
			  gl_selected_pause = 0;
 800c576:	4b12      	ldr	r3, [pc, #72]	@ (800c5c0 <select_product_id+0x74>)
 800c578:	2200      	movs	r2, #0
 800c57a:	801a      	strh	r2, [r3, #0]
			  //gl_selected_pause = 1;
			  but_state_reset();
 800c57c:	f7f4 f8c6 	bl	800070c <but_state_reset>
 800c580:	e014      	b.n	800c5ac <select_product_id+0x60>

		  }
		  else if(but_state_left==BUT_SHORT)
 800c582:	4b10      	ldr	r3, [pc, #64]	@ (800c5c4 <select_product_id+0x78>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b02      	cmp	r3, #2
 800c588:	d110      	bne.n	800c5ac <select_product_id+0x60>
		  {
			 // HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_SET);
		//	  HAL_Delay(42);
		//	  HAL_GPIO_WritePin(VIBRO_GPIO_Port, VIBRO_Pin, GPIO_PIN_RESET);
			  if(id>0)
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <select_product_id+0x4c>
			  {
				  id--;
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	3b01      	subs	r3, #1
 800c594:	71fb      	strb	r3, [r7, #7]
 800c596:	e001      	b.n	800c59c <select_product_id+0x50>
			  }
			  else
			  {
				  id = 60;
 800c598:	233c      	movs	r3, #60	@ 0x3c
 800c59a:	71fb      	strb	r3, [r7, #7]
			  }
			  gl_selected_flag = 1;
 800c59c:	4b07      	ldr	r3, [pc, #28]	@ (800c5bc <select_product_id+0x70>)
 800c59e:	2201      	movs	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
			  gl_selected_pause = 0;
 800c5a2:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <select_product_id+0x74>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	801a      	strh	r2, [r3, #0]
			 // gl_selected_pause = 1;
			  but_state_reset();
 800c5a8:	f7f4 f8b0 	bl	800070c <but_state_reset>
		  }
	 //Select product using touch slider sensor

	 return id;
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200008e2 	.word	0x200008e2
 800c5bc:	20000103 	.word	0x20000103
 800c5c0:	20001d18 	.word	0x20001d18
 800c5c4:	200008e1 	.word	0x200008e1

0800c5c8 <display_selected_product>:

void display_selected_product(uint8_t id)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af04      	add	r7, sp, #16
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	71fb      	strb	r3, [r7, #7]

	ST7735_WriteString(50, 2,  product_array[id].name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800c5d2:	79fa      	ldrb	r2, [r7, #7]
 800c5d4:	49ad      	ldr	r1, [pc, #692]	@ (800c88c <display_selected_product+0x2c4>)
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	440b      	add	r3, r1
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	6819      	ldr	r1, [r3, #0]
 800c5e4:	4baa      	ldr	r3, [pc, #680]	@ (800c890 <display_selected_product+0x2c8>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	9202      	str	r2, [sp, #8]
 800c5ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5ee:	9201      	str	r2, [sp, #4]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	9200      	str	r2, [sp, #0]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	460a      	mov	r2, r1
 800c5f8:	2102      	movs	r1, #2
 800c5fa:	2032      	movs	r0, #50	@ 0x32
 800c5fc:	f7ff f983 	bl	800b906 <ST7735_WriteString>
	if(id == 0)
 800c600:	79fb      	ldrb	r3, [r7, #7]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d15a      	bne.n	800c6bc <display_selected_product+0xf4>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800c606:	79fa      	ldrb	r2, [r7, #7]
 800c608:	49a0      	ldr	r1, [pc, #640]	@ (800c88c <display_selected_product+0x2c4>)
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	440b      	add	r3, r1
 800c614:	330a      	adds	r3, #10
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	79fa      	ldrb	r2, [r7, #7]
 800c61c:	499b      	ldr	r1, [pc, #620]	@ (800c88c <display_selected_product+0x2c4>)
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	330c      	adds	r3, #12
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	2315      	movs	r3, #21
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	233a      	movs	r3, #58	@ 0x3a
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	232e      	movs	r3, #46	@ 0x2e
 800c638:	222e      	movs	r2, #46	@ 0x2e
 800c63a:	f7f3 ff57 	bl	80004ec <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	4992      	ldr	r1, [pc, #584]	@ (800c88c <display_selected_product+0x2c4>)
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	440b      	add	r3, r1
 800c64e:	3307      	adds	r3, #7
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	498c      	ldr	r1, [pc, #560]	@ (800c88c <display_selected_product+0x2c4>)
 800c65a:	4613      	mov	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	4413      	add	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	440b      	add	r3, r1
 800c664:	3308      	adds	r3, #8
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	4619      	mov	r1, r3
 800c66a:	2319      	movs	r3, #25
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	2376      	movs	r3, #118	@ 0x76
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2324      	movs	r3, #36	@ 0x24
 800c674:	2224      	movs	r2, #36	@ 0x24
 800c676:	f7f3 ff39 	bl	80004ec <SPI_Flash_to_LCD>
		ST7735_FillRectangle(LEFT_PIC, ST7735_BLACK);
 800c67a:	2300      	movs	r3, #0
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	2319      	movs	r3, #25
 800c680:	2205      	movs	r2, #5
 800c682:	2124      	movs	r1, #36	@ 0x24
 800c684:	2024      	movs	r0, #36	@ 0x24
 800c686:	f7ff f989 	bl	800b99c <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	332e      	adds	r3, #46	@ 0x2e
 800c690:	b29a      	uxth	r2, r3
 800c692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	234b      	movs	r3, #75	@ 0x4b
 800c69a:	2102      	movs	r1, #2
 800c69c:	2008      	movs	r0, #8
 800c69e:	f7ff f97d 	bl	800b99c <ST7735_FillRectangle>
		ST7735_FillRectangle(60,2, 46+8+id,75, ST7735_BG_DEF); // правый прямоугольник
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	3336      	adds	r3, #54	@ 0x36
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	f641 1325 	movw	r3, #6437	@ 0x1925
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	234b      	movs	r3, #75	@ 0x4b
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	203c      	movs	r0, #60	@ 0x3c
 800c6b6:	f7ff f971 	bl	800b99c <ST7735_FillRectangle>
 800c6ba:	e0e0      	b.n	800c87e <display_selected_product+0x2b6>
	}
	else if(id>0 && id<60)
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 8082 	beq.w	800c7c8 <display_selected_product+0x200>
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	2b3b      	cmp	r3, #59	@ 0x3b
 800c6c8:	d87e      	bhi.n	800c7c8 <display_selected_product+0x200>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800c6ca:	79fa      	ldrb	r2, [r7, #7]
 800c6cc:	496f      	ldr	r1, [pc, #444]	@ (800c88c <display_selected_product+0x2c4>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	440b      	add	r3, r1
 800c6d8:	330a      	adds	r3, #10
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	79fa      	ldrb	r2, [r7, #7]
 800c6e0:	496a      	ldr	r1, [pc, #424]	@ (800c88c <display_selected_product+0x2c4>)
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	440b      	add	r3, r1
 800c6ec:	330c      	adds	r3, #12
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	2315      	movs	r3, #21
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	233a      	movs	r3, #58	@ 0x3a
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	232e      	movs	r3, #46	@ 0x2e
 800c6fc:	222e      	movs	r2, #46	@ 0x2e
 800c6fe:	f7f3 fef5 	bl	80004ec <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800c702:	79fb      	ldrb	r3, [r7, #7]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	4961      	ldr	r1, [pc, #388]	@ (800c88c <display_selected_product+0x2c4>)
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	3307      	adds	r3, #7
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	495b      	ldr	r1, [pc, #364]	@ (800c88c <display_selected_product+0x2c4>)
 800c71e:	4613      	mov	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	440b      	add	r3, r1
 800c728:	3308      	adds	r3, #8
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	4619      	mov	r1, r3
 800c72e:	2319      	movs	r3, #25
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	2376      	movs	r3, #118	@ 0x76
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	2324      	movs	r3, #36	@ 0x24
 800c738:	2224      	movs	r2, #36	@ 0x24
 800c73a:	f7f3 fed7 	bl	80004ec <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	1e5a      	subs	r2, r3, #1
 800c742:	4952      	ldr	r1, [pc, #328]	@ (800c88c <display_selected_product+0x2c4>)
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	3307      	adds	r3, #7
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	4618      	mov	r0, r3
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	1e5a      	subs	r2, r3, #1
 800c758:	494c      	ldr	r1, [pc, #304]	@ (800c88c <display_selected_product+0x2c4>)
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	3308      	adds	r3, #8
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	4619      	mov	r1, r3
 800c76a:	2319      	movs	r3, #25
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	2305      	movs	r3, #5
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	2324      	movs	r3, #36	@ 0x24
 800c774:	2224      	movs	r2, #36	@ 0x24
 800c776:	f7f3 feb9 	bl	80004ec <SPI_Flash_to_LCD>

		ST7735_FillRectangle(60-id,2, 46+8+id,75, ST7735_BG_DEF);// правый прямоугольник
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800c782:	b298      	uxth	r0, r3
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	b29b      	uxth	r3, r3
 800c788:	3336      	adds	r3, #54	@ 0x36
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	f641 1325 	movw	r3, #6437	@ 0x1925
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	234b      	movs	r3, #75	@ 0x4b
 800c794:	2102      	movs	r1, #2
 800c796:	f7ff f901 	bl	800b99c <ST7735_FillRectangle>
		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	332e      	adds	r3, #46	@ 0x2e
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	234b      	movs	r3, #75	@ 0x4b
 800c7aa:	2102      	movs	r1, #2
 800c7ac:	2008      	movs	r0, #8
 800c7ae:	f7ff f8f5 	bl	800b99c <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	b298      	uxth	r0, r3
 800c7b6:	f641 1325 	movw	r3, #6437	@ 0x1925
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	234b      	movs	r3, #75	@ 0x4b
 800c7be:	222e      	movs	r2, #46	@ 0x2e
 800c7c0:	2102      	movs	r1, #2
 800c7c2:	f7ff f8eb 	bl	800b99c <ST7735_FillRectangle>
	{
 800c7c6:	e05a      	b.n	800c87e <display_selected_product+0x2b6>
	}
	else if(id==60)
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	2b3c      	cmp	r3, #60	@ 0x3c
 800c7cc:	d157      	bne.n	800c87e <display_selected_product+0x2b6>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800c7ce:	79fa      	ldrb	r2, [r7, #7]
 800c7d0:	492e      	ldr	r1, [pc, #184]	@ (800c88c <display_selected_product+0x2c4>)
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	440b      	add	r3, r1
 800c7dc:	330a      	adds	r3, #10
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	79fa      	ldrb	r2, [r7, #7]
 800c7e4:	4929      	ldr	r1, [pc, #164]	@ (800c88c <display_selected_product+0x2c4>)
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	440b      	add	r3, r1
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	2315      	movs	r3, #21
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	233a      	movs	r3, #58	@ 0x3a
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	232e      	movs	r3, #46	@ 0x2e
 800c800:	222e      	movs	r2, #46	@ 0x2e
 800c802:	f7f3 fe73 	bl	80004ec <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	1e5a      	subs	r2, r3, #1
 800c80a:	4920      	ldr	r1, [pc, #128]	@ (800c88c <display_selected_product+0x2c4>)
 800c80c:	4613      	mov	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4413      	add	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	3307      	adds	r3, #7
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	4618      	mov	r0, r3
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	1e5a      	subs	r2, r3, #1
 800c820:	491a      	ldr	r1, [pc, #104]	@ (800c88c <display_selected_product+0x2c4>)
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	3308      	adds	r3, #8
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	4619      	mov	r1, r3
 800c832:	2319      	movs	r3, #25
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	2305      	movs	r3, #5
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	2324      	movs	r3, #36	@ 0x24
 800c83c:	2224      	movs	r2, #36	@ 0x24
 800c83e:	f7f3 fe55 	bl	80004ec <SPI_Flash_to_LCD>
		ST7735_FillRectangle(RIGHT_PIC, ST7735_BLACK);
 800c842:	2300      	movs	r3, #0
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	2319      	movs	r3, #25
 800c848:	2276      	movs	r2, #118	@ 0x76
 800c84a:	2124      	movs	r1, #36	@ 0x24
 800c84c:	2024      	movs	r0, #36	@ 0x24
 800c84e:	f7ff f8a5 	bl	800b99c <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	b29b      	uxth	r3, r3
 800c856:	332e      	adds	r3, #46	@ 0x2e
 800c858:	b29a      	uxth	r2, r3
 800c85a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	234b      	movs	r3, #75	@ 0x4b
 800c862:	2102      	movs	r1, #2
 800c864:	2008      	movs	r0, #8
 800c866:	f7ff f899 	bl	800b99c <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	b298      	uxth	r0, r3
 800c86e:	f641 1325 	movw	r3, #6437	@ 0x1925
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	234b      	movs	r3, #75	@ 0x4b
 800c876:	222e      	movs	r2, #46	@ 0x2e
 800c878:	2102      	movs	r1, #2
 800c87a:	f7ff f88f 	bl	800b99c <ST7735_FillRectangle>
	}
	//HAL_TIM_Base_Start_IT(&htim2);

	//gl_selected_pause = 1;

	gl_selected_flag = 0;
 800c87e:	4b05      	ldr	r3, [pc, #20]	@ (800c894 <display_selected_product+0x2cc>)
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	20000104 	.word	0x20000104
 800c890:	20000098 	.word	0x20000098
 800c894:	20000103 	.word	0x20000103

0800c898 <MPR121_setregister>:
uint8_t left_treshold = 0;
uint8_t right_treshold = 0;
uint8_t touch_direction = 0; //1 -up ,2-down

void MPR121_setregister(uint16_t regaddress, uint8_t value)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af04      	add	r7, sp, #16
 800c89e:	4603      	mov	r3, r0
 800c8a0:	460a      	mov	r2, r1
 800c8a2:	80fb      	strh	r3, [r7, #6]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800c8a8:	88fa      	ldrh	r2, [r7, #6]
 800c8aa:	2364      	movs	r3, #100	@ 0x64
 800c8ac:	9302      	str	r3, [sp, #8]
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	1d7b      	adds	r3, r7, #5
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	21b4      	movs	r1, #180	@ 0xb4
 800c8ba:	4803      	ldr	r0, [pc, #12]	@ (800c8c8 <MPR121_setregister+0x30>)
 800c8bc:	f7f6 fa74 	bl	8002da8 <HAL_I2C_Mem_Write>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	20000634 	.word	0x20000634

0800c8cc <MPR121_readregister>:
int MPR121_readregister(uint16_t regaddress, uint8_t value)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	460a      	mov	r2, r1
 800c8d6:	80fb      	strh	r3, [r7, #6]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Read(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800c8dc:	88fa      	ldrh	r2, [r7, #6]
 800c8de:	2364      	movs	r3, #100	@ 0x64
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	1d7b      	adds	r3, r7, #5
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	21b4      	movs	r1, #180	@ 0xb4
 800c8ee:	4804      	ldr	r0, [pc, #16]	@ (800c900 <MPR121_readregister+0x34>)
 800c8f0:	f7f6 fb54 	bl	8002f9c <HAL_I2C_Mem_Read>
	 return value;
 800c8f4:	797b      	ldrb	r3, [r7, #5]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20000634 	.word	0x20000634

0800c904 <touch_slider>:

void touch_slider()
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800c90a:	488a      	ldr	r0, [pc, #552]	@ (800cb34 <touch_slider+0x230>)
 800c90c:	f7fa fa80 	bl	8006e10 <HAL_TIM_Base_Start_IT>
		  		uint8_t j= 0x04;
 800c910:	2304      	movs	r3, #4
 800c912:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800c914:	2300      	movs	r3, #0
 800c916:	60bb      	str	r3, [r7, #8]
 800c918:	e014      	b.n	800c944 <touch_slider+0x40>
		  		{
		  			capreadbuffer[i] = MPR121_readregister(j,test1);
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4a86      	ldr	r2, [pc, #536]	@ (800cb38 <touch_slider+0x234>)
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	4611      	mov	r1, r2
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff ffd1 	bl	800c8cc <MPR121_readregister>
 800c92a:	4603      	mov	r3, r0
 800c92c:	b2d9      	uxtb	r1, r3
 800c92e:	4a83      	ldr	r2, [pc, #524]	@ (800cb3c <touch_slider+0x238>)
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	4413      	add	r3, r2
 800c934:	460a      	mov	r2, r1
 800c936:	701a      	strb	r2, [r3, #0]
		  			j+=2;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	3302      	adds	r3, #2
 800c93c:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	3301      	adds	r3, #1
 800c942:	60bb      	str	r3, [r7, #8]
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b04      	cmp	r3, #4
 800c948:	dde7      	ble.n	800c91a <touch_slider+0x16>
		  		}

		  		for(int i = 0;i<5;i++)
 800c94a:	2300      	movs	r3, #0
 800c94c:	607b      	str	r3, [r7, #4]
 800c94e:	e019      	b.n	800c984 <touch_slider+0x80>
		  		{
		//  			sprintf(char_buffer, "%03d", capreadbuffer[i]);
		  //			ST7735_WriteString(32*i,0 , char_buffer, Font_7x10, ST7735_WHITE, ST7735_BG_DEF);

		  			if(capreadbuffer[i] <= touch_thrsh[i] && first_touch <= 0)
 800c950:	4a7a      	ldr	r2, [pc, #488]	@ (800cb3c <touch_slider+0x238>)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4413      	add	r3, r2
 800c956:	781a      	ldrb	r2, [r3, #0]
 800c958:	4979      	ldr	r1, [pc, #484]	@ (800cb40 <touch_slider+0x23c>)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	440b      	add	r3, r1
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d80c      	bhi.n	800c97e <touch_slider+0x7a>
 800c964:	4b77      	ldr	r3, [pc, #476]	@ (800cb44 <touch_slider+0x240>)
 800c966:	f993 3000 	ldrsb.w	r3, [r3]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dc07      	bgt.n	800c97e <touch_slider+0x7a>
		  			{
		  				gl_touch_accel = 1;
 800c96e:	4b76      	ldr	r3, [pc, #472]	@ (800cb48 <touch_slider+0x244>)
 800c970:	2201      	movs	r2, #1
 800c972:	801a      	strh	r2, [r3, #0]
		  				first_touch = i;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	b25a      	sxtb	r2, r3
 800c978:	4b72      	ldr	r3, [pc, #456]	@ (800cb44 <touch_slider+0x240>)
 800c97a:	701a      	strb	r2, [r3, #0]
		  		//		sprintf(char_buffer, "%01d", first_touch);
		  		//		ST7735_WriteString(15,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);
		  //				HAL_TIM_Base_Start_IT(&htim5);
		  				break;
 800c97c:	e005      	b.n	800c98a <touch_slider+0x86>
		  		for(int i = 0;i<5;i++)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	3301      	adds	r3, #1
 800c982:	607b      	str	r3, [r7, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b04      	cmp	r3, #4
 800c988:	dde2      	ble.n	800c950 <touch_slider+0x4c>
		  			}

		  		}
		  		if(first_touch >= 0 && second_touch!=first_touch) //second_flag == 0)
 800c98a:	4b6e      	ldr	r3, [pc, #440]	@ (800cb44 <touch_slider+0x240>)
 800c98c:	f993 3000 	ldrsb.w	r3, [r3]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f2c0 80c8 	blt.w	800cb26 <touch_slider+0x222>
 800c996:	4b6d      	ldr	r3, [pc, #436]	@ (800cb4c <touch_slider+0x248>)
 800c998:	f993 2000 	ldrsb.w	r2, [r3]
 800c99c:	4b69      	ldr	r3, [pc, #420]	@ (800cb44 <touch_slider+0x240>)
 800c99e:	f993 3000 	ldrsb.w	r3, [r3]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	f000 80bf 	beq.w	800cb26 <touch_slider+0x222>
		  		{
		  			if(second_touch>=0)
 800c9a8:	4b68      	ldr	r3, [pc, #416]	@ (800cb4c <touch_slider+0x248>)
 800c9aa:	f993 3000 	ldrsb.w	r3, [r3]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	db66      	blt.n	800ca80 <touch_slider+0x17c>
		  			{
		  				//sprintf(char_buffer, "%01d", second_touch);
		  				//ST7735_WriteString(40,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);


		  				if((second_touch-first_touch == -1 || second_touch-first_touch == -2 )&& left_treshold!=1)//
 800c9b2:	4b66      	ldr	r3, [pc, #408]	@ (800cb4c <touch_slider+0x248>)
 800c9b4:	f993 3000 	ldrsb.w	r3, [r3]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	4b62      	ldr	r3, [pc, #392]	@ (800cb44 <touch_slider+0x240>)
 800c9bc:	f993 3000 	ldrsb.w	r3, [r3]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d00a      	beq.n	800c9de <touch_slider+0xda>
 800c9c8:	4b60      	ldr	r3, [pc, #384]	@ (800cb4c <touch_slider+0x248>)
 800c9ca:	f993 3000 	ldrsb.w	r3, [r3]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4b5c      	ldr	r3, [pc, #368]	@ (800cb44 <touch_slider+0x240>)
 800c9d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	f113 0f02 	cmn.w	r3, #2
 800c9dc:	d11b      	bne.n	800ca16 <touch_slider+0x112>
 800c9de:	4b5c      	ldr	r3, [pc, #368]	@ (800cb50 <touch_slider+0x24c>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d017      	beq.n	800ca16 <touch_slider+0x112>
		  				{
		  					gl_touch_change_id = 1;
 800c9e6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb54 <touch_slider+0x250>)
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	701a      	strb	r2, [r3, #0]

		  					//touch_accel_to_disp = gl_touch_accel_inc;
		  					//gl_touch_accel = 0;
		  					//gl_touch_accel_inc = 0;

		  					touch_direction = UP;
 800c9ec:	4b5a      	ldr	r3, [pc, #360]	@ (800cb58 <touch_slider+0x254>)
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	701a      	strb	r2, [r3, #0]

		  					if(gl_id_to_display<60)
 800c9f2:	4b5a      	ldr	r3, [pc, #360]	@ (800cb5c <touch_slider+0x258>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	2b3b      	cmp	r3, #59	@ 0x3b
 800c9f8:	d806      	bhi.n	800ca08 <touch_slider+0x104>
		  						//	id_to_display+=3;
		  						//	id_to_displ_fast_scroll = 1 ;
		  					//	}
		  						//else
		  						//{
		  						gl_id_to_display++;
 800c9fa:	4b58      	ldr	r3, [pc, #352]	@ (800cb5c <touch_slider+0x258>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	4b56      	ldr	r3, [pc, #344]	@ (800cb5c <touch_slider+0x258>)
 800ca04:	701a      	strb	r2, [r3, #0]
 800ca06:	e002      	b.n	800ca0e <touch_slider+0x10a>
		  						//}
		  					}
		  					else
		  					{
		  						gl_id_to_display = 0;
 800ca08:	4b54      	ldr	r3, [pc, #336]	@ (800cb5c <touch_slider+0x258>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800ca0e:	4b54      	ldr	r3, [pc, #336]	@ (800cb60 <touch_slider+0x25c>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e034      	b.n	800ca80 <touch_slider+0x17c>
		  				//	HAL_TIM_Base_Stop_IT(&htim2);
		  				}
		  				else if((second_touch-first_touch == 1 || second_touch-first_touch == 2)&& right_treshold!=1)//
 800ca16:	4b4d      	ldr	r3, [pc, #308]	@ (800cb4c <touch_slider+0x248>)
 800ca18:	f993 3000 	ldrsb.w	r3, [r3]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b49      	ldr	r3, [pc, #292]	@ (800cb44 <touch_slider+0x240>)
 800ca20:	f993 3000 	ldrsb.w	r3, [r3]
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d009      	beq.n	800ca3e <touch_slider+0x13a>
 800ca2a:	4b48      	ldr	r3, [pc, #288]	@ (800cb4c <touch_slider+0x248>)
 800ca2c:	f993 3000 	ldrsb.w	r3, [r3]
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b44      	ldr	r3, [pc, #272]	@ (800cb44 <touch_slider+0x240>)
 800ca34:	f993 3000 	ldrsb.w	r3, [r3]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d120      	bne.n	800ca80 <touch_slider+0x17c>
 800ca3e:	4b49      	ldr	r3, [pc, #292]	@ (800cb64 <touch_slider+0x260>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d01c      	beq.n	800ca80 <touch_slider+0x17c>
		  				{
		  					gl_touch_change_id = 1;
 800ca46:	4b43      	ldr	r3, [pc, #268]	@ (800cb54 <touch_slider+0x250>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	701a      	strb	r2, [r3, #0]

		  						  					//touch_accel_to_disp = gl_touch_accel_inc;
		  						  							gl_touch_accel = 0;
 800ca4c:	4b3e      	ldr	r3, [pc, #248]	@ (800cb48 <touch_slider+0x244>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	801a      	strh	r2, [r3, #0]
		  						  							gl_touch_accel_inc = 0;
 800ca52:	4b45      	ldr	r3, [pc, #276]	@ (800cb68 <touch_slider+0x264>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	801a      	strh	r2, [r3, #0]
		  					touch_direction = DOWN;
 800ca58:	4b3f      	ldr	r3, [pc, #252]	@ (800cb58 <touch_slider+0x254>)
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	701a      	strb	r2, [r3, #0]
		  					if(gl_id_to_display>0)
 800ca5e:	4b3f      	ldr	r3, [pc, #252]	@ (800cb5c <touch_slider+0x258>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d006      	beq.n	800ca74 <touch_slider+0x170>
	//	  							id_to_display-=3;
	//	  							//id_to_displ_fast_scroll = 2 ;
	//	  						}
	//	  						else
		  					//	{
		  						gl_id_to_display--;//id_changed_by_touch = 0;
 800ca66:	4b3d      	ldr	r3, [pc, #244]	@ (800cb5c <touch_slider+0x258>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	4b3b      	ldr	r3, [pc, #236]	@ (800cb5c <touch_slider+0x258>)
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	e002      	b.n	800ca7a <touch_slider+0x176>


		  					}
		  					else
		  					{
		  						gl_id_to_display = 60;
 800ca74:	4b39      	ldr	r3, [pc, #228]	@ (800cb5c <touch_slider+0x258>)
 800ca76:	223c      	movs	r2, #60	@ 0x3c
 800ca78:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800ca7a:	4b39      	ldr	r3, [pc, #228]	@ (800cb60 <touch_slider+0x25c>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
		  				//	HAL_TIM_Base_Stop_IT(&htim2);

		  				}

		  			}
		  			if(left_treshold==1)
 800ca80:	4b33      	ldr	r3, [pc, #204]	@ (800cb50 <touch_slider+0x24c>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d115      	bne.n	800cab4 <touch_slider+0x1b0>
		  			{
		  				if((first_touch == 1 ||  first_touch == 2) && second_touch == 0)
 800ca88:	4b2e      	ldr	r3, [pc, #184]	@ (800cb44 <touch_slider+0x240>)
 800ca8a:	f993 3000 	ldrsb.w	r3, [r3]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d004      	beq.n	800ca9c <touch_slider+0x198>
 800ca92:	4b2c      	ldr	r3, [pc, #176]	@ (800cb44 <touch_slider+0x240>)
 800ca94:	f993 3000 	ldrsb.w	r3, [r3]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d108      	bne.n	800caae <touch_slider+0x1aa>
 800ca9c:	4b2b      	ldr	r3, [pc, #172]	@ (800cb4c <touch_slider+0x248>)
 800ca9e:	f993 3000 	ldrsb.w	r3, [r3]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d103      	bne.n	800caae <touch_slider+0x1aa>
		  				{
		  					left_treshold = 2;
 800caa6:	4b2a      	ldr	r3, [pc, #168]	@ (800cb50 <touch_slider+0x24c>)
 800caa8:	2202      	movs	r2, #2
 800caaa:	701a      	strb	r2, [r3, #0]
 800caac:	e002      	b.n	800cab4 <touch_slider+0x1b0>
		  				}
		  				else
		  				{
		  					left_treshold  = 0;
 800caae:	4b28      	ldr	r3, [pc, #160]	@ (800cb50 <touch_slider+0x24c>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 0 && second_touch == 1)
 800cab4:	4b23      	ldr	r3, [pc, #140]	@ (800cb44 <touch_slider+0x240>)
 800cab6:	f993 3000 	ldrsb.w	r3, [r3]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d107      	bne.n	800cace <touch_slider+0x1ca>
 800cabe:	4b23      	ldr	r3, [pc, #140]	@ (800cb4c <touch_slider+0x248>)
 800cac0:	f993 3000 	ldrsb.w	r3, [r3]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d102      	bne.n	800cace <touch_slider+0x1ca>
		  			{
		  				left_treshold = 1;
 800cac8:	4b21      	ldr	r3, [pc, #132]	@ (800cb50 <touch_slider+0x24c>)
 800caca:	2201      	movs	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
		  			}

		  			if(right_treshold==1)
 800cace:	4b25      	ldr	r3, [pc, #148]	@ (800cb64 <touch_slider+0x260>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d115      	bne.n	800cb02 <touch_slider+0x1fe>
		  			{
		  				if((first_touch == 3 ||  first_touch == 2) && second_touch == 4)
 800cad6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb44 <touch_slider+0x240>)
 800cad8:	f993 3000 	ldrsb.w	r3, [r3]
 800cadc:	2b03      	cmp	r3, #3
 800cade:	d004      	beq.n	800caea <touch_slider+0x1e6>
 800cae0:	4b18      	ldr	r3, [pc, #96]	@ (800cb44 <touch_slider+0x240>)
 800cae2:	f993 3000 	ldrsb.w	r3, [r3]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d108      	bne.n	800cafc <touch_slider+0x1f8>
 800caea:	4b18      	ldr	r3, [pc, #96]	@ (800cb4c <touch_slider+0x248>)
 800caec:	f993 3000 	ldrsb.w	r3, [r3]
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d103      	bne.n	800cafc <touch_slider+0x1f8>
		  				{
		  					right_treshold = 2;
 800caf4:	4b1b      	ldr	r3, [pc, #108]	@ (800cb64 <touch_slider+0x260>)
 800caf6:	2202      	movs	r2, #2
 800caf8:	701a      	strb	r2, [r3, #0]
 800cafa:	e002      	b.n	800cb02 <touch_slider+0x1fe>
		  				}
		  				else
		  				{
		  					right_treshold  = 0;
 800cafc:	4b19      	ldr	r3, [pc, #100]	@ (800cb64 <touch_slider+0x260>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 4 && second_touch == 3)
 800cb02:	4b10      	ldr	r3, [pc, #64]	@ (800cb44 <touch_slider+0x240>)
 800cb04:	f993 3000 	ldrsb.w	r3, [r3]
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d107      	bne.n	800cb1c <touch_slider+0x218>
 800cb0c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb4c <touch_slider+0x248>)
 800cb0e:	f993 3000 	ldrsb.w	r3, [r3]
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d102      	bne.n	800cb1c <touch_slider+0x218>
		  			{
		  				right_treshold = 1;
 800cb16:	4b13      	ldr	r3, [pc, #76]	@ (800cb64 <touch_slider+0x260>)
 800cb18:	2201      	movs	r2, #1
 800cb1a:	701a      	strb	r2, [r3, #0]
		  			}
		  			second_touch = first_touch;
 800cb1c:	4b09      	ldr	r3, [pc, #36]	@ (800cb44 <touch_slider+0x240>)
 800cb1e:	f993 2000 	ldrsb.w	r2, [r3]
 800cb22:	4b0a      	ldr	r3, [pc, #40]	@ (800cb4c <touch_slider+0x248>)
 800cb24:	701a      	strb	r2, [r3, #0]

		  		else if(touch_direction == NONE)
		  		{

		  		}
		  		first_touch = -100;
 800cb26:	4b07      	ldr	r3, [pc, #28]	@ (800cb44 <touch_slider+0x240>)
 800cb28:	229c      	movs	r2, #156	@ 0x9c
 800cb2a:	701a      	strb	r2, [r3, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20000808 	.word	0x20000808
 800cb38:	20001d26 	.word	0x20001d26
 800cb3c:	20001d1c 	.word	0x20001d1c
 800cb40:	200005c8 	.word	0x200005c8
 800cb44:	200005cd 	.word	0x200005cd
 800cb48:	20000902 	.word	0x20000902
 800cb4c:	200005ce 	.word	0x200005ce
 800cb50:	20001d27 	.word	0x20001d27
 800cb54:	20000900 	.word	0x20000900
 800cb58:	20001d29 	.word	0x20001d29
 800cb5c:	200008f5 	.word	0x200008f5
 800cb60:	200008e0 	.word	0x200008e0
 800cb64:	20001d28 	.word	0x20001d28
 800cb68:	20000904 	.word	0x20000904

0800cb6c <touch_init>:

void touch_init()
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
	MPR121_setregister(MHD_R,0x01);
 800cb70:	2101      	movs	r1, #1
 800cb72:	202b      	movs	r0, #43	@ 0x2b
 800cb74:	f7ff fe90 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(NHD_R,0x01);
 800cb78:	2101      	movs	r1, #1
 800cb7a:	202c      	movs	r0, #44	@ 0x2c
 800cb7c:	f7ff fe8c 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(NCL_R,0x00);
 800cb80:	2100      	movs	r1, #0
 800cb82:	202d      	movs	r0, #45	@ 0x2d
 800cb84:	f7ff fe88 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(FDL_R,0x00);
 800cb88:	2100      	movs	r1, #0
 800cb8a:	202e      	movs	r0, #46	@ 0x2e
 800cb8c:	f7ff fe84 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(MHD_F,0x01);
 800cb90:	2101      	movs	r1, #1
 800cb92:	202f      	movs	r0, #47	@ 0x2f
 800cb94:	f7ff fe80 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(NHD_F,0x01);
 800cb98:	2101      	movs	r1, #1
 800cb9a:	2030      	movs	r0, #48	@ 0x30
 800cb9c:	f7ff fe7c 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(NCL_F,0xFF);
 800cba0:	21ff      	movs	r1, #255	@ 0xff
 800cba2:	2031      	movs	r0, #49	@ 0x31
 800cba4:	f7ff fe78 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(FDL_F,0x02);
 800cba8:	2102      	movs	r1, #2
 800cbaa:	2032      	movs	r0, #50	@ 0x32
 800cbac:	f7ff fe74 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE0_T,TOU_THRESH);
 800cbb0:	2106      	movs	r1, #6
 800cbb2:	2041      	movs	r0, #65	@ 0x41
 800cbb4:	f7ff fe70 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE0_R,TOU_THRESH);
 800cbb8:	2106      	movs	r1, #6
 800cbba:	2042      	movs	r0, #66	@ 0x42
 800cbbc:	f7ff fe6c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE1_T,TOU_THRESH);
 800cbc0:	2106      	movs	r1, #6
 800cbc2:	2043      	movs	r0, #67	@ 0x43
 800cbc4:	f7ff fe68 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE1_R,TOU_THRESH);
 800cbc8:	2106      	movs	r1, #6
 800cbca:	2044      	movs	r0, #68	@ 0x44
 800cbcc:	f7ff fe64 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE2_T,TOU_THRESH);
 800cbd0:	2106      	movs	r1, #6
 800cbd2:	2045      	movs	r0, #69	@ 0x45
 800cbd4:	f7ff fe60 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE2_R,TOU_THRESH);
 800cbd8:	2106      	movs	r1, #6
 800cbda:	2046      	movs	r0, #70	@ 0x46
 800cbdc:	f7ff fe5c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE3_T,TOU_THRESH);
 800cbe0:	2106      	movs	r1, #6
 800cbe2:	2047      	movs	r0, #71	@ 0x47
 800cbe4:	f7ff fe58 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE3_R,TOU_THRESH);
 800cbe8:	2106      	movs	r1, #6
 800cbea:	2048      	movs	r0, #72	@ 0x48
 800cbec:	f7ff fe54 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE4_T,TOU_THRESH);
 800cbf0:	2106      	movs	r1, #6
 800cbf2:	2049      	movs	r0, #73	@ 0x49
 800cbf4:	f7ff fe50 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE4_R,TOU_THRESH);
 800cbf8:	2106      	movs	r1, #6
 800cbfa:	204a      	movs	r0, #74	@ 0x4a
 800cbfc:	f7ff fe4c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE5_T,TOU_THRESH);
 800cc00:	2106      	movs	r1, #6
 800cc02:	204b      	movs	r0, #75	@ 0x4b
 800cc04:	f7ff fe48 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE5_R,TOU_THRESH);
 800cc08:	2106      	movs	r1, #6
 800cc0a:	204c      	movs	r0, #76	@ 0x4c
 800cc0c:	f7ff fe44 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE6_T,TOU_THRESH);
 800cc10:	2106      	movs	r1, #6
 800cc12:	204d      	movs	r0, #77	@ 0x4d
 800cc14:	f7ff fe40 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE6_R,TOU_THRESH);
 800cc18:	2106      	movs	r1, #6
 800cc1a:	204e      	movs	r0, #78	@ 0x4e
 800cc1c:	f7ff fe3c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE7_T,TOU_THRESH);
 800cc20:	2106      	movs	r1, #6
 800cc22:	204f      	movs	r0, #79	@ 0x4f
 800cc24:	f7ff fe38 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE7_R,TOU_THRESH);
 800cc28:	2106      	movs	r1, #6
 800cc2a:	2050      	movs	r0, #80	@ 0x50
 800cc2c:	f7ff fe34 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE8_T,TOU_THRESH);
 800cc30:	2106      	movs	r1, #6
 800cc32:	2051      	movs	r0, #81	@ 0x51
 800cc34:	f7ff fe30 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE8_R,TOU_THRESH);
 800cc38:	2106      	movs	r1, #6
 800cc3a:	2052      	movs	r0, #82	@ 0x52
 800cc3c:	f7ff fe2c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE9_T,TOU_THRESH);
 800cc40:	2106      	movs	r1, #6
 800cc42:	2053      	movs	r0, #83	@ 0x53
 800cc44:	f7ff fe28 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE9_R,TOU_THRESH);
 800cc48:	2106      	movs	r1, #6
 800cc4a:	2054      	movs	r0, #84	@ 0x54
 800cc4c:	f7ff fe24 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE10_T,TOU_THRESH);
 800cc50:	2106      	movs	r1, #6
 800cc52:	2055      	movs	r0, #85	@ 0x55
 800cc54:	f7ff fe20 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE10_R,TOU_THRESH);
 800cc58:	2106      	movs	r1, #6
 800cc5a:	2056      	movs	r0, #86	@ 0x56
 800cc5c:	f7ff fe1c 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(ELE11_T,TOU_THRESH);
 800cc60:	2106      	movs	r1, #6
 800cc62:	2057      	movs	r0, #87	@ 0x57
 800cc64:	f7ff fe18 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE11_R,TOU_THRESH);
 800cc68:	2106      	movs	r1, #6
 800cc6a:	2058      	movs	r0, #88	@ 0x58
 800cc6c:	f7ff fe14 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(AFE_CFG1,0x15);
 800cc70:	2115      	movs	r1, #21
 800cc72:	205c      	movs	r0, #92	@ 0x5c
 800cc74:	f7ff fe10 	bl	800c898 <MPR121_setregister>

	MPR121_setregister(FIL_CFG,0x04);
 800cc78:	2104      	movs	r1, #4
 800cc7a:	205d      	movs	r0, #93	@ 0x5d
 800cc7c:	f7ff fe0c 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800cc80:	210c      	movs	r1, #12
 800cc82:	205e      	movs	r0, #94	@ 0x5e
 800cc84:	f7ff fe08 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800cc88:	210c      	movs	r1, #12
 800cc8a:	205e      	movs	r0, #94	@ 0x5e
 800cc8c:	f7ff fe04 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ATO_CFG0,0x0F);
 800cc90:	210f      	movs	r1, #15
 800cc92:	207b      	movs	r0, #123	@ 0x7b
 800cc94:	f7ff fe00 	bl	800c898 <MPR121_setregister>
	MPR121_setregister(ATO_CFGU,0xC8);
 800cc98:	21c8      	movs	r1, #200	@ 0xc8
 800cc9a:	207d      	movs	r0, #125	@ 0x7d
 800cc9c:	f7ff fdfc 	bl	800c898 <MPR121_setregister>
}
 800cca0:	bf00      	nop
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	4603      	mov	r3, r0
 800ccac:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800ccae:	f107 020f 	add.w	r2, r7, #15
 800ccb2:	1df9      	adds	r1, r7, #7
 800ccb4:	2364      	movs	r3, #100	@ 0x64
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	2301      	movs	r3, #1
 800ccba:	4804      	ldr	r0, [pc, #16]	@ (800cccc <W25qxx_Spi+0x28>)
 800ccbc:	f7f9 fd85 	bl	80067ca <HAL_SPI_TransmitReceive>
	return ret;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	200006a8 	.word	0x200006a8

0800ccd0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]
 800ccde:	2300      	movs	r3, #0
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	2300      	movs	r3, #0
 800cce4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800cce6:	2200      	movs	r2, #0
 800cce8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ccec:	4813      	ldr	r0, [pc, #76]	@ (800cd3c <W25qxx_ReadID+0x6c>)
 800ccee:	f7f5 fee5 	bl	8002abc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800ccf2:	209f      	movs	r0, #159	@ 0x9f
 800ccf4:	f7ff ffd6 	bl	800cca4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ccf8:	20a5      	movs	r0, #165	@ 0xa5
 800ccfa:	f7ff ffd3 	bl	800cca4 <W25qxx_Spi>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cd02:	20a5      	movs	r0, #165	@ 0xa5
 800cd04:	f7ff ffce 	bl	800cca4 <W25qxx_Spi>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cd0c:	20a5      	movs	r0, #165	@ 0xa5
 800cd0e:	f7ff ffc9 	bl	800cca4 <W25qxx_Spi>
 800cd12:	4603      	mov	r3, r0
 800cd14:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800cd16:	2201      	movs	r2, #1
 800cd18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd1c:	4807      	ldr	r0, [pc, #28]	@ (800cd3c <W25qxx_ReadID+0x6c>)
 800cd1e:	f7f5 fecd 	bl	8002abc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	041a      	lsls	r2, r3, #16
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	021b      	lsls	r3, r3, #8
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]
	return Temp;
 800cd32:	68fb      	ldr	r3, [r7, #12]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	40020800 	.word	0x40020800

0800cd40 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800cd40:	b590      	push	{r4, r7, lr}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800cd46:	2200      	movs	r2, #0
 800cd48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd4c:	4816      	ldr	r0, [pc, #88]	@ (800cda8 <W25qxx_ReadUniqID+0x68>)
 800cd4e:	f7f5 feb5 	bl	8002abc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800cd52:	204b      	movs	r0, #75	@ 0x4b
 800cd54:	f7ff ffa6 	bl	800cca4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	71fb      	strb	r3, [r7, #7]
 800cd5c:	e005      	b.n	800cd6a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cd5e:	20a5      	movs	r0, #165	@ 0xa5
 800cd60:	f7ff ffa0 	bl	800cca4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	3301      	adds	r3, #1
 800cd68:	71fb      	strb	r3, [r7, #7]
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d9f6      	bls.n	800cd5e <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 800cd70:	2300      	movs	r3, #0
 800cd72:	71bb      	strb	r3, [r7, #6]
 800cd74:	e00b      	b.n	800cd8e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cd76:	79bc      	ldrb	r4, [r7, #6]
 800cd78:	20a5      	movs	r0, #165	@ 0xa5
 800cd7a:	f7ff ff93 	bl	800cca4 <W25qxx_Spi>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461a      	mov	r2, r3
 800cd82:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <W25qxx_ReadUniqID+0x6c>)
 800cd84:	4423      	add	r3, r4
 800cd86:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800cd88:	79bb      	ldrb	r3, [r7, #6]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	71bb      	strb	r3, [r7, #6]
 800cd8e:	79bb      	ldrb	r3, [r7, #6]
 800cd90:	2b07      	cmp	r3, #7
 800cd92:	d9f0      	bls.n	800cd76 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800cd94:	2201      	movs	r2, #1
 800cd96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd9a:	4803      	ldr	r0, [pc, #12]	@ (800cda8 <W25qxx_ReadUniqID+0x68>)
 800cd9c:	f7f5 fe8e 	bl	8002abc <HAL_GPIO_WritePin>
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd90      	pop	{r4, r7, pc}
 800cda8:	40020800 	.word	0x40020800
 800cdac:	20001d2c 	.word	0x20001d2c

0800cdb0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cdc4:	481c      	ldr	r0, [pc, #112]	@ (800ce38 <W25qxx_ReadStatusRegister+0x88>)
 800cdc6:	f7f5 fe79 	bl	8002abc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d10c      	bne.n	800cdea <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800cdd0:	2005      	movs	r0, #5
 800cdd2:	f7ff ff67 	bl	800cca4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cdd6:	20a5      	movs	r0, #165	@ 0xa5
 800cdd8:	f7ff ff64 	bl	800cca4 <W25qxx_Spi>
 800cddc:	4603      	mov	r3, r0
 800cdde:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800cde0:	4a16      	ldr	r2, [pc, #88]	@ (800ce3c <W25qxx_ReadStatusRegister+0x8c>)
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800cde8:	e01b      	b.n	800ce22 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d10c      	bne.n	800ce0a <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800cdf0:	2035      	movs	r0, #53	@ 0x35
 800cdf2:	f7ff ff57 	bl	800cca4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800cdf6:	20a5      	movs	r0, #165	@ 0xa5
 800cdf8:	f7ff ff54 	bl	800cca4 <W25qxx_Spi>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800ce00:	4a0e      	ldr	r2, [pc, #56]	@ (800ce3c <W25qxx_ReadStatusRegister+0x8c>)
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 800ce08:	e00b      	b.n	800ce22 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800ce0a:	2015      	movs	r0, #21
 800ce0c:	f7ff ff4a 	bl	800cca4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ce10:	20a5      	movs	r0, #165	@ 0xa5
 800ce12:	f7ff ff47 	bl	800cca4 <W25qxx_Spi>
 800ce16:	4603      	mov	r3, r0
 800ce18:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800ce1a:	4a08      	ldr	r2, [pc, #32]	@ (800ce3c <W25qxx_ReadStatusRegister+0x8c>)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ce22:	2201      	movs	r2, #1
 800ce24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ce28:	4803      	ldr	r0, [pc, #12]	@ (800ce38 <W25qxx_ReadStatusRegister+0x88>)
 800ce2a:	f7f5 fe47 	bl	8002abc <HAL_GPIO_WritePin>
	return status;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40020800 	.word	0x40020800
 800ce3c:	20001d2c 	.word	0x20001d2c

0800ce40 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800ce46:	4b65      	ldr	r3, [pc, #404]	@ (800cfdc <W25qxx_Init+0x19c>)
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800ce4e:	e002      	b.n	800ce56 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800ce50:	2001      	movs	r0, #1
 800ce52:	f7f4 fe15 	bl	8001a80 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800ce56:	f7f4 fe07 	bl	8001a68 <HAL_GetTick>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b63      	cmp	r3, #99	@ 0x63
 800ce5e:	d9f7      	bls.n	800ce50 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ce60:	2201      	movs	r2, #1
 800ce62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ce66:	485e      	ldr	r0, [pc, #376]	@ (800cfe0 <W25qxx_Init+0x1a0>)
 800ce68:	f7f5 fe28 	bl	8002abc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800ce6c:	2064      	movs	r0, #100	@ 0x64
 800ce6e:	f7f4 fe07 	bl	8001a80 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800ce72:	f7ff ff2d 	bl	800ccd0 <W25qxx_ReadID>
 800ce76:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	3b11      	subs	r3, #17
 800ce7e:	2b0f      	cmp	r3, #15
 800ce80:	d86b      	bhi.n	800cf5a <W25qxx_Init+0x11a>
 800ce82:	a201      	add	r2, pc, #4	@ (adr r2, 800ce88 <W25qxx_Init+0x48>)
 800ce84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce88:	0800cf4d 	.word	0x0800cf4d
 800ce8c:	0800cf3f 	.word	0x0800cf3f
 800ce90:	0800cf31 	.word	0x0800cf31
 800ce94:	0800cf23 	.word	0x0800cf23
 800ce98:	0800cf15 	.word	0x0800cf15
 800ce9c:	0800cf07 	.word	0x0800cf07
 800cea0:	0800cef9 	.word	0x0800cef9
 800cea4:	0800cee9 	.word	0x0800cee9
 800cea8:	0800ced9 	.word	0x0800ced9
 800ceac:	0800cf5b 	.word	0x0800cf5b
 800ceb0:	0800cf5b 	.word	0x0800cf5b
 800ceb4:	0800cf5b 	.word	0x0800cf5b
 800ceb8:	0800cf5b 	.word	0x0800cf5b
 800cebc:	0800cf5b 	.word	0x0800cf5b
 800cec0:	0800cf5b 	.word	0x0800cf5b
 800cec4:	0800cec9 	.word	0x0800cec9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800cec8:	4b44      	ldr	r3, [pc, #272]	@ (800cfdc <W25qxx_Init+0x19c>)
 800ceca:	220a      	movs	r2, #10
 800cecc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800cece:	4b43      	ldr	r3, [pc, #268]	@ (800cfdc <W25qxx_Init+0x19c>)
 800ced0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ced4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800ced6:	e046      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800ced8:	4b40      	ldr	r3, [pc, #256]	@ (800cfdc <W25qxx_Init+0x19c>)
 800ceda:	2209      	movs	r2, #9
 800cedc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800cede:	4b3f      	ldr	r3, [pc, #252]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cee4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800cee6:	e03e      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800cee8:	4b3c      	ldr	r3, [pc, #240]	@ (800cfdc <W25qxx_Init+0x19c>)
 800ceea:	2208      	movs	r2, #8
 800ceec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800ceee:	4b3b      	ldr	r3, [pc, #236]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cef4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800cef6:	e036      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800cef8:	4b38      	ldr	r3, [pc, #224]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cefa:	2207      	movs	r2, #7
 800cefc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800cefe:	4b37      	ldr	r3, [pc, #220]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf00:	2280      	movs	r2, #128	@ 0x80
 800cf02:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800cf04:	e02f      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800cf06:	4b35      	ldr	r3, [pc, #212]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf08:	2206      	movs	r2, #6
 800cf0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800cf0c:	4b33      	ldr	r3, [pc, #204]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf0e:	2240      	movs	r2, #64	@ 0x40
 800cf10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800cf12:	e028      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800cf14:	4b31      	ldr	r3, [pc, #196]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf16:	2205      	movs	r2, #5
 800cf18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800cf1a:	4b30      	ldr	r3, [pc, #192]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800cf20:	e021      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800cf22:	4b2e      	ldr	r3, [pc, #184]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf24:	2204      	movs	r2, #4
 800cf26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800cf28:	4b2c      	ldr	r3, [pc, #176]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf2a:	2210      	movs	r2, #16
 800cf2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800cf2e:	e01a      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800cf30:	4b2a      	ldr	r3, [pc, #168]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf32:	2203      	movs	r2, #3
 800cf34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800cf36:	4b29      	ldr	r3, [pc, #164]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf38:	2208      	movs	r2, #8
 800cf3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800cf3c:	e013      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800cf3e:	4b27      	ldr	r3, [pc, #156]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf40:	2202      	movs	r2, #2
 800cf42:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800cf44:	4b25      	ldr	r3, [pc, #148]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf46:	2204      	movs	r2, #4
 800cf48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800cf4a:	e00c      	b.n	800cf66 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800cf4c:	4b23      	ldr	r3, [pc, #140]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf4e:	2201      	movs	r2, #1
 800cf50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800cf52:	4b22      	ldr	r3, [pc, #136]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf54:	2202      	movs	r2, #2
 800cf56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800cf58:	e005      	b.n	800cf66 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800cf5a:	4b20      	ldr	r3, [pc, #128]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e036      	b.n	800cfd4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800cf66:	4b1d      	ldr	r3, [pc, #116]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf6c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800cf6e:	4b1b      	ldr	r3, [pc, #108]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cf74:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800cf76:	4b19      	ldr	r3, [pc, #100]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	4a17      	ldr	r2, [pc, #92]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf7e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800cf80:	4b16      	ldr	r3, [pc, #88]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	4a15      	ldr	r2, [pc, #84]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf86:	6912      	ldr	r2, [r2, #16]
 800cf88:	fb02 f303 	mul.w	r3, r2, r3
 800cf8c:	4a13      	ldr	r2, [pc, #76]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf8e:	8952      	ldrh	r2, [r2, #10]
 800cf90:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf94:	4a11      	ldr	r2, [pc, #68]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf96:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800cf98:	4b10      	ldr	r3, [pc, #64]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	4a0f      	ldr	r2, [pc, #60]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cfa0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800cfa2:	4b0e      	ldr	r3, [pc, #56]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	4a0d      	ldr	r2, [pc, #52]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cfa8:	6912      	ldr	r2, [r2, #16]
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	0a9b      	lsrs	r3, r3, #10
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cfb2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800cfb4:	f7ff fec4 	bl	800cd40 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800cfb8:	2001      	movs	r0, #1
 800cfba:	f7ff fef9 	bl	800cdb0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800cfbe:	2002      	movs	r0, #2
 800cfc0:	f7ff fef6 	bl	800cdb0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800cfc4:	2003      	movs	r0, #3
 800cfc6:	f7ff fef3 	bl	800cdb0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800cfca:	4b04      	ldr	r3, [pc, #16]	@ (800cfdc <W25qxx_Init+0x19c>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 800cfd2:	2301      	movs	r3, #1
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	20001d2c 	.word	0x20001d2c
 800cfe0:	40020800 	.word	0x40020800

0800cfe4 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800cfec:	4b07      	ldr	r3, [pc, #28]	@ (800d00c <W25qxx_BlockToPage+0x28>)
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	fb02 f303 	mul.w	r3, r2, r3
 800cff6:	4a05      	ldr	r2, [pc, #20]	@ (800d00c <W25qxx_BlockToPage+0x28>)
 800cff8:	8952      	ldrh	r2, [r2, #10]
 800cffa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800cffe:	4618      	mov	r0, r3
 800d000:	370c      	adds	r7, #12
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20001d2c 	.word	0x20001d2c

0800d010 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800d01e:	e002      	b.n	800d026 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800d020:	2001      	movs	r0, #1
 800d022:	f7f4 fd2d 	bl	8001a80 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800d026:	4b37      	ldr	r3, [pc, #220]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d028:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d0f7      	beq.n	800d020 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800d030:	4b34      	ldr	r3, [pc, #208]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800d038:	4b32      	ldr	r3, [pc, #200]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d03a:	895b      	ldrh	r3, [r3, #10]
 800d03c:	461a      	mov	r2, r3
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	4293      	cmp	r3, r2
 800d042:	d802      	bhi.n	800d04a <W25qxx_ReadPage+0x3a>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800d04a:	4b2e      	ldr	r3, [pc, #184]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d04c:	895b      	ldrh	r3, [r3, #10]
 800d04e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	4413      	add	r3, r2
 800d056:	4a2b      	ldr	r2, [pc, #172]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d058:	8952      	ldrh	r2, [r2, #10]
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d905      	bls.n	800d06a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800d05e:	4b29      	ldr	r3, [pc, #164]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	461a      	mov	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800d06a:	4b26      	ldr	r3, [pc, #152]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d06c:	895b      	ldrh	r3, [r3, #10]
 800d06e:	461a      	mov	r2, r3
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	fb02 f303 	mul.w	r3, r2, r3
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	4413      	add	r3, r2
 800d07a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800d07c:	2200      	movs	r2, #0
 800d07e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d082:	4821      	ldr	r0, [pc, #132]	@ (800d108 <W25qxx_ReadPage+0xf8>)
 800d084:	f7f5 fd1a 	bl	8002abc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800d088:	4b1e      	ldr	r3, [pc, #120]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b08      	cmp	r3, #8
 800d08e:	d909      	bls.n	800d0a4 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800d090:	200c      	movs	r0, #12
 800d092:	f7ff fe07 	bl	800cca4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	0e1b      	lsrs	r3, r3, #24
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fe01 	bl	800cca4 <W25qxx_Spi>
 800d0a2:	e002      	b.n	800d0aa <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800d0a4:	200b      	movs	r0, #11
 800d0a6:	f7ff fdfd 	bl	800cca4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	0c1b      	lsrs	r3, r3, #16
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fdf7 	bl	800cca4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	0a1b      	lsrs	r3, r3, #8
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7ff fdf1 	bl	800cca4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff fdec 	bl	800cca4 <W25qxx_Spi>
	W25qxx_Spi(0);
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	f7ff fde9 	bl	800cca4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	2364      	movs	r3, #100	@ 0x64
 800d0d8:	68f9      	ldr	r1, [r7, #12]
 800d0da:	480c      	ldr	r0, [pc, #48]	@ (800d10c <W25qxx_ReadPage+0xfc>)
 800d0dc:	f7f9 fa64 	bl	80065a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d0e6:	4808      	ldr	r0, [pc, #32]	@ (800d108 <W25qxx_ReadPage+0xf8>)
 800d0e8:	f7f5 fce8 	bl	8002abc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	f7f4 fcc7 	bl	8001a80 <HAL_Delay>
	w25qxx.Lock = 0;
 800d0f2:	4b04      	ldr	r3, [pc, #16]	@ (800d104 <W25qxx_ReadPage+0xf4>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20001d2c 	.word	0x20001d2c
 800d108:	40020800 	.word	0x40020800
 800d10c:	200006a8 	.word	0x200006a8

0800d110 <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800d11e:	4b2c      	ldr	r3, [pc, #176]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d802      	bhi.n	800d12e <W25qxx_ReadBlock+0x1e>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d102      	bne.n	800d134 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800d12e:	4b28      	ldr	r3, [pc, #160]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800d134:	4b26      	ldr	r3, [pc, #152]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d136:	699b      	ldr	r3, [r3, #24]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d243      	bcs.n	800d1c6 <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	441a      	add	r2, r3
 800d144:	4b22      	ldr	r3, [pc, #136]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d905      	bls.n	800d158 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800d14c:	4b20      	ldr	r3, [pc, #128]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	e001      	b.n	800d15c <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800d15c:	68b8      	ldr	r0, [r7, #8]
 800d15e:	f7ff ff41 	bl	800cfe4 <W25qxx_BlockToPage>
 800d162:	4602      	mov	r2, r0
 800d164:	4b1a      	ldr	r3, [pc, #104]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d166:	895b      	ldrh	r3, [r3, #10]
 800d168:	4619      	mov	r1, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d170:	4413      	add	r3, r2
 800d172:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800d174:	4b16      	ldr	r3, [pc, #88]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d176:	895b      	ldrh	r3, [r3, #10]
 800d178:	461a      	mov	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d180:	fb01 f202 	mul.w	r2, r1, r2
 800d184:	1a9b      	subs	r3, r3, r2
 800d186:	617b      	str	r3, [r7, #20]
	do
	{

		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	69f9      	ldr	r1, [r7, #28]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff ff3e 	bl	800d010 <W25qxx_ReadPage>
		StartPage++;
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	3301      	adds	r3, #1
 800d198:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800d19a:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d19c:	895b      	ldrh	r3, [r3, #10]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	1a9a      	subs	r2, r3, r2
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800d1aa:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <W25qxx_ReadBlock+0xc0>)
 800d1ac:	895b      	ldrh	r3, [r3, #10]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	dce1      	bgt.n	800d188 <W25qxx_ReadBlock+0x78>
 800d1c4:	e000      	b.n	800d1c8 <W25qxx_ReadBlock+0xb8>
		return;
 800d1c6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800d1c8:	3720      	adds	r7, #32
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20001d2c 	.word	0x20001d2c

0800d1d4 <memset>:
 800d1d4:	4402      	add	r2, r0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d100      	bne.n	800d1de <memset+0xa>
 800d1dc:	4770      	bx	lr
 800d1de:	f803 1b01 	strb.w	r1, [r3], #1
 800d1e2:	e7f9      	b.n	800d1d8 <memset+0x4>

0800d1e4 <__libc_init_array>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d21c <__libc_init_array+0x38>)
 800d1e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d220 <__libc_init_array+0x3c>)
 800d1ea:	1b64      	subs	r4, r4, r5
 800d1ec:	10a4      	asrs	r4, r4, #2
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	42a6      	cmp	r6, r4
 800d1f2:	d109      	bne.n	800d208 <__libc_init_array+0x24>
 800d1f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d224 <__libc_init_array+0x40>)
 800d1f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d228 <__libc_init_array+0x44>)
 800d1f8:	f000 f818 	bl	800d22c <_init>
 800d1fc:	1b64      	subs	r4, r4, r5
 800d1fe:	10a4      	asrs	r4, r4, #2
 800d200:	2600      	movs	r6, #0
 800d202:	42a6      	cmp	r6, r4
 800d204:	d105      	bne.n	800d212 <__libc_init_array+0x2e>
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	f855 3b04 	ldr.w	r3, [r5], #4
 800d20c:	4798      	blx	r3
 800d20e:	3601      	adds	r6, #1
 800d210:	e7ee      	b.n	800d1f0 <__libc_init_array+0xc>
 800d212:	f855 3b04 	ldr.w	r3, [r5], #4
 800d216:	4798      	blx	r3
 800d218:	3601      	adds	r6, #1
 800d21a:	e7f2      	b.n	800d202 <__libc_init_array+0x1e>
 800d21c:	0800e250 	.word	0x0800e250
 800d220:	0800e250 	.word	0x0800e250
 800d224:	0800e250 	.word	0x0800e250
 800d228:	0800e254 	.word	0x0800e254

0800d22c <_init>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	bf00      	nop
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr

0800d238 <_fini>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr
