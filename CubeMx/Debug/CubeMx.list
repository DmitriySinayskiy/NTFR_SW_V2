
CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b00  0800ee74  0800ee74  0000fe74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011974  08011974  00013634  2**0
                  CONTENTS
  4 .ARM          00000008  08011974  08011974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801197c  0801197c  00013634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801197c  0801197c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011980  08011980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000634  20000000  08011984  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000634  08011fb8  00013634  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  08011fb8  00013f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013634  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202cb  00000000  00000000  00013664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005283  00000000  00000000  0003392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00038bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000164d  00000000  00000000  0003a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed07  00000000  00000000  0003bedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ce4  00000000  00000000  0005abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9335  00000000  00000000  000838c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cbfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce8  00000000  00000000  0012cc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00134928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000634 	.word	0x20000634
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee5c 	.word	0x0800ee5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000638 	.word	0x20000638
 80001dc:	0800ee5c 	.word	0x0800ee5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
uint8_t touch_irq = 0;

uint8_t gl_id_to_display = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IRQ_TCH_Pin) {
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d102      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x16>

		touch_irq = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x24>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000944 	.word	0x20000944

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 f917 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f86b 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fbfb 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 fbd1 	bl	8000d50 <MX_DMA_Init>
  MX_I2C1_Init();
 80005ae:	f000 f923 	bl	80007f8 <MX_I2C1_Init>
  MX_RTC_Init();
 80005b2:	f000 f94f 	bl	8000854 <MX_RTC_Init>
  MX_SPI1_Init();
 80005b6:	f000 f9db 	bl	8000970 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005ba:	f000 f8cb 	bl	8000754 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005be:	f000 fb23 	bl	8000c08 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c2:	f000 faab 	bl	8000b1c <MX_TIM2_Init>
  MX_TIM4_Init();
 80005c6:	f000 fb75 	bl	8000cb4 <MX_TIM4_Init>
  MX_TIM1_Init();
 80005ca:	f000 fa07 	bl	80009dc <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80005ce:	f00b fc2b 	bl	800be28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */




  HAL_GPIO_WritePin(V3_PRH_EN_GPIO_Port, V3_PRH_EN_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <main+0xd0>)
 80005da:	f002 fb09 	bl	8002bf0 <HAL_GPIO_WritePin>
  ST7735_Init();
 80005de:	f00b fa1f 	bl	800ba20 <ST7735_Init>
  ST7735_InvertColors(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f00b fc09 	bl	800bdfa <ST7735_InvertColors>
  ST7735_FillScreen(ST7735_BLACK);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f00b fba9 	bl	800bd40 <ST7735_FillScreen>
  HAL_GPIO_WritePin(DSP_BL_GPIO_Port, DSP_BL_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f4:	481c      	ldr	r0, [pc, #112]	@ (8000668 <main+0xd0>)
 80005f6:	f002 fafb 	bl	8002bf0 <HAL_GPIO_WritePin>

  W25qxx_Init();
 80005fa:	f00d fdc5 	bl	800e188 <W25qxx_Init>
  MX_I2C1_Init();
 80005fe:	f000 f8fb 	bl	80007f8 <MX_I2C1_Init>
  touch_init();
 8000602:	f00d fc57 	bl	800deb4 <touch_init>

 // HAL_TIM_Base_Start_IT(&htim4);

  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET); //on mux
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060c:	4817      	ldr	r0, [pc, #92]	@ (800066c <main+0xd4>)
 800060e:	f002 faef 	bl	8002bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000618:	4814      	ldr	r0, [pc, #80]	@ (800066c <main+0xd4>)
 800061a:	f002 fae9 	bl	8002bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000624:	4811      	ldr	r0, [pc, #68]	@ (800066c <main+0xd4>)
 8000626:	f002 fae3 	bl	8002bf0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0xd8>)
 800062c:	f006 fc8a 	bl	8006f44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4810      	ldr	r0, [pc, #64]	@ (8000674 <main+0xdc>)
 8000634:	f006 fd70 	bl	8007118 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 50;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <main+0xe0>)
 800063a:	2232      	movs	r2, #50	@ 0x32
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34

  char char_buffer[10];

   uint16_t conduct0 = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]
   uint16_t conduct1 = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	82bb      	strh	r3, [r7, #20]
   uint16_t conduct2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	827b      	strh	r3, [r7, #18]
   uint16_t conduct_avg = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	823b      	strh	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  button_state_determ();
 800064e:	f00c f8d5 	bl	800c7fc <button_state_determ>
	  //gl_id_to_display  = select_product_id(gl_id_to_display);

	  MPR121_setregister(MHD_R,0x01);
 8000652:	2101      	movs	r1, #1
 8000654:	202b      	movs	r0, #43	@ 0x2b
 8000656:	f00d fac7 	bl	800dbe8 <MPR121_setregister>
	  page_select();
 800065a:	f00d f827 	bl	800d6ac <page_select>
//	  	//  sprintf(char_buffer, "%04d", conduct2);
//	  	//  ST7735_WriteString(55, 43, char_buffer, Font_11x18, ST7735_FNT_LT_DEF, ST7735_BG_DEF);
//
//	  	  conduct_avg = (conduct0+conduct1+conduct2)/3;

	  	  but_state_reset();
 800065e:	f00c f989 	bl	800c974 <but_state_reset>
	  button_state_determ();
 8000662:	bf00      	nop
 8000664:	e7f3      	b.n	800064e <main+0xb6>
 8000666:	bf00      	nop
 8000668:	40020800 	.word	0x40020800
 800066c:	40020400 	.word	0x40020400
 8000670:	2000086c 	.word	0x2000086c
 8000674:	20000824 	.word	0x20000824
 8000678:	40010000 	.word	0x40010000

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d ff66 	bl	800e55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	@ (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006dc:	2305      	movs	r3, #5
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f8:	23a8      	movs	r3, #168	@ 0xa8
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000700:	2307      	movs	r3, #7
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fcdf 	bl	80050cc <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000714:	f000 fc32 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f004 ff41 	bl	80055bc <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000740:	f000 fc1c 	bl	8000f7c <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	@ 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <MX_ADC1_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_ADC1_Init+0x98>)
 800076e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_ADC1_Init+0xa0>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b6:	f001 f8a1 	bl	80018fc <HAL_ADC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 fbdc 	bl	8000f7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80007cc:	2305      	movs	r3, #5
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007d6:	f001 fa55 	bl	8001c84 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 fbcc 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000650 	.word	0x20000650
 80007f0:	40012000 	.word	0x40012000
 80007f4:	0f000001 	.word	0x0f000001

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f002 fa0d 	bl	8002c54 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 fb9c 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000698 	.word	0x20000698
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	@ 0x40
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800085a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2228      	movs	r2, #40	@ 0x28
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00d fe71 	bl	800e55c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087a:	4b3b      	ldr	r3, [pc, #236]	@ (8000968 <MX_RTC_Init+0x114>)
 800087c:	4a3b      	ldr	r2, [pc, #236]	@ (800096c <MX_RTC_Init+0x118>)
 800087e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <MX_RTC_Init+0x114>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000886:	4b38      	ldr	r3, [pc, #224]	@ (8000968 <MX_RTC_Init+0x114>)
 8000888:	227f      	movs	r2, #127	@ 0x7f
 800088a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088c:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <MX_RTC_Init+0x114>)
 800088e:	22ff      	movs	r2, #255	@ 0xff
 8000890:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000892:	4b35      	ldr	r3, [pc, #212]	@ (8000968 <MX_RTC_Init+0x114>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000898:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <MX_RTC_Init+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089e:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <MX_RTC_Init+0x114>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a4:	4830      	ldr	r0, [pc, #192]	@ (8000968 <MX_RTC_Init+0x114>)
 80008a6:	f005 f983 	bl	8005bb0 <HAL_RTC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fb64 	bl	8000f7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	4824      	ldr	r0, [pc, #144]	@ (8000968 <MX_RTC_Init+0x114>)
 80008d8:	f005 f9e0 	bl	8005c9c <HAL_RTC_SetTime>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80008e2:	f000 fb4b 	bl	8000f7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	4818      	ldr	r0, [pc, #96]	@ (8000968 <MX_RTC_Init+0x114>)
 8000908:	f005 fa62 	bl	8005dd0 <HAL_RTC_SetDate>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000912:	f000 fb33 	bl	8000f7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800091a:	2300      	movs	r3, #0
 800091c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800091e:	2300      	movs	r3, #0
 8000920:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800092e:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8000932:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800093c:	2301      	movs	r3, #1
 800093e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_RTC_Init+0x114>)
 8000950:	f005 fac2 	bl	8005ed8 <HAL_RTC_SetAlarm_IT>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800095a:	f000 fb0f 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3740      	adds	r7, #64	@ 0x40
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200006ec 	.word	0x200006ec
 800096c:	40002800 	.word	0x40002800

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_SPI1_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <MX_SPI1_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_SPI1_Init+0x64>)
 80009c2:	f005 fcc6 	bl	8006352 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f000 fad6 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000070c 	.word	0x2000070c
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	@ 0x58
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00d fda1 	bl	800e55c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8000b18 <MX_TIM1_Init+0x13c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 820-1;
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a22:	f240 3233 	movw	r2, #819	@ 0x333
 8000a26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b3a      	ldr	r3, [pc, #232]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a30:	2263      	movs	r2, #99	@ 0x63
 8000a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3a:	4b36      	ldr	r3, [pc, #216]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a46:	4833      	ldr	r0, [pc, #204]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a48:	f006 fa2c 	bl	8006ea4 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a52:	f000 fa93 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a60:	4619      	mov	r1, r3
 8000a62:	482c      	ldr	r0, [pc, #176]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a64:	f006 fe90 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a6e:	f000 fa85 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a72:	4828      	ldr	r0, [pc, #160]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a74:	f006 faf7 	bl	8007066 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a7e:	f000 fa7d 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4820      	ldr	r0, [pc, #128]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000a92:	f007 fa3f 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 fa6e 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa0:	2360      	movs	r3, #96	@ 0x60
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000ac6:	f006 fd9d 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ad0:	f000 fa54 	bl	8000f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000af8:	f007 fa7a 	bl	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b02:	f000 fa3b 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b06:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <MX_TIM1_Init+0x138>)
 8000b08:	f000 fc52 	bl	80013b0 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3758      	adds	r7, #88	@ 0x58
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000824 	.word	0x20000824
 8000b18:	40010000 	.word	0x40010000

08000b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	@ 0x38
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8000b54:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b56:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b62:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b64:	2263      	movs	r2, #99	@ 0x63
 8000b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b74:	4823      	ldr	r0, [pc, #140]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b76:	f006 f995 	bl	8006ea4 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b80:	f000 f9fc 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481c      	ldr	r0, [pc, #112]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000b92:	f006 fdf9 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b9c:	f000 f9ee 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ba0:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000ba2:	f006 fa60 	bl	8007066 <HAL_TIM_PWM_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bac:	f000 f9e6 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000bc0:	f007 f9a8 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bca:	f000 f9d7 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bce:	2360      	movs	r3, #96	@ 0x60
 8000bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2208      	movs	r2, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000be6:	f006 fd0d 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bf0:	f000 f9c4 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_TIM2_Init+0xe8>)
 8000bf6:	f000 fbdb 	bl	80013b0 <HAL_TIM_MspPostInit>

}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	@ 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000086c 	.word	0x2000086c

08000c08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <MX_TIM3_Init+0xa8>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c2c:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c3a:	2263      	movs	r2, #99	@ 0x63
 8000c3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4a:	4818      	ldr	r0, [pc, #96]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c4c:	f006 f92a 	bl	8006ea4 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f991 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c68:	f006 fd8e 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f983 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c76:	2108      	movs	r1, #8
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c7a:	f006 fb61 	bl	8007340 <HAL_TIM_OnePulse_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c84:	f000 f97a 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c96:	f007 f93d 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ca0:	f000 f96c 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200008b4 	.word	0x200008b4
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <MX_TIM4_Init+0x98>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000cd8:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000cdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25-1;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000ce6:	2218      	movs	r2, #24
 8000ce8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cf6:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000cf8:	f006 f8d4 	bl	8006ea4 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 f93b 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000d14:	f006 fd38 	bl	8007788 <HAL_TIM_ConfigClockSource>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f92d 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_TIM4_Init+0x94>)
 8000d30:	f007 f8f0 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d3a:	f000 f91f 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200008fc 	.word	0x200008fc
 8000d4c:	40000800 	.word	0x40000800

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_DMA_Init+0x4c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <MX_DMA_Init+0x4c>)
 8000d60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <MX_DMA_Init+0x4c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2038      	movs	r0, #56	@ 0x38
 8000d78:	f001 fa7d 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d7c:	2038      	movs	r0, #56	@ 0x38
 8000d7e:	f001 fa96 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	203b      	movs	r0, #59	@ 0x3b
 8000d88:	f001 fa75 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d8c:	203b      	movs	r0, #59	@ 0x3b
 8000d8e:	f001 fa8e 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b6b      	ldr	r3, [pc, #428]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b68      	ldr	r3, [pc, #416]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b64      	ldr	r3, [pc, #400]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a63      	ldr	r2, [pc, #396]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b61      	ldr	r3, [pc, #388]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b56      	ldr	r3, [pc, #344]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a55      	ldr	r2, [pc, #340]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b53      	ldr	r3, [pc, #332]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b4c      	ldr	r3, [pc, #304]	@ (8000f68 <MX_GPIO_Init+0x1c8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_CS_Pin|DSP_BL_Pin|V3_PRH_EN_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000e48:	4848      	ldr	r0, [pc, #288]	@ (8000f6c <MX_GPIO_Init+0x1cc>)
 8000e4a:	f001 fed1 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin|LED_RED_3_Pin
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8000e54:	4845      	ldr	r0, [pc, #276]	@ (8000f6c <MX_GPIO_Init+0x1cc>)
 8000e56:	f001 fecb 	bl	8002bf0 <HAL_GPIO_WritePin>
                          |LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_BLUE_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000e60:	4843      	ldr	r0, [pc, #268]	@ (8000f70 <MX_GPIO_Init+0x1d0>)
 8000e62:	f001 fec5 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VIBRO_Pin|S1_Pin|OE_Pin|DFU_FORCE_Pin
 8000e66:	2200      	movs	r2, #0
 8000e68:	f24d 2101 	movw	r1, #53761	@ 0xd201
 8000e6c:	4841      	ldr	r0, [pc, #260]	@ (8000f74 <MX_GPIO_Init+0x1d4>)
 8000e6e:	f001 febf 	bl	8002bf0 <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin|LED_BLUE_0_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8000e78:	483e      	ldr	r0, [pc, #248]	@ (8000f74 <MX_GPIO_Init+0x1d4>)
 8000e7a:	f001 feb9 	bl	8002bf0 <HAL_GPIO_WritePin>
                          |LED_BLUE_1_Pin|LED_RED_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : FLASH_CS_Pin LED_RED_2_Pin LED_GREEN_2_Pin LED_BLUE_2_Pin
                           LED_RED_3_Pin LED_GREEN_3_Pin LED_BLUE_3_Pin LED_RED_4_Pin
                           LED_GREEN_4_Pin LED_BLUE_4_Pin DSP_BL_Pin V3_PRH_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin|LED_BLUE_2_Pin
 8000e7e:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8000e82:	617b      	str	r3, [r7, #20]
                          |LED_RED_3_Pin|LED_GREEN_3_Pin|LED_BLUE_3_Pin|LED_RED_4_Pin
                          |LED_GREEN_4_Pin|LED_BLUE_4_Pin|DSP_BL_Pin|V3_PRH_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4835      	ldr	r0, [pc, #212]	@ (8000f6c <MX_GPIO_Init+0x1cc>)
 8000e98:	f001 fd0e 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_1_Pin BUT_0_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin|BUT_0_Pin;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <MX_GPIO_Init+0x1cc>)
 8000eb0:	f001 fd02 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_CS_Pin|ST7735_RES_Pin;
 8000eb4:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4828      	ldr	r0, [pc, #160]	@ (8000f70 <MX_GPIO_Init+0x1d0>)
 8000ece:	f001 fcf3 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VIBRO_Pin LED_GREEN_0_Pin LED_BLUE_0_Pin S1_Pin
                           OE_Pin DFU_FORCE_Pin LED_RED_1_Pin LED_GREEN_1_Pin
                           LED_BLUE_1_Pin LED_RED_0_Pin S0_Pin */
  GPIO_InitStruct.Pin = VIBRO_Pin|LED_GREEN_0_Pin|LED_BLUE_0_Pin|S1_Pin
 8000ed2:	f24d 333f 	movw	r3, #54079	@ 0xd33f
 8000ed6:	617b      	str	r3, [r7, #20]
                          |OE_Pin|DFU_FORCE_Pin|LED_RED_1_Pin|LED_GREEN_1_Pin
                          |LED_BLUE_1_Pin|LED_RED_0_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4822      	ldr	r0, [pc, #136]	@ (8000f74 <MX_GPIO_Init+0x1d4>)
 8000eec:	f001 fce4 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	481b      	ldr	r0, [pc, #108]	@ (8000f74 <MX_GPIO_Init+0x1d4>)
 8000f06:	f001 fcd7 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8000f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <MX_GPIO_Init+0x1d0>)
 8000f22:	f001 fcc9 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_TCH_Pin */
  GPIO_InitStruct.Pin = IRQ_TCH_Pin;
 8000f26:	2304      	movs	r3, #4
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_TCH_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <MX_GPIO_Init+0x1d8>)
 8000f3c:	f001 fcbc 	bl	80028b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2008      	movs	r0, #8
 8000f46:	f001 f996 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	f001 f9af 	bl	80022ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2028      	movs	r0, #40	@ 0x28
 8000f56:	f001 f98e 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f001 f9a7 	bl	80022ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <Error_Handler+0x8>

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_ADC_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d127      	bne.n	800104a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_ADC_MspInit+0x80>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_IN_PROBE_Pin|ADC_IN2_TEMP_Pin|ADC_IN3_VBAT_Pin;
 8001032:	230e      	movs	r3, #14
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_ADC_MspInit+0x84>)
 8001046:	f001 fc37 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40012000 	.word	0x40012000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_I2C_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12b      	bne.n	80010da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a2:	2312      	movs	r3, #18
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ae:	2304      	movs	r3, #4
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <HAL_I2C_MspInit+0x8c>)
 80010ba:	f001 fbfd 	bl	80028b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	@ 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400

080010f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a10      	ldr	r2, [pc, #64]	@ (8001150 <HAL_RTC_MspInit+0x60>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d119      	bne.n	8001146 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fc57 	bl	80059d4 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800112c:	f7ff ff26 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_RTC_MspInit+0x64>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2029      	movs	r0, #41	@ 0x29
 800113c:	f001 f89b 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001140:	2029      	movs	r0, #41	@ 0x29
 8001142:	f001 f8b4 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40002800 	.word	0x40002800
 8001154:	42470e3c 	.word	0x42470e3c

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a47      	ldr	r2, [pc, #284]	@ (8001294 <HAL_SPI_MspInit+0x13c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f040 8088 	bne.w	800128c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	4b45      	ldr	r3, [pc, #276]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001184:	4a44      	ldr	r2, [pc, #272]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 8001186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800118a:	6453      	str	r3, [r2, #68]	@ 0x44
 800118c:	4b42      	ldr	r3, [pc, #264]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 800118e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b3e      	ldr	r3, [pc, #248]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_SPI_MspInit+0x140>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011b4:	23e0      	movs	r3, #224	@ 0xe0
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c4:	2305      	movs	r3, #5
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4833      	ldr	r0, [pc, #204]	@ (800129c <HAL_SPI_MspInit+0x144>)
 80011d0:	f001 fb72 	bl	80028b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011d6:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <HAL_SPI_MspInit+0x14c>)
 80011d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001202:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001214:	4822      	ldr	r0, [pc, #136]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 8001216:	f001 f865 	bl	80022e4 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001220:	f7ff feac 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 8001228:	64da      	str	r2, [r3, #76]	@ 0x4c
 800122a:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_SPI_MspInit+0x148>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <HAL_SPI_MspInit+0x154>)
 8001234:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001238:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800123c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001240:	2240      	movs	r2, #64	@ 0x40
 8001242:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001272:	f001 f837 	bl	80022e4 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800127c:	f7ff fe7e 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001284:	649a      	str	r2, [r3, #72]	@ 0x48
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_SPI_MspInit+0x150>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	@ 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013000 	.word	0x40013000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	20000764 	.word	0x20000764
 80012a4:	40026410 	.word	0x40026410
 80012a8:	200007c4 	.word	0x200007c4
 80012ac:	40026458 	.word	0x40026458

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a38      	ldr	r2, [pc, #224]	@ (80013a0 <HAL_TIM_Base_MspInit+0xf0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d116      	bne.n	80012f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a36      	ldr	r2, [pc, #216]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2019      	movs	r0, #25
 80012e4:	f000 ffc7 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012e8:	2019      	movs	r0, #25
 80012ea:	f000 ffe0 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ee:	e052      	b.n	8001396 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f8:	d116      	bne.n	8001328 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a28      	ldr	r2, [pc, #160]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f000 ffab 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f000 ffc4 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 8001326:	e036      	b.n	8001396 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <HAL_TIM_Base_MspInit+0xf8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d116      	bne.n	8001360 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6413      	str	r3, [r2, #64]	@ 0x40
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201d      	movs	r0, #29
 8001354:	f000 ff8f 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001358:	201d      	movs	r0, #29
 800135a:	f000 ffa8 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 800135e:	e01a      	b.n	8001396 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d115      	bne.n	8001396 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2101      	movs	r1, #1
 800138a:	201e      	movs	r0, #30
 800138c:	f000 ff73 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001390:	201e      	movs	r0, #30
 8001392:	f000 ff8c 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40000400 	.word	0x40000400
 80013ac:	40000800 	.word	0x40000800

080013b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a25      	ldr	r2, [pc, #148]	@ (8001464 <HAL_TIM_MspPostInit+0xb4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11f      	bne.n	8001412 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001400:	2301      	movs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4818      	ldr	r0, [pc, #96]	@ (800146c <HAL_TIM_MspPostInit+0xbc>)
 800140c:	f001 fa54 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001410:	e023      	b.n	800145a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800141a:	d11e      	bne.n	800145a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	6313      	str	r3, [r2, #48]	@ 0x30
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_TIM_MspPostInit+0xb8>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800144a:	2301      	movs	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4806      	ldr	r0, [pc, #24]	@ (8001470 <HAL_TIM_MspPostInit+0xc0>)
 8001456:	f001 fa2f 	bl	80028b8 <HAL_GPIO_Init>
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 f9d3 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
//		__HAL_GPIO_EXTI_CLEAR_IT(IRQ_TCH_Pin);
//		HAL_GPIO_EXTI_Callback(IRQ_TCH_Pin);
//	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_TCH_Pin);
 80014d6:	2004      	movs	r0, #4
 80014d8:	f001 fba4 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014e6:	f005 ff85 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000824 	.word	0x20000824

080014f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
//			gl_touch_change_id = 0;
//			//HAL_TIM_Base_Stop_IT(&htim2);
//		}
//	}

	gl_counter_1000hz_tim2++;
 80014f8:	4b42      	ldr	r3, [pc, #264]	@ (8001604 <TIM2_IRQHandler+0x110>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <TIM2_IRQHandler+0x110>)
 8001502:	801a      	strh	r2, [r3, #0]
	gl_selected_pause++;
 8001504:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <TIM2_IRQHandler+0x114>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <TIM2_IRQHandler+0x114>)
 800150e:	801a      	strh	r2, [r3, #0]
	if(gl_selected_pause >0 && gl_selected_pause < 5000)
 8001510:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <TIM2_IRQHandler+0x114>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <TIM2_IRQHandler+0x3c>
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <TIM2_IRQHandler+0x114>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001520:	4293      	cmp	r3, r2
 8001522:	d805      	bhi.n	8001530 <TIM2_IRQHandler+0x3c>
	{
		gl_selected_pause++;
 8001524:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <TIM2_IRQHandler+0x114>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <TIM2_IRQHandler+0x114>)
 800152e:	801a      	strh	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 500 == 0)
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <TIM2_IRQHandler+0x110>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	4a35      	ldr	r2, [pc, #212]	@ (800160c <TIM2_IRQHandler+0x118>)
 8001536:	fba2 1203 	umull	r1, r2, r2, r3
 800153a:	0952      	lsrs	r2, r2, #5
 800153c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001540:	fb01 f202 	mul.w	r2, r1, r2
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d108      	bne.n	800155e <TIM2_IRQHandler+0x6a>
	{
		gl_int_5hz_tim2 = 1;
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <TIM2_IRQHandler+0x11c>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		gl_int_5hz_tim2_for_pic ++;
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <TIM2_IRQHandler+0x120>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <TIM2_IRQHandler+0x120>)
 800155c:	701a      	strb	r2, [r3, #0]
	}

	if(gl_counter_1000hz_tim2 % 50 == 0 && gl_led_pwm_state == LED_PWM_CCR_CHANGEBALE )
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <TIM2_IRQHandler+0x110>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4a2d      	ldr	r2, [pc, #180]	@ (8001618 <TIM2_IRQHandler+0x124>)
 8001564:	fba2 1203 	umull	r1, r2, r2, r3
 8001568:	0912      	lsrs	r2, r2, #4
 800156a:	2132      	movs	r1, #50	@ 0x32
 800156c:	fb01 f202 	mul.w	r2, r1, r2
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d13f      	bne.n	80015f8 <TIM2_IRQHandler+0x104>
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <TIM2_IRQHandler+0x128>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d13b      	bne.n	80015f8 <TIM2_IRQHandler+0x104>
	{
		ch3_counter += 3;
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	3303      	adds	r3, #3
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 800158a:	801a      	strh	r2, [r3, #0]
		if(ch3_counter < 300)
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001594:	d20b      	bcs.n	80015ae <TIM2_IRQHandler+0xba>
		{
			CH3_DC = ch3_counter;
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <TIM2_IRQHandler+0x130>)
 800159e:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = CH3_DC;
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ac:	e024      	b.n	80015f8 <TIM2_IRQHandler+0x104>
		}
		else if(ch3_counter >= 300)
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015b6:	d31f      	bcc.n	80015f8 <TIM2_IRQHandler+0x104>
		{
			TIM2->CCR3 = CH3_DC;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c2:	63da      	str	r2, [r3, #60]	@ 0x3c
			CH3_DC -= 3;
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b03      	subs	r3, #3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015d4:	801a      	strh	r2, [r3, #0]
			if(CH3_DC <=0)
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dc0b      	bgt.n	80015f8 <TIM2_IRQHandler+0x104>
			{
				CH3_DC = 0;
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <TIM2_IRQHandler+0x130>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	801a      	strh	r2, [r3, #0]
				ch3_counter = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <TIM2_IRQHandler+0x12c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
				gl_led_color_result_blink_counter++;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <TIM2_IRQHandler+0x134>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <TIM2_IRQHandler+0x134>)
 80015f6:	701a      	strb	r2, [r3, #0]
		}


	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <TIM2_IRQHandler+0x138>)
 80015fa:	f005 fefb 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000094a 	.word	0x2000094a
 8001608:	20001d80 	.word	0x20001d80
 800160c:	10624dd3 	.word	0x10624dd3
 8001610:	2000094c 	.word	0x2000094c
 8001614:	2000094d 	.word	0x2000094d
 8001618:	51eb851f 	.word	0x51eb851f
 800161c:	20000112 	.word	0x20000112
 8001620:	20000948 	.word	0x20000948
 8001624:	20000946 	.word	0x20000946
 8001628:	2000094f 	.word	0x2000094f
 800162c:	2000086c 	.word	0x2000086c

08001630 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM3_IRQHandler+0x10>)
 8001636:	f005 fedd 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200008b4 	.word	0x200008b4

08001644 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM4_IRQHandler+0x10>)
 800164a:	f005 fed3 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200008fc 	.word	0x200008fc

08001658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 800165c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001660:	f001 fae0 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	led_1hz_counter++;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <RTC_Alarm_IRQHandler+0x38>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <RTC_Alarm_IRQHandler+0x38>)
 8001676:	701a      	strb	r2, [r3, #0]

	if(gl_selected_pause == 0 && gl_selected_flag == 1)
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <RTC_Alarm_IRQHandler+0x3c>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <RTC_Alarm_IRQHandler+0x2c>
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <RTC_Alarm_IRQHandler+0x40>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <RTC_Alarm_IRQHandler+0x2c>
	{
		gl_selected_pause = 1;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <RTC_Alarm_IRQHandler+0x3c>)
 800168a:	2201      	movs	r2, #1
 800168c:	801a      	strh	r2, [r3, #0]
		gl_selected_flag = 0;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <RTC_Alarm_IRQHandler+0x40>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <RTC_Alarm_IRQHandler+0x44>)
 8001696:	f004 fd61 	bl	800615c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000094e 	.word	0x2000094e
 80016a4:	20001d80 	.word	0x20001d80
 80016a8:	20000116 	.word	0x20000116
 80016ac:	200006ec 	.word	0x200006ec

080016b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA2_Stream0_IRQHandler+0x10>)
 80016b6:	f000 fec3 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000764 	.word	0x20000764

080016c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream3_IRQHandler+0x10>)
 80016ca:	f000 feb9 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200007c4 	.word	0x200007c4

080016d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <OTG_FS_IRQHandler+0x10>)
 80016de:	f002 fbc8 	bl	8003e72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20001640 	.word	0x20001640

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f00c ff26 	bl	800e56c <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20010000 	.word	0x20010000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000958 	.word	0x20000958
 8001754:	20001f10 	.word	0x20001f10

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001782:	490e      	ldr	r1, [pc, #56]	@ (80017bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001784:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001798:	4c0b      	ldr	r4, [pc, #44]	@ (80017c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a6:	f7ff ffd7 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017aa:	f00c fee5 	bl	800e578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ae:	f7fe fef3 	bl	8000598 <main>
  bx  lr    
 80017b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000634 	.word	0x20000634
  ldr r2, =_sidata
 80017c0:	08011984 	.word	0x08011984
  ldr r2, =_sbss
 80017c4:	20000634 	.word	0x20000634
  ldr r4, =_ebss
 80017c8:	20001f10 	.word	0x20001f10

080017cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_Init+0x40>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_Init+0x40>)
 80017e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_Init+0x40>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 fd31 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fbc0 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd49 	bl	80022ca <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 fd11 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	20000008 	.word	0x20000008
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	2000095c 	.word	0x2000095c

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000095c 	.word	0x2000095c

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e033      	b.n	800197a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fb5c 	bl	8000fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001942:	f023 0302 	bic.w	r3, r3, #2
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 faba 	bl	8001ec8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40
 800196a:	e001      	b.n	8001970 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_Start+0x1a>
 800199a:	2302      	movs	r3, #2
 800199c:	e097      	b.n	8001ace <HAL_ADC_Start+0x14a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d018      	beq.n	80019e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c4:	4b45      	ldr	r3, [pc, #276]	@ (8001adc <HAL_ADC_Start+0x158>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a45      	ldr	r2, [pc, #276]	@ (8001ae0 <HAL_ADC_Start+0x15c>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9a      	lsrs	r2, r3, #18
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d15f      	bne.n	8001ab4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f023 0206 	bic.w	r2, r3, #6
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_ADC_Start+0x160>)
 8001a52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d129      	bne.n	8001acc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e020      	b.n	8001acc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_ADC_Start+0x164>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d11b      	bne.n	8001acc <HAL_ADC_Start+0x148>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d114      	bne.n	8001acc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	e00b      	b.n	8001acc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000

08001aec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Stop+0x16>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e021      	b.n	8001b46 <HAL_ADC_Stop+0x5a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6e:	d113      	bne.n	8001b98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b7e:	d10b      	bne.n	8001b98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e063      	b.n	8001c60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b98:	f7ff fe80 	bl	800189c <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b9e:	e021      	b.n	8001be4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d01d      	beq.n	8001be4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_PollForConversion+0x6c>
 8001bae:	f7ff fe75 	bl	800189c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d212      	bcs.n	8001be4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d00b      	beq.n	8001be4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03d      	b.n	8001c60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d1d6      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f06f 0212 	mvn.w	r2, #18
 8001bfa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d123      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11f      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d111      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1c>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e105      	b.n	8001eac <HAL_ADC_ConfigChannel+0x228>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d925      	bls.n	8001cfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4403      	add	r3, r0
 8001cee:	3b1e      	subs	r3, #30
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	e022      	b.n	8001d42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6919      	ldr	r1, [r3, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	2207      	movs	r2, #7
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6919      	ldr	r1, [r3, #16]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4403      	add	r3, r0
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d824      	bhi.n	8001d94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b05      	subs	r3, #5
 8001d5c:	221f      	movs	r2, #31
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	400a      	ands	r2, r1
 8001d6a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b05      	subs	r3, #5
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d92:	e04c      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d824      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b23      	subs	r3, #35	@ 0x23
 8001dae:	221f      	movs	r2, #31
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43da      	mvns	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b23      	subs	r3, #35	@ 0x23
 8001dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001de4:	e023      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b41      	subs	r3, #65	@ 0x41
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b41      	subs	r3, #65	@ 0x41
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x234>)
 8001e30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <HAL_ADC_ConfigChannel+0x238>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1cc>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b12      	cmp	r3, #18
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	@ (8001ebc <HAL_ADC_ConfigChannel+0x238>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d123      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x21e>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d003      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x1e6>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b11      	cmp	r3, #17
 8001e68:	d11b      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d111      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x23c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x240>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	0c9a      	lsrs	r2, r3, #18
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	4b79      	ldr	r3, [pc, #484]	@ (80020b8 <ADC_Init+0x1f0>)
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	021a      	lsls	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <ADC_Init+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e00f      	b.n	8001fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0202 	bic.w	r2, r2, #2
 8001fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	005a      	lsls	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	3b01      	subs	r3, #1
 8002020:	035a      	lsls	r2, r3, #13
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e007      	b.n	800203c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	051a      	lsls	r2, r3, #20
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207e:	025a      	lsls	r2, r3, #9
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	029a      	lsls	r2, r3, #10
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	0f000001 	.word	0x0f000001

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fad4 	bl	800189c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e099      	b.n	8002434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	e00f      	b.n	8002342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff fabb 	bl	800189c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	d908      	bls.n	8002342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e078      	b.n	8002434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e8      	bne.n	8002322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_DMA_Init+0x158>)
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	2b04      	cmp	r3, #4
 800239a:	d107      	bne.n	80023ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	4313      	orrs	r3, r2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f023 0307 	bic.w	r3, r3, #7
 80023c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d117      	bne.n	8002406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f9e9 	bl	80027c0 <DMA_CheckFifoParam>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2240      	movs	r2, #64	@ 0x40
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002402:	2301      	movs	r3, #1
 8002404:	e016      	b.n	8002434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9a0 	bl	8002754 <DMA_CalcBaseAndBitshift>
 8002414:	4603      	mov	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	223f      	movs	r2, #63	@ 0x3f
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	f010803f 	.word	0xf010803f

08002440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800244c:	4b8e      	ldr	r3, [pc, #568]	@ (8002688 <HAL_DMA_IRQHandler+0x248>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a8e      	ldr	r2, [pc, #568]	@ (800268c <HAL_DMA_IRQHandler+0x24c>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	2208      	movs	r2, #8
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01a      	beq.n	80024ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	2208      	movs	r2, #8
 800249a:	409a      	lsls	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2201      	movs	r2, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2201      	movs	r2, #1
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	f043 0202 	orr.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	2204      	movs	r2, #4
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2204      	movs	r2, #4
 8002506:	409a      	lsls	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	2210      	movs	r2, #16
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d043      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03c      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	2210      	movs	r2, #16
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d024      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
 800256e:	e01f      	b.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e016      	b.n	80025b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0208 	bic.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	2220      	movs	r2, #32
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 808f 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8087 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	2220      	movs	r2, #32
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d136      	bne.n	8002658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0216 	bic.w	r2, r2, #22
 80025f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_DMA_IRQHandler+0x1da>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	223f      	movs	r2, #63	@ 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d07e      	beq.n	800274c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
        }
        return;
 8002656:	e079      	b.n	800274c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01d      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e02c      	b.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e01e      	b.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10f      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0210 	bic.w	r2, r2, #16
 80026be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d032      	beq.n	800274e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d022      	beq.n	800273a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2205      	movs	r2, #5
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	d307      	bcc.n	8002728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_DMA_IRQHandler+0x2cc>
 8002726:	e000      	b.n	800272a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e000      	b.n	800274e <HAL_DMA_IRQHandler+0x30e>
        return;
 800274c:	bf00      	nop
    }
  }
}
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b10      	subs	r3, #16
 8002764:	4a14      	ldr	r2, [pc, #80]	@ (80027b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800276e:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <DMA_CalcBaseAndBitshift+0x68>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d909      	bls.n	8002796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	1d1a      	adds	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	659a      	str	r2, [r3, #88]	@ 0x58
 8002794:	e007      	b.n	80027a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	aaaaaaab 	.word	0xaaaaaaab
 80027bc:	0800f0ac 	.word	0x0800f0ac

080027c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11f      	bne.n	800281a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d856      	bhi.n	800288e <DMA_CheckFifoParam+0xce>
 80027e0:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <DMA_CheckFifoParam+0x28>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	0800280b 	.word	0x0800280b
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	0800288f 	.word	0x0800288f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d046      	beq.n	8002892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e043      	b.n	8002892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002812:	d140      	bne.n	8002896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002818:	e03d      	b.n	8002896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002822:	d121      	bne.n	8002868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d837      	bhi.n	800289a <DMA_CheckFifoParam+0xda>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <DMA_CheckFifoParam+0x70>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002841 	.word	0x08002841
 8002834:	08002847 	.word	0x08002847
 8002838:	08002841 	.word	0x08002841
 800283c:	08002859 	.word	0x08002859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e030      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d025      	beq.n	800289e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e022      	b.n	800289e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002860:	d11f      	bne.n	80028a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002866:	e01c      	b.n	80028a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d903      	bls.n	8002876 <DMA_CheckFifoParam+0xb6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002874:	e018      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      break;
 800287a:	e015      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e00b      	b.n	80028a6 <DMA_CheckFifoParam+0xe6>
      break;
 800288e:	bf00      	nop
 8002890:	e00a      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e008      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002896:	bf00      	nop
 8002898:	e006      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
 800289c:	e004      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 800289e:	bf00      	nop
 80028a0:	e002      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
    }
  } 
  
  return status; 
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	e159      	b.n	8002b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	f040 8148 	bne.w	8002b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d005      	beq.n	800290a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002906:	2b02      	cmp	r3, #2
 8002908:	d130      	bne.n	800296c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0201 	and.w	r2, r3, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d017      	beq.n	80029a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d123      	bne.n	80029fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a2 	beq.w	8002b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HAL_GPIO_Init+0x2e8>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	4a56      	ldr	r2, [pc, #344]	@ (8002ba0 <HAL_GPIO_Init+0x2e8>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_GPIO_Init+0x2e8>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_GPIO_Init+0x2ec>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a49      	ldr	r2, [pc, #292]	@ (8002ba8 <HAL_GPIO_Init+0x2f0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d019      	beq.n	8002aba <HAL_GPIO_Init+0x202>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a48      	ldr	r2, [pc, #288]	@ (8002bac <HAL_GPIO_Init+0x2f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0x1fe>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a47      	ldr	r2, [pc, #284]	@ (8002bb0 <HAL_GPIO_Init+0x2f8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00d      	beq.n	8002ab2 <HAL_GPIO_Init+0x1fa>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a46      	ldr	r2, [pc, #280]	@ (8002bb4 <HAL_GPIO_Init+0x2fc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_GPIO_Init+0x1f6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a45      	ldr	r2, [pc, #276]	@ (8002bb8 <HAL_GPIO_Init+0x300>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_GPIO_Init+0x1f2>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e008      	b.n	8002abc <HAL_GPIO_Init+0x204>
 8002aaa:	2307      	movs	r3, #7
 8002aac:	e006      	b.n	8002abc <HAL_GPIO_Init+0x204>
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e004      	b.n	8002abc <HAL_GPIO_Init+0x204>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_Init+0x204>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_GPIO_Init+0x204>
 8002aba:	2300      	movs	r3, #0
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f002 0203 	and.w	r2, r2, #3
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	4093      	lsls	r3, r2
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002acc:	4935      	ldr	r1, [pc, #212]	@ (8002ba4 <HAL_GPIO_Init+0x2ec>)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ada:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afe:	4a2f      	ldr	r2, [pc, #188]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b04:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b28:	4a24      	ldr	r2, [pc, #144]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b52:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b58:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bbc <HAL_GPIO_Init+0x304>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	f67f aea2 	bls.w	80028d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3724      	adds	r7, #36	@ 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e001      	b.n	8002be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c0c:	e003      	b.n	8002c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3a:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc94 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12b      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f9f0 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	@ 0x24
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f002 fe78 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a81      	ldr	r2, [pc, #516]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d807      	bhi.n	8002cd8 <HAL_I2C_Init+0x84>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a80      	ldr	r2, [pc, #512]	@ (8002ecc <HAL_I2C_Init+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x92>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a7d      	ldr	r2, [pc, #500]	@ (8002ed0 <HAL_I2C_Init+0x27c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bf94      	ite	ls
 8002ce0:	2301      	movls	r3, #1
 8002ce2:	2300      	movhi	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0e7      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a78      	ldr	r2, [pc, #480]	@ (8002ed4 <HAL_I2C_Init+0x280>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <HAL_I2C_Init+0xd4>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e009      	b.n	8002d3c <HAL_I2C_Init+0xe8>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a69      	ldr	r2, [pc, #420]	@ (8002ed8 <HAL_I2C_Init+0x284>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	495c      	ldr	r1, [pc, #368]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d819      	bhi.n	8002d90 <HAL_I2C_Init+0x13c>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e59      	subs	r1, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d70:	400b      	ands	r3, r1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_I2C_Init+0x138>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	e051      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e04f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <HAL_I2C_Init+0x168>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Init+0x18e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x196>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e022      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <HAL_I2C_Init+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1e58      	subs	r0, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6809      	ldr	r1, [r1, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6911      	ldr	r1, [r2, #16]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	000186a0 	.word	0x000186a0
 8002ecc:	001e847f 	.word	0x001e847f
 8002ed0:	003d08ff 	.word	0x003d08ff
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef6:	f7fe fcd1 	bl	800189c <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 80d9 	bne.w	80030bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2319      	movs	r3, #25
 8002f10:	2201      	movs	r2, #1
 8002f12:	496d      	ldr	r1, [pc, #436]	@ (80030c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fc7f 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0cc      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2C_Mem_Write+0x56>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0c5      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d007      	beq.n	8002f58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2221      	movs	r2, #33	@ 0x21
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a4d      	ldr	r2, [pc, #308]	@ (80030cc <HAL_I2C_Mem_Write+0x1f0>)
 8002f98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9a:	88f8      	ldrh	r0, [r7, #6]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fab6 	bl	800351c <I2C_RequestMemoryWrite>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d052      	beq.n	800305c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e081      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fd00 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d107      	bne.n	8002fe2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06b      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11b      	bne.n	800305c <HAL_I2C_Mem_Write+0x180>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1aa      	bne.n	8002fba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fcec 	bl	8003a46 <I2C_WaitOnBTFFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e016      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	00100002 	.word	0x00100002
 80030cc:	ffff0000 	.word	0xffff0000

080030d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	@ 0x30
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	460b      	mov	r3, r1
 80030e4:	813b      	strh	r3, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ea:	f7fe fbd7 	bl	800189c <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	f040 8208 	bne.w	800350e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2319      	movs	r3, #25
 8003104:	2201      	movs	r2, #1
 8003106:	497b      	ldr	r1, [pc, #492]	@ (80032f4 <HAL_I2C_Mem_Read+0x224>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fb85 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
 8003116:	e1fb      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Mem_Read+0x56>
 8003122:	2302      	movs	r3, #2
 8003124:	e1f4      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d007      	beq.n	800314c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2222      	movs	r2, #34	@ 0x22
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a5b      	ldr	r2, [pc, #364]	@ (80032f8 <HAL_I2C_Mem_Read+0x228>)
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800318e:	88f8      	ldrh	r0, [r7, #6]
 8003190:	893a      	ldrh	r2, [r7, #8]
 8003192:	8979      	ldrh	r1, [r7, #10]
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa52 	bl	8003648 <I2C_RequestMemoryRead>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1b0      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d113      	bne.n	80031de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e184      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d11b      	bne.n	800321e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e164      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003222:	2b02      	cmp	r3, #2
 8003224:	d11b      	bne.n	800325e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003234:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	e144      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003274:	e138      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	2b03      	cmp	r3, #3
 800327c:	f200 80f1 	bhi.w	8003462 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b01      	cmp	r3, #1
 8003286:	d123      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc1b 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e139      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032ce:	e10b      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d14e      	bne.n	8003376 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	2200      	movs	r2, #0
 80032e0:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_I2C_Mem_Read+0x22c>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa98 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e10e      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
 80032f2:	bf00      	nop
 80032f4:	00100002 	.word	0x00100002
 80032f8:	ffff0000 	.word	0xffff0000
 80032fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003374:	e0b8      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	2200      	movs	r2, #0
 800337e:	4966      	ldr	r1, [pc, #408]	@ (8003518 <HAL_I2C_Mem_Read+0x448>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fa49 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0bf      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2200      	movs	r2, #0
 80033da:	494f      	ldr	r1, [pc, #316]	@ (8003518 <HAL_I2C_Mem_Read+0x448>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fa1b 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e091      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003460:	e042      	b.n	80034e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fb2e 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e04c      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d118      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f aec2 	bne.w	8003276 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	@ 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010004 	.word	0x00010004

0800351c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2200      	movs	r2, #0
 800354e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f960 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356c:	d103      	bne.n	8003576 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e05f      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	492d      	ldr	r1, [pc, #180]	@ (8003644 <I2C_RequestMemoryWrite+0x128>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f998 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e04c      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa02 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d107      	bne.n	80035de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e02b      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e8:	893b      	ldrh	r3, [r7, #8]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	e021      	b.n	8003638 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f9dc 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e005      	b.n	800363a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00010002 	.word	0x00010002

08003648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003670:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2200      	movs	r2, #0
 800368a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f8c2 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a8:	d103      	bne.n	80036b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0aa      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	6a3a      	ldr	r2, [r7, #32]
 80036ca:	4952      	ldr	r1, [pc, #328]	@ (8003814 <I2C_RequestMemoryRead+0x1cc>)
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f8fa 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e097      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f4:	6a39      	ldr	r1, [r7, #32]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f964 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	2b04      	cmp	r3, #4
 8003708:	d107      	bne.n	800371a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e076      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d105      	bne.n	8003730 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	e021      	b.n	8003774 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f93e 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2b04      	cmp	r3, #4
 8003754:	d107      	bne.n	8003766 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e050      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376a:	893b      	ldrh	r3, [r7, #8]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f923 	bl	80039c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e035      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f82b 	bl	8003818 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d6:	d103      	bne.n	80037e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e013      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037e4:	897b      	ldrh	r3, [r7, #10]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	6a3a      	ldr	r2, [r7, #32]
 80037f8:	4906      	ldr	r1, [pc, #24]	@ (8003814 <I2C_RequestMemoryRead+0x1cc>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f863 	bl	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	00010002 	.word	0x00010002

08003818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003828:	e025      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d021      	beq.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe f833 	bl	800189c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e023      	b.n	80038be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10d      	bne.n	800389c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	e00c      	b.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d0b6      	beq.n	800382a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d4:	e051      	b.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e4:	d123      	bne.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e046      	b.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd ffb1 	bl	800189c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e020      	b.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10c      	bne.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	e00b      	b.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	43da      	mvns	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4013      	ands	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d18d      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d0:	e02d      	b.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8ce 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02d      	b.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d021      	beq.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fd ff57 	bl	800189c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b80      	cmp	r3, #128	@ 0x80
 8003a3a:	d1ca      	bne.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a52:	e02d      	b.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f88d 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e02d      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d021      	beq.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fd ff16 	bl	800189c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e007      	b.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d1ca      	bne.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad4:	e042      	b.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d119      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e029      	b.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fd fec0 	bl	800189c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d1b5      	bne.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d11b      	bne.n	8003bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd4:	b08f      	sub	sp, #60	@ 0x3c
 8003bd6:	af0a      	add	r7, sp, #40	@ 0x28
 8003bd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e10f      	b.n	8003e04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f008 faf2 	bl	800c1e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2203      	movs	r2, #3
 8003c08:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f004 fb5f 	bl	80082e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	687e      	ldr	r6, [r7, #4]
 8003c30:	466d      	mov	r5, sp
 8003c32:	f106 0410 	add.w	r4, r6, #16
 8003c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c46:	1d33      	adds	r3, r6, #4
 8003c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f004 fa36 	bl	80080bc <USB_CoreInit>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0d0      	b.n	8003e04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 fb4d 	bl	8008308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e04a      	b.n	8003d0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	333d      	adds	r3, #61	@ 0x3d
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333c      	adds	r3, #60	@ 0x3c
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	b298      	uxth	r0, r3
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3344      	adds	r3, #68	@ 0x44
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3340      	adds	r3, #64	@ 0x40
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3348      	adds	r3, #72	@ 0x48
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	334c      	adds	r3, #76	@ 0x4c
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3354      	adds	r3, #84	@ 0x54
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	3301      	adds	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3af      	bcc.n	8003c74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e044      	b.n	8003da4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	3301      	adds	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3b5      	bcc.n	8003d1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	687e      	ldr	r6, [r7, #4]
 8003db6:	466d      	mov	r5, sp
 8003db8:	f106 0410 	add.w	r4, r6, #16
 8003dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dcc:	1d33      	adds	r3, r6, #4
 8003dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f004 fae5 	bl	80083a0 <USB_DevInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e00d      	b.n	8003e04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f005 fc34 	bl	800966a <USB_DevDisconnect>

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_PCD_Start+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e020      	b.n	8003e6a <HAL_PCD_Start+0x5e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d109      	bne.n	8003e4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d005      	beq.n	8003e4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fa37 	bl	80082c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 fbe4 	bl	8009628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e72:	b590      	push	{r4, r7, lr}
 8003e74:	b08d      	sub	sp, #52	@ 0x34
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fca2 	bl	80097d2 <USB_GetMode>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 848a 	bne.w	80047aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 fc06 	bl	80096ac <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8480 	beq.w	80047a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f005 fbf3 	bl	80096ac <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d107      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 0202 	and.w	r2, r2, #2
 8003ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f005 fbe1 	bl	80096ac <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d161      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0210 	bic.w	r2, r2, #16
 8003f02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	0c5b      	lsrs	r3, r3, #17
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d124      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d035      	beq.n	8003fa8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6a38      	ldr	r0, [r7, #32]
 8003f50:	f005 fa18 	bl	8009384 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f60:	441a      	add	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f72:	441a      	add	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
 8003f78:	e016      	b.n	8003fa8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	0c5b      	lsrs	r3, r3, #17
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d110      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6a38      	ldr	r0, [r7, #32]
 8003f92:	f005 f9f7 	bl	8009384 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa2:	441a      	add	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0210 	orr.w	r2, r2, #16
 8003fb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f005 fb75 	bl	80096ac <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fcc:	f040 80a7 	bne.w	800411e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f005 fb7a 	bl	80096d2 <USB_ReadDevAllOutEpInterrupt>
 8003fde:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fe0:	e099      	b.n	8004116 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808e 	beq.w	800410a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f005 fb9e 	bl	800973a <USB_ReadDevOutEPInterrupt>
 8003ffe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	2301      	movs	r3, #1
 800401a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800401c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fec2 	bl	8004da8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	2308      	movs	r3, #8
 800403e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 ff98 	bl	8004f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2310      	movs	r3, #16
 8004062:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d030      	beq.n	80040d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004076:	2b80      	cmp	r3, #128	@ 0x80
 8004078:	d109      	bne.n	800408e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004088:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800408c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	78db      	ldrb	r3, [r3, #3]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d108      	bne.n	80040be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f008 f991 	bl	800c3e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	2302      	movs	r3, #2
 80040ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e6:	461a      	mov	r2, r3
 80040e8:	2320      	movs	r3, #32
 80040ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004108:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	3301      	adds	r3, #1
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f af62 	bne.w	8003fe2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f005 fac2 	bl	80096ac <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004132:	f040 80db 	bne.w	80042ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f005 fae3 	bl	8009706 <USB_ReadDevAllInEpInterrupt>
 8004140:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004146:	e0cd      	b.n	80042e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80c2 	beq.w	80042d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f005 fb09 	bl	8009776 <USB_ReadDevInEPInterrupt>
 8004164:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d057      	beq.n	8004220 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	2201      	movs	r2, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004190:	4013      	ands	r3, r2
 8004192:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a0:	461a      	mov	r2, r3
 80041a2:	2301      	movs	r3, #1
 80041a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d132      	bne.n	8004214 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334c      	adds	r3, #76	@ 0x4c
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4403      	add	r3, r0
 80041ce:	3348      	adds	r3, #72	@ 0x48
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4419      	add	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4403      	add	r3, r0
 80041e2:	334c      	adds	r3, #76	@ 0x4c
 80041e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d113      	bne.n	8004214 <HAL_PCD_IRQHandler+0x3a2>
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3354      	adds	r3, #84	@ 0x54
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800420c:	461a      	mov	r2, r3
 800420e:	2101      	movs	r1, #1
 8004210:	f005 fb10 	bl	8009834 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f008 f865 	bl	800c2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004236:	461a      	mov	r2, r3
 8004238:	2308      	movs	r3, #8
 800423a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	2310      	movs	r3, #16
 8004256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426e:	461a      	mov	r2, r3
 8004270:	2340      	movs	r3, #64	@ 0x40
 8004272:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d023      	beq.n	80042c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800427e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004280:	6a38      	ldr	r0, [r7, #32]
 8004282:	f004 f9f1 	bl	8008668 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	3338      	adds	r3, #56	@ 0x38
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	78db      	ldrb	r3, [r3, #3]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d108      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f008 f8a8 	bl	800c404 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	2302      	movs	r3, #2
 80042c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fcdb 	bl	8004c8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	3301      	adds	r3, #1
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f47f af2e 	bne.w	8004148 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f005 f9db 	bl	80096ac <USB_ReadInterrupts>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004300:	d122      	bne.n	8004348 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800431c:	2b01      	cmp	r3, #1
 800431e:	d108      	bne.n	8004332 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fec2 	bl	80050b4 <HAL_PCDEx_LPM_Callback>
 8004330:	e002      	b.n	8004338 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f008 f846 	bl	800c3c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f005 f9ad 	bl	80096ac <USB_ReadInterrupts>
 8004352:	4603      	mov	r3, r0
 8004354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435c:	d112      	bne.n	8004384 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f008 f802 	bl	800c378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004382:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f005 f98f 	bl	80096ac <USB_ReadInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004398:	f040 80b7 	bne.w	800450a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2110      	movs	r1, #16
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 f956 	bl	8008668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c0:	e046      	b.n	8004450 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ce:	461a      	mov	r2, r3
 80043d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004408:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004448:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	3301      	adds	r3, #1
 800444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004456:	429a      	cmp	r2, r3
 8004458:	d3b3      	bcc.n	80043c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004468:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800446c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004486:	f043 030b 	orr.w	r3, r3, #11
 800448a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800449c:	f043 030b 	orr.w	r3, r3, #11
 80044a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a2:	e015      	b.n	80044d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044b6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ca:	f043 030b 	orr.w	r3, r3, #11
 80044ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044f4:	461a      	mov	r2, r3
 80044f6:	f005 f99d 	bl	8009834 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f005 f8cc 	bl	80096ac <USB_ReadInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451e:	d124      	bne.n	800456a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f005 f962 	bl	80097ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f004 f917 	bl	8008762 <USB_GetDevSpeed>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681c      	ldr	r4, [r3, #0]
 8004540:	f001 fa28 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 8004544:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4620      	mov	r0, r4
 8004550:	f003 fe16 	bl	8008180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f007 fef0 	bl	800c33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f005 f89c 	bl	80096ac <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d10a      	bne.n	8004594 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f007 fecd 	bl	800c31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f002 0208 	and.w	r2, r2, #8
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f005 f887 	bl	80096ac <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a4:	2b80      	cmp	r3, #128	@ 0x80
 80045a6:	d122      	bne.n	80045ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	e014      	b.n	80045e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb27 	bl	8004c2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	3301      	adds	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d3e5      	bcc.n	80045ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 f85a 	bl	80096ac <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004602:	d13b      	bne.n	800467c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004604:	2301      	movs	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
 8004608:	e02b      	b.n	8004662 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	3340      	adds	r3, #64	@ 0x40
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d115      	bne.n	800465c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004630:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004632:	2b00      	cmp	r3, #0
 8004634:	da12      	bge.n	800465c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	333f      	adds	r3, #63	@ 0x3f
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004652:	b2db      	uxtb	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fae8 	bl	8004c2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	3301      	adds	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004668:	429a      	cmp	r2, r3
 800466a:	d3ce      	bcc.n	800460a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800467a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f005 f813 	bl	80096ac <USB_ReadInterrupts>
 8004686:	4603      	mov	r3, r0
 8004688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800468c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004690:	d155      	bne.n	800473e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004692:	2301      	movs	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	e045      	b.n	8004724 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d12e      	bne.n	800471e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da2b      	bge.n	800471e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80046d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d121      	bne.n	800471e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471a:	6053      	str	r3, [r2, #4]
            break;
 800471c:	e007      	b.n	800472e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472a:	429a      	cmp	r2, r3
 800472c:	d3b4      	bcc.n	8004698 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800473c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f004 ffb2 	bl	80096ac <USB_ReadInterrupts>
 8004748:	4603      	mov	r3, r0
 800474a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d10a      	bne.n	800476a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f007 fe67 	bl	800c428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 ff9c 	bl	80096ac <USB_ReadInterrupts>
 8004774:	4603      	mov	r3, r0
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d115      	bne.n	80047aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f007 fe57 	bl	800c444 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e000      	b.n	80047aa <HAL_PCD_IRQHandler+0x938>
      return;
 80047a8:	bf00      	nop
    }
  }
}
 80047aa:	3734      	adds	r7, #52	@ 0x34
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_SetAddress+0x1a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e013      	b.n	80047f2 <HAL_PCD_SetAddress+0x42>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 fefa 	bl	80095dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	4608      	mov	r0, r1
 8004804:	4611      	mov	r1, r2
 8004806:	461a      	mov	r2, r3
 8004808:	4603      	mov	r3, r0
 800480a:	70fb      	strb	r3, [r7, #3]
 800480c:	460b      	mov	r3, r1
 800480e:	803b      	strh	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481c:	2b00      	cmp	r3, #0
 800481e:	da0f      	bge.n	8004840 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3338      	adds	r3, #56	@ 0x38
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	705a      	strb	r2, [r3, #1]
 800483e:	e00f      	b.n	8004860 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	f003 020f 	and.w	r2, r3, #15
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	3304      	adds	r3, #4
 8004858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800486c:	883a      	ldrh	r2, [r7, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	78ba      	ldrb	r2, [r7, #2]
 8004876:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800488a:	78bb      	ldrb	r3, [r7, #2]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d102      	bne.n	8004896 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PCD_EP_Open+0xaa>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e00e      	b.n	80048c2 <HAL_PCD_EP_Open+0xc8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 ff7a 	bl	80087ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80048c0:	7afb      	ldrb	r3, [r7, #11]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da0f      	bge.n	80048fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	3338      	adds	r3, #56	@ 0x38
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	3304      	adds	r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	705a      	strb	r2, [r3, #1]
 80048fc:	e00f      	b.n	800491e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_PCD_EP_Close+0x6e>
 8004934:	2302      	movs	r3, #2
 8004936:	e00e      	b.n	8004956 <HAL_PCD_EP_Close+0x8c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	4618      	mov	r0, r3
 8004948:	f003 ffb8 	bl	80088bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	460b      	mov	r3, r1
 800496c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	4613      	mov	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2200      	movs	r2, #0
 800499e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a0:	7afb      	ldrb	r3, [r7, #11]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	f004 fa97 	bl	8008f04 <USB_EP0StartXfer>
 80049d6:	e008      	b.n	80049ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6979      	ldr	r1, [r7, #20]
 80049e6:	f004 f845 	bl	8008a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f003 020f 	and.w	r2, r3, #15
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a34:	7afb      	ldrb	r3, [r7, #11]
 8004a36:	f003 020f 	and.w	r2, r3, #15
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	3338      	adds	r3, #56	@ 0x38
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	3304      	adds	r3, #4
 8004a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2201      	movs	r2, #1
 8004a62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d102      	bne.n	8004a7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6979      	ldr	r1, [r7, #20]
 8004a96:	f004 fa35 	bl	8008f04 <USB_EP0StartXfer>
 8004a9a:	e008      	b.n	8004aae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	f003 ffe3 	bl	8008a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d901      	bls.n	8004ad6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e050      	b.n	8004b78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da0f      	bge.n	8004afe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	3338      	adds	r3, #56	@ 0x38
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	705a      	strb	r2, [r3, #1]
 8004afc:	e00d      	b.n	8004b1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	4413      	add	r3, r2
 8004b10:	3304      	adds	r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_PCD_EP_SetStall+0x82>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e01e      	b.n	8004b78 <HAL_PCD_EP_SetStall+0xc0>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f004 fc73 	bl	8009434 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f004 fe63 	bl	8009834 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d901      	bls.n	8004b9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e042      	b.n	8004c24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da0f      	bge.n	8004bc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3338      	adds	r3, #56	@ 0x38
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3304      	adds	r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	705a      	strb	r2, [r3, #1]
 8004bc4:	e00f      	b.n	8004be6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	3304      	adds	r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_PCD_EP_ClrStall+0x86>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e00e      	b.n	8004c24 <HAL_PCD_EP_ClrStall+0xa4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f004 fc7b 	bl	8009510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da0c      	bge.n	8004c5a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	3338      	adds	r3, #56	@ 0x38
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	3304      	adds	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e00c      	b.n	8004c74 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	3304      	adds	r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68f9      	ldr	r1, [r7, #12]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 fa9a 	bl	80091b4 <USB_EPStopXfer>
 8004c80:	4603      	mov	r3, r0
 8004c82:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c84:	7afb      	ldrb	r3, [r7, #11]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	@ 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3338      	adds	r3, #56	@ 0x38
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d901      	bls.n	8004cc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06c      	b.n	8004da0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d902      	bls.n	8004ce2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3303      	adds	r3, #3
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cea:	e02b      	b.n	8004d44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d902      	bls.n	8004d08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3303      	adds	r3, #3
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6919      	ldr	r1, [r3, #16]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	4603      	mov	r3, r0
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f004 faee 	bl	8009308 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	441a      	add	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d809      	bhi.n	8004d6e <PCD_WriteEmptyTxFifo+0xe0>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d203      	bcs.n	8004d6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1be      	bne.n	8004cec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d811      	bhi.n	8004d9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	2201      	movs	r2, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	6939      	ldr	r1, [r7, #16]
 8004d96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	333c      	adds	r3, #60	@ 0x3c
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d17b      	bne.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	f240 80b9 	bls.w	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80b3 	beq.w	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e10:	6093      	str	r3, [r2, #8]
 8004e12:	e0a7      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	6093      	str	r3, [r2, #8]
 8004e30:	e098      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 8093 	bne.w	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4a4b      	ldr	r2, [pc, #300]	@ (8004f70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d90f      	bls.n	8004e66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e62:	6093      	str	r3, [r2, #8]
 8004e64:	e07e      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	3304      	adds	r3, #4
 8004e7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	0159      	lsls	r1, r3, #5
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d114      	bne.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	f004 fcbe 	bl	8009834 <USB_EP0_OutStart>
 8004eb8:	e006      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f007 f9f0 	bl	800c2b4 <HAL_PCD_DataOutStageCallback>
 8004ed4:	e046      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	@ (8004f74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d124      	bne.n	8004f28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efa:	6093      	str	r3, [r2, #8]
 8004efc:	e032      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	2320      	movs	r3, #32
 8004f18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f007 f9c7 	bl	800c2b4 <HAL_PCD_DataOutStageCallback>
 8004f26:	e01d      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d114      	bne.n	8004f58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004f50:	461a      	mov	r2, r3
 8004f52:	2100      	movs	r1, #0
 8004f54:	f004 fc6e 	bl	8009834 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f007 f9a8 	bl	800c2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	4f54300a 	.word	0x4f54300a
 8004f74:	4f54310a 	.word	0x4f54310a

08004f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	333c      	adds	r3, #60	@ 0x3c
 8004f90:	3304      	adds	r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <PCD_EP_OutSetupPacket_int+0x88>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d90e      	bls.n	8004fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f007 f95f 	bl	800c290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005000 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d90c      	bls.n	8004ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d108      	bne.n	8004ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004fec:	461a      	mov	r2, r3
 8004fee:	2101      	movs	r1, #1
 8004ff0:	f004 fc20 	bl	8009834 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	4f54300a 	.word	0x4f54300a

08005004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
 8005010:	4613      	mov	r3, r2
 8005012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005022:	883b      	ldrh	r3, [r7, #0]
 8005024:	0419      	lsls	r1, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	430a      	orrs	r2, r1
 800502e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005030:	e028      	b.n	8005084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4413      	add	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	e00d      	b.n	8005062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	3340      	adds	r3, #64	@ 0x40
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4413      	add	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	3301      	adds	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	3b01      	subs	r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	d3ec      	bcc.n	8005046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800506c:	883b      	ldrh	r3, [r7, #0]
 800506e:	0418      	lsls	r0, r3, #16
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	3b01      	subs	r3, #1
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4302      	orrs	r2, r0
 800507c:	3340      	adds	r3, #64	@ 0x40
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e267      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ea:	4b88      	ldr	r3, [pc, #544]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00c      	beq.n	8005110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f6:	4b85      	ldr	r3, [pc, #532]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d112      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005102:	4b82      	ldr	r3, [pc, #520]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d10b      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4b7e      	ldr	r3, [pc, #504]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05b      	beq.n	80051d4 <HAL_RCC_OscConfig+0x108>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d157      	bne.n	80051d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e242      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d106      	bne.n	8005140 <HAL_RCC_OscConfig+0x74>
 8005132:	4b76      	ldr	r3, [pc, #472]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a75      	ldr	r2, [pc, #468]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e01d      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b70      	ldr	r3, [pc, #448]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a6f      	ldr	r2, [pc, #444]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b6d      	ldr	r3, [pc, #436]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6c      	ldr	r2, [pc, #432]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005164:	4b69      	ldr	r3, [pc, #420]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a68      	ldr	r2, [pc, #416]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b66      	ldr	r3, [pc, #408]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a65      	ldr	r2, [pc, #404]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fc fb8a 	bl	800189c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800518c:	f7fc fb86 	bl	800189c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	@ 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e207      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	4b5b      	ldr	r3, [pc, #364]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0xc0>
 80051aa:	e014      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fc fb76 	bl	800189c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fc fb72 	bl	800189c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1f3      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0xe8>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e2:	4b4a      	ldr	r3, [pc, #296]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d11c      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d116      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005206:	4b41      	ldr	r3, [pc, #260]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e1c7      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521e:	4b3b      	ldr	r3, [pc, #236]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4937      	ldr	r1, [pc, #220]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	e03a      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800523c:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <HAL_RCC_OscConfig+0x244>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fc fb2b 	bl	800189c <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524a:	f7fc fb27 	bl	800189c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1a8      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b28      	ldr	r3, [pc, #160]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4925      	ldr	r1, [pc, #148]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
 800527c:	e015      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <HAL_RCC_OscConfig+0x244>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fb0a 	bl	800189c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528c:	f7fc fb06 	bl	800189c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e187      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d036      	beq.n	8005324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_RCC_OscConfig+0x248>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc faea 	bl	800189c <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fc fae6 	bl	800189c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e167      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x200>
 80052ea:	e01b      	b.n	8005324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_OscConfig+0x248>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fc fad3 	bl	800189c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f8:	e00e      	b.n	8005318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fc facf 	bl	800189c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d907      	bls.n	8005318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e150      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
 800530c:	40023800 	.word	0x40023800
 8005310:	42470000 	.word	0x42470000
 8005314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	4b88      	ldr	r3, [pc, #544]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800531a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ea      	bne.n	80052fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8097 	beq.w	8005460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b81      	ldr	r3, [pc, #516]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	4b7d      	ldr	r3, [pc, #500]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	4a7c      	ldr	r2, [pc, #496]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005350:	6413      	str	r3, [r2, #64]	@ 0x40
 8005352:	4b7a      	ldr	r3, [pc, #488]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b77      	ldr	r3, [pc, #476]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d118      	bne.n	80053a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536e:	4b74      	ldr	r3, [pc, #464]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a73      	ldr	r2, [pc, #460]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537a:	f7fc fa8f 	bl	800189c <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005382:	f7fc fa8b 	bl	800189c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e10c      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d106      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2ea>
 80053a8:	4b64      	ldr	r3, [pc, #400]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	4a63      	ldr	r2, [pc, #396]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b4:	e01c      	b.n	80053f0 <HAL_RCC_OscConfig+0x324>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x30c>
 80053be:	4b5f      	ldr	r3, [pc, #380]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	4a5e      	ldr	r2, [pc, #376]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ca:	4b5c      	ldr	r3, [pc, #368]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	4a5b      	ldr	r2, [pc, #364]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d6:	e00b      	b.n	80053f0 <HAL_RCC_OscConfig+0x324>
 80053d8:	4b58      	ldr	r3, [pc, #352]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	4a57      	ldr	r2, [pc, #348]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e4:	4b55      	ldr	r3, [pc, #340]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	4a54      	ldr	r2, [pc, #336]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053ea:	f023 0304 	bic.w	r3, r3, #4
 80053ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fc fa50 	bl	800189c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fc fa4c 	bl	800189c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0cb      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005416:	4b49      	ldr	r3, [pc, #292]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ee      	beq.n	8005400 <HAL_RCC_OscConfig+0x334>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005424:	f7fc fa3a 	bl	800189c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fc fa36 	bl	800189c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e0b5      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005442:	4b3e      	ldr	r3, [pc, #248]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1ee      	bne.n	800542c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d105      	bne.n	8005460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	4a38      	ldr	r2, [pc, #224]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80a1 	beq.w	80055ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546a:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b08      	cmp	r3, #8
 8005474:	d05c      	beq.n	8005530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d141      	bne.n	8005502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fc fa0a 	bl	800189c <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800548c:	f7fc fa06 	bl	800189c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e087      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	4b27      	ldr	r3, [pc, #156]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	3b01      	subs	r3, #1
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	491b      	ldr	r1, [pc, #108]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fc f9df 	bl	800189c <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fc f9db 	bl	800189c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e05c      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x416>
 8005500:	e054      	b.n	80055ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fc f9c8 	bl	800189c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005510:	f7fc f9c4 	bl	800189c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e045      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x444>
 800552e:	e03d      	b.n	80055ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e038      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
 800553c:	40023800 	.word	0x40023800
 8005540:	40007000 	.word	0x40007000
 8005544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005548:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <HAL_RCC_OscConfig+0x4ec>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d028      	beq.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d121      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d11a      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800557e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005580:	4293      	cmp	r3, r2
 8005582:	d111      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	3b01      	subs	r3, #1
 8005592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800

080055bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0cc      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d0:	4b68      	ldr	r3, [pc, #416]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90c      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b65      	ldr	r3, [pc, #404]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b63      	ldr	r3, [pc, #396]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0b8      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d020      	beq.n	8005646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005610:	4b59      	ldr	r3, [pc, #356]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a58      	ldr	r2, [pc, #352]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800561a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005628:	4b53      	ldr	r3, [pc, #332]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a52      	ldr	r2, [pc, #328]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b50      	ldr	r3, [pc, #320]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	494d      	ldr	r1, [pc, #308]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d044      	beq.n	80056dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b47      	ldr	r3, [pc, #284]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d119      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e07f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d003      	beq.n	800567a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567a:	4b3f      	ldr	r3, [pc, #252]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	4b3b      	ldr	r3, [pc, #236]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e067      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4b37      	ldr	r3, [pc, #220]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4934      	ldr	r1, [pc, #208]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056ac:	f7fc f8f6 	bl	800189c <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b4:	f7fc f8f2 	bl	800189c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e04f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 020c 	and.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1eb      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056dc:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d20c      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e032      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4916      	ldr	r1, [pc, #88]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b12      	ldr	r3, [pc, #72]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	490e      	ldr	r1, [pc, #56]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005742:	f000 f821 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005746:	4602      	mov	r2, r0
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	490a      	ldr	r1, [pc, #40]	@ (800577c <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	5ccb      	ldrb	r3, [r1, r3]
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a09      	ldr	r2, [pc, #36]	@ (8005780 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575e:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <HAL_RCC_ClockConfig+0x1c8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fc f856 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023c00 	.word	0x40023c00
 8005778:	40023800 	.word	0x40023800
 800577c:	0800f094 	.word	0x0800f094
 8005780:	20000000 	.word	0x20000000
 8005784:	20000004 	.word	0x20000004

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800578c:	b094      	sub	sp, #80	@ 0x50
 800578e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	647b      	str	r3, [r7, #68]	@ 0x44
 8005794:	2300      	movs	r3, #0
 8005796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005798:	2300      	movs	r3, #0
 800579a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a0:	4b79      	ldr	r3, [pc, #484]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d00d      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x40>
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	f200 80e1 	bhi.w	8005974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x34>
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ba:	e0db      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b73      	ldr	r3, [pc, #460]	@ (800598c <HAL_RCC_GetSysClockFreq+0x204>)
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80057c0:	e0db      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c2:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x208>)
 80057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c6:	e0d8      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d063      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057de:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	2200      	movs	r2, #0
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	0159      	lsls	r1, r3, #5
 8005808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800580c:	0150      	lsls	r0, r2, #5
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4621      	mov	r1, r4
 8005814:	1a51      	subs	r1, r2, r1
 8005816:	6139      	str	r1, [r7, #16]
 8005818:	4629      	mov	r1, r5
 800581a:	eb63 0301 	sbc.w	r3, r3, r1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800582c:	4659      	mov	r1, fp
 800582e:	018b      	lsls	r3, r1, #6
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005836:	4651      	mov	r1, sl
 8005838:	018a      	lsls	r2, r1, #6
 800583a:	4651      	mov	r1, sl
 800583c:	ebb2 0801 	subs.w	r8, r2, r1
 8005840:	4659      	mov	r1, fp
 8005842:	eb63 0901 	sbc.w	r9, r3, r1
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585a:	4690      	mov	r8, r2
 800585c:	4699      	mov	r9, r3
 800585e:	4623      	mov	r3, r4
 8005860:	eb18 0303 	adds.w	r3, r8, r3
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	462b      	mov	r3, r5
 8005868:	eb49 0303 	adc.w	r3, r9, r3
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800587a:	4629      	mov	r1, r5
 800587c:	024b      	lsls	r3, r1, #9
 800587e:	4621      	mov	r1, r4
 8005880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005884:	4621      	mov	r1, r4
 8005886:	024a      	lsls	r2, r1, #9
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	2200      	movs	r2, #0
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005898:	f7fa fcf2 	bl	8000280 <__aeabi_uldivmod>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4613      	mov	r3, r2
 80058a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a4:	e058      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a6:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	099b      	lsrs	r3, r3, #6
 80058ac:	2200      	movs	r2, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	4611      	mov	r1, r2
 80058b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80058bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	f04f 0000 	mov.w	r0, #0
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	0159      	lsls	r1, r3, #5
 80058ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d2:	0150      	lsls	r0, r2, #5
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4641      	mov	r1, r8
 80058da:	ebb2 0a01 	subs.w	sl, r2, r1
 80058de:	4649      	mov	r1, r9
 80058e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058f8:	ebb2 040a 	subs.w	r4, r2, sl
 80058fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	00eb      	lsls	r3, r5, #3
 800590a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800590e:	00e2      	lsls	r2, r4, #3
 8005910:	4614      	mov	r4, r2
 8005912:	461d      	mov	r5, r3
 8005914:	4643      	mov	r3, r8
 8005916:	18e3      	adds	r3, r4, r3
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	464b      	mov	r3, r9
 800591c:	eb45 0303 	adc.w	r3, r5, r3
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800592e:	4629      	mov	r1, r5
 8005930:	028b      	lsls	r3, r1, #10
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005938:	4621      	mov	r1, r4
 800593a:	028a      	lsls	r2, r1, #10
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	2200      	movs	r2, #0
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800594c:	f7fa fc98 	bl	8000280 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	3301      	adds	r3, #1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005972:	e002      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005974:	4b05      	ldr	r3, [pc, #20]	@ (800598c <HAL_RCC_GetSysClockFreq+0x204>)
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800597c:	4618      	mov	r0, r3
 800597e:	3750      	adds	r7, #80	@ 0x50
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	00f42400 	.word	0x00f42400
 8005990:	007a1200 	.word	0x007a1200

08005994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000000 	.word	0x20000000

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059b0:	f7ff fff0 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	0a9b      	lsrs	r3, r3, #10
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4903      	ldr	r1, [pc, #12]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40023800 	.word	0x40023800
 80059d0:	0800f0a4 	.word	0x0800f0a4

080059d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d035      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059fc:	4b67      	ldr	r3, [pc, #412]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a02:	f7fb ff4b 	bl	800189c <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a08:	e008      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a0a:	f7fb ff47 	bl	800189c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e0ba      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	019a      	lsls	r2, r3, #6
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	071b      	lsls	r3, r3, #28
 8005a34:	495a      	ldr	r1, [pc, #360]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a3c:	4b57      	ldr	r3, [pc, #348]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a42:	f7fb ff2b 	bl	800189c <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a4a:	f7fb ff27 	bl	800189c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e09a      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8083 	beq.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	4b49      	ldr	r3, [pc, #292]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	4a48      	ldr	r2, [pc, #288]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a86:	4b46      	ldr	r3, [pc, #280]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a92:	4b44      	ldr	r3, [pc, #272]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a43      	ldr	r2, [pc, #268]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a9e:	f7fb fefd 	bl	800189c <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aa6:	f7fb fef9 	bl	800189c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e06c      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ac4:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005acc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d028      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aec:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005af2:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005af8:	4a29      	ldr	r2, [pc, #164]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005afe:	4b28      	ldr	r3, [pc, #160]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d114      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b0a:	f7fb fec7 	bl	800189c <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b10:	e00a      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fb fec3 	bl	800189c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e034      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0ee      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b40:	d10d      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b42:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b56:	4912      	ldr	r1, [pc, #72]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	608b      	str	r3, [r1, #8]
 8005b5c:	e005      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b64:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b76:	490a      	ldr	r1, [pc, #40]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	7c1a      	ldrb	r2, [r3, #16]
 8005b8c:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b8e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	42470068 	.word	0x42470068
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40007000 	.word	0x40007000
 8005ba8:	42470e40 	.word	0x42470e40
 8005bac:	424711e0 	.word	0x424711e0

08005bb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e066      	b.n	8005c94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	7f5b      	ldrb	r3, [r3, #29]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fa8a 	bl	80010f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	22ca      	movs	r2, #202	@ 0xca
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2253      	movs	r2, #83	@ 0x53
 8005bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb2a 	bl	800624c <RTC_EnterInitMode>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d12c      	bne.n	8005c5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68d2      	ldr	r2, [r2, #12]
 8005c3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6919      	ldr	r1, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb31 	bl	80062ba <RTC_ExitInitMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d113      	bne.n	8005c8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c70:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	22ff      	movs	r2, #255	@ 0xff
 8005c90:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	7f1b      	ldrb	r3, [r3, #28]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RTC_SetTime+0x1c>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e087      	b.n	8005dc8 <HAL_RTC_SetTime+0x12c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d126      	bne.n	8005d18 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fb0e 	bl	8006304 <RTC_ByteToBcd2>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fb07 	bl	8006304 <RTC_ByteToBcd2>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cfa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	789b      	ldrb	r3, [r3, #2]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 faff 	bl	8006304 <RTC_ByteToBcd2>
 8005d06:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d08:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e018      	b.n	8005d4a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d38:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d3e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	78db      	ldrb	r3, [r3, #3]
 8005d44:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	22ca      	movs	r2, #202	@ 0xca
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2253      	movs	r2, #83	@ 0x53
 8005d58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fa76 	bl	800624c <RTC_EnterInitMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d120      	bne.n	8005dac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005d74:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005d78:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6899      	ldr	r1, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa89 	bl	80062ba <RTC_ExitInitMode>
 8005da8:	4603      	mov	r3, r0
 8005daa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005dac:	7cfb      	ldrb	r3, [r7, #19]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	22ff      	movs	r2, #255	@ 0xff
 8005dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]

  return status;
 8005dc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd90      	pop	{r4, r7, pc}

08005dd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	7f1b      	ldrb	r3, [r3, #28]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_RTC_SetDate+0x1c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e071      	b.n	8005ed0 <HAL_RTC_SetDate+0x100>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10e      	bne.n	8005e1c <HAL_RTC_SetDate+0x4c>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	f023 0310 	bic.w	r3, r3, #16
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	330a      	adds	r3, #10
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11c      	bne.n	8005e5c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	78db      	ldrb	r3, [r3, #3]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fa6c 	bl	8006304 <RTC_ByteToBcd2>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fa65 	bl	8006304 <RTC_ByteToBcd2>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e3e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fa5d 	bl	8006304 <RTC_ByteToBcd2>
 8005e4a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e4c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e00e      	b.n	8005e7a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e68:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e6e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	22ca      	movs	r2, #202	@ 0xca
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2253      	movs	r2, #83	@ 0x53
 8005e88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f9de 	bl	800624c <RTC_EnterInitMode>
 8005e90:	4603      	mov	r3, r0
 8005e92:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ea4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ea8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fa05 	bl	80062ba <RTC_ExitInitMode>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	22ff      	movs	r2, #255	@ 0xff
 8005ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	771a      	strb	r2, [r3, #28]

  return status;
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd90      	pop	{r4, r7, pc}

08005ed8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b089      	sub	sp, #36	@ 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005ee4:	4b9a      	ldr	r3, [pc, #616]	@ (8006150 <HAL_RTC_SetAlarm_IT+0x278>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a9a      	ldr	r2, [pc, #616]	@ (8006154 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0adb      	lsrs	r3, r3, #11
 8005ef0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ef4:	fb02 f303 	mul.w	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	7f1b      	ldrb	r3, [r3, #28]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_RTC_SetAlarm_IT+0x36>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e11c      	b.n	8006148 <HAL_RTC_SetAlarm_IT+0x270>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d137      	bne.n	8005f90 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f9e3 	bl	8006304 <RTC_ByteToBcd2>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f9dc 	bl	8006304 <RTC_ByteToBcd2>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005f50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f9d4 	bl	8006304 <RTC_ByteToBcd2>
 8005f5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	78db      	ldrb	r3, [r3, #3]
 8005f66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005f68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f9c6 	bl	8006304 <RTC_ByteToBcd2>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005f7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005f84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	e023      	b.n	8005fd8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005fb0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005fb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005fbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005fc8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005fce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	22ca      	movs	r2, #202	@ 0xca
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2253      	movs	r2, #83	@ 0x53
 8005ff2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffc:	d141      	bne.n	8006082 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800600c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800601e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1e5a      	subs	r2, r3, #1
 8006024:	617a      	str	r2, [r7, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	22ff      	movs	r2, #255	@ 0xff
 8006030:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2203      	movs	r2, #3
 8006036:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e082      	b.n	8006148 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0e7      	beq.n	8006020 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800606e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	e04b      	b.n	800611a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006090:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80060a2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80060a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006150 <HAL_RTC_SetAlarm_IT+0x278>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006154 <HAL_RTC_SetAlarm_IT+0x27c>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0adb      	lsrs	r3, r3, #11
 80060b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	22ff      	movs	r2, #255	@ 0xff
 80060ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2203      	movs	r2, #3
 80060d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e035      	b.n	8006148 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0e7      	beq.n	80060ba <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006108:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006118:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800611a:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <HAL_RTC_SetAlarm_IT+0x280>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a0e      	ldr	r2, [pc, #56]	@ (8006158 <HAL_RTC_SetAlarm_IT+0x280>)
 8006120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006124:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006126:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <HAL_RTC_SetAlarm_IT+0x280>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	4a0b      	ldr	r2, [pc, #44]	@ (8006158 <HAL_RTC_SetAlarm_IT+0x280>)
 800612c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006130:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	22ff      	movs	r2, #255	@ 0xff
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3724      	adds	r7, #36	@ 0x24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd90      	pop	{r4, r7, pc}
 8006150:	20000000 	.word	0x20000000
 8006154:	10624dd3 	.word	0x10624dd3
 8006158:	40013c00 	.word	0x40013c00

0800615c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d012      	beq.n	8006198 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f831 	bl	80061e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006196:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d012      	beq.n	80061cc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8c2 	bl	800633e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80061ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80061ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061d2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	775a      	strb	r2, [r3, #29]
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40013c00 	.word	0x40013c00

080061e8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006216:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006218:	f7fb fb40 	bl	800189c <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800621e:	e009      	b.n	8006234 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006220:	f7fb fb3c 	bl	800189c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800622e:	d901      	bls.n	8006234 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e007      	b.n	8006244 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ee      	beq.n	8006220 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d122      	bne.n	80062b0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006278:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800627a:	f7fb fb0f 	bl	800189c <HAL_GetTick>
 800627e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006280:	e00c      	b.n	800629c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006282:	f7fb fb0b 	bl	800189c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006290:	d904      	bls.n	800629c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <RTC_EnterInitMode+0x64>
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d1e8      	bne.n	8006282 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff ff89 	bl	80061fc <HAL_RTC_WaitForSynchro>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2204      	movs	r2, #4
 80062f4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006312:	e005      	b.n	8006320 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	3301      	adds	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	3b0a      	subs	r3, #10
 800631e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b09      	cmp	r3, #9
 8006324:	d8f6      	bhi.n	8006314 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	b2da      	uxtb	r2, r3
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	4313      	orrs	r3, r2
 8006330:	b2db      	uxtb	r3, r3
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e07b      	b.n	800645c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006374:	d009      	beq.n	800638a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	61da      	str	r2, [r3, #28]
 800637c:	e005      	b.n	800638a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fa fed7 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	ea42 0103 	orr.w	r1, r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	f003 0104 	and.w	r1, r3, #4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	f003 0210 	and.w	r2, r3, #16
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800644a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_SPI_Transmit+0x22>
 8006482:	2302      	movs	r3, #2
 8006484:	e126      	b.n	80066d4 <HAL_SPI_Transmit+0x270>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800648e:	f7fb fa05 	bl	800189c <HAL_GetTick>
 8006492:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d002      	beq.n	80064aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
 80064a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064a8:	e10b      	b.n	80066c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Transmit+0x52>
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d102      	bne.n	80064bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ba:	e102      	b.n	80066c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d10f      	bne.n	8006524 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006512:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006522:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d007      	beq.n	8006542 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654a:	d14b      	bne.n	80065e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Transmit+0xf6>
 8006554:	8afb      	ldrh	r3, [r7, #22]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d13e      	bne.n	80065d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800657e:	e02b      	b.n	80065d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d112      	bne.n	80065b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065b2:	e011      	b.n	80065d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b4:	f7fb f972 	bl	800189c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d803      	bhi.n	80065cc <HAL_SPI_Transmit+0x168>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Transmit+0x16e>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065d6:	e074      	b.n	80066c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ce      	bne.n	8006580 <HAL_SPI_Transmit+0x11c>
 80065e2:	e04c      	b.n	800667e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x18e>
 80065ec:	8afb      	ldrh	r3, [r7, #22]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d140      	bne.n	8006674 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006618:	e02c      	b.n	8006674 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d113      	bne.n	8006650 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800664e:	e011      	b.n	8006674 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006650:	f7fb f924 	bl	800189c <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d803      	bhi.n	8006668 <HAL_SPI_Transmit+0x204>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d102      	bne.n	800666e <HAL_SPI_Transmit+0x20a>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006672:	e026      	b.n	80066c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1cd      	bne.n	800661a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fbcc 	bl	8006e20 <SPI_EndRxTxTransaction>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	77fb      	strb	r3, [r7, #31]
 80066be:	e000      	b.n	80066c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f8:	d112      	bne.n	8006720 <HAL_SPI_Receive+0x44>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10e      	bne.n	8006720 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2204      	movs	r2, #4
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f8f1 	bl	80068fe <HAL_SPI_TransmitReceive>
 800671c:	4603      	mov	r3, r0
 800671e:	e0ea      	b.n	80068f6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_SPI_Receive+0x52>
 800672a:	2302      	movs	r3, #2
 800672c:	e0e3      	b.n	80068f6 <HAL_SPI_Receive+0x21a>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006736:	f7fb f8b1 	bl	800189c <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d002      	beq.n	800674e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006748:	2302      	movs	r3, #2
 800674a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800674c:	e0ca      	b.n	80068e4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_SPI_Receive+0x7e>
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800675e:	e0c1      	b.n	80068e4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2204      	movs	r2, #4
 8006764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88fa      	ldrh	r2, [r7, #6]
 800677e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	d10f      	bne.n	80067c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d007      	beq.n	80067e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d162      	bne.n	80068b4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067ee:	e02e      	b.n	800684e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d115      	bne.n	800682a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f103 020c 	add.w	r2, r3, #12
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006828:	e011      	b.n	800684e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800682a:	f7fb f837 	bl	800189c <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d803      	bhi.n	8006842 <HAL_SPI_Receive+0x166>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d102      	bne.n	8006848 <HAL_SPI_Receive+0x16c>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800684c:	e04a      	b.n	80068e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1cb      	bne.n	80067f0 <HAL_SPI_Receive+0x114>
 8006858:	e031      	b.n	80068be <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d113      	bne.n	8006890 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006872:	b292      	uxth	r2, r2
 8006874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	1c9a      	adds	r2, r3, #2
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800688e:	e011      	b.n	80068b4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006890:	f7fb f804 	bl	800189c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d803      	bhi.n	80068a8 <HAL_SPI_Receive+0x1cc>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <HAL_SPI_Receive+0x1d2>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d102      	bne.n	80068b4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068b2:	e017      	b.n	80068e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1cd      	bne.n	800685a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fa46 	bl	8006d54 <SPI_EndRxTransaction>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
 80068e0:	e000      	b.n	80068e4 <HAL_SPI_Receive+0x208>
  }

error :
 80068e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b08c      	sub	sp, #48	@ 0x30
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800690c:	2301      	movs	r3, #1
 800690e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x26>
 8006920:	2302      	movs	r3, #2
 8006922:	e18a      	b.n	8006c3a <HAL_SPI_TransmitReceive+0x33c>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800692c:	f7fa ffb6 	bl	800189c <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006942:	887b      	ldrh	r3, [r7, #2]
 8006944:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006946:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800694a:	2b01      	cmp	r3, #1
 800694c:	d00f      	beq.n	800696e <HAL_SPI_TransmitReceive+0x70>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006954:	d107      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x68>
 800695e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006962:	2b04      	cmp	r3, #4
 8006964:	d003      	beq.n	800696e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006966:	2302      	movs	r3, #2
 8006968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800696c:	e15b      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_SPI_TransmitReceive+0x82>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_TransmitReceive+0x82>
 800697a:	887b      	ldrh	r3, [r7, #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006986:	e14e      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b04      	cmp	r3, #4
 8006992:	d003      	beq.n	800699c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2205      	movs	r2, #5
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	887a      	ldrh	r2, [r7, #2]
 80069ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	887a      	ldrh	r2, [r7, #2]
 80069b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	887a      	ldrh	r2, [r7, #2]
 80069be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	887a      	ldrh	r2, [r7, #2]
 80069c4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	d007      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069f8:	d178      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x10a>
 8006a02:	8b7b      	ldrh	r3, [r7, #26]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d166      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a2c:	e053      	b.n	8006ad6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d11b      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x176>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x176>
 8006a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d113      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	881a      	ldrh	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d119      	bne.n	8006ab6 <HAL_SPI_TransmitReceive+0x1b8>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d014      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	b292      	uxth	r2, r2
 8006a98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	1c9a      	adds	r2, r3, #2
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ab6:	f7fa fef1 	bl	800189c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d807      	bhi.n	8006ad6 <HAL_SPI_TransmitReceive+0x1d8>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d003      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006ad4:	e0a7      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1a6      	bne.n	8006a2e <HAL_SPI_TransmitReceive+0x130>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1a1      	bne.n	8006a2e <HAL_SPI_TransmitReceive+0x130>
 8006aea:	e07c      	b.n	8006be6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_SPI_TransmitReceive+0x1fc>
 8006af4:	8b7b      	ldrh	r3, [r7, #26]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d16b      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	7812      	ldrb	r2, [r2, #0]
 8006b06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b20:	e057      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d11c      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x26c>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d017      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x26c>
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d114      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	7812      	ldrb	r2, [r2, #0]
 8006b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d119      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x2ae>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d014      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bac:	f7fa fe76 	bl	800189c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d803      	bhi.n	8006bc4 <HAL_SPI_TransmitReceive+0x2c6>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x2cc>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006bd0:	e029      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1a2      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x224>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d19d      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f918 	bl	8006e20 <SPI_EndRxTxTransaction>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006c02:	e010      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10b      	bne.n	8006c24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	e000      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	@ 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c54:	f7fa fe22 	bl	800189c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c64:	f7fa fe1a 	bl	800189c <HAL_GetTick>
 8006c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c6a:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	015b      	lsls	r3, r3, #5
 8006c70:	0d1b      	lsrs	r3, r3, #20
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c7a:	e054      	b.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d050      	beq.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c84:	f7fa fe0a 	bl	800189c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d902      	bls.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d13d      	bne.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb2:	d111      	bne.n	8006cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbc:	d004      	beq.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc6:	d107      	bne.n	8006cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce0:	d10f      	bne.n	8006d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e017      	b.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	bf0c      	ite	eq
 8006d36:	2301      	moveq	r3, #1
 8006d38:	2300      	movne	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d19b      	bne.n	8006c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000000 	.word	0x20000000

08006d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d68:	d111      	bne.n	8006d8e <SPI_EndRxTransaction+0x3a>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d72:	d004      	beq.n	8006d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d7c:	d107      	bne.n	8006d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d96:	d12a      	bne.n	8006dee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da0:	d012      	beq.n	8006dc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff ff49 	bl	8006c44 <SPI_WaitFlagStateUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02d      	beq.n	8006e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dbc:	f043 0220 	orr.w	r2, r3, #32
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e026      	b.n	8006e16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff ff36 	bl	8006c44 <SPI_WaitFlagStateUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01a      	beq.n	8006e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de2:	f043 0220 	orr.w	r2, r3, #32
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e013      	b.n	8006e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2200      	movs	r2, #0
 8006df6:	2101      	movs	r1, #1
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff ff23 	bl	8006c44 <SPI_WaitFlagStateUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e000      	b.n	8006e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006e9c <SPI_EndRxTxTransaction+0x7c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea0 <SPI_EndRxTxTransaction+0x80>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0d5b      	lsrs	r3, r3, #21
 8006e38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e4a:	d112      	bne.n	8006e72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff fef4 	bl	8006c44 <SPI_WaitFlagStateUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e00f      	b.n	8006e92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d0f2      	beq.n	8006e72 <SPI_EndRxTxTransaction+0x52>
 8006e8c:	e000      	b.n	8006e90 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e8e:	bf00      	nop
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000000 	.word	0x20000000
 8006ea0:	165e9f81 	.word	0x165e9f81

08006ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e041      	b.n	8006f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fa f9f0 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f000 fd4a 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e044      	b.n	8006fe6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f86:	d013      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a19      	ldr	r2, [pc, #100]	@ (8006ffc <HAL_TIM_Base_Start_IT+0xb8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	@ (8007000 <HAL_TIM_Base_Start_IT+0xbc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x6c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <HAL_TIM_Base_Start_IT+0xc0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d111      	bne.n	8006fd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b06      	cmp	r3, #6
 8006fc0:	d010      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	e007      	b.n	8006fe4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40014000 	.word	0x40014000

08007008 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	f241 1311 	movw	r3, #4369	@ 0x1111
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10f      	bne.n	8007050 <HAL_TIM_Base_Stop_IT+0x48>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6a1a      	ldr	r2, [r3, #32]
 8007036:	f240 4344 	movw	r3, #1092	@ 0x444
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d107      	bne.n	8007050 <HAL_TIM_Base_Stop_IT+0x48>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e041      	b.n	80070fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f839 	bl	8007104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f000 fc69 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_TIM_PWM_Start+0x24>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	bf14      	ite	ne
 8007134:	2301      	movne	r3, #1
 8007136:	2300      	moveq	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	e022      	b.n	8007182 <HAL_TIM_PWM_Start+0x6a>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d109      	bne.n	8007156 <HAL_TIM_PWM_Start+0x3e>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e015      	b.n	8007182 <HAL_TIM_PWM_Start+0x6a>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d109      	bne.n	8007170 <HAL_TIM_PWM_Start+0x58>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	e008      	b.n	8007182 <HAL_TIM_PWM_Start+0x6a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	bf14      	ite	ne
 800717c:	2301      	movne	r3, #1
 800717e:	2300      	moveq	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e068      	b.n	800725c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <HAL_TIM_PWM_Start+0x82>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007198:	e013      	b.n	80071c2 <HAL_TIM_PWM_Start+0xaa>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d104      	bne.n	80071aa <HAL_TIM_PWM_Start+0x92>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071a8:	e00b      	b.n	80071c2 <HAL_TIM_PWM_Start+0xaa>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start+0xa2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071b8:	e003      	b.n	80071c2 <HAL_TIM_PWM_Start+0xaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2201      	movs	r2, #1
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fe7c 	bl	8007ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a23      	ldr	r2, [pc, #140]	@ (8007264 <HAL_TIM_PWM_Start+0x14c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d107      	bne.n	80071ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007264 <HAL_TIM_PWM_Start+0x14c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d018      	beq.n	8007226 <HAL_TIM_PWM_Start+0x10e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fc:	d013      	beq.n	8007226 <HAL_TIM_PWM_Start+0x10e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a19      	ldr	r2, [pc, #100]	@ (8007268 <HAL_TIM_PWM_Start+0x150>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00e      	beq.n	8007226 <HAL_TIM_PWM_Start+0x10e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a17      	ldr	r2, [pc, #92]	@ (800726c <HAL_TIM_PWM_Start+0x154>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d009      	beq.n	8007226 <HAL_TIM_PWM_Start+0x10e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a16      	ldr	r2, [pc, #88]	@ (8007270 <HAL_TIM_PWM_Start+0x158>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <HAL_TIM_PWM_Start+0x10e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <HAL_TIM_PWM_Start+0x15c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d111      	bne.n	800724a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b06      	cmp	r3, #6
 8007236:	d010      	beq.n	800725a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	e007      	b.n	800725a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40010000 	.word	0x40010000
 8007268:	40000400 	.word	0x40000400
 800726c:	40000800 	.word	0x40000800
 8007270:	40000c00 	.word	0x40000c00
 8007274:	40014000 	.word	0x40014000

08007278 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fe1c 	bl	8007ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a29      	ldr	r2, [pc, #164]	@ (800733c <HAL_TIM_PWM_Stop+0xc4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d117      	bne.n	80072ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6a1a      	ldr	r2, [r3, #32]
 80072a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072a4:	4013      	ands	r3, r2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10f      	bne.n	80072ca <HAL_TIM_PWM_Stop+0x52>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_PWM_Stop+0x52>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10f      	bne.n	80072fa <HAL_TIM_PWM_Stop+0x82>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <HAL_TIM_PWM_Stop+0x82>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_TIM_PWM_Stop+0x92>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007308:	e013      	b.n	8007332 <HAL_TIM_PWM_Stop+0xba>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d104      	bne.n	800731a <HAL_TIM_PWM_Stop+0xa2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007318:	e00b      	b.n	8007332 <HAL_TIM_PWM_Stop+0xba>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d104      	bne.n	800732a <HAL_TIM_PWM_Stop+0xb2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007328:	e003      	b.n	8007332 <HAL_TIM_PWM_Stop+0xba>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40010000 	.word	0x40010000

08007340 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e041      	b.n	80073d8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f839 	bl	80073e0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f000 fafb 	bl	800797c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0208 	bic.w	r2, r2, #8
 8007394:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d122      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d11b      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0202 	mvn.w	r2, #2
 8007420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa81 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa73 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa84 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d122      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d11b      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0204 	mvn.w	r2, #4
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa57 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa49 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa5a 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d122      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d11b      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0208 	mvn.w	r2, #8
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa2d 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 80074e4:	e005      	b.n	80074f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa1f 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa30 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d122      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b10      	cmp	r3, #16
 8007512:	d11b      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0210 	mvn.w	r2, #16
 800751c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2208      	movs	r2, #8
 8007522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa03 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007538:	e005      	b.n	8007546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9f5 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa06 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10e      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0201 	mvn.w	r2, #1
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9cf 	bl	8007916 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b80      	cmp	r3, #128	@ 0x80
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007590:	2b80      	cmp	r3, #128	@ 0x80
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd82 	bl	80080a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ae:	2b40      	cmp	r3, #64	@ 0x40
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075bc:	2b40      	cmp	r3, #64	@ 0x40
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9cb 	bl	8007966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0220 	mvn.w	r2, #32
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fd4c 	bl	8008094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800761e:	2302      	movs	r3, #2
 8007620:	e0ae      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b0c      	cmp	r3, #12
 800762e:	f200 809f 	bhi.w	8007770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	0800766d 	.word	0x0800766d
 800763c:	08007771 	.word	0x08007771
 8007640:	08007771 	.word	0x08007771
 8007644:	08007771 	.word	0x08007771
 8007648:	080076ad 	.word	0x080076ad
 800764c:	08007771 	.word	0x08007771
 8007650:	08007771 	.word	0x08007771
 8007654:	08007771 	.word	0x08007771
 8007658:	080076ef 	.word	0x080076ef
 800765c:	08007771 	.word	0x08007771
 8007660:	08007771 	.word	0x08007771
 8007664:	08007771 	.word	0x08007771
 8007668:	0800772f 	.word	0x0800772f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fa02 	bl	8007a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0208 	orr.w	r2, r2, #8
 8007686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0204 	bic.w	r2, r2, #4
 8007696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	619a      	str	r2, [r3, #24]
      break;
 80076aa:	e064      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa48 	bl	8007b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	021a      	lsls	r2, r3, #8
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	619a      	str	r2, [r3, #24]
      break;
 80076ec:	e043      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fa93 	bl	8007c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0208 	orr.w	r2, r2, #8
 8007708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0204 	bic.w	r2, r2, #4
 8007718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69d9      	ldr	r1, [r3, #28]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	61da      	str	r2, [r3, #28]
      break;
 800772c:	e023      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fadd 	bl	8007cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	021a      	lsls	r2, r3, #8
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	61da      	str	r2, [r3, #28]
      break;
 800776e:	e002      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
      break;
 8007774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e0b4      	b.n	800790e <HAL_TIM_ConfigClockSource+0x186>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077dc:	d03e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0xd4>
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077e2:	f200 8087 	bhi.w	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ea:	f000 8086 	beq.w	80078fa <HAL_TIM_ConfigClockSource+0x172>
 80077ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f2:	d87f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b70      	cmp	r3, #112	@ 0x70
 80077f6:	d01a      	beq.n	800782e <HAL_TIM_ConfigClockSource+0xa6>
 80077f8:	2b70      	cmp	r3, #112	@ 0x70
 80077fa:	d87b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b60      	cmp	r3, #96	@ 0x60
 80077fe:	d050      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007800:	2b60      	cmp	r3, #96	@ 0x60
 8007802:	d877      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b50      	cmp	r3, #80	@ 0x50
 8007806:	d03c      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xfa>
 8007808:	2b50      	cmp	r3, #80	@ 0x50
 800780a:	d873      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b40      	cmp	r3, #64	@ 0x40
 800780e:	d058      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d86f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b30      	cmp	r3, #48	@ 0x30
 8007816:	d064      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	2b30      	cmp	r3, #48	@ 0x30
 800781a:	d86b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d060      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d867      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007828:	2b10      	cmp	r3, #16
 800782a:	d05a      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x15a>
 800782c:	e062      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f000 fb23 	bl	8007e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	609a      	str	r2, [r3, #8]
      break;
 800785a:	e04f      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6899      	ldr	r1, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f000 fb0c 	bl	8007e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800787e:	609a      	str	r2, [r3, #8]
      break;
 8007880:	e03c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fa80 	bl	8007d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2150      	movs	r1, #80	@ 0x50
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fad9 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 80078a0:	e02c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 fa9f 	bl	8007df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2160      	movs	r1, #96	@ 0x60
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fac9 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 80078c0:	e01c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f000 fa60 	bl	8007d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2140      	movs	r1, #64	@ 0x40
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fab9 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 80078e0:	e00c      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f000 fab0 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 80078f2:	e003      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e000      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a34      	ldr	r2, [pc, #208]	@ (8007a60 <TIM_Base_SetConfig+0xe4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00f      	beq.n	80079b4 <TIM_Base_SetConfig+0x38>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	d00b      	beq.n	80079b4 <TIM_Base_SetConfig+0x38>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a31      	ldr	r2, [pc, #196]	@ (8007a64 <TIM_Base_SetConfig+0xe8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d007      	beq.n	80079b4 <TIM_Base_SetConfig+0x38>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a30      	ldr	r2, [pc, #192]	@ (8007a68 <TIM_Base_SetConfig+0xec>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_Base_SetConfig+0x38>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a2f      	ldr	r2, [pc, #188]	@ (8007a6c <TIM_Base_SetConfig+0xf0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d108      	bne.n	80079c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a25      	ldr	r2, [pc, #148]	@ (8007a60 <TIM_Base_SetConfig+0xe4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01b      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d4:	d017      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a22      	ldr	r2, [pc, #136]	@ (8007a64 <TIM_Base_SetConfig+0xe8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a21      	ldr	r2, [pc, #132]	@ (8007a68 <TIM_Base_SetConfig+0xec>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a20      	ldr	r2, [pc, #128]	@ (8007a6c <TIM_Base_SetConfig+0xf0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a70 <TIM_Base_SetConfig+0xf4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a74 <TIM_Base_SetConfig+0xf8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_Base_SetConfig+0x8a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1d      	ldr	r2, [pc, #116]	@ (8007a78 <TIM_Base_SetConfig+0xfc>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d108      	bne.n	8007a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a08      	ldr	r2, [pc, #32]	@ (8007a60 <TIM_Base_SetConfig+0xe4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d103      	bne.n	8007a4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	615a      	str	r2, [r3, #20]
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40010000 	.word	0x40010000
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40000c00 	.word	0x40000c00
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40014400 	.word	0x40014400
 8007a78:	40014800 	.word	0x40014800

08007a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f023 0302 	bic.w	r3, r3, #2
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b44 <TIM_OC1_SetConfig+0xc8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10c      	bne.n	8007af2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0308 	bic.w	r3, r3, #8
 8007ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f023 0304 	bic.w	r3, r3, #4
 8007af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a13      	ldr	r2, [pc, #76]	@ (8007b44 <TIM_OC1_SetConfig+0xc8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d111      	bne.n	8007b1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	621a      	str	r2, [r3, #32]
}
 8007b38:	bf00      	nop
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40010000 	.word	0x40010000

08007b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0210 	bic.w	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0320 	bic.w	r3, r3, #32
 8007b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c1c <TIM_OC2_SetConfig+0xd4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d10d      	bne.n	8007bc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a15      	ldr	r2, [pc, #84]	@ (8007c1c <TIM_OC2_SetConfig+0xd4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d113      	bne.n	8007bf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000

08007c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <TIM_OC3_SetConfig+0xd0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d10d      	bne.n	8007c9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <TIM_OC3_SetConfig+0xd0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d113      	bne.n	8007cca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	621a      	str	r2, [r3, #32]
}
 8007ce4:	bf00      	nop
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	40010000 	.word	0x40010000

08007cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	031b      	lsls	r3, r3, #12
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a10      	ldr	r2, [pc, #64]	@ (8007d90 <TIM_OC4_SetConfig+0x9c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d109      	bne.n	8007d68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	019b      	lsls	r3, r3, #6
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40010000 	.word	0x40010000

08007d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f023 0201 	bic.w	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 030a 	bic.w	r3, r3, #10
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b087      	sub	sp, #28
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f023 0210 	bic.w	r2, r3, #16
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	031b      	lsls	r3, r3, #12
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f043 0307 	orr.w	r3, r3, #7
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	609a      	str	r2, [r3, #8]
}
 8007e7c:	bf00      	nop
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	021a      	lsls	r2, r3, #8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	609a      	str	r2, [r3, #8]
}
 8007ebc:	bf00      	nop
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2201      	movs	r2, #1
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1a      	ldr	r2, [r3, #32]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	401a      	ands	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	fa01 f303 	lsl.w	r3, r1, r3
 8007f00:	431a      	orrs	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e050      	b.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f78:	d013      	beq.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a18      	ldr	r2, [pc, #96]	@ (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a16      	ldr	r2, [pc, #88]	@ (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	@ (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d10c      	bne.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	40010000 	.word	0x40010000
 8007fe0:	40000400 	.word	0x40000400
 8007fe4:	40000800 	.word	0x40000800
 8007fe8:	40000c00 	.word	0x40000c00
 8007fec:	40014000 	.word	0x40014000

08007ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008008:	2302      	movs	r3, #2
 800800a:	e03d      	b.n	8008088 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080bc:	b084      	sub	sp, #16
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	f107 001c 	add.w	r0, r7, #28
 80080ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d122      	bne.n	800811a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80080e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d105      	bne.n	800810e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fbee 	bl	80098f0 <USB_CoreReset>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e01a      	b.n	8008150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fbe2 	bl	80098f0 <USB_CoreReset>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	@ 0x38
 8008142:	e005      	b.n	8008150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10b      	bne.n	800816e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f043 0206 	orr.w	r2, r3, #6
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800817a:	b004      	add	sp, #16
 800817c:	4770      	bx	lr
	...

08008180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d165      	bne.n	8008260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a41      	ldr	r2, [pc, #260]	@ (800829c <USB_SetTurnaroundTime+0x11c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d906      	bls.n	80081aa <USB_SetTurnaroundTime+0x2a>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a40      	ldr	r2, [pc, #256]	@ (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d202      	bcs.n	80081aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80081a4:	230f      	movs	r3, #15
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e062      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a3c      	ldr	r2, [pc, #240]	@ (80082a0 <USB_SetTurnaroundTime+0x120>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d306      	bcc.n	80081c0 <USB_SetTurnaroundTime+0x40>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a3b      	ldr	r2, [pc, #236]	@ (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d202      	bcs.n	80081c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081ba:	230e      	movs	r3, #14
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e057      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a38      	ldr	r2, [pc, #224]	@ (80082a4 <USB_SetTurnaroundTime+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d306      	bcc.n	80081d6 <USB_SetTurnaroundTime+0x56>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a37      	ldr	r2, [pc, #220]	@ (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d202      	bcs.n	80081d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081d0:	230d      	movs	r3, #13
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e04c      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a33      	ldr	r2, [pc, #204]	@ (80082a8 <USB_SetTurnaroundTime+0x128>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d306      	bcc.n	80081ec <USB_SetTurnaroundTime+0x6c>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a32      	ldr	r2, [pc, #200]	@ (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081e6:	230c      	movs	r3, #12
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e041      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a2f      	ldr	r2, [pc, #188]	@ (80082ac <USB_SetTurnaroundTime+0x12c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0x82>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a2e      	ldr	r2, [pc, #184]	@ (80082b0 <USB_SetTurnaroundTime+0x130>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d802      	bhi.n	8008202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081fc:	230b      	movs	r3, #11
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e036      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4a2a      	ldr	r2, [pc, #168]	@ (80082b0 <USB_SetTurnaroundTime+0x130>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d906      	bls.n	8008218 <USB_SetTurnaroundTime+0x98>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4a29      	ldr	r2, [pc, #164]	@ (80082b4 <USB_SetTurnaroundTime+0x134>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d802      	bhi.n	8008218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008212:	230a      	movs	r3, #10
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e02b      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4a26      	ldr	r2, [pc, #152]	@ (80082b4 <USB_SetTurnaroundTime+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d906      	bls.n	800822e <USB_SetTurnaroundTime+0xae>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4a25      	ldr	r2, [pc, #148]	@ (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d202      	bcs.n	800822e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008228:	2309      	movs	r3, #9
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e020      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4a21      	ldr	r2, [pc, #132]	@ (80082b8 <USB_SetTurnaroundTime+0x138>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d306      	bcc.n	8008244 <USB_SetTurnaroundTime+0xc4>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	4a20      	ldr	r2, [pc, #128]	@ (80082bc <USB_SetTurnaroundTime+0x13c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d802      	bhi.n	8008244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800823e:	2308      	movs	r3, #8
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e015      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4a1d      	ldr	r2, [pc, #116]	@ (80082bc <USB_SetTurnaroundTime+0x13c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d906      	bls.n	800825a <USB_SetTurnaroundTime+0xda>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4a1c      	ldr	r2, [pc, #112]	@ (80082c0 <USB_SetTurnaroundTime+0x140>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d202      	bcs.n	800825a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008254:	2307      	movs	r3, #7
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e00a      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800825a:	2306      	movs	r3, #6
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e007      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008266:	2309      	movs	r3, #9
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e001      	b.n	8008270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800826c:	2309      	movs	r3, #9
 800826e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	029b      	lsls	r3, r3, #10
 8008284:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008288:	431a      	orrs	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	00d8acbf 	.word	0x00d8acbf
 80082a0:	00e4e1c0 	.word	0x00e4e1c0
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	01067380 	.word	0x01067380
 80082ac:	011a499f 	.word	0x011a499f
 80082b0:	01312cff 	.word	0x01312cff
 80082b4:	014ca43f 	.word	0x014ca43f
 80082b8:	016e3600 	.word	0x016e3600
 80082bc:	01a6ab1f 	.word	0x01a6ab1f
 80082c0:	01e84800 	.word	0x01e84800

080082c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f043 0201 	orr.w	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f023 0201 	bic.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d115      	bne.n	8008356 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008336:	2001      	movs	r0, #1
 8008338:	f7f9 fabc 	bl	80018b4 <HAL_Delay>
      ms++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fa45 	bl	80097d2 <USB_GetMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d01e      	beq.n	800838c <USB_SetCurrentMode+0x84>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b31      	cmp	r3, #49	@ 0x31
 8008352:	d9f0      	bls.n	8008336 <USB_SetCurrentMode+0x2e>
 8008354:	e01a      	b.n	800838c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d115      	bne.n	8008388 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008368:	2001      	movs	r0, #1
 800836a:	f7f9 faa3 	bl	80018b4 <HAL_Delay>
      ms++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fa2c 	bl	80097d2 <USB_GetMode>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <USB_SetCurrentMode+0x84>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b31      	cmp	r3, #49	@ 0x31
 8008384:	d9f0      	bls.n	8008368 <USB_SetCurrentMode+0x60>
 8008386:	e001      	b.n	800838c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e005      	b.n	8008398 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b32      	cmp	r3, #50	@ 0x32
 8008390:	d101      	bne.n	8008396 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083a0:	b084      	sub	sp, #16
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80083ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083ba:	2300      	movs	r3, #0
 80083bc:	613b      	str	r3, [r7, #16]
 80083be:	e009      	b.n	80083d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3340      	adds	r3, #64	@ 0x40
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3301      	adds	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b0e      	cmp	r3, #14
 80083d8:	d9f2      	bls.n	80083c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11c      	bne.n	800841a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083ee:	f043 0302 	orr.w	r3, r3, #2
 80083f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008404:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	639a      	str	r2, [r3, #56]	@ 0x38
 8008418:	e00b      	b.n	8008432 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008438:	461a      	mov	r2, r3
 800843a:	2300      	movs	r3, #0
 800843c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008444:	4619      	mov	r1, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844c:	461a      	mov	r2, r3
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	2b01      	cmp	r3, #1
 8008456:	d10c      	bne.n	8008472 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800845e:	2100      	movs	r1, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f965 	bl	8008730 <USB_SetDevSpeed>
 8008466:	e008      	b.n	800847a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008468:	2101      	movs	r1, #1
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f960 	bl	8008730 <USB_SetDevSpeed>
 8008470:	e003      	b.n	800847a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008472:	2103      	movs	r1, #3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f95b 	bl	8008730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800847a:	2110      	movs	r1, #16
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8f3 	bl	8008668 <USB_FlushTxFifo>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f91f 	bl	80086d0 <USB_FlushRxFifo>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ae:	461a      	mov	r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	e043      	b.n	800854e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084dc:	d118      	bne.n	8008510 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f0:	461a      	mov	r2, r3
 80084f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e013      	b.n	8008522 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008506:	461a      	mov	r2, r3
 8008508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	e008      	b.n	8008522 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800851c:	461a      	mov	r2, r3
 800851e:	2300      	movs	r3, #0
 8008520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800852e:	461a      	mov	r2, r3
 8008530:	2300      	movs	r3, #0
 8008532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008540:	461a      	mov	r2, r3
 8008542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	3301      	adds	r3, #1
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	429a      	cmp	r2, r3
 8008554:	d3b7      	bcc.n	80084c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e043      	b.n	80085e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800856e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008572:	d118      	bne.n	80085a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e013      	b.n	80085b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859c:	461a      	mov	r2, r3
 800859e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	e008      	b.n	80085b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b2:	461a      	mov	r2, r3
 80085b4:	2300      	movs	r3, #0
 80085b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c4:	461a      	mov	r2, r3
 80085c6:	2300      	movs	r3, #0
 80085c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d6:	461a      	mov	r2, r3
 80085d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3b7      	bcc.n	800855c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800860c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	f043 0210 	orr.w	r2, r3, #16
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <USB_DevInit+0x2c4>)
 8008626:	4313      	orrs	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f043 0208 	orr.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800863e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d107      	bne.n	8008654 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800864c:	f043 0304 	orr.w	r3, r3, #4
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008660:	b004      	add	sp, #16
 8008662:	4770      	bx	lr
 8008664:	803c3800 	.word	0x803c3800

08008668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a13      	ldr	r2, [pc, #76]	@ (80086cc <USB_FlushTxFifo+0x64>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d901      	bls.n	8008688 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e01b      	b.n	80086c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	daf2      	bge.n	8008676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	019b      	lsls	r3, r3, #6
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a08      	ldr	r2, [pc, #32]	@ (80086cc <USB_FlushTxFifo+0x64>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e006      	b.n	80086c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d0f0      	beq.n	80086a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	00030d40 	.word	0x00030d40

080086d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a11      	ldr	r2, [pc, #68]	@ (800872c <USB_FlushRxFifo+0x5c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e018      	b.n	8008720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	daf2      	bge.n	80086dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2210      	movs	r2, #16
 80086fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a08      	ldr	r2, [pc, #32]	@ (800872c <USB_FlushRxFifo+0x5c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d901      	bls.n	8008712 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e006      	b.n	8008720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b10      	cmp	r3, #16
 800871c:	d0f0      	beq.n	8008700 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	00030d40 	.word	0x00030d40

08008730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008762:	b480      	push	{r7}
 8008764:	b087      	sub	sp, #28
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0306 	and.w	r3, r3, #6
 800877a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e00a      	b.n	800879e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d002      	beq.n	8008794 <USB_GetDevSpeed+0x32>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b06      	cmp	r3, #6
 8008792:	d102      	bne.n	800879a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008794:	2302      	movs	r3, #2
 8008796:	75fb      	strb	r3, [r7, #23]
 8008798:	e001      	b.n	800879e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800879a:	230f      	movs	r3, #15
 800879c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d13a      	bne.n	800883e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	b29b      	uxth	r3, r3
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d155      	bne.n	80088ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800881c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	059b      	lsls	r3, r3, #22
 8008822:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008824:	4313      	orrs	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e036      	b.n	80088ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	2101      	movs	r1, #1
 8008850:	fa01 f303 	lsl.w	r3, r1, r3
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800885c:	4313      	orrs	r3, r2
 800885e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d11a      	bne.n	80088ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	791b      	ldrb	r3, [r3, #4]
 8008890:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008892:	430b      	orrs	r3, r1
 8008894:	4313      	orrs	r3, r2
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d161      	bne.n	800899c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088ee:	d11f      	bne.n	8008930 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800890a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800890e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800892a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800892e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	b29b      	uxth	r3, r3
 8008948:	43db      	mvns	r3, r3
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008950:	4013      	ands	r3, r2
 8008952:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	2101      	movs	r1, #1
 8008966:	fa01 f303 	lsl.w	r3, r1, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	43db      	mvns	r3, r3
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008974:	4013      	ands	r3, r2
 8008976:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	0159      	lsls	r1, r3, #5
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	440b      	add	r3, r1
 800898e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008992:	4619      	mov	r1, r3
 8008994:	4b35      	ldr	r3, [pc, #212]	@ (8008a6c <USB_DeactivateEndpoint+0x1b0>)
 8008996:	4013      	ands	r3, r2
 8008998:	600b      	str	r3, [r1, #0]
 800899a:	e060      	b.n	8008a5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089b2:	d11f      	bne.n	80089f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80089d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	2101      	movs	r1, #1
 8008a06:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a14:	4013      	ands	r3, r2
 8008a16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	2101      	movs	r1, #1
 8008a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	43db      	mvns	r3, r3
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	0159      	lsls	r1, r3, #5
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	440b      	add	r3, r1
 8008a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a56:	4619      	mov	r1, r3
 8008a58:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <USB_DeactivateEndpoint+0x1b4>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	ec337800 	.word	0xec337800
 8008a70:	eff37800 	.word	0xeff37800

08008a74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	@ 0x28
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	f040 815c 	bne.w	8008d4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d132      	bne.n	8008b04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008abc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008adc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008afc:	0cdb      	lsrs	r3, r3, #19
 8008afe:	04db      	lsls	r3, r3, #19
 8008b00:	6113      	str	r3, [r2, #16]
 8008b02:	e074      	b.n	8008bee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b1e:	0cdb      	lsrs	r3, r3, #19
 8008b20:	04db      	lsls	r3, r3, #19
 8008b22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6999      	ldr	r1, [r3, #24]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	440b      	add	r3, r1
 8008b60:	1e59      	subs	r1, r3, #1
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b6c:	4b9d      	ldr	r3, [pc, #628]	@ (8008de4 <USB_EPStartXfer+0x370>)
 8008b6e:	400b      	ands	r3, r1
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	0148      	lsls	r0, r1, #5
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	4401      	add	r1, r0
 8008b78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8c:	691a      	ldr	r2, [r3, #16]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	0148      	lsls	r0, r1, #5
 8008b9a:	69f9      	ldr	r1, [r7, #28]
 8008b9c:	4401      	add	r1, r0
 8008b9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	791b      	ldrb	r3, [r3, #4]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d11f      	bne.n	8008bee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bc8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008bcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008be8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d14b      	bne.n	8008c8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c08:	461a      	mov	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d128      	bne.n	8008c6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d110      	bne.n	8008c4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e00f      	b.n	8008c6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	e133      	b.n	8008ef4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008caa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d015      	beq.n	8008ce0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 811b 	beq.w	8008ef4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	2101      	movs	r1, #1
 8008cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	634b      	str	r3, [r1, #52]	@ 0x34
 8008cde:	e109      	b.n	8008ef4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d110      	bne.n	8008d12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	e00f      	b.n	8008d32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6919      	ldr	r1, [r3, #16]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	b298      	uxth	r0, r3
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4603      	mov	r3, r0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fade 	bl	8009308 <USB_WritePacket>
 8008d4c:	e0d2      	b.n	8008ef4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	0151      	lsls	r1, r2, #5
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	440a      	add	r2, r1
 8008d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d68:	0cdb      	lsrs	r3, r3, #19
 8008d6a:	04db      	lsls	r3, r3, #19
 8008d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d126      	bne.n	8008de8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	0148      	lsls	r0, r1, #5
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	4401      	add	r1, r0
 8008db8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dde:	6113      	str	r3, [r2, #16]
 8008de0:	e03a      	b.n	8008e58 <USB_EPStartXfer+0x3e4>
 8008de2:	bf00      	nop
 8008de4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	1e5a      	subs	r2, r3, #1
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	8afa      	ldrh	r2, [r7, #22]
 8008e04:	fb03 f202 	mul.w	r2, r3, r2
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	04d9      	lsls	r1, r3, #19
 8008e1e:	4b38      	ldr	r3, [pc, #224]	@ (8008f00 <USB_EPStartXfer+0x48c>)
 8008e20:	400b      	ands	r3, r1
 8008e22:	69b9      	ldr	r1, [r7, #24]
 8008e24:	0148      	lsls	r0, r1, #5
 8008e26:	69f9      	ldr	r1, [r7, #28]
 8008e28:	4401      	add	r1, r0
 8008e2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e48:	69b9      	ldr	r1, [r7, #24]
 8008e4a:	0148      	lsls	r0, r1, #5
 8008e4c:	69f9      	ldr	r1, [r7, #28]
 8008e4e:	4401      	add	r1, r0
 8008e50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e54:	4313      	orrs	r3, r2
 8008e56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d10d      	bne.n	8008e7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6919      	ldr	r1, [r3, #16]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e76:	460a      	mov	r2, r1
 8008e78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d128      	bne.n	8008ed4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d110      	bne.n	8008eb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e00f      	b.n	8008ed4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ed2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	1ff80000 	.word	0x1ff80000

08008f04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	f040 80ce 	bne.w	80090c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d132      	bne.n	8008f94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f8c:	0cdb      	lsrs	r3, r3, #19
 8008f8e:	04db      	lsls	r3, r3, #19
 8008f90:	6113      	str	r3, [r2, #16]
 8008f92:	e04e      	b.n	8009032 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fae:	0cdb      	lsrs	r3, r3, #19
 8008fb0:	04db      	lsls	r3, r3, #19
 8008fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fd2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	699a      	ldr	r2, [r3, #24]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d903      	bls.n	8008fec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	440a      	add	r2, r1
 8009002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009006:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800900a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009022:	6939      	ldr	r1, [r7, #16]
 8009024:	0148      	lsls	r0, r1, #5
 8009026:	6979      	ldr	r1, [r7, #20]
 8009028:	4401      	add	r1, r0
 800902a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d11e      	bne.n	8009076 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800904c:	461a      	mov	r2, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800906e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e097      	b.n	80091a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009090:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009094:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8083 	beq.w	80091a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	2101      	movs	r1, #1
 80090b2:	fa01 f303 	lsl.w	r3, r1, r3
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090bc:	4313      	orrs	r3, r2
 80090be:	634b      	str	r3, [r1, #52]	@ 0x34
 80090c0:	e071      	b.n	80091a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090dc:	0cdb      	lsrs	r3, r3, #19
 80090de:	04db      	lsls	r3, r3, #19
 80090e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009100:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009104:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800913c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009154:	6939      	ldr	r1, [r7, #16]
 8009156:	0148      	lsls	r0, r1, #5
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	4401      	add	r1, r0
 800915c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009160:	4313      	orrs	r3, r2
 8009162:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d10d      	bne.n	8009186 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6919      	ldr	r1, [r3, #16]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009182:	460a      	mov	r2, r1
 8009184:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d14a      	bne.n	8009268 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091ea:	f040 8086 	bne.w	80092fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	440a      	add	r2, r1
 8009208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009210:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009234:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009242:	4293      	cmp	r3, r2
 8009244:	d902      	bls.n	800924c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
          break;
 800924a:	e056      	b.n	80092fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009264:	d0e7      	beq.n	8009236 <USB_EPStopXfer+0x82>
 8009266:	e048      	b.n	80092fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800927c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009280:	d13b      	bne.n	80092fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	0151      	lsls	r1, r2, #5
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	440a      	add	r2, r1
 800929c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	7812      	ldrb	r2, [r2, #0]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d902      	bls.n	80092e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	75fb      	strb	r3, [r7, #23]
          break;
 80092de:	e00c      	b.n	80092fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092f8:	d0e7      	beq.n	80092ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009308:	b480      	push	{r7}
 800930a:	b089      	sub	sp, #36	@ 0x24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4611      	mov	r1, r2
 8009314:	461a      	mov	r2, r3
 8009316:	460b      	mov	r3, r1
 8009318:	71fb      	strb	r3, [r7, #7]
 800931a:	4613      	mov	r3, r2
 800931c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800932a:	2b00      	cmp	r3, #0
 800932c:	d123      	bne.n	8009376 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	3303      	adds	r3, #3
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009336:	2300      	movs	r3, #0
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e018      	b.n	800936e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	031a      	lsls	r2, r3, #12
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	4413      	add	r3, r2
 8009344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009348:	461a      	mov	r2, r3
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3301      	adds	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3301      	adds	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	3301      	adds	r3, #1
 8009360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	3301      	adds	r3, #1
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	429a      	cmp	r2, r3
 8009374:	d3e2      	bcc.n	800933c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3724      	adds	r7, #36	@ 0x24
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009384:	b480      	push	{r7}
 8009386:	b08b      	sub	sp, #44	@ 0x2c
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	089b      	lsrs	r3, r3, #2
 800939e:	b29b      	uxth	r3, r3
 80093a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	e014      	b.n	80093da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	3301      	adds	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	3301      	adds	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	3301      	adds	r3, #1
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	3301      	adds	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	3301      	adds	r3, #1
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	6a3a      	ldr	r2, [r7, #32]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3e6      	bcc.n	80093b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093e2:	8bfb      	ldrh	r3, [r7, #30]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01e      	beq.n	8009426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093f2:	461a      	mov	r2, r3
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
 8009408:	b2da      	uxtb	r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	701a      	strb	r2, [r3, #0]
      i++;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	3301      	adds	r3, #1
 8009412:	623b      	str	r3, [r7, #32]
      pDest++;
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	3301      	adds	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800941a:	8bfb      	ldrh	r3, [r7, #30]
 800941c:	3b01      	subs	r3, #1
 800941e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009420:	8bfb      	ldrh	r3, [r7, #30]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1ea      	bne.n	80093fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009428:	4618      	mov	r0, r3
 800942a:	372c      	adds	r7, #44	@ 0x2c
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d12c      	bne.n	80094aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	db12      	blt.n	8009488 <USB_EPSetStall+0x54>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	0151      	lsls	r1, r2, #5
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	440a      	add	r2, r1
 800947e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009486:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	e02b      	b.n	8009502 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db12      	blt.n	80094e2 <USB_EPSetStall+0xae>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00f      	beq.n	80094e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009500:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d128      	bne.n	800957e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	440a      	add	r2, r1
 8009542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800954a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2b03      	cmp	r3, #3
 8009552:	d003      	beq.n	800955c <USB_EPClearStall+0x4c>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	791b      	ldrb	r3, [r3, #4]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d138      	bne.n	80095ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e027      	b.n	80095ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009598:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800959c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d003      	beq.n	80095ae <USB_EPClearStall+0x9e>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	791b      	ldrb	r3, [r3, #4]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d10f      	bne.n	80095ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80095fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009610:	68f9      	ldr	r1, [r7, #12]
 8009612:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009616:	4313      	orrs	r3, r2
 8009618:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009656:	f023 0302 	bic.w	r3, r3, #2
 800965a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009684:	f023 0303 	bic.w	r3, r3, #3
 8009688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4013      	ands	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096c4:	68fb      	ldr	r3, [r7, #12]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	4013      	ands	r3, r2
 80096f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	0c1b      	lsrs	r3, r3, #16
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4013      	ands	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	b29b      	uxth	r3, r3
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009768:	68bb      	ldr	r3, [r7, #8]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009776:	b480      	push	{r7}
 8009778:	b087      	sub	sp, #28
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009798:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	fa22 f303 	lsr.w	r3, r2, r3
 80097a6:	01db      	lsls	r3, r3, #7
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4013      	ands	r3, r2
 80097c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097c4:	68bb      	ldr	r3, [r7, #8]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0301 	and.w	r3, r3, #1
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009808:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800980c:	f023 0307 	bic.w	r3, r3, #7
 8009810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	460b      	mov	r3, r1
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	333c      	adds	r3, #60	@ 0x3c
 800984a:	3304      	adds	r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	4a26      	ldr	r2, [pc, #152]	@ (80098ec <USB_EP0_OutStart+0xb8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d90a      	bls.n	800986e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009864:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009868:	d101      	bne.n	800986e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e037      	b.n	80098de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009874:	461a      	mov	r2, r3
 8009876:	2300      	movs	r3, #0
 8009878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009888:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800988c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800989c:	f043 0318 	orr.w	r3, r3, #24
 80098a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80098b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d10f      	bne.n	80098dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c2:	461a      	mov	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80098da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	4f54300a 	.word	0x4f54300a

080098f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a13      	ldr	r2, [pc, #76]	@ (8009954 <USB_CoreReset+0x64>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d901      	bls.n	800990e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e01b      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	daf2      	bge.n	80098fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f043 0201 	orr.w	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a09      	ldr	r2, [pc, #36]	@ (8009954 <USB_CoreReset+0x64>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d901      	bls.n	8009938 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e006      	b.n	8009946 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b01      	cmp	r3, #1
 8009942:	d0f0      	beq.n	8009926 <USB_CoreReset+0x36>

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	00030d40 	.word	0x00030d40

08009958 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009964:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009968:	f002 ff04 	bl	800c774 <USBD_static_malloc>
 800996c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d109      	bne.n	8009988 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	32b0      	adds	r2, #176	@ 0xb0
 800997e:	2100      	movs	r1, #0
 8009980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009984:	2302      	movs	r3, #2
 8009986:	e0d4      	b.n	8009b32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009988:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800998c:	2100      	movs	r1, #0
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f004 fde4 	bl	800e55c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	32b0      	adds	r2, #176	@ 0xb0
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	32b0      	adds	r2, #176	@ 0xb0
 80099ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7c1b      	ldrb	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d138      	bne.n	8009a32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099c0:	4b5e      	ldr	r3, [pc, #376]	@ (8009b3c <USBD_CDC_Init+0x1e4>)
 80099c2:	7819      	ldrb	r1, [r3, #0]
 80099c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099c8:	2202      	movs	r2, #2
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f002 fdaf 	bl	800c52e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099d0:	4b5a      	ldr	r3, [pc, #360]	@ (8009b3c <USBD_CDC_Init+0x1e4>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f003 020f 	and.w	r2, r3, #15
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	3324      	adds	r3, #36	@ 0x24
 80099e6:	2201      	movs	r2, #1
 80099e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099ea:	4b55      	ldr	r3, [pc, #340]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 80099ec:	7819      	ldrb	r1, [r3, #0]
 80099ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099f2:	2202      	movs	r2, #2
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f002 fd9a 	bl	800c52e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099fa:	4b51      	ldr	r3, [pc, #324]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 020f 	and.w	r2, r3, #15
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a12:	2201      	movs	r2, #1
 8009a14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a16:	4b4b      	ldr	r3, [pc, #300]	@ (8009b44 <USBD_CDC_Init+0x1ec>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	f003 020f 	and.w	r2, r3, #15
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	3326      	adds	r3, #38	@ 0x26
 8009a2c:	2210      	movs	r2, #16
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	e035      	b.n	8009a9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a32:	4b42      	ldr	r3, [pc, #264]	@ (8009b3c <USBD_CDC_Init+0x1e4>)
 8009a34:	7819      	ldrb	r1, [r3, #0]
 8009a36:	2340      	movs	r3, #64	@ 0x40
 8009a38:	2202      	movs	r2, #2
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f002 fd77 	bl	800c52e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a40:	4b3e      	ldr	r3, [pc, #248]	@ (8009b3c <USBD_CDC_Init+0x1e4>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 020f 	and.w	r2, r3, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	3324      	adds	r3, #36	@ 0x24
 8009a56:	2201      	movs	r2, #1
 8009a58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a5a:	4b39      	ldr	r3, [pc, #228]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 8009a5c:	7819      	ldrb	r1, [r3, #0]
 8009a5e:	2340      	movs	r3, #64	@ 0x40
 8009a60:	2202      	movs	r2, #2
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f002 fd63 	bl	800c52e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a68:	4b35      	ldr	r3, [pc, #212]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	f003 020f 	and.w	r2, r3, #15
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a80:	2201      	movs	r2, #1
 8009a82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a84:	4b2f      	ldr	r3, [pc, #188]	@ (8009b44 <USBD_CDC_Init+0x1ec>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	3326      	adds	r3, #38	@ 0x26
 8009a9a:	2210      	movs	r2, #16
 8009a9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a9e:	4b29      	ldr	r3, [pc, #164]	@ (8009b44 <USBD_CDC_Init+0x1ec>)
 8009aa0:	7819      	ldrb	r1, [r3, #0]
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f002 fd41 	bl	800c52e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009aac:	4b25      	ldr	r3, [pc, #148]	@ (8009b44 <USBD_CDC_Init+0x1ec>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 020f 	and.w	r2, r3, #15
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3324      	adds	r3, #36	@ 0x24
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	33b0      	adds	r3, #176	@ 0xb0
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009afc:	2302      	movs	r3, #2
 8009afe:	e018      	b.n	8009b32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7c1b      	ldrb	r3, [r3, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b08:	4b0d      	ldr	r3, [pc, #52]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 8009b0a:	7819      	ldrb	r1, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f002 fdf8 	bl	800c70c <USBD_LL_PrepareReceive>
 8009b1c:	e008      	b.n	8009b30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b1e:	4b08      	ldr	r3, [pc, #32]	@ (8009b40 <USBD_CDC_Init+0x1e8>)
 8009b20:	7819      	ldrb	r1, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b28:	2340      	movs	r3, #64	@ 0x40
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f002 fdee 	bl	800c70c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000093 	.word	0x20000093
 8009b40:	20000094 	.word	0x20000094
 8009b44:	20000095 	.word	0x20000095

08009b48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b54:	4b3a      	ldr	r3, [pc, #232]	@ (8009c40 <USBD_CDC_DeInit+0xf8>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f002 fd0d 	bl	800c57a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b60:	4b37      	ldr	r3, [pc, #220]	@ (8009c40 <USBD_CDC_DeInit+0xf8>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 020f 	and.w	r2, r3, #15
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	3324      	adds	r3, #36	@ 0x24
 8009b76:	2200      	movs	r2, #0
 8009b78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b7a:	4b32      	ldr	r3, [pc, #200]	@ (8009c44 <USBD_CDC_DeInit+0xfc>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 fcfa 	bl	800c57a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b86:	4b2f      	ldr	r3, [pc, #188]	@ (8009c44 <USBD_CDC_DeInit+0xfc>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ba2:	4b29      	ldr	r3, [pc, #164]	@ (8009c48 <USBD_CDC_DeInit+0x100>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f002 fce6 	bl	800c57a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009bae:	4b26      	ldr	r3, [pc, #152]	@ (8009c48 <USBD_CDC_DeInit+0x100>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	f003 020f 	and.w	r2, r3, #15
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	440b      	add	r3, r1
 8009bc2:	3324      	adds	r3, #36	@ 0x24
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c48 <USBD_CDC_DeInit+0x100>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 020f 	and.w	r2, r3, #15
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	440b      	add	r3, r1
 8009bdc:	3326      	adds	r3, #38	@ 0x26
 8009bde:	2200      	movs	r2, #0
 8009be0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	32b0      	adds	r2, #176	@ 0xb0
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01f      	beq.n	8009c34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	33b0      	adds	r3, #176	@ 0xb0
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	32b0      	adds	r2, #176	@ 0xb0
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 fdba 	bl	800c790 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	32b0      	adds	r2, #176	@ 0xb0
 8009c26:	2100      	movs	r1, #0
 8009c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000093 	.word	0x20000093
 8009c44:	20000094 	.word	0x20000094
 8009c48:	20000095 	.word	0x20000095

08009c4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	32b0      	adds	r2, #176	@ 0xb0
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e0bf      	b.n	8009dfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d050      	beq.n	8009d2a <USBD_CDC_Setup+0xde>
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	f040 80af 	bne.w	8009dec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	88db      	ldrh	r3, [r3, #6]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d03a      	beq.n	8009d0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	b25b      	sxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da1b      	bge.n	8009cd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	33b0      	adds	r3, #176	@ 0xb0
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009cb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	88d2      	ldrh	r2, [r2, #6]
 8009cbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	88db      	ldrh	r3, [r3, #6]
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	bf28      	it	cs
 8009cc6:	2307      	movcs	r3, #7
 8009cc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	89fa      	ldrh	r2, [r7, #14]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fd41 	bl	800b758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009cd6:	e090      	b.n	8009dfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	785a      	ldrb	r2, [r3, #1]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ce8:	d803      	bhi.n	8009cf2 <USBD_CDC_Setup+0xa6>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	e000      	b.n	8009cf4 <USBD_CDC_Setup+0xa8>
 8009cf2:	2240      	movs	r2, #64	@ 0x40
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cfa:	6939      	ldr	r1, [r7, #16]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009d02:	461a      	mov	r2, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fd53 	bl	800b7b0 <USBD_CtlPrepareRx>
      break;
 8009d0a:	e076      	b.n	8009dfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	33b0      	adds	r3, #176	@ 0xb0
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	7850      	ldrb	r0, [r2, #1]
 8009d22:	2200      	movs	r2, #0
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	4798      	blx	r3
      break;
 8009d28:	e067      	b.n	8009dfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b0b      	cmp	r3, #11
 8009d30:	d851      	bhi.n	8009dd6 <USBD_CDC_Setup+0x18a>
 8009d32:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <USBD_CDC_Setup+0xec>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d69 	.word	0x08009d69
 8009d3c:	08009de5 	.word	0x08009de5
 8009d40:	08009dd7 	.word	0x08009dd7
 8009d44:	08009dd7 	.word	0x08009dd7
 8009d48:	08009dd7 	.word	0x08009dd7
 8009d4c:	08009dd7 	.word	0x08009dd7
 8009d50:	08009dd7 	.word	0x08009dd7
 8009d54:	08009dd7 	.word	0x08009dd7
 8009d58:	08009dd7 	.word	0x08009dd7
 8009d5c:	08009dd7 	.word	0x08009dd7
 8009d60:	08009d93 	.word	0x08009d93
 8009d64:	08009dbd 	.word	0x08009dbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d107      	bne.n	8009d84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d74:	f107 030a 	add.w	r3, r7, #10
 8009d78:	2202      	movs	r2, #2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 fceb 	bl	800b758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d82:	e032      	b.n	8009dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fc75 	bl	800b676 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	75fb      	strb	r3, [r7, #23]
          break;
 8009d90:	e02b      	b.n	8009dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d107      	bne.n	8009dae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d9e:	f107 030d 	add.w	r3, r7, #13
 8009da2:	2201      	movs	r2, #1
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 fcd6 	bl	800b758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dac:	e01d      	b.n	8009dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 fc60 	bl	800b676 <USBD_CtlError>
            ret = USBD_FAIL;
 8009db6:	2303      	movs	r3, #3
 8009db8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dba:	e016      	b.n	8009dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d00f      	beq.n	8009de8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 fc53 	bl	800b676 <USBD_CtlError>
            ret = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009dd4:	e008      	b.n	8009de8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fc4c 	bl	800b676 <USBD_CtlError>
          ret = USBD_FAIL;
 8009dde:	2303      	movs	r3, #3
 8009de0:	75fb      	strb	r3, [r7, #23]
          break;
 8009de2:	e002      	b.n	8009dea <USBD_CDC_Setup+0x19e>
          break;
 8009de4:	bf00      	nop
 8009de6:	e008      	b.n	8009dfa <USBD_CDC_Setup+0x1ae>
          break;
 8009de8:	bf00      	nop
      }
      break;
 8009dea:	e006      	b.n	8009dfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 fc41 	bl	800b676 <USBD_CtlError>
      ret = USBD_FAIL;
 8009df4:	2303      	movs	r3, #3
 8009df6:	75fb      	strb	r3, [r7, #23]
      break;
 8009df8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32b0      	adds	r2, #176	@ 0xb0
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e065      	b.n	8009efa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	32b0      	adds	r2, #176	@ 0xb0
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	f003 020f 	and.w	r2, r3, #15
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4613      	mov	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	440b      	add	r3, r1
 8009e50:	3318      	adds	r3, #24
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d02f      	beq.n	8009eb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	3318      	adds	r3, #24
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	f003 010f 	and.w	r1, r3, #15
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	460b      	mov	r3, r1
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	440b      	add	r3, r1
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4403      	add	r3, r0
 8009e80:	3348      	adds	r3, #72	@ 0x48
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d112      	bne.n	8009eb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	f003 020f 	and.w	r2, r3, #15
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009eaa:	78f9      	ldrb	r1, [r7, #3]
 8009eac:	2300      	movs	r3, #0
 8009eae:	2200      	movs	r2, #0
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f002 fc0a 	bl	800c6ca <USBD_LL_Transmit>
 8009eb6:	e01f      	b.n	8009ef8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	33b0      	adds	r3, #176	@ 0xb0
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d010      	beq.n	8009ef8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	33b0      	adds	r3, #176	@ 0xb0
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ef4:	78fa      	ldrb	r2, [r7, #3]
 8009ef6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	32b0      	adds	r2, #176	@ 0xb0
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	32b0      	adds	r2, #176	@ 0xb0
 8009f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e01a      	b.n	8009f6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f002 fc08 	bl	800c74e <USBD_LL_GetRxDataSize>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	33b0      	adds	r3, #176	@ 0xb0
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009f64:	4611      	mov	r1, r2
 8009f66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	32b0      	adds	r2, #176	@ 0xb0
 8009f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e024      	b.n	8009fde <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	33b0      	adds	r3, #176	@ 0xb0
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d019      	beq.n	8009fdc <USBD_CDC_EP0_RxReady+0x6a>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009fae:	2bff      	cmp	r3, #255	@ 0xff
 8009fb0:	d014      	beq.n	8009fdc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	33b0      	adds	r3, #176	@ 0xb0
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009fca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009fd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	22ff      	movs	r2, #255	@ 0xff
 8009fd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ff0:	2182      	movs	r1, #130	@ 0x82
 8009ff2:	4818      	ldr	r0, [pc, #96]	@ (800a054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ff4:	f000 fd09 	bl	800aa0a <USBD_GetEpDesc>
 8009ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4815      	ldr	r0, [pc, #84]	@ (800a054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ffe:	f000 fd04 	bl	800aa0a <USBD_GetEpDesc>
 800a002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a004:	2181      	movs	r1, #129	@ 0x81
 800a006:	4813      	ldr	r0, [pc, #76]	@ (800a054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a008:	f000 fcff 	bl	800aa0a <USBD_GetEpDesc>
 800a00c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2210      	movs	r2, #16
 800a018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2200      	movs	r2, #0
 800a024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a028:	711a      	strb	r2, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a03c:	711a      	strb	r2, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2243      	movs	r2, #67	@ 0x43
 800a046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a048:	4b02      	ldr	r3, [pc, #8]	@ (800a054 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000050 	.word	0x20000050

0800a058 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a060:	2182      	movs	r1, #130	@ 0x82
 800a062:	4818      	ldr	r0, [pc, #96]	@ (800a0c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a064:	f000 fcd1 	bl	800aa0a <USBD_GetEpDesc>
 800a068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a06a:	2101      	movs	r1, #1
 800a06c:	4815      	ldr	r0, [pc, #84]	@ (800a0c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a06e:	f000 fccc 	bl	800aa0a <USBD_GetEpDesc>
 800a072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a074:	2181      	movs	r1, #129	@ 0x81
 800a076:	4813      	ldr	r0, [pc, #76]	@ (800a0c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a078:	f000 fcc7 	bl	800aa0a <USBD_GetEpDesc>
 800a07c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2210      	movs	r2, #16
 800a088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d006      	beq.n	800a09e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2200      	movs	r2, #0
 800a094:	711a      	strb	r2, [r3, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f042 0202 	orr.w	r2, r2, #2
 800a09c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d006      	beq.n	800a0b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	711a      	strb	r2, [r3, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f042 0202 	orr.w	r2, r2, #2
 800a0b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2243      	movs	r2, #67	@ 0x43
 800a0b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0b8:	4b02      	ldr	r3, [pc, #8]	@ (800a0c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000050 	.word	0x20000050

0800a0c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0d0:	2182      	movs	r1, #130	@ 0x82
 800a0d2:	4818      	ldr	r0, [pc, #96]	@ (800a134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0d4:	f000 fc99 	bl	800aa0a <USBD_GetEpDesc>
 800a0d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4815      	ldr	r0, [pc, #84]	@ (800a134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0de:	f000 fc94 	bl	800aa0a <USBD_GetEpDesc>
 800a0e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0e4:	2181      	movs	r1, #129	@ 0x81
 800a0e6:	4813      	ldr	r0, [pc, #76]	@ (800a134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0e8:	f000 fc8f 	bl	800aa0a <USBD_GetEpDesc>
 800a0ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d006      	beq.n	800a10e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2200      	movs	r2, #0
 800a104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a108:	711a      	strb	r2, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d006      	beq.n	800a122 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a11c:	711a      	strb	r2, [r3, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2243      	movs	r2, #67	@ 0x43
 800a126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000050 	.word	0x20000050

0800a138 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	220a      	movs	r2, #10
 800a144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a146:	4b03      	ldr	r3, [pc, #12]	@ (800a154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	2000000c 	.word	0x2000000c

0800a158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a168:	2303      	movs	r3, #3
 800a16a:	e009      	b.n	800a180 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	33b0      	adds	r3, #176	@ 0xb0
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	32b0      	adds	r2, #176	@ 0xb0
 800a1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e008      	b.n	800a1c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	32b0      	adds	r2, #176	@ 0xb0
 800a1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e004      	b.n	800a1fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	32b0      	adds	r2, #176	@ 0xb0
 800a21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a222:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	32b0      	adds	r2, #176	@ 0xb0
 800a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a236:	2303      	movs	r3, #3
 800a238:	e018      	b.n	800a26c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7c1b      	ldrb	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a242:	4b0c      	ldr	r3, [pc, #48]	@ (800a274 <USBD_CDC_ReceivePacket+0x68>)
 800a244:	7819      	ldrb	r1, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a24c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f002 fa5b 	bl	800c70c <USBD_LL_PrepareReceive>
 800a256:	e008      	b.n	800a26a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a258:	4b06      	ldr	r3, [pc, #24]	@ (800a274 <USBD_CDC_ReceivePacket+0x68>)
 800a25a:	7819      	ldrb	r1, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a262:	2340      	movs	r3, #64	@ 0x40
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f002 fa51 	bl	800c70c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000094 	.word	0x20000094

0800a278 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e01f      	b.n	800a2d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	79fa      	ldrb	r2, [r7, #7]
 800a2c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f002 f8cb 	bl	800c460 <USBD_LL_Init>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e025      	b.n	800a33c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	32ae      	adds	r2, #174	@ 0xae
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00f      	beq.n	800a32c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	32ae      	adds	r2, #174	@ 0xae
 800a316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31c:	f107 020e 	add.w	r2, r7, #14
 800a320:	4610      	mov	r0, r2
 800a322:	4798      	blx	r3
 800a324:	4602      	mov	r2, r0
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f002 f8d3 	bl	800c4f8 <USBD_LL_Start>
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a364:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a366:	4618      	mov	r0, r3
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d009      	beq.n	800a3a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4611      	mov	r1, r2
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
 800a39c:	4603      	mov	r3, r0
 800a39e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	78fa      	ldrb	r2, [r7, #3]
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 f906 	bl	800b602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a404:	461a      	mov	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a412:	f003 031f 	and.w	r3, r3, #31
 800a416:	2b02      	cmp	r3, #2
 800a418:	d01a      	beq.n	800a450 <USBD_LL_SetupStage+0x72>
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d822      	bhi.n	800a464 <USBD_LL_SetupStage+0x86>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <USBD_LL_SetupStage+0x4a>
 800a422:	2b01      	cmp	r3, #1
 800a424:	d00a      	beq.n	800a43c <USBD_LL_SetupStage+0x5e>
 800a426:	e01d      	b.n	800a464 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fb5d 	bl	800aaf0 <USBD_StdDevReq>
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
      break;
 800a43a:	e020      	b.n	800a47e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fbc5 	bl	800abd4 <USBD_StdItfReq>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]
      break;
 800a44e:	e016      	b.n	800a47e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fc27 	bl	800acac <USBD_StdEPReq>
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]
      break;
 800a462:	e00c      	b.n	800a47e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a46a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f002 f8a0 	bl	800c5b8 <USBD_LL_StallEP>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
      break;
 800a47c:	bf00      	nop
  }

  return ret;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	460b      	mov	r3, r1
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a49a:	7afb      	ldrb	r3, [r7, #11]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d16e      	bne.n	800a57e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a4a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	f040 8098 	bne.w	800a5e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d913      	bls.n	800a4e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bf28      	it	cs
 800a4da:	4613      	movcs	r3, r2
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f001 f982 	bl	800b7ea <USBD_CtlContinueRx>
 800a4e6:	e07d      	b.n	800a5e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a4ee:	f003 031f 	and.w	r3, r3, #31
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d014      	beq.n	800a520 <USBD_LL_DataOutStage+0x98>
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d81d      	bhi.n	800a536 <USBD_LL_DataOutStage+0xae>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <USBD_LL_DataOutStage+0x7c>
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d003      	beq.n	800a50a <USBD_LL_DataOutStage+0x82>
 800a502:	e018      	b.n	800a536 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	75bb      	strb	r3, [r7, #22]
            break;
 800a508:	e018      	b.n	800a53c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a510:	b2db      	uxtb	r3, r3
 800a512:	4619      	mov	r1, r3
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fa5e 	bl	800a9d6 <USBD_CoreFindIF>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75bb      	strb	r3, [r7, #22]
            break;
 800a51e:	e00d      	b.n	800a53c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a526:	b2db      	uxtb	r3, r3
 800a528:	4619      	mov	r1, r3
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fa60 	bl	800a9f0 <USBD_CoreFindEP>
 800a530:	4603      	mov	r3, r0
 800a532:	75bb      	strb	r3, [r7, #22]
            break;
 800a534:	e002      	b.n	800a53c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	75bb      	strb	r3, [r7, #22]
            break;
 800a53a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a53c:	7dbb      	ldrb	r3, [r7, #22]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d119      	bne.n	800a576 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d113      	bne.n	800a576 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a54e:	7dba      	ldrb	r2, [r7, #22]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	32ae      	adds	r2, #174	@ 0xae
 800a554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00b      	beq.n	800a576 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a55e:	7dba      	ldrb	r2, [r7, #22]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a566:	7dba      	ldrb	r2, [r7, #22]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	32ae      	adds	r2, #174	@ 0xae
 800a56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f001 f948 	bl	800b80c <USBD_CtlSendStatus>
 800a57c:	e032      	b.n	800a5e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a584:	b2db      	uxtb	r3, r3
 800a586:	4619      	mov	r1, r3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fa31 	bl	800a9f0 <USBD_CoreFindEP>
 800a58e:	4603      	mov	r3, r0
 800a590:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a592:	7dbb      	ldrb	r3, [r7, #22]
 800a594:	2bff      	cmp	r3, #255	@ 0xff
 800a596:	d025      	beq.n	800a5e4 <USBD_LL_DataOutStage+0x15c>
 800a598:	7dbb      	ldrb	r3, [r7, #22]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d122      	bne.n	800a5e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d117      	bne.n	800a5da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5aa:	7dba      	ldrb	r2, [r7, #22]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	32ae      	adds	r2, #174	@ 0xae
 800a5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00f      	beq.n	800a5da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a5ba:	7dba      	ldrb	r2, [r7, #22]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a5c2:	7dba      	ldrb	r2, [r7, #22]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	32ae      	adds	r2, #174	@ 0xae
 800a5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	7afa      	ldrb	r2, [r7, #11]
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	4798      	blx	r3
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	e000      	b.n	800a5e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	607a      	str	r2, [r7, #4]
 800a5fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d16f      	bne.n	800a6e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3314      	adds	r3, #20
 800a606:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d15a      	bne.n	800a6c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d914      	bls.n	800a648 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	1ad2      	subs	r2, r2, r3
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	461a      	mov	r2, r3
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f001 f8aa 	bl	800b78e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a63a:	2300      	movs	r3, #0
 800a63c:	2200      	movs	r2, #0
 800a63e:	2100      	movs	r1, #0
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f002 f863 	bl	800c70c <USBD_LL_PrepareReceive>
 800a646:	e03f      	b.n	800a6c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	429a      	cmp	r2, r3
 800a652:	d11c      	bne.n	800a68e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d316      	bcc.n	800a68e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d20f      	bcs.n	800a68e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f001 f88b 	bl	800b78e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a680:	2300      	movs	r3, #0
 800a682:	2200      	movs	r2, #0
 800a684:	2100      	movs	r1, #0
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f002 f840 	bl	800c70c <USBD_LL_PrepareReceive>
 800a68c:	e01c      	b.n	800a6c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b03      	cmp	r3, #3
 800a698:	d10f      	bne.n	800a6ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6ba:	2180      	movs	r1, #128	@ 0x80
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f001 ff7b 	bl	800c5b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f001 f8b5 	bl	800b832 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d03a      	beq.n	800a748 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fe42 	bl	800a35c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a6e0:	e032      	b.n	800a748 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a6e2:	7afb      	ldrb	r3, [r7, #11]
 800a6e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f97f 	bl	800a9f0 <USBD_CoreFindEP>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	2bff      	cmp	r3, #255	@ 0xff
 800a6fa:	d025      	beq.n	800a748 <USBD_LL_DataInStage+0x15a>
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d122      	bne.n	800a748 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d11c      	bne.n	800a748 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a70e:	7dfa      	ldrb	r2, [r7, #23]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	32ae      	adds	r2, #174	@ 0xae
 800a714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d014      	beq.n	800a748 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a71e:	7dfa      	ldrb	r2, [r7, #23]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a726:	7dfa      	ldrb	r2, [r7, #23]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	32ae      	adds	r2, #174	@ 0xae
 800a72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	7afa      	ldrb	r2, [r7, #11]
 800a734:	4611      	mov	r1, r2
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	4798      	blx	r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a744:	7dbb      	ldrb	r3, [r7, #22]
 800a746:	e000      	b.n	800a74a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d014      	beq.n	800a7b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6852      	ldr	r2, [r2, #4]
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b8:	2340      	movs	r3, #64	@ 0x40
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 feb5 	bl	800c52e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2240      	movs	r2, #64	@ 0x40
 800a7d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7d4:	2340      	movs	r3, #64	@ 0x40
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2180      	movs	r1, #128	@ 0x80
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 fea7 	bl	800c52e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2240      	movs	r2, #64	@ 0x40
 800a7ea:	621a      	str	r2, [r3, #32]

  return ret;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a824:	b2da      	uxtb	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2204      	movs	r2, #4
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b04      	cmp	r3, #4
 800a854:	d106      	bne.n	800a864 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d110      	bne.n	800a8a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	32ae      	adds	r2, #174	@ 0xae
 800a8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e01c      	b.n	800a90e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d115      	bne.n	800a90c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32ae      	adds	r2, #174	@ 0xae
 800a8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32ae      	adds	r2, #174	@ 0xae
 800a8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	78fa      	ldrb	r2, [r7, #3]
 800a906:	4611      	mov	r1, r2
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	32ae      	adds	r2, #174	@ 0xae
 800a92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	e01c      	b.n	800a972 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b03      	cmp	r3, #3
 800a942:	d115      	bne.n	800a970 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	32ae      	adds	r2, #174	@ 0xae
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	32ae      	adds	r2, #174	@ 0xae
 800a962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6852      	ldr	r2, [r2, #4]
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	4611      	mov	r1, r2
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b086      	sub	sp, #24
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	885b      	ldrh	r3, [r3, #2]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	7812      	ldrb	r2, [r2, #0]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d91f      	bls.n	800aa70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa36:	e013      	b.n	800aa60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa38:	f107 030a 	add.w	r3, r7, #10
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6978      	ldr	r0, [r7, #20]
 800aa40:	f000 f81b 	bl	800aa7a <USBD_GetNextDesc>
 800aa44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	785b      	ldrb	r3, [r3, #1]
 800aa4a:	2b05      	cmp	r3, #5
 800aa4c:	d108      	bne.n	800aa60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	789b      	ldrb	r3, [r3, #2]
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d008      	beq.n	800aa6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	885b      	ldrh	r3, [r3, #2]
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	897b      	ldrh	r3, [r7, #10]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d8e5      	bhi.n	800aa38 <USBD_GetEpDesc+0x2e>
 800aa6c:	e000      	b.n	800aa70 <USBD_GetEpDesc+0x66>
          break;
 800aa6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa70:	693b      	ldr	r3, [r7, #16]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3718      	adds	r7, #24
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	7812      	ldrb	r2, [r2, #0]
 800aa90:	4413      	add	r3, r2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b087      	sub	sp, #28
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	3301      	adds	r3, #1
 800aac8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aad0:	8a3b      	ldrh	r3, [r7, #16]
 800aad2:	021b      	lsls	r3, r3, #8
 800aad4:	b21a      	sxth	r2, r3
 800aad6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aada:	4313      	orrs	r3, r2
 800aadc:	b21b      	sxth	r3, r3
 800aade:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aae0:	89fb      	ldrh	r3, [r7, #14]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
	...

0800aaf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab06:	2b40      	cmp	r3, #64	@ 0x40
 800ab08:	d005      	beq.n	800ab16 <USBD_StdDevReq+0x26>
 800ab0a:	2b40      	cmp	r3, #64	@ 0x40
 800ab0c:	d857      	bhi.n	800abbe <USBD_StdDevReq+0xce>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00f      	beq.n	800ab32 <USBD_StdDevReq+0x42>
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d153      	bne.n	800abbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	32ae      	adds	r2, #174	@ 0xae
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab30:	e04a      	b.n	800abc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d83b      	bhi.n	800abb2 <USBD_StdDevReq+0xc2>
 800ab3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab40 <USBD_StdDevReq+0x50>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800aba9 	.word	0x0800aba9
 800ab48:	0800abb3 	.word	0x0800abb3
 800ab4c:	0800ab9f 	.word	0x0800ab9f
 800ab50:	0800abb3 	.word	0x0800abb3
 800ab54:	0800ab73 	.word	0x0800ab73
 800ab58:	0800ab69 	.word	0x0800ab69
 800ab5c:	0800abb3 	.word	0x0800abb3
 800ab60:	0800ab8b 	.word	0x0800ab8b
 800ab64:	0800ab7d 	.word	0x0800ab7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa3c 	bl	800afe8 <USBD_GetDescriptor>
          break;
 800ab70:	e024      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fba1 	bl	800b2bc <USBD_SetAddress>
          break;
 800ab7a:	e01f      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fbe0 	bl	800b344 <USBD_SetConfig>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
          break;
 800ab88:	e018      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fc83 	bl	800b498 <USBD_GetConfig>
          break;
 800ab92:	e013      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fcb4 	bl	800b504 <USBD_GetStatus>
          break;
 800ab9c:	e00e      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fce3 	bl	800b56c <USBD_SetFeature>
          break;
 800aba6:	e009      	b.n	800abbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fd07 	bl	800b5be <USBD_ClrFeature>
          break;
 800abb0:	e004      	b.n	800abbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fd5e 	bl	800b676 <USBD_CtlError>
          break;
 800abba:	bf00      	nop
      }
      break;
 800abbc:	e004      	b.n	800abc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fd58 	bl	800b676 <USBD_CtlError>
      break;
 800abc6:	bf00      	nop
  }

  return ret;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop

0800abd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d005      	beq.n	800abfa <USBD_StdItfReq+0x26>
 800abee:	2b40      	cmp	r3, #64	@ 0x40
 800abf0:	d852      	bhi.n	800ac98 <USBD_StdItfReq+0xc4>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <USBD_StdItfReq+0x26>
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d14e      	bne.n	800ac98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	3b01      	subs	r3, #1
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d840      	bhi.n	800ac8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	889b      	ldrh	r3, [r3, #4]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d836      	bhi.n	800ac80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	889b      	ldrh	r3, [r3, #4]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fedb 	bl	800a9d6 <USBD_CoreFindIF>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	2bff      	cmp	r3, #255	@ 0xff
 800ac28:	d01d      	beq.n	800ac66 <USBD_StdItfReq+0x92>
 800ac2a:	7bbb      	ldrb	r3, [r7, #14]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11a      	bne.n	800ac66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac30:	7bba      	ldrb	r2, [r7, #14]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	32ae      	adds	r2, #174	@ 0xae
 800ac36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00f      	beq.n	800ac60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac40:	7bba      	ldrb	r2, [r7, #14]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac48:	7bba      	ldrb	r2, [r7, #14]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	32ae      	adds	r2, #174	@ 0xae
 800ac4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac5e:	e004      	b.n	800ac6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac60:	2303      	movs	r3, #3
 800ac62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac64:	e001      	b.n	800ac6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	88db      	ldrh	r3, [r3, #6]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d110      	bne.n	800ac94 <USBD_StdItfReq+0xc0>
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fdc7 	bl	800b80c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac7e:	e009      	b.n	800ac94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fcf7 	bl	800b676 <USBD_CtlError>
          break;
 800ac88:	e004      	b.n	800ac94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fcf2 	bl	800b676 <USBD_CtlError>
          break;
 800ac92:	e000      	b.n	800ac96 <USBD_StdItfReq+0xc2>
          break;
 800ac94:	bf00      	nop
      }
      break;
 800ac96:	e004      	b.n	800aca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fceb 	bl	800b676 <USBD_CtlError>
      break;
 800aca0:	bf00      	nop
  }

  return ret;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	889b      	ldrh	r3, [r3, #4]
 800acbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acc8:	2b40      	cmp	r3, #64	@ 0x40
 800acca:	d007      	beq.n	800acdc <USBD_StdEPReq+0x30>
 800accc:	2b40      	cmp	r3, #64	@ 0x40
 800acce:	f200 817f 	bhi.w	800afd0 <USBD_StdEPReq+0x324>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d02a      	beq.n	800ad2c <USBD_StdEPReq+0x80>
 800acd6:	2b20      	cmp	r3, #32
 800acd8:	f040 817a 	bne.w	800afd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fe85 	bl	800a9f0 <USBD_CoreFindEP>
 800ace6:	4603      	mov	r3, r0
 800ace8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acea:	7b7b      	ldrb	r3, [r7, #13]
 800acec:	2bff      	cmp	r3, #255	@ 0xff
 800acee:	f000 8174 	beq.w	800afda <USBD_StdEPReq+0x32e>
 800acf2:	7b7b      	ldrb	r3, [r7, #13]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f040 8170 	bne.w	800afda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acfa:	7b7a      	ldrb	r2, [r7, #13]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad02:	7b7a      	ldrb	r2, [r7, #13]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	32ae      	adds	r2, #174	@ 0xae
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 8163 	beq.w	800afda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad14:	7b7a      	ldrb	r2, [r7, #13]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	32ae      	adds	r2, #174	@ 0xae
 800ad1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
 800ad26:	4603      	mov	r3, r0
 800ad28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad2a:	e156      	b.n	800afda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d008      	beq.n	800ad46 <USBD_StdEPReq+0x9a>
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	f300 8145 	bgt.w	800afc4 <USBD_StdEPReq+0x318>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 809b 	beq.w	800ae76 <USBD_StdEPReq+0x1ca>
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d03c      	beq.n	800adbe <USBD_StdEPReq+0x112>
 800ad44:	e13e      	b.n	800afc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d002      	beq.n	800ad58 <USBD_StdEPReq+0xac>
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d016      	beq.n	800ad84 <USBD_StdEPReq+0xd8>
 800ad56:	e02c      	b.n	800adb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00d      	beq.n	800ad7a <USBD_StdEPReq+0xce>
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	2b80      	cmp	r3, #128	@ 0x80
 800ad62:	d00a      	beq.n	800ad7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f001 fc25 	bl	800c5b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad6e:	2180      	movs	r1, #128	@ 0x80
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fc21 	bl	800c5b8 <USBD_LL_StallEP>
 800ad76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad78:	e020      	b.n	800adbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fc7a 	bl	800b676 <USBD_CtlError>
              break;
 800ad82:	e01b      	b.n	800adbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	885b      	ldrh	r3, [r3, #2]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10e      	bne.n	800adaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00b      	beq.n	800adaa <USBD_StdEPReq+0xfe>
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	2b80      	cmp	r3, #128	@ 0x80
 800ad96:	d008      	beq.n	800adaa <USBD_StdEPReq+0xfe>
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	88db      	ldrh	r3, [r3, #6]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 fc07 	bl	800c5b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fd2e 	bl	800b80c <USBD_CtlSendStatus>

              break;
 800adb0:	e004      	b.n	800adbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fc5e 	bl	800b676 <USBD_CtlError>
              break;
 800adba:	bf00      	nop
          }
          break;
 800adbc:	e107      	b.n	800afce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d002      	beq.n	800add0 <USBD_StdEPReq+0x124>
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d016      	beq.n	800adfc <USBD_StdEPReq+0x150>
 800adce:	e04b      	b.n	800ae68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00d      	beq.n	800adf2 <USBD_StdEPReq+0x146>
 800add6:	7bbb      	ldrb	r3, [r7, #14]
 800add8:	2b80      	cmp	r3, #128	@ 0x80
 800adda:	d00a      	beq.n	800adf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 fbe9 	bl	800c5b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade6:	2180      	movs	r1, #128	@ 0x80
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 fbe5 	bl	800c5b8 <USBD_LL_StallEP>
 800adee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adf0:	e040      	b.n	800ae74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fc3e 	bl	800b676 <USBD_CtlError>
              break;
 800adfa:	e03b      	b.n	800ae74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	885b      	ldrh	r3, [r3, #2]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d136      	bne.n	800ae72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fbef 	bl	800c5f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fcf7 	bl	800b80c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff fde4 	bl	800a9f0 <USBD_CoreFindEP>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae2c:	7b7b      	ldrb	r3, [r7, #13]
 800ae2e:	2bff      	cmp	r3, #255	@ 0xff
 800ae30:	d01f      	beq.n	800ae72 <USBD_StdEPReq+0x1c6>
 800ae32:	7b7b      	ldrb	r3, [r7, #13]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d11c      	bne.n	800ae72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae38:	7b7a      	ldrb	r2, [r7, #13]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae40:	7b7a      	ldrb	r2, [r7, #13]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32ae      	adds	r2, #174	@ 0xae
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d010      	beq.n	800ae72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae50:	7b7a      	ldrb	r2, [r7, #13]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	4798      	blx	r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae66:	e004      	b.n	800ae72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fc03 	bl	800b676 <USBD_CtlError>
              break;
 800ae70:	e000      	b.n	800ae74 <USBD_StdEPReq+0x1c8>
              break;
 800ae72:	bf00      	nop
          }
          break;
 800ae74:	e0ab      	b.n	800afce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d002      	beq.n	800ae88 <USBD_StdEPReq+0x1dc>
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d032      	beq.n	800aeec <USBD_StdEPReq+0x240>
 800ae86:	e097      	b.n	800afb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <USBD_StdEPReq+0x1f2>
 800ae8e:	7bbb      	ldrb	r3, [r7, #14]
 800ae90:	2b80      	cmp	r3, #128	@ 0x80
 800ae92:	d004      	beq.n	800ae9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fbed 	bl	800b676 <USBD_CtlError>
                break;
 800ae9c:	e091      	b.n	800afc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da0b      	bge.n	800aebe <USBD_StdEPReq+0x212>
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	3310      	adds	r3, #16
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	3304      	adds	r3, #4
 800aebc:	e00b      	b.n	800aed6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	4413      	add	r3, r2
 800aed4:	3304      	adds	r3, #4
 800aed6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2202      	movs	r2, #2
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc37 	bl	800b758 <USBD_CtlSendData>
              break;
 800aeea:	e06a      	b.n	800afc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aeec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da11      	bge.n	800af18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	f003 020f 	and.w	r2, r3, #15
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	3324      	adds	r3, #36	@ 0x24
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d117      	bne.n	800af3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fbb0 	bl	800b676 <USBD_CtlError>
                  break;
 800af16:	e054      	b.n	800afc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	f003 020f 	and.w	r2, r3, #15
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d104      	bne.n	800af3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fb9d 	bl	800b676 <USBD_CtlError>
                  break;
 800af3c:	e041      	b.n	800afc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	da0b      	bge.n	800af5e <USBD_StdEPReq+0x2b2>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	3310      	adds	r3, #16
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	4413      	add	r3, r2
 800af5a:	3304      	adds	r3, #4
 800af5c:	e00b      	b.n	800af76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4413      	add	r3, r2
 800af74:	3304      	adds	r3, #4
 800af76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <USBD_StdEPReq+0x2d8>
 800af7e:	7bbb      	ldrb	r3, [r7, #14]
 800af80:	2b80      	cmp	r3, #128	@ 0x80
 800af82:	d103      	bne.n	800af8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	e00e      	b.n	800afaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 fb4f 	bl	800c634 <USBD_LL_IsStallEP>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2201      	movs	r2, #1
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	e002      	b.n	800afaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2202      	movs	r2, #2
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fbd1 	bl	800b758 <USBD_CtlSendData>
              break;
 800afb6:	e004      	b.n	800afc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fb5b 	bl	800b676 <USBD_CtlError>
              break;
 800afc0:	bf00      	nop
          }
          break;
 800afc2:	e004      	b.n	800afce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fb55 	bl	800b676 <USBD_CtlError>
          break;
 800afcc:	bf00      	nop
      }
      break;
 800afce:	e005      	b.n	800afdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fb4f 	bl	800b676 <USBD_CtlError>
      break;
 800afd8:	e000      	b.n	800afdc <USBD_StdEPReq+0x330>
      break;
 800afda:	bf00      	nop
  }

  return ret;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	885b      	ldrh	r3, [r3, #2]
 800b002:	0a1b      	lsrs	r3, r3, #8
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	2b06      	cmp	r3, #6
 800b00a:	f200 8128 	bhi.w	800b25e <USBD_GetDescriptor+0x276>
 800b00e:	a201      	add	r2, pc, #4	@ (adr r2, 800b014 <USBD_GetDescriptor+0x2c>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b031 	.word	0x0800b031
 800b018:	0800b049 	.word	0x0800b049
 800b01c:	0800b089 	.word	0x0800b089
 800b020:	0800b25f 	.word	0x0800b25f
 800b024:	0800b25f 	.word	0x0800b25f
 800b028:	0800b1ff 	.word	0x0800b1ff
 800b02c:	0800b22b 	.word	0x0800b22b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	7c12      	ldrb	r2, [r2, #16]
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
      break;
 800b046:	e112      	b.n	800b26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	7c1b      	ldrb	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10d      	bne.n	800b06c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b058:	f107 0208 	add.w	r2, r7, #8
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3301      	adds	r3, #1
 800b066:	2202      	movs	r2, #2
 800b068:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b06a:	e100      	b.n	800b26e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b074:	f107 0208 	add.w	r2, r7, #8
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
 800b082:	2202      	movs	r2, #2
 800b084:	701a      	strb	r2, [r3, #0]
      break;
 800b086:	e0f2      	b.n	800b26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	885b      	ldrh	r3, [r3, #2]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b05      	cmp	r3, #5
 800b090:	f200 80ac 	bhi.w	800b1ec <USBD_GetDescriptor+0x204>
 800b094:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <USBD_GetDescriptor+0xb4>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b0b5 	.word	0x0800b0b5
 800b0a0:	0800b0e9 	.word	0x0800b0e9
 800b0a4:	0800b11d 	.word	0x0800b11d
 800b0a8:	0800b151 	.word	0x0800b151
 800b0ac:	0800b185 	.word	0x0800b185
 800b0b0:	0800b1b9 	.word	0x0800b1b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	7c12      	ldrb	r2, [r2, #16]
 800b0cc:	f107 0108 	add.w	r1, r7, #8
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4798      	blx	r3
 800b0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0d6:	e091      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 facb 	bl	800b676 <USBD_CtlError>
            err++;
 800b0e0:	7afb      	ldrb	r3, [r7, #11]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0e6:	e089      	b.n	800b1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	7c12      	ldrb	r2, [r2, #16]
 800b100:	f107 0108 	add.w	r1, r7, #8
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
 800b108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b10a:	e077      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fab1 	bl	800b676 <USBD_CtlError>
            err++;
 800b114:	7afb      	ldrb	r3, [r7, #11]
 800b116:	3301      	adds	r3, #1
 800b118:	72fb      	strb	r3, [r7, #11]
          break;
 800b11a:	e06f      	b.n	800b1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7c12      	ldrb	r2, [r2, #16]
 800b134:	f107 0108 	add.w	r1, r7, #8
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13e:	e05d      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fa97 	bl	800b676 <USBD_CtlError>
            err++;
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	3301      	adds	r3, #1
 800b14c:	72fb      	strb	r3, [r7, #11]
          break;
 800b14e:	e055      	b.n	800b1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7c12      	ldrb	r2, [r2, #16]
 800b168:	f107 0108 	add.w	r1, r7, #8
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b172:	e043      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fa7d 	bl	800b676 <USBD_CtlError>
            err++;
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	3301      	adds	r3, #1
 800b180:	72fb      	strb	r3, [r7, #11]
          break;
 800b182:	e03b      	b.n	800b1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	7c12      	ldrb	r2, [r2, #16]
 800b19c:	f107 0108 	add.w	r1, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a6:	e029      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fa63 	bl	800b676 <USBD_CtlError>
            err++;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b6:	e021      	b.n	800b1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00b      	beq.n	800b1dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	7c12      	ldrb	r2, [r2, #16]
 800b1d0:	f107 0108 	add.w	r1, r7, #8
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3
 800b1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1da:	e00f      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa49 	bl	800b676 <USBD_CtlError>
            err++;
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ea:	e007      	b.n	800b1fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fa41 	bl	800b676 <USBD_CtlError>
          err++;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b1fa:	bf00      	nop
      }
      break;
 800b1fc:	e037      	b.n	800b26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7c1b      	ldrb	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b20e:	f107 0208 	add.w	r2, r7, #8
 800b212:	4610      	mov	r0, r2
 800b214:	4798      	blx	r3
 800b216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b218:	e029      	b.n	800b26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fa2a 	bl	800b676 <USBD_CtlError>
        err++;
 800b222:	7afb      	ldrb	r3, [r7, #11]
 800b224:	3301      	adds	r3, #1
 800b226:	72fb      	strb	r3, [r7, #11]
      break;
 800b228:	e021      	b.n	800b26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	7c1b      	ldrb	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10d      	bne.n	800b24e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23a:	f107 0208 	add.w	r2, r7, #8
 800b23e:	4610      	mov	r0, r2
 800b240:	4798      	blx	r3
 800b242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	2207      	movs	r2, #7
 800b24a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b24c:	e00f      	b.n	800b26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa10 	bl	800b676 <USBD_CtlError>
        err++;
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	3301      	adds	r3, #1
 800b25a:	72fb      	strb	r3, [r7, #11]
      break;
 800b25c:	e007      	b.n	800b26e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fa08 	bl	800b676 <USBD_CtlError>
      err++;
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	3301      	adds	r3, #1
 800b26a:	72fb      	strb	r3, [r7, #11]
      break;
 800b26c:	bf00      	nop
  }

  if (err != 0U)
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d11e      	bne.n	800b2b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d016      	beq.n	800b2aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b27c:	893b      	ldrh	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00e      	beq.n	800b2a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	88da      	ldrh	r2, [r3, #6]
 800b286:	893b      	ldrh	r3, [r7, #8]
 800b288:	4293      	cmp	r3, r2
 800b28a:	bf28      	it	cs
 800b28c:	4613      	movcs	r3, r2
 800b28e:	b29b      	uxth	r3, r3
 800b290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b292:	893b      	ldrh	r3, [r7, #8]
 800b294:	461a      	mov	r2, r3
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fa5d 	bl	800b758 <USBD_CtlSendData>
 800b29e:	e009      	b.n	800b2b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f9e7 	bl	800b676 <USBD_CtlError>
 800b2a8:	e004      	b.n	800b2b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 faae 	bl	800b80c <USBD_CtlSendStatus>
 800b2b0:	e000      	b.n	800b2b4 <USBD_GetDescriptor+0x2cc>
    return;
 800b2b2:	bf00      	nop
  }
}
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop

0800b2bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	889b      	ldrh	r3, [r3, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d131      	bne.n	800b332 <USBD_SetAddress+0x76>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	88db      	ldrh	r3, [r3, #6]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d12d      	bne.n	800b332 <USBD_SetAddress+0x76>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	885b      	ldrh	r3, [r3, #2]
 800b2da:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2dc:	d829      	bhi.n	800b332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	885b      	ldrh	r3, [r3, #2]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d104      	bne.n	800b300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f9bc 	bl	800b676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2fe:	e01d      	b.n	800b33c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	7bfa      	ldrb	r2, [r7, #15]
 800b304:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 f9bd 	bl	800c68c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fa7a 	bl	800b80c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2202      	movs	r2, #2
 800b322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b326:	e009      	b.n	800b33c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b330:	e004      	b.n	800b33c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f99e 	bl	800b676 <USBD_CtlError>
  }
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	885b      	ldrh	r3, [r3, #2]
 800b356:	b2da      	uxtb	r2, r3
 800b358:	4b4e      	ldr	r3, [pc, #312]	@ (800b494 <USBD_SetConfig+0x150>)
 800b35a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b35c:	4b4d      	ldr	r3, [pc, #308]	@ (800b494 <USBD_SetConfig+0x150>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d905      	bls.n	800b370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f985 	bl	800b676 <USBD_CtlError>
    return USBD_FAIL;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e08c      	b.n	800b48a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d002      	beq.n	800b382 <USBD_SetConfig+0x3e>
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d029      	beq.n	800b3d4 <USBD_SetConfig+0x90>
 800b380:	e075      	b.n	800b46e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b382:	4b44      	ldr	r3, [pc, #272]	@ (800b494 <USBD_SetConfig+0x150>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d020      	beq.n	800b3cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b38a:	4b42      	ldr	r3, [pc, #264]	@ (800b494 <USBD_SetConfig+0x150>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b394:	4b3f      	ldr	r3, [pc, #252]	@ (800b494 <USBD_SetConfig+0x150>)
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7fe ffe9 	bl	800a372 <USBD_SetClassConfig>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f962 	bl	800b676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3ba:	e065      	b.n	800b488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fa25 	bl	800b80c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2203      	movs	r2, #3
 800b3c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3ca:	e05d      	b.n	800b488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fa1d 	bl	800b80c <USBD_CtlSendStatus>
      break;
 800b3d2:	e059      	b.n	800b488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b494 <USBD_SetConfig+0x150>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d112      	bne.n	800b402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b3e4:	4b2b      	ldr	r3, [pc, #172]	@ (800b494 <USBD_SetConfig+0x150>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3ee:	4b29      	ldr	r3, [pc, #164]	@ (800b494 <USBD_SetConfig+0x150>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7fe ffd8 	bl	800a3aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fa06 	bl	800b80c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b400:	e042      	b.n	800b488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b402:	4b24      	ldr	r3, [pc, #144]	@ (800b494 <USBD_SetConfig+0x150>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d02a      	beq.n	800b466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	4619      	mov	r1, r3
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7fe ffc6 	bl	800a3aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b41e:	4b1d      	ldr	r3, [pc, #116]	@ (800b494 <USBD_SetConfig+0x150>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b428:	4b1a      	ldr	r3, [pc, #104]	@ (800b494 <USBD_SetConfig+0x150>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7fe ff9f 	bl	800a372 <USBD_SetClassConfig>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00f      	beq.n	800b45e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f918 	bl	800b676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7fe ffab 	bl	800a3aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b45c:	e014      	b.n	800b488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f9d4 	bl	800b80c <USBD_CtlSendStatus>
      break;
 800b464:	e010      	b.n	800b488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f9d0 	bl	800b80c <USBD_CtlSendStatus>
      break;
 800b46c:	e00c      	b.n	800b488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f900 	bl	800b676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b476:	4b07      	ldr	r3, [pc, #28]	@ (800b494 <USBD_SetConfig+0x150>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7fe ff94 	bl	800a3aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b482:	2303      	movs	r3, #3
 800b484:	73fb      	strb	r3, [r7, #15]
      break;
 800b486:	bf00      	nop
  }

  return ret;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000960 	.word	0x20000960

0800b498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	88db      	ldrh	r3, [r3, #6]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d004      	beq.n	800b4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f8e2 	bl	800b676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4b2:	e023      	b.n	800b4fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	dc02      	bgt.n	800b4c6 <USBD_GetConfig+0x2e>
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dc03      	bgt.n	800b4cc <USBD_GetConfig+0x34>
 800b4c4:	e015      	b.n	800b4f2 <USBD_GetConfig+0x5a>
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d00b      	beq.n	800b4e2 <USBD_GetConfig+0x4a>
 800b4ca:	e012      	b.n	800b4f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f93c 	bl	800b758 <USBD_CtlSendData>
        break;
 800b4e0:	e00c      	b.n	800b4fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f934 	bl	800b758 <USBD_CtlSendData>
        break;
 800b4f0:	e004      	b.n	800b4fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f8be 	bl	800b676 <USBD_CtlError>
        break;
 800b4fa:	bf00      	nop
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b514:	b2db      	uxtb	r3, r3
 800b516:	3b01      	subs	r3, #1
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d81e      	bhi.n	800b55a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	88db      	ldrh	r3, [r3, #6]
 800b520:	2b02      	cmp	r3, #2
 800b522:	d004      	beq.n	800b52e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8a5 	bl	800b676 <USBD_CtlError>
        break;
 800b52c:	e01a      	b.n	800b564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	f043 0202 	orr.w	r2, r3, #2
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	330c      	adds	r3, #12
 800b54e:	2202      	movs	r2, #2
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f900 	bl	800b758 <USBD_CtlSendData>
      break;
 800b558:	e004      	b.n	800b564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f88a 	bl	800b676 <USBD_CtlError>
      break;
 800b562:	bf00      	nop
  }
}
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d107      	bne.n	800b58e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f940 	bl	800b80c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b58c:	e013      	b.n	800b5b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	885b      	ldrh	r3, [r3, #2]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d10b      	bne.n	800b5ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	889b      	ldrh	r3, [r3, #4]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f930 	bl	800b80c <USBD_CtlSendStatus>
}
 800b5ac:	e003      	b.n	800b5b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f860 	bl	800b676 <USBD_CtlError>
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d80b      	bhi.n	800b5ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	885b      	ldrh	r3, [r3, #2]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d10c      	bne.n	800b5f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f910 	bl	800b80c <USBD_CtlSendStatus>
      }
      break;
 800b5ec:	e004      	b.n	800b5f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f840 	bl	800b676 <USBD_CtlError>
      break;
 800b5f6:	e000      	b.n	800b5fa <USBD_ClrFeature+0x3c>
      break;
 800b5f8:	bf00      	nop
  }
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	781a      	ldrb	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3301      	adds	r3, #1
 800b61c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3301      	adds	r3, #1
 800b62a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fa40 	bl	800aab2 <SWAPBYTE>
 800b632:	4603      	mov	r3, r0
 800b634:	461a      	mov	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3301      	adds	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7ff fa33 	bl	800aab2 <SWAPBYTE>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	3301      	adds	r3, #1
 800b658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fa26 	bl	800aab2 <SWAPBYTE>
 800b666:	4603      	mov	r3, r0
 800b668:	461a      	mov	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	80da      	strh	r2, [r3, #6]
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b680:	2180      	movs	r1, #128	@ 0x80
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 ff98 	bl	800c5b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b688:	2100      	movs	r1, #0
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 ff94 	bl	800c5b8 <USBD_LL_StallEP>
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d036      	beq.n	800b71c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f000 f836 	bl	800b724 <USBD_GetLen>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	7812      	ldrb	r2, [r2, #0]
 800b6d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	4413      	add	r3, r2
 800b6de:	2203      	movs	r2, #3
 800b6e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6e8:	e013      	b.n	800b712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	613b      	str	r3, [r7, #16]
    idx++;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	3301      	adds	r3, #1
 800b700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	4413      	add	r3, r2
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	3301      	adds	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e7      	bne.n	800b6ea <USBD_GetString+0x52>
 800b71a:	e000      	b.n	800b71e <USBD_GetString+0x86>
    return;
 800b71c:	bf00      	nop
  }
}
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b734:	e005      	b.n	800b742 <USBD_GetLen+0x1e>
  {
    len++;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	3301      	adds	r3, #1
 800b73a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	3301      	adds	r3, #1
 800b740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1f5      	bne.n	800b736 <USBD_GetLen+0x12>
  }

  return len;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2202      	movs	r2, #2
 800b768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	2100      	movs	r1, #0
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f000 ffa3 	bl	800c6ca <USBD_LL_Transmit>

  return USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	2100      	movs	r1, #0
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 ff92 	bl	800c6ca <USBD_LL_Transmit>

  return USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2203      	movs	r2, #3
 800b7c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	2100      	movs	r1, #0
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 ff96 	bl	800c70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 ff85 	bl	800c70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2204      	movs	r2, #4
 800b818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b81c:	2300      	movs	r3, #0
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 ff51 	bl	800c6ca <USBD_LL_Transmit>

  return USBD_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2205      	movs	r2, #5
 800b83e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b842:	2300      	movs	r3, #0
 800b844:	2200      	movs	r2, #0
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 ff5f 	bl	800c70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select() {
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800b85c:	2200      	movs	r2, #0
 800b85e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b862:	4802      	ldr	r0, [pc, #8]	@ (800b86c <ST7735_Select+0x14>)
 800b864:	f7f7 f9c4 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800b868:	bf00      	nop
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	40020000 	.word	0x40020000

0800b870 <ST7735_Unselect>:

void ST7735_Unselect() {
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800b874:	2201      	movs	r2, #1
 800b876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b87a:	4802      	ldr	r0, [pc, #8]	@ (800b884 <ST7735_Unselect+0x14>)
 800b87c:	f7f7 f9b8 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800b880:	bf00      	nop
 800b882:	bd80      	pop	{r7, pc}
 800b884:	40020000 	.word	0x40020000

0800b888 <ST7735_Reset>:

void ST7735_Reset() {
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800b88c:	2200      	movs	r2, #0
 800b88e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b892:	4807      	ldr	r0, [pc, #28]	@ (800b8b0 <ST7735_Reset+0x28>)
 800b894:	f7f7 f9ac 	bl	8002bf0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800b898:	2005      	movs	r0, #5
 800b89a:	f7f6 f80b 	bl	80018b4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b8a4:	4802      	ldr	r0, [pc, #8]	@ (800b8b0 <ST7735_Reset+0x28>)
 800b8a6:	f7f7 f9a3 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800b8aa:	bf00      	nop
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40020000 	.word	0x40020000

0800b8b4 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800b8be:	2200      	movs	r2, #0
 800b8c0:	2110      	movs	r1, #16
 800b8c2:	4807      	ldr	r0, [pc, #28]	@ (800b8e0 <ST7735_WriteCommand+0x2c>)
 800b8c4:	f7f7 f994 	bl	8002bf0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b8c8:	1df9      	adds	r1, r7, #7
 800b8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	4804      	ldr	r0, [pc, #16]	@ (800b8e4 <ST7735_WriteCommand+0x30>)
 800b8d2:	f7fa fdc7 	bl	8006464 <HAL_SPI_Transmit>
}
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	40020000 	.word	0x40020000
 800b8e4:	2000070c 	.word	0x2000070c

0800b8e8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	2110      	movs	r1, #16
 800b8f6:	4807      	ldr	r0, [pc, #28]	@ (800b914 <ST7735_WriteData+0x2c>)
 800b8f8:	f7f7 f97a 	bl	8002bf0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	4804      	ldr	r0, [pc, #16]	@ (800b918 <ST7735_WriteData+0x30>)
 800b908:	f7fa fdac 	bl	8006464 <HAL_SPI_Transmit>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	40020000 	.word	0x40020000
 800b918:	2000070c 	.word	0x2000070c

0800b91c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800b92e:	e034      	b.n	800b99a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	607a      	str	r2, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffb9 	bl	800b8b4 <ST7735_WriteCommand>

        numArgs = *addr++;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800b94c:	7abb      	ldrb	r3, [r7, #10]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b954:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800b956:	7abb      	ldrb	r3, [r7, #10]
 800b958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b95c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800b95e:	7abb      	ldrb	r3, [r7, #10]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800b964:	7abb      	ldrb	r3, [r7, #10]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff ffbd 	bl	800b8e8 <ST7735_WriteData>
            addr += numArgs;
 800b96e:	7abb      	ldrb	r3, [r7, #10]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	4413      	add	r3, r2
 800b974:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800b976:	89bb      	ldrh	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00e      	beq.n	800b99a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	607a      	str	r2, [r7, #4]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800b986:	89bb      	ldrh	r3, [r7, #12]
 800b988:	2bff      	cmp	r3, #255	@ 0xff
 800b98a:	d102      	bne.n	800b992 <ST7735_ExecuteCommandList+0x76>
 800b98c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b990:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800b992:	89bb      	ldrh	r3, [r7, #12]
 800b994:	4618      	mov	r0, r3
 800b996:	f7f5 ff8d 	bl	80018b4 <HAL_Delay>
    while(numCommands--) {
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	73fa      	strb	r2, [r7, #15]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1c5      	bne.n	800b930 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800b9ae:	b590      	push	{r4, r7, lr}
 800b9b0:	b085      	sub	sp, #20
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4623      	mov	r3, r4
 800b9be:	71fb      	strb	r3, [r7, #7]
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	71bb      	strb	r3, [r7, #6]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	717b      	strb	r3, [r7, #5]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800b9cc:	202a      	movs	r0, #42	@ 0x2a
 800b9ce:	f7ff ff71 	bl	800b8b4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	733b      	strb	r3, [r7, #12]
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	737b      	strb	r3, [r7, #13]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73bb      	strb	r3, [r7, #14]
 800b9de:	797b      	ldrb	r3, [r7, #5]
 800b9e0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800b9e2:	f107 030c 	add.w	r3, r7, #12
 800b9e6:	2104      	movs	r1, #4
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff ff7d 	bl	800b8e8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800b9ee:	202b      	movs	r0, #43	@ 0x2b
 800b9f0:	f7ff ff60 	bl	800b8b4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800b9f4:	79bb      	ldrb	r3, [r7, #6]
 800b9f6:	3318      	adds	r3, #24
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800b9fc:	793b      	ldrb	r3, [r7, #4]
 800b9fe:	3318      	adds	r3, #24
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800ba04:	f107 030c 	add.w	r3, r7, #12
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff ff6c 	bl	800b8e8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800ba10:	202c      	movs	r0, #44	@ 0x2c
 800ba12:	f7ff ff4f 	bl	800b8b4 <ST7735_WriteCommand>
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd90      	pop	{r4, r7, pc}
	...

0800ba20 <ST7735_Init>:

void ST7735_Init() {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
    ST7735_Select();
 800ba24:	f7ff ff18 	bl	800b858 <ST7735_Select>
    ST7735_Reset();
 800ba28:	f7ff ff2e 	bl	800b888 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800ba2c:	4806      	ldr	r0, [pc, #24]	@ (800ba48 <ST7735_Init+0x28>)
 800ba2e:	f7ff ff75 	bl	800b91c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800ba32:	4806      	ldr	r0, [pc, #24]	@ (800ba4c <ST7735_Init+0x2c>)
 800ba34:	f7ff ff72 	bl	800b91c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800ba38:	4805      	ldr	r0, [pc, #20]	@ (800ba50 <ST7735_Init+0x30>)
 800ba3a:	f7ff ff6f 	bl	800b91c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800ba3e:	f7ff ff17 	bl	800b870 <ST7735_Unselect>
}
 800ba42:	bf00      	nop
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	080118c8 	.word	0x080118c8
 800ba4c:	08011904 	.word	0x08011904
 800ba50:	08011914 	.word	0x08011914

0800ba54 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	80fb      	strh	r3, [r7, #6]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	80bb      	strh	r3, [r7, #4]
 800ba62:	4613      	mov	r3, r2
 800ba64:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	2b9f      	cmp	r3, #159	@ 0x9f
 800ba6a:	d823      	bhi.n	800bab4 <ST7735_DrawPixel+0x60>
 800ba6c:	88bb      	ldrh	r3, [r7, #4]
 800ba6e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ba70:	d820      	bhi.n	800bab4 <ST7735_DrawPixel+0x60>
        return;
		
    ST7735_Select();
 800ba72:	f7ff fef1 	bl	800b858 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800ba76:	88fb      	ldrh	r3, [r7, #6]
 800ba78:	b2d8      	uxtb	r0, r3
 800ba7a:	88bb      	ldrh	r3, [r7, #4]
 800ba7c:	b2d9      	uxtb	r1, r3
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	88bb      	ldrh	r3, [r7, #4]
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f7ff ff8e 	bl	800b9ae <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800ba92:	887b      	ldrh	r3, [r7, #2]
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	733b      	strb	r3, [r7, #12]
 800ba9c:	887b      	ldrh	r3, [r7, #2]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800baa2:	f107 030c 	add.w	r3, r7, #12
 800baa6:	2102      	movs	r1, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff ff1d 	bl	800b8e8 <ST7735_WriteData>
    ST7735_Unselect();
 800baae:	f7ff fedf 	bl	800b870 <ST7735_Unselect>
 800bab2:	e000      	b.n	800bab6 <ST7735_DrawPixel+0x62>
        return;
 800bab4:	bf00      	nop
}
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800babc:	b082      	sub	sp, #8
 800babe:	b590      	push	{r4, r7, lr}
 800bac0:	b089      	sub	sp, #36	@ 0x24
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac6:	4603      	mov	r3, r0
 800bac8:	80fb      	strh	r3, [r7, #6]
 800baca:	460b      	mov	r3, r1
 800bacc:	80bb      	strh	r3, [r7, #4]
 800bace:	4613      	mov	r3, r2
 800bad0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j, shift;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800bad2:	88fb      	ldrh	r3, [r7, #6]
 800bad4:	b2d8      	uxtb	r0, r3
 800bad6:	88bb      	ldrh	r3, [r7, #4]
 800bad8:	b2d9      	uxtb	r1, r3
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	b2da      	uxtb	r2, r3
 800bade:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800bae2:	4413      	add	r3, r2
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	3b01      	subs	r3, #1
 800bae8:	b2dc      	uxtb	r4, r3
 800baea:	88bb      	ldrh	r3, [r7, #4]
 800baec:	b2da      	uxtb	r2, r3
 800baee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800baf2:	4413      	add	r3, r2
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	4622      	mov	r2, r4
 800bafc:	f7ff ff57 	bl	800b9ae <ST7735_SetAddressWindow>
//    }
//    else
//    {
//    	shift = 0;
//    }
    shift = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]

    if(font.height == 8)
 800bb04:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d106      	bne.n	800bb1a <ST7735_WriteChar+0x5e>
    {
    	shift = 14;
 800bb0c:	230e      	movs	r3, #14
 800bb0e:	617b      	str	r3, [r7, #20]
    	if(ch == '%')
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	2b25      	cmp	r3, #37	@ 0x25
 800bb14:	d101      	bne.n	800bb1a <ST7735_WriteChar+0x5e>
    	{
    		shift = 4;
 800bb16:	2304      	movs	r3, #4
 800bb18:	617b      	str	r3, [r7, #20]
    	}
    }



    for(i = 0; i < font.height; i++) {
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	e044      	b.n	800bbaa <ST7735_WriteChar+0xee>
        b = font.data[(ch - 32- shift) * font.height + i]; // -32-16 для большого шрифта
 800bb20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb22:	78f9      	ldrb	r1, [r7, #3]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	1acb      	subs	r3, r1, r3
 800bb28:	3b20      	subs	r3, #32
 800bb2a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800bb2e:	fb03 f101 	mul.w	r1, r3, r1
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	440b      	add	r3, r1
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	4413      	add	r3, r2
 800bb3a:	881b      	ldrh	r3, [r3, #0]
 800bb3c:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	e029      	b.n	800bb98 <ST7735_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00e      	beq.n	800bb72 <ST7735_WriteChar+0xb6>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800bb54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bb56:	0a1b      	lsrs	r3, r3, #8
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	733b      	strb	r3, [r7, #12]
 800bb5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800bb64:	f107 030c 	add.w	r3, r7, #12
 800bb68:	2102      	movs	r1, #2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff febc 	bl	800b8e8 <ST7735_WriteData>
 800bb70:	e00f      	b.n	800bb92 <ST7735_WriteChar+0xd6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800bb72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bb76:	0a1b      	lsrs	r3, r3, #8
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	723b      	strb	r3, [r7, #8]
 800bb7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	727b      	strb	r3, [r7, #9]
                ST7735_WriteData(data, sizeof(data));
 800bb86:	f107 0308 	add.w	r3, r7, #8
 800bb8a:	2102      	movs	r1, #2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff feab 	bl	800b8e8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	3301      	adds	r3, #1
 800bb96:	61bb      	str	r3, [r7, #24]
 800bb98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d3cf      	bcc.n	800bb44 <ST7735_WriteChar+0x88>
    for(i = 0; i < font.height; i++) {
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	3301      	adds	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800bbae:	461a      	mov	r2, r3
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d3b4      	bcc.n	800bb20 <ST7735_WriteChar+0x64>
            }
        }
    }
}
 800bbb6:	bf00      	nop
 800bbb8:	bf00      	nop
 800bbba:	3724      	adds	r7, #36	@ 0x24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800bbc2:	b002      	add	sp, #8
 800bbc4:	4770      	bx	lr

0800bbc6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af04      	add	r7, sp, #16
 800bbce:	603a      	str	r2, [r7, #0]
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	80fb      	strh	r3, [r7, #6]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800bbda:	f7ff fe3d 	bl	800b858 <ST7735_Select>

    while(*str) {
 800bbde:	e02d      	b.n	800bc3c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	7d3a      	ldrb	r2, [r7, #20]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	2b9f      	cmp	r3, #159	@ 0x9f
 800bbe8:	dd13      	ble.n	800bc12 <ST7735_WriteString+0x4c>
            x = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800bbee:	7d7b      	ldrb	r3, [r7, #21]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	88bb      	ldrh	r3, [r7, #4]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800bbf8:	88bb      	ldrh	r3, [r7, #4]
 800bbfa:	7d7a      	ldrb	r2, [r7, #21]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc00:	dc21      	bgt.n	800bc46 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	d103      	bne.n	800bc12 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	603b      	str	r3, [r7, #0]
                continue;
 800bc10:	e014      	b.n	800bc3c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781a      	ldrb	r2, [r3, #0]
 800bc16:	88b9      	ldrh	r1, [r7, #4]
 800bc18:	88f8      	ldrh	r0, [r7, #6]
 800bc1a:	8c3b      	ldrh	r3, [r7, #32]
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	8bbb      	ldrh	r3, [r7, #28]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f7ff ff48 	bl	800babc <ST7735_WriteChar>
        x += font.width;
 800bc2c:	7d3b      	ldrb	r3, [r7, #20]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	4413      	add	r3, r2
 800bc34:	80fb      	strh	r3, [r7, #6]
        str++;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1cd      	bne.n	800bbe0 <ST7735_WriteString+0x1a>
 800bc44:	e000      	b.n	800bc48 <ST7735_WriteString+0x82>
                break;
 800bc46:	bf00      	nop
    }

    ST7735_Unselect();
 800bc48:	f7ff fe12 	bl	800b870 <ST7735_Unselect>
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc56:	b002      	add	sp, #8
 800bc58:	4770      	bx	lr
	...

0800bc5c <ST7735_FillRectangle>:

void ST7735_FillRectangle( uint16_t w, uint16_t h,uint16_t x, uint16_t y, uint16_t color) {
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	4611      	mov	r1, r2
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4623      	mov	r3, r4
 800bc6c:	80fb      	strh	r3, [r7, #6]
 800bc6e:	4603      	mov	r3, r0
 800bc70:	80bb      	strh	r3, [r7, #4]
 800bc72:	460b      	mov	r3, r1
 800bc74:	807b      	strh	r3, [r7, #2]
 800bc76:	4613      	mov	r3, r2
 800bc78:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bc7a:	887b      	ldrh	r3, [r7, #2]
 800bc7c:	2b9f      	cmp	r3, #159	@ 0x9f
 800bc7e:	d857      	bhi.n	800bd30 <ST7735_FillRectangle+0xd4>
 800bc80:	883b      	ldrh	r3, [r7, #0]
 800bc82:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc84:	d854      	bhi.n	800bd30 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800bc86:	887a      	ldrh	r2, [r7, #2]
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	2ba0      	cmp	r3, #160	@ 0xa0
 800bc8e:	dd03      	ble.n	800bc98 <ST7735_FillRectangle+0x3c>
 800bc90:	887b      	ldrh	r3, [r7, #2]
 800bc92:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800bc96:	80fb      	strh	r3, [r7, #6]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800bc98:	883a      	ldrh	r2, [r7, #0]
 800bc9a:	88bb      	ldrh	r3, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	2b50      	cmp	r3, #80	@ 0x50
 800bca0:	dd03      	ble.n	800bcaa <ST7735_FillRectangle+0x4e>
 800bca2:	883b      	ldrh	r3, [r7, #0]
 800bca4:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800bca8:	80bb      	strh	r3, [r7, #4]

    ST7735_Select();
 800bcaa:	f7ff fdd5 	bl	800b858 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800bcae:	887b      	ldrh	r3, [r7, #2]
 800bcb0:	b2d8      	uxtb	r0, r3
 800bcb2:	883b      	ldrh	r3, [r7, #0]
 800bcb4:	b2d9      	uxtb	r1, r3
 800bcb6:	887b      	ldrh	r3, [r7, #2]
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	88fb      	ldrh	r3, [r7, #6]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	b2dc      	uxtb	r4, r3
 800bcc6:	883b      	ldrh	r3, [r7, #0]
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	88bb      	ldrh	r3, [r7, #4]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	4413      	add	r3, r2
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	f7ff fe69 	bl	800b9ae <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800bcdc:	8c3b      	ldrh	r3, [r7, #32]
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	733b      	strb	r3, [r7, #12]
 800bce6:	8c3b      	ldrh	r3, [r7, #32]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800bcec:	2201      	movs	r2, #1
 800bcee:	2110      	movs	r1, #16
 800bcf0:	4811      	ldr	r0, [pc, #68]	@ (800bd38 <ST7735_FillRectangle+0xdc>)
 800bcf2:	f7f6 ff7d 	bl	8002bf0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800bcf6:	88bb      	ldrh	r3, [r7, #4]
 800bcf8:	803b      	strh	r3, [r7, #0]
 800bcfa:	e013      	b.n	800bd24 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	807b      	strh	r3, [r7, #2]
 800bd00:	e00a      	b.n	800bd18 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800bd02:	f107 010c 	add.w	r1, r7, #12
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	480b      	ldr	r0, [pc, #44]	@ (800bd3c <ST7735_FillRectangle+0xe0>)
 800bd0e:	f7fa fba9 	bl	8006464 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800bd12:	887b      	ldrh	r3, [r7, #2]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	807b      	strh	r3, [r7, #2]
 800bd18:	887b      	ldrh	r3, [r7, #2]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f1      	bne.n	800bd02 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800bd1e:	883b      	ldrh	r3, [r7, #0]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	803b      	strh	r3, [r7, #0]
 800bd24:	883b      	ldrh	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1e8      	bne.n	800bcfc <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800bd2a:	f7ff fda1 	bl	800b870 <ST7735_Unselect>
 800bd2e:	e000      	b.n	800bd32 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bd30:	bf00      	nop
}
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd90      	pop	{r4, r7, pc}
 800bd38:	40020000 	.word	0x40020000
 800bd3c:	2000070c 	.word	0x2000070c

0800bd40 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	4603      	mov	r3, r0
 800bd48:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(ST7735_WIDTH, ST7735_HEIGHT, 0, 0,  color);
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	2200      	movs	r2, #0
 800bd52:	2150      	movs	r1, #80	@ 0x50
 800bd54:	20a0      	movs	r0, #160	@ 0xa0
 800bd56:	f7ff ff81 	bl	800bc5c <ST7735_FillRectangle>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t* data) {
 800bd62:	b590      	push	{r4, r7, lr}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	4604      	mov	r4, r0
 800bd6a:	4608      	mov	r0, r1
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4623      	mov	r3, r4
 800bd72:	80fb      	strh	r3, [r7, #6]
 800bd74:	4603      	mov	r3, r0
 800bd76:	80bb      	strh	r3, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	807b      	strh	r3, [r7, #2]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	2b9f      	cmp	r3, #159	@ 0x9f
 800bd84:	d831      	bhi.n	800bdea <ST7735_DrawImage+0x88>
 800bd86:	88bb      	ldrh	r3, [r7, #4]
 800bd88:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd8a:	d82e      	bhi.n	800bdea <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bd8c:	88fa      	ldrh	r2, [r7, #6]
 800bd8e:	887b      	ldrh	r3, [r7, #2]
 800bd90:	4413      	add	r3, r2
 800bd92:	2ba0      	cmp	r3, #160	@ 0xa0
 800bd94:	dc2b      	bgt.n	800bdee <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bd96:	88ba      	ldrh	r2, [r7, #4]
 800bd98:	883b      	ldrh	r3, [r7, #0]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	2b50      	cmp	r3, #80	@ 0x50
 800bd9e:	dc28      	bgt.n	800bdf2 <ST7735_DrawImage+0x90>

    ST7735_Select();
 800bda0:	f7ff fd5a 	bl	800b858 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	b2d8      	uxtb	r0, r3
 800bda8:	88bb      	ldrh	r3, [r7, #4]
 800bdaa:	b2d9      	uxtb	r1, r3
 800bdac:	88fb      	ldrh	r3, [r7, #6]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	887b      	ldrh	r3, [r7, #2]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b2dc      	uxtb	r4, r3
 800bdbc:	88bb      	ldrh	r3, [r7, #4]
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	883b      	ldrh	r3, [r7, #0]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	4622      	mov	r2, r4
 800bdce:	f7ff fdee 	bl	800b9ae <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800bdd2:	887b      	ldrh	r3, [r7, #2]
 800bdd4:	883a      	ldrh	r2, [r7, #0]
 800bdd6:	fb02 f303 	mul.w	r3, r2, r3
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	4619      	mov	r1, r3
 800bdde:	69b8      	ldr	r0, [r7, #24]
 800bde0:	f7ff fd82 	bl	800b8e8 <ST7735_WriteData>
    ST7735_Unselect();
 800bde4:	f7ff fd44 	bl	800b870 <ST7735_Unselect>
 800bde8:	e004      	b.n	800bdf4 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800bdea:	bf00      	nop
 800bdec:	e002      	b.n	800bdf4 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800bdee:	bf00      	nop
 800bdf0:	e000      	b.n	800bdf4 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800bdf2:	bf00      	nop
}
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd90      	pop	{r4, r7, pc}

0800bdfa <ST7735_InvertColors>:

void ST7735_InvertColors(bool invert) {
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	4603      	mov	r3, r0
 800be02:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800be04:	f7ff fd28 	bl	800b858 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <ST7735_InvertColors+0x18>
 800be0e:	2321      	movs	r3, #33	@ 0x21
 800be10:	e000      	b.n	800be14 <ST7735_InvertColors+0x1a>
 800be12:	2320      	movs	r3, #32
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fd4d 	bl	800b8b4 <ST7735_WriteCommand>
    ST7735_Unselect();
 800be1a:	f7ff fd29 	bl	800b870 <ST7735_Unselect>
}
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be2c:	2200      	movs	r2, #0
 800be2e:	4912      	ldr	r1, [pc, #72]	@ (800be78 <MX_USB_DEVICE_Init+0x50>)
 800be30:	4812      	ldr	r0, [pc, #72]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be32:	f7fe fa21 	bl	800a278 <USBD_Init>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be3c:	f7f5 f89e 	bl	8000f7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be40:	490f      	ldr	r1, [pc, #60]	@ (800be80 <MX_USB_DEVICE_Init+0x58>)
 800be42:	480e      	ldr	r0, [pc, #56]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be44:	f7fe fa48 	bl	800a2d8 <USBD_RegisterClass>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be4e:	f7f5 f895 	bl	8000f7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be52:	490c      	ldr	r1, [pc, #48]	@ (800be84 <MX_USB_DEVICE_Init+0x5c>)
 800be54:	4809      	ldr	r0, [pc, #36]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be56:	f7fe f97f 	bl	800a158 <USBD_CDC_RegisterInterface>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be60:	f7f5 f88c 	bl	8000f7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be64:	4805      	ldr	r0, [pc, #20]	@ (800be7c <MX_USB_DEVICE_Init+0x54>)
 800be66:	f7fe fa6d 	bl	800a344 <USBD_Start>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be70:	f7f5 f884 	bl	8000f7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be74:	bf00      	nop
 800be76:	bd80      	pop	{r7, pc}
 800be78:	200000c4 	.word	0x200000c4
 800be7c:	20000964 	.word	0x20000964
 800be80:	20000018 	.word	0x20000018
 800be84:	200000b0 	.word	0x200000b0

0800be88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be8c:	2200      	movs	r2, #0
 800be8e:	4905      	ldr	r1, [pc, #20]	@ (800bea4 <CDC_Init_FS+0x1c>)
 800be90:	4805      	ldr	r0, [pc, #20]	@ (800bea8 <CDC_Init_FS+0x20>)
 800be92:	f7fe f97b 	bl	800a18c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be96:	4905      	ldr	r1, [pc, #20]	@ (800beac <CDC_Init_FS+0x24>)
 800be98:	4803      	ldr	r0, [pc, #12]	@ (800bea8 <CDC_Init_FS+0x20>)
 800be9a:	f7fe f999 	bl	800a1d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800be9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20001040 	.word	0x20001040
 800bea8:	20000964 	.word	0x20000964
 800beac:	20000c40 	.word	0x20000c40

0800beb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800beb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	6039      	str	r1, [r7, #0]
 800beca:	71fb      	strb	r3, [r7, #7]
 800becc:	4613      	mov	r3, r2
 800bece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	2b23      	cmp	r3, #35	@ 0x23
 800bed4:	d84a      	bhi.n	800bf6c <CDC_Control_FS+0xac>
 800bed6:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <CDC_Control_FS+0x1c>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf6d 	.word	0x0800bf6d
 800bee0:	0800bf6d 	.word	0x0800bf6d
 800bee4:	0800bf6d 	.word	0x0800bf6d
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800bf6d 	.word	0x0800bf6d
 800bef0:	0800bf6d 	.word	0x0800bf6d
 800bef4:	0800bf6d 	.word	0x0800bf6d
 800bef8:	0800bf6d 	.word	0x0800bf6d
 800befc:	0800bf6d 	.word	0x0800bf6d
 800bf00:	0800bf6d 	.word	0x0800bf6d
 800bf04:	0800bf6d 	.word	0x0800bf6d
 800bf08:	0800bf6d 	.word	0x0800bf6d
 800bf0c:	0800bf6d 	.word	0x0800bf6d
 800bf10:	0800bf6d 	.word	0x0800bf6d
 800bf14:	0800bf6d 	.word	0x0800bf6d
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	0800bf6d 	.word	0x0800bf6d
 800bf20:	0800bf6d 	.word	0x0800bf6d
 800bf24:	0800bf6d 	.word	0x0800bf6d
 800bf28:	0800bf6d 	.word	0x0800bf6d
 800bf2c:	0800bf6d 	.word	0x0800bf6d
 800bf30:	0800bf6d 	.word	0x0800bf6d
 800bf34:	0800bf6d 	.word	0x0800bf6d
 800bf38:	0800bf6d 	.word	0x0800bf6d
 800bf3c:	0800bf6d 	.word	0x0800bf6d
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	0800bf6d 	.word	0x0800bf6d
 800bf48:	0800bf6d 	.word	0x0800bf6d
 800bf4c:	0800bf6d 	.word	0x0800bf6d
 800bf50:	0800bf6d 	.word	0x0800bf6d
 800bf54:	0800bf6d 	.word	0x0800bf6d
 800bf58:	0800bf6d 	.word	0x0800bf6d
 800bf5c:	0800bf6d 	.word	0x0800bf6d
 800bf60:	0800bf6d 	.word	0x0800bf6d
 800bf64:	0800bf6d 	.word	0x0800bf6d
 800bf68:	0800bf6d 	.word	0x0800bf6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bf6c:	bf00      	nop
  }

  return (USBD_OK);
 800bf6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4805      	ldr	r0, [pc, #20]	@ (800bfa0 <CDC_Receive_FS+0x24>)
 800bf8a:	f7fe f921 	bl	800a1d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bf8e:	4804      	ldr	r0, [pc, #16]	@ (800bfa0 <CDC_Receive_FS+0x24>)
 800bf90:	f7fe f93c 	bl	800a20c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bf94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000964 	.word	0x20000964

0800bfa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bfb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	6039      	str	r1, [r7, #0]
 800bfd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2212      	movs	r2, #18
 800bfd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bfda:	4b03      	ldr	r3, [pc, #12]	@ (800bfe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	200000e0 	.word	0x200000e0

0800bfec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4603      	mov	r3, r0
 800bff4:	6039      	str	r1, [r7, #0]
 800bff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2204      	movs	r2, #4
 800bffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bffe:	4b03      	ldr	r3, [pc, #12]	@ (800c00c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	200000f4 	.word	0x200000f4

0800c010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	6039      	str	r1, [r7, #0]
 800c01a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c01c:	79fb      	ldrb	r3, [r7, #7]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d105      	bne.n	800c02e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	4907      	ldr	r1, [pc, #28]	@ (800c044 <USBD_FS_ProductStrDescriptor+0x34>)
 800c026:	4808      	ldr	r0, [pc, #32]	@ (800c048 <USBD_FS_ProductStrDescriptor+0x38>)
 800c028:	f7ff fb36 	bl	800b698 <USBD_GetString>
 800c02c:	e004      	b.n	800c038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	4904      	ldr	r1, [pc, #16]	@ (800c044 <USBD_FS_ProductStrDescriptor+0x34>)
 800c032:	4805      	ldr	r0, [pc, #20]	@ (800c048 <USBD_FS_ProductStrDescriptor+0x38>)
 800c034:	f7ff fb30 	bl	800b698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c038:	4b02      	ldr	r3, [pc, #8]	@ (800c044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20001440 	.word	0x20001440
 800c048:	0800ee74 	.word	0x0800ee74

0800c04c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	6039      	str	r1, [r7, #0]
 800c056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c058:	683a      	ldr	r2, [r7, #0]
 800c05a:	4904      	ldr	r1, [pc, #16]	@ (800c06c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c05c:	4804      	ldr	r0, [pc, #16]	@ (800c070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c05e:	f7ff fb1b 	bl	800b698 <USBD_GetString>
  return USBD_StrDesc;
 800c062:	4b02      	ldr	r3, [pc, #8]	@ (800c06c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c064:	4618      	mov	r0, r3
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20001440 	.word	0x20001440
 800c070:	0800ee8c 	.word	0x0800ee8c

0800c074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	221a      	movs	r2, #26
 800c084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c086:	f000 f843 	bl	800c110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c08a:	4b02      	ldr	r3, [pc, #8]	@ (800c094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	200000f8 	.word	0x200000f8

0800c098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	6039      	str	r1, [r7, #0]
 800c0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d105      	bne.n	800c0b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	4907      	ldr	r1, [pc, #28]	@ (800c0cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0ae:	4808      	ldr	r0, [pc, #32]	@ (800c0d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c0b0:	f7ff faf2 	bl	800b698 <USBD_GetString>
 800c0b4:	e004      	b.n	800c0c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	4904      	ldr	r1, [pc, #16]	@ (800c0cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0ba:	4805      	ldr	r0, [pc, #20]	@ (800c0d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c0bc:	f7ff faec 	bl	800b698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0c0:	4b02      	ldr	r3, [pc, #8]	@ (800c0cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20001440 	.word	0x20001440
 800c0d0:	0800eea0 	.word	0x0800eea0

0800c0d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	6039      	str	r1, [r7, #0]
 800c0de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d105      	bne.n	800c0f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	4907      	ldr	r1, [pc, #28]	@ (800c108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c0ea:	4808      	ldr	r0, [pc, #32]	@ (800c10c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c0ec:	f7ff fad4 	bl	800b698 <USBD_GetString>
 800c0f0:	e004      	b.n	800c0fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	4904      	ldr	r1, [pc, #16]	@ (800c108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c0f6:	4805      	ldr	r0, [pc, #20]	@ (800c10c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c0f8:	f7ff face 	bl	800b698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0fc:	4b02      	ldr	r3, [pc, #8]	@ (800c108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20001440 	.word	0x20001440
 800c10c:	0800eeac 	.word	0x0800eeac

0800c110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c116:	4b0f      	ldr	r3, [pc, #60]	@ (800c154 <Get_SerialNum+0x44>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c11c:	4b0e      	ldr	r3, [pc, #56]	@ (800c158 <Get_SerialNum+0x48>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c122:	4b0e      	ldr	r3, [pc, #56]	@ (800c15c <Get_SerialNum+0x4c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c136:	2208      	movs	r2, #8
 800c138:	4909      	ldr	r1, [pc, #36]	@ (800c160 <Get_SerialNum+0x50>)
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 f814 	bl	800c168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c140:	2204      	movs	r2, #4
 800c142:	4908      	ldr	r1, [pc, #32]	@ (800c164 <Get_SerialNum+0x54>)
 800c144:	68b8      	ldr	r0, [r7, #8]
 800c146:	f000 f80f 	bl	800c168 <IntToUnicode>
  }
}
 800c14a:	bf00      	nop
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	1fff7a10 	.word	0x1fff7a10
 800c158:	1fff7a14 	.word	0x1fff7a14
 800c15c:	1fff7a18 	.word	0x1fff7a18
 800c160:	200000fa 	.word	0x200000fa
 800c164:	2000010a 	.word	0x2000010a

0800c168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	4613      	mov	r3, r2
 800c174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c17a:	2300      	movs	r3, #0
 800c17c:	75fb      	strb	r3, [r7, #23]
 800c17e:	e027      	b.n	800c1d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	0f1b      	lsrs	r3, r3, #28
 800c184:	2b09      	cmp	r3, #9
 800c186:	d80b      	bhi.n	800c1a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	0f1b      	lsrs	r3, r3, #28
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4619      	mov	r1, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	440b      	add	r3, r1
 800c198:	3230      	adds	r2, #48	@ 0x30
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e00a      	b.n	800c1b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	0f1b      	lsrs	r3, r3, #28
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	7dfb      	ldrb	r3, [r7, #23]
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3237      	adds	r2, #55	@ 0x37
 800c1b2:	b2d2      	uxtb	r2, r2
 800c1b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	011b      	lsls	r3, r3, #4
 800c1ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	75fb      	strb	r3, [r7, #23]
 800c1d0:	7dfa      	ldrb	r2, [r7, #23]
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d3d3      	bcc.n	800c180 <IntToUnicode+0x18>
  }
}
 800c1d8:	bf00      	nop
 800c1da:	bf00      	nop
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08a      	sub	sp, #40	@ 0x28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1f0:	f107 0314 	add.w	r3, r7, #20
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	605a      	str	r2, [r3, #4]
 800c1fa:	609a      	str	r2, [r3, #8]
 800c1fc:	60da      	str	r2, [r3, #12]
 800c1fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c208:	d13a      	bne.n	800c280 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c20a:	2300      	movs	r3, #0
 800c20c:	613b      	str	r3, [r7, #16]
 800c20e:	4b1e      	ldr	r3, [pc, #120]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c212:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c214:	f043 0301 	orr.w	r3, r3, #1
 800c218:	6313      	str	r3, [r2, #48]	@ 0x30
 800c21a:	4b1b      	ldr	r3, [pc, #108]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	613b      	str	r3, [r7, #16]
 800c224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c22a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c22c:	2302      	movs	r3, #2
 800c22e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c234:	2303      	movs	r3, #3
 800c236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c238:	230a      	movs	r3, #10
 800c23a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c23c:	f107 0314 	add.w	r3, r7, #20
 800c240:	4619      	mov	r1, r3
 800c242:	4812      	ldr	r0, [pc, #72]	@ (800c28c <HAL_PCD_MspInit+0xa4>)
 800c244:	f7f6 fb38 	bl	80028b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c248:	4b0f      	ldr	r3, [pc, #60]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c24c:	4a0e      	ldr	r2, [pc, #56]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c252:	6353      	str	r3, [r2, #52]	@ 0x34
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	4b0b      	ldr	r3, [pc, #44]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c25c:	4a0a      	ldr	r2, [pc, #40]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c25e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c262:	6453      	str	r3, [r2, #68]	@ 0x44
 800c264:	4b08      	ldr	r3, [pc, #32]	@ (800c288 <HAL_PCD_MspInit+0xa0>)
 800c266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c270:	2200      	movs	r2, #0
 800c272:	2100      	movs	r1, #0
 800c274:	2043      	movs	r0, #67	@ 0x43
 800c276:	f7f5 fffe 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c27a:	2043      	movs	r0, #67	@ 0x43
 800c27c:	f7f6 f817 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c280:	bf00      	nop
 800c282:	3728      	adds	r7, #40	@ 0x28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40023800 	.word	0x40023800
 800c28c:	40020000 	.word	0x40020000

0800c290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fe f899 	bl	800a3de <USBD_LL_SetupStage>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	440b      	add	r3, r1
 800c2d4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f7fe f8d3 	bl	800a488 <USBD_LL_DataOutStage>
}
 800c2e2:	bf00      	nop
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	440b      	add	r3, r1
 800c30a:	334c      	adds	r3, #76	@ 0x4c
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	78fb      	ldrb	r3, [r7, #3]
 800c310:	4619      	mov	r1, r3
 800c312:	f7fe f96c 	bl	800a5ee <USBD_LL_DataInStage>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fe faa0 	bl	800a872 <USBD_LL_SOF>
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c342:	2301      	movs	r3, #1
 800c344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d001      	beq.n	800c352 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c34e:	f7f4 fe15 	bl	8000f7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c358:	7bfa      	ldrb	r2, [r7, #15]
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fa4a 	bl	800a7f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f9f2 	bl	800a752 <USBD_LL_Reset>
}
 800c36e:	bf00      	nop
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fa45 	bl	800a816 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	6812      	ldr	r2, [r2, #0]
 800c39a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c39e:	f043 0301 	orr.w	r3, r3, #1
 800c3a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d005      	beq.n	800c3b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3ac:	4b04      	ldr	r3, [pc, #16]	@ (800c3c0 <HAL_PCD_SuspendCallback+0x48>)
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	4a03      	ldr	r2, [pc, #12]	@ (800c3c0 <HAL_PCD_SuspendCallback+0x48>)
 800c3b2:	f043 0306 	orr.w	r3, r3, #6
 800c3b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	e000ed00 	.word	0xe000ed00

0800c3c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fa35 	bl	800a842 <USBD_LL_Resume>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fa8d 	bl	800a916 <USBD_LL_IsoOUTIncomplete>
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c416:	78fa      	ldrb	r2, [r7, #3]
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fa49 	bl	800a8b2 <USBD_LL_IsoINIncomplete>
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe fa9f 	bl	800a97a <USBD_LL_DevConnected>
}
 800c43c:	bf00      	nop
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fa9c 	bl	800a990 <USBD_LL_DevDisconnected>
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d13c      	bne.n	800c4ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c470:	4a20      	ldr	r2, [pc, #128]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a1e      	ldr	r2, [pc, #120]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c47c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c480:	4b1c      	ldr	r3, [pc, #112]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c482:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c488:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c48a:	2204      	movs	r2, #4
 800c48c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c48e:	4b19      	ldr	r3, [pc, #100]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c490:	2202      	movs	r2, #2
 800c492:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c494:	4b17      	ldr	r3, [pc, #92]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c496:	2200      	movs	r2, #0
 800c498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c49a:	4b16      	ldr	r3, [pc, #88]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c49c:	2202      	movs	r2, #2
 800c49e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c4a0:	4b14      	ldr	r3, [pc, #80]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c4a6:	4b13      	ldr	r3, [pc, #76]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c4ac:	4b11      	ldr	r3, [pc, #68]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c4b2:	4b10      	ldr	r3, [pc, #64]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c4be:	480d      	ldr	r0, [pc, #52]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4c0:	f7f7 fb87 	bl	8003bd2 <HAL_PCD_Init>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c4ca:	f7f4 fd57 	bl	8000f7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c4ce:	2180      	movs	r1, #128	@ 0x80
 800c4d0:	4808      	ldr	r0, [pc, #32]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4d2:	f7f8 fdde 	bl	8005092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c4d6:	2240      	movs	r2, #64	@ 0x40
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4806      	ldr	r0, [pc, #24]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4dc:	f7f8 fd92 	bl	8005004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c4e0:	2280      	movs	r2, #128	@ 0x80
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	4803      	ldr	r0, [pc, #12]	@ (800c4f4 <USBD_LL_Init+0x94>)
 800c4e6:	f7f8 fd8d 	bl	8005004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	20001640 	.word	0x20001640

0800c4f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f7 fc7c 	bl	8003e0c <HAL_PCD_Start>
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 f942 	bl	800c7a4 <USBD_Get_USB_Status>
 800c520:	4603      	mov	r3, r0
 800c522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c524:	7bbb      	ldrb	r3, [r7, #14]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	4608      	mov	r0, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	461a      	mov	r2, r3
 800c53c:	4603      	mov	r3, r0
 800c53e:	70fb      	strb	r3, [r7, #3]
 800c540:	460b      	mov	r3, r1
 800c542:	70bb      	strb	r3, [r7, #2]
 800c544:	4613      	mov	r3, r2
 800c546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c556:	78bb      	ldrb	r3, [r7, #2]
 800c558:	883a      	ldrh	r2, [r7, #0]
 800c55a:	78f9      	ldrb	r1, [r7, #3]
 800c55c:	f7f8 f94d 	bl	80047fa <HAL_PCD_EP_Open>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f91c 	bl	800c7a4 <USBD_Get_USB_Status>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c570:	7bbb      	ldrb	r3, [r7, #14]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7f8 f996 	bl	80048ca <HAL_PCD_EP_Close>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 f8fd 	bl	800c7a4 <USBD_Get_USB_Status>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5d2:	78fa      	ldrb	r2, [r7, #3]
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f8 fa6e 	bl	8004ab8 <HAL_PCD_EP_SetStall>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f8de 	bl	800c7a4 <USBD_Get_USB_Status>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	4611      	mov	r1, r2
 800c614:	4618      	mov	r0, r3
 800c616:	f7f8 fab3 	bl	8004b80 <HAL_PCD_EP_ClrStall>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f8bf 	bl	800c7a4 <USBD_Get_USB_Status>
 800c626:	4603      	mov	r3, r0
 800c628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da0b      	bge.n	800c668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c656:	68f9      	ldr	r1, [r7, #12]
 800c658:	4613      	mov	r3, r2
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	4413      	add	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	440b      	add	r3, r1
 800c662:	333e      	adds	r3, #62	@ 0x3e
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	e00b      	b.n	800c680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c66e:	68f9      	ldr	r1, [r7, #12]
 800c670:	4613      	mov	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c67e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6a6:	78fa      	ldrb	r2, [r7, #3]
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f8 f880 	bl	80047b0 <HAL_PCD_SetAddress>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f874 	bl	800c7a4 <USBD_Get_USB_Status>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b086      	sub	sp, #24
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	60f8      	str	r0, [r7, #12]
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	603b      	str	r3, [r7, #0]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c6e8:	7af9      	ldrb	r1, [r7, #11]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	f7f8 f999 	bl	8004a24 <HAL_PCD_EP_Transmit>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f853 	bl	800c7a4 <USBD_Get_USB_Status>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c702:	7dbb      	ldrb	r3, [r7, #22]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	460b      	mov	r3, r1
 800c71a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c72a:	7af9      	ldrb	r1, [r7, #11]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	f7f8 f915 	bl	800495e <HAL_PCD_EP_Receive>
 800c734:	4603      	mov	r3, r0
 800c736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f832 	bl	800c7a4 <USBD_Get_USB_Status>
 800c740:	4603      	mov	r3, r0
 800c742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c744:	7dbb      	ldrb	r3, [r7, #22]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b082      	sub	sp, #8
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	460b      	mov	r3, r1
 800c758:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c760:	78fa      	ldrb	r2, [r7, #3]
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f7f8 f945 	bl	80049f4 <HAL_PCD_EP_GetRxCount>
 800c76a:	4603      	mov	r3, r0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c77c:	4b03      	ldr	r3, [pc, #12]	@ (800c78c <USBD_static_malloc+0x18>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	20001b4c 	.word	0x20001b4c

0800c790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]

}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	d817      	bhi.n	800c7e8 <USBD_Get_USB_Status+0x44>
 800c7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c0 <USBD_Get_USB_Status+0x1c>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7d1 	.word	0x0800c7d1
 800c7c4:	0800c7d7 	.word	0x0800c7d7
 800c7c8:	0800c7dd 	.word	0x0800c7dd
 800c7cc:	0800c7e3 	.word	0x0800c7e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d4:	e00b      	b.n	800c7ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7da:	e008      	b.n	800c7ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e0:	e005      	b.n	800c7ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e6:	e002      	b.n	800c7ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ec:	bf00      	nop
  }
  return usb_status;
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <button_state_determ>:
uint8_t long_state_r = 0;
uint32_t time_key_r = 0;
uint8_t but_flag_ext = 0 ;

void button_state_determ()
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0

		  uint32_t ms = HAL_GetTick();
 800c802:	f7f5 f84b 	bl	800189c <HAL_GetTick>
 800c806:	6078      	str	r0, [r7, #4]
		  uint8_t key_state_l = HAL_GPIO_ReadPin(BUT_0_GPIO_Port, BUT_0_Pin);
 800c808:	2108      	movs	r1, #8
 800c80a:	4850      	ldr	r0, [pc, #320]	@ (800c94c <button_state_determ+0x150>)
 800c80c:	f7f6 f9d8 	bl	8002bc0 <HAL_GPIO_ReadPin>
 800c810:	4603      	mov	r3, r0
 800c812:	70fb      	strb	r3, [r7, #3]

		  if(key_state_l == 1 && !short_state_l && (ms - time_key_l) > 50)
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d113      	bne.n	800c842 <button_state_determ+0x46>
 800c81a:	4b4d      	ldr	r3, [pc, #308]	@ (800c950 <button_state_determ+0x154>)
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10f      	bne.n	800c842 <button_state_determ+0x46>
 800c822:	4b4c      	ldr	r3, [pc, #304]	@ (800c954 <button_state_determ+0x158>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b32      	cmp	r3, #50	@ 0x32
 800c82c:	d909      	bls.n	800c842 <button_state_determ+0x46>
		  {
		    short_state_l = 1;
 800c82e:	4b48      	ldr	r3, [pc, #288]	@ (800c950 <button_state_determ+0x154>)
 800c830:	2201      	movs	r2, #1
 800c832:	701a      	strb	r2, [r3, #0]
		    long_state_l = 0;
 800c834:	4b48      	ldr	r3, [pc, #288]	@ (800c958 <button_state_determ+0x15c>)
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 800c83a:	4a46      	ldr	r2, [pc, #280]	@ (800c954 <button_state_determ+0x158>)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	e02e      	b.n	800c8a0 <button_state_determ+0xa4>
		  }
		  else if(key_state_l == 1 && !long_state_l && (ms - time_key_l) > 700)
 800c842:	78fb      	ldrb	r3, [r7, #3]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d111      	bne.n	800c86c <button_state_determ+0x70>
 800c848:	4b43      	ldr	r3, [pc, #268]	@ (800c958 <button_state_determ+0x15c>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10d      	bne.n	800c86c <button_state_determ+0x70>
 800c850:	4b40      	ldr	r3, [pc, #256]	@ (800c954 <button_state_determ+0x158>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800c85c:	d906      	bls.n	800c86c <button_state_determ+0x70>
		  {

		    long_state_l = 1;
 800c85e:	4b3e      	ldr	r3, [pc, #248]	@ (800c958 <button_state_determ+0x15c>)
 800c860:	2201      	movs	r2, #1
 800c862:	701a      	strb	r2, [r3, #0]
		    but_state_left = BUT_LONG;
 800c864:	4b3d      	ldr	r3, [pc, #244]	@ (800c95c <button_state_determ+0x160>)
 800c866:	2201      	movs	r2, #1
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	e019      	b.n	800c8a0 <button_state_determ+0xa4>
		   // sleep_counter = 0;
		  }
		  else if(key_state_l == 0 && short_state_l && (ms - time_key_l) > 50)
 800c86c:	78fb      	ldrb	r3, [r7, #3]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d116      	bne.n	800c8a0 <button_state_determ+0xa4>
 800c872:	4b37      	ldr	r3, [pc, #220]	@ (800c950 <button_state_determ+0x154>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d012      	beq.n	800c8a0 <button_state_determ+0xa4>
 800c87a:	4b36      	ldr	r3, [pc, #216]	@ (800c954 <button_state_determ+0x158>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b32      	cmp	r3, #50	@ 0x32
 800c884:	d90c      	bls.n	800c8a0 <button_state_determ+0xa4>
		  {
		    short_state_l = 0;
 800c886:	4b32      	ldr	r3, [pc, #200]	@ (800c950 <button_state_determ+0x154>)
 800c888:	2200      	movs	r2, #0
 800c88a:	701a      	strb	r2, [r3, #0]
		    time_key_l = ms;
 800c88c:	4a31      	ldr	r2, [pc, #196]	@ (800c954 <button_state_determ+0x158>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]

		    if(!long_state_l)
 800c892:	4b31      	ldr	r3, [pc, #196]	@ (800c958 <button_state_determ+0x15c>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <button_state_determ+0xa4>
		    {
		      // левая кнопка , действие на короткое нажатие
		    	but_state_left = BUT_SHORT;
 800c89a:	4b30      	ldr	r3, [pc, #192]	@ (800c95c <button_state_determ+0x160>)
 800c89c:	2202      	movs	r2, #2
 800c89e:	701a      	strb	r2, [r3, #0]
		    	//sleep_counter = 0;
		    }
		  }
	          ms = HAL_GetTick();
 800c8a0:	f7f4 fffc 	bl	800189c <HAL_GetTick>
 800c8a4:	6078      	str	r0, [r7, #4]
		  	  uint8_t key_state_r = HAL_GPIO_ReadPin(BUT_1_GPIO_Port, BUT_1_Pin);
 800c8a6:	2104      	movs	r1, #4
 800c8a8:	4828      	ldr	r0, [pc, #160]	@ (800c94c <button_state_determ+0x150>)
 800c8aa:	f7f6 f989 	bl	8002bc0 <HAL_GPIO_ReadPin>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	70bb      	strb	r3, [r7, #2]

		  	  if(key_state_r == 1 && !short_state_r && (ms - time_key_r) > 50)
 800c8b2:	78bb      	ldrb	r3, [r7, #2]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d113      	bne.n	800c8e0 <button_state_determ+0xe4>
 800c8b8:	4b29      	ldr	r3, [pc, #164]	@ (800c960 <button_state_determ+0x164>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10f      	bne.n	800c8e0 <button_state_determ+0xe4>
 800c8c0:	4b28      	ldr	r3, [pc, #160]	@ (800c964 <button_state_determ+0x168>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	2b32      	cmp	r3, #50	@ 0x32
 800c8ca:	d909      	bls.n	800c8e0 <button_state_determ+0xe4>
		  	  {
		  	    short_state_r = 1;
 800c8cc:	4b24      	ldr	r3, [pc, #144]	@ (800c960 <button_state_determ+0x164>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	701a      	strb	r2, [r3, #0]
		  	    long_state_r = 0;
 800c8d2:	4b25      	ldr	r3, [pc, #148]	@ (800c968 <button_state_determ+0x16c>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 800c8d8:	4a22      	ldr	r2, [pc, #136]	@ (800c964 <button_state_determ+0x168>)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	e02e      	b.n	800c93e <button_state_determ+0x142>
		  	  }
		  	  else if(key_state_r == 1 && !long_state_r && (ms - time_key_r) > 700)
 800c8e0:	78bb      	ldrb	r3, [r7, #2]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d111      	bne.n	800c90a <button_state_determ+0x10e>
 800c8e6:	4b20      	ldr	r3, [pc, #128]	@ (800c968 <button_state_determ+0x16c>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10d      	bne.n	800c90a <button_state_determ+0x10e>
 800c8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c964 <button_state_determ+0x168>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800c8fa:	d906      	bls.n	800c90a <button_state_determ+0x10e>
		  	  {
		  		// левая кнопка , действие на длительное нажатие
		  		but_state_right = BUT_LONG;
 800c8fc:	4b1b      	ldr	r3, [pc, #108]	@ (800c96c <button_state_determ+0x170>)
 800c8fe:	2201      	movs	r2, #1
 800c900:	701a      	strb	r2, [r3, #0]
		  		long_state_r = 1;
 800c902:	4b19      	ldr	r3, [pc, #100]	@ (800c968 <button_state_determ+0x16c>)
 800c904:	2201      	movs	r2, #1
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	e019      	b.n	800c93e <button_state_determ+0x142>
		  		//sleep_counter = 0;
		  	  }
		  	  else if(key_state_r == 0 && short_state_r && (ms - time_key_r) > 50)
 800c90a:	78bb      	ldrb	r3, [r7, #2]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d116      	bne.n	800c93e <button_state_determ+0x142>
 800c910:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <button_state_determ+0x164>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d012      	beq.n	800c93e <button_state_determ+0x142>
 800c918:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <button_state_determ+0x168>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b32      	cmp	r3, #50	@ 0x32
 800c922:	d90c      	bls.n	800c93e <button_state_determ+0x142>
		  	  {
		  	    short_state_r = 0;
 800c924:	4b0e      	ldr	r3, [pc, #56]	@ (800c960 <button_state_determ+0x164>)
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
		  	    time_key_r = ms;
 800c92a:	4a0e      	ldr	r2, [pc, #56]	@ (800c964 <button_state_determ+0x168>)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6013      	str	r3, [r2, #0]

		  	 if(!long_state_r)
 800c930:	4b0d      	ldr	r3, [pc, #52]	@ (800c968 <button_state_determ+0x16c>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <button_state_determ+0x142>
		  	    {
		  		 	 but_state_right = BUT_SHORT;
 800c938:	4b0c      	ldr	r3, [pc, #48]	@ (800c96c <button_state_determ+0x170>)
 800c93a:	2202      	movs	r2, #2
 800c93c:	701a      	strb	r2, [r3, #0]
		  		 	 //sleep_counter = 0;
		  	    }
		  	  }
		  	 but_flag_ext = 0;
 800c93e:	4b0c      	ldr	r3, [pc, #48]	@ (800c970 <button_state_determ+0x174>)
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	40020800 	.word	0x40020800
 800c950:	20001d6e 	.word	0x20001d6e
 800c954:	20001d70 	.word	0x20001d70
 800c958:	20001d6f 	.word	0x20001d6f
 800c95c:	20001d6c 	.word	0x20001d6c
 800c960:	20001d74 	.word	0x20001d74
 800c964:	20001d78 	.word	0x20001d78
 800c968:	20001d75 	.word	0x20001d75
 800c96c:	20001d6d 	.word	0x20001d6d
 800c970:	20001d7c 	.word	0x20001d7c

0800c974 <but_state_reset>:

void but_state_reset()
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
	    but_state_left = BUT_RESET;
 800c978:	4b05      	ldr	r3, [pc, #20]	@ (800c990 <but_state_reset+0x1c>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
	    but_state_right = BUT_RESET;
 800c97e:	4b05      	ldr	r3, [pc, #20]	@ (800c994 <but_state_reset+0x20>)
 800c980:	2200      	movs	r2, #0
 800c982:	701a      	strb	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20001d6c 	.word	0x20001d6c
 800c994:	20001d6d 	.word	0x20001d6d

0800c998 <display_norm_action>:
uint8_t gl_loading_bar_stop_flag = 0;
uint16_t gl_measured_result = 0;
uint8_t gl_product_detect = 0;

void display_norm_action()
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
	if(prod_sel_flag.sub_norm == 0)
 800c99c:	4b0b      	ldr	r3, [pc, #44]	@ (800c9cc <display_norm_action+0x34>)
 800c99e:	785b      	ldrb	r3, [r3, #1]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10b      	bne.n	800c9bc <display_norm_action+0x24>
		{
			prod_sel_flag.sub_norm = 1;
 800c9a4:	4b09      	ldr	r3, [pc, #36]	@ (800c9cc <display_norm_action+0x34>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	705a      	strb	r2, [r3, #1]
			ST7735_FillScreen(ST7735_BLACK);
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	f7ff f9c8 	bl	800bd40 <ST7735_FillScreen>
			display_product_norm(gl_id_to_display, ENGLISH);
 800c9b0:	4b07      	ldr	r3, [pc, #28]	@ (800c9d0 <display_norm_action+0x38>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 fd00 	bl	800d3bc <display_product_norm>
		}

	gl_product_detect = adc_product_detect();
 800c9bc:	f000 fe46 	bl	800d64c <adc_product_detect>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	4b03      	ldr	r3, [pc, #12]	@ (800c9d4 <display_norm_action+0x3c>)
 800c9c6:	701a      	strb	r2, [r3, #0]
}
 800c9c8:	bf00      	nop
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20001d84 	.word	0x20001d84
 800c9d0:	20000945 	.word	0x20000945
 800c9d4:	20001d7f 	.word	0x20001d7f

0800c9d8 <measuring_process>:
void measuring_process()
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	af00      	add	r7, sp, #0

	if(prod_sel_flag.sub_sub_meas_process == 0)
 800c9dc:	4b08      	ldr	r3, [pc, #32]	@ (800ca00 <measuring_process+0x28>)
 800c9de:	795b      	ldrb	r3, [r3, #5]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <measuring_process+0x18>
	{
		prod_sel_flag.sub_sub_meas_process = 1;
 800c9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ca00 <measuring_process+0x28>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	715a      	strb	r2, [r3, #5]
		//HAL_TIM_Base_Start_IT(&htim2);
		ST7735_FillScreen(ST7735_BLACK);
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	f7ff f9a8 	bl	800bd40 <ST7735_FillScreen>
	}
	display_all_measuring_process_and_led(100, gl_id_to_display);
 800c9f0:	4b04      	ldr	r3, [pc, #16]	@ (800ca04 <measuring_process+0x2c>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	2064      	movs	r0, #100	@ 0x64
 800c9f8:	f000 f806 	bl	800ca08 <display_all_measuring_process_and_led>
}
 800c9fc:	bf00      	nop
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20001d84 	.word	0x20001d84
 800ca04:	20000945 	.word	0x20000945

0800ca08 <display_all_measuring_process_and_led>:

void display_all_measuring_process_and_led(uint16_t measured_value, uint8_t id)
{
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b087      	sub	sp, #28
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	4603      	mov	r3, r0
 800ca10:	460a      	mov	r2, r1
 800ca12:	80fb      	strh	r3, [r7, #6]
 800ca14:	4613      	mov	r3, r2
 800ca16:	717b      	strb	r3, [r7, #5]

	  if(gl_led_pwm_state==LED_PWM_CCR_STABLE)
 800ca18:	4b70      	ldr	r3, [pc, #448]	@ (800cbdc <display_all_measuring_process_and_led+0x1d4>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d13f      	bne.n	800caa0 <display_all_measuring_process_and_led+0x98>
	  {
		  SPI_Flash_to_LCD(LOADING_1,28,14);
 800ca20:	230e      	movs	r3, #14
 800ca22:	9301      	str	r3, [sp, #4]
 800ca24:	231c      	movs	r3, #28
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	2334      	movs	r3, #52	@ 0x34
 800ca2a:	2234      	movs	r2, #52	@ 0x34
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	2008      	movs	r0, #8
 800ca30:	f000 fec8 	bl	800d7c4 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,80,14);
 800ca34:	230e      	movs	r3, #14
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	2350      	movs	r3, #80	@ 0x50
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	2334      	movs	r3, #52	@ 0x34
 800ca3e:	2234      	movs	r2, #52	@ 0x34
 800ca40:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800ca44:	2008      	movs	r0, #8
 800ca46:	f000 febd 	bl	800d7c4 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,28,14);
 800ca4a:	230e      	movs	r3, #14
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	231c      	movs	r3, #28
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	2334      	movs	r3, #52	@ 0x34
 800ca54:	2234      	movs	r2, #52	@ 0x34
 800ca56:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 800ca5a:	2008      	movs	r0, #8
 800ca5c:	f000 feb2 	bl	800d7c4 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_2,28,14);
 800ca60:	230e      	movs	r3, #14
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	231c      	movs	r3, #28
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	2334      	movs	r3, #52	@ 0x34
 800ca6a:	2234      	movs	r2, #52	@ 0x34
 800ca6c:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800ca70:	2008      	movs	r0, #8
 800ca72:	f000 fea7 	bl	800d7c4 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_1,80,14);
 800ca76:	230e      	movs	r3, #14
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	2350      	movs	r3, #80	@ 0x50
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2334      	movs	r3, #52	@ 0x34
 800ca80:	2234      	movs	r2, #52	@ 0x34
 800ca82:	2100      	movs	r1, #0
 800ca84:	2008      	movs	r0, #8
 800ca86:	f000 fe9d 	bl	800d7c4 <SPI_Flash_to_LCD>
		  SPI_Flash_to_LCD(LOADING_3,80,14);
 800ca8a:	230e      	movs	r3, #14
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	2350      	movs	r3, #80	@ 0x50
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	2334      	movs	r3, #52	@ 0x34
 800ca94:	2234      	movs	r2, #52	@ 0x34
 800ca96:	f44f 5129 	mov.w	r1, #10816	@ 0x2a40
 800ca9a:	2008      	movs	r0, #8
 800ca9c:	f000 fe92 	bl	800d7c4 <SPI_Flash_to_LCD>
	  }
	  if(gl_led_pwm_state ==  LED_PWM_CCR_STABLE)
 800caa0:	4b4e      	ldr	r3, [pc, #312]	@ (800cbdc <display_all_measuring_process_and_led+0x1d4>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d102      	bne.n	800caae <display_all_measuring_process_and_led+0xa6>
	  {
		  //gl_measured_result = adc_probe_polling();
		  led_accumulation();
 800caa8:	f000 f982 	bl	800cdb0 <led_accumulation>
		  //led_1hz_counter = 0;
		  gl_led_color_result_blink_counter = 0;
		  gl_loading_bar_stop_flag = 0 ;
		  gl_led_increment = 0;
	  }
}
 800caac:	e091      	b.n	800cbd2 <display_all_measuring_process_and_led+0x1ca>
	  else if(gl_led_pwm_state ==  LED_PWM_CCR_CHANGEBALE && led_1hz_counter && gl_led_color_result_blink_counter <= 3 && !gl_loading_bar_stop_flag )
 800caae:	4b4b      	ldr	r3, [pc, #300]	@ (800cbdc <display_all_measuring_process_and_led+0x1d4>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d173      	bne.n	800cb9e <display_all_measuring_process_and_led+0x196>
 800cab6:	4b4a      	ldr	r3, [pc, #296]	@ (800cbe0 <display_all_measuring_process_and_led+0x1d8>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d06f      	beq.n	800cb9e <display_all_measuring_process_and_led+0x196>
 800cabe:	4b49      	ldr	r3, [pc, #292]	@ (800cbe4 <display_all_measuring_process_and_led+0x1dc>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d86b      	bhi.n	800cb9e <display_all_measuring_process_and_led+0x196>
 800cac6:	4b48      	ldr	r3, [pc, #288]	@ (800cbe8 <display_all_measuring_process_and_led+0x1e0>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d167      	bne.n	800cb9e <display_all_measuring_process_and_led+0x196>
		  ST7735_FillScreen(ST7735_BLACK);
 800cace:	2000      	movs	r0, #0
 800cad0:	f7ff f936 	bl	800bd40 <ST7735_FillScreen>
		  HAL_TIM_Base_Start_IT(&htim2);
 800cad4:	4845      	ldr	r0, [pc, #276]	@ (800cbec <display_all_measuring_process_and_led+0x1e4>)
 800cad6:	f7fa fa35 	bl	8006f44 <HAL_TIM_Base_Start_IT>
		  uint8_t load_bar_index = (conduct_acidity_loading_bar_calculation(product_array[id].conductivity, product_array[id].temperature_coeff, measured_value));
 800cada:	797a      	ldrb	r2, [r7, #5]
 800cadc:	4944      	ldr	r1, [pc, #272]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	3302      	adds	r3, #2
 800caea:	8818      	ldrh	r0, [r3, #0]
 800caec:	797a      	ldrb	r2, [r7, #5]
 800caee:	4940      	ldr	r1, [pc, #256]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800caf0:	4613      	mov	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	440b      	add	r3, r1
 800cafa:	3306      	adds	r3, #6
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	88fa      	ldrh	r2, [r7, #6]
 800cb00:	4619      	mov	r1, r3
 800cb02:	f000 fb7b 	bl	800d1fc <conduct_acidity_loading_bar_calculation>
 800cb06:	4603      	mov	r3, r0
 800cb08:	73fb      	strb	r3, [r7, #15]
		  uint8_t result_status = display_loading_status(load_bar_index, product_array[id].id);
 800cb0a:	797a      	ldrb	r2, [r7, #5]
 800cb0c:	4938      	ldr	r1, [pc, #224]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	440b      	add	r3, r1
 800cb18:	781a      	ldrb	r2, [r3, #0]
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fbbe 	bl	800d2a0 <display_loading_status>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73bb      	strb	r3, [r7, #14]
		  display_measuring_product(product_array[id].addr_block_S, product_array[id].addr_offset_S, HORIZ_AFTER_MEASURING);
 800cb28:	797a      	ldrb	r2, [r7, #5]
 800cb2a:	4931      	ldr	r1, [pc, #196]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	3307      	adds	r3, #7
 800cb38:	7818      	ldrb	r0, [r3, #0]
 800cb3a:	797a      	ldrb	r2, [r7, #5]
 800cb3c:	492c      	ldr	r1, [pc, #176]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	440b      	add	r3, r1
 800cb48:	3308      	adds	r3, #8
 800cb4a:	8819      	ldrh	r1, [r3, #0]
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	2307      	movs	r3, #7
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	2324      	movs	r3, #36	@ 0x24
 800cb56:	2224      	movs	r2, #36	@ 0x24
 800cb58:	f000 fc01 	bl	800d35e <display_measuring_product>
		  display_measuring_text(product_array[id].name , product_array[id].conductivity, measured_value, result_status, ENGLISH);
 800cb5c:	797a      	ldrb	r2, [r7, #5]
 800cb5e:	4924      	ldr	r1, [pc, #144]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cb60:	4613      	mov	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	440b      	add	r3, r1
 800cb6a:	3310      	adds	r3, #16
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	797a      	ldrb	r2, [r7, #5]
 800cb70:	491f      	ldr	r1, [pc, #124]	@ (800cbf0 <display_all_measuring_process_and_led+0x1e8>)
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3302      	adds	r3, #2
 800cb7e:	8819      	ldrh	r1, [r3, #0]
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	88fa      	ldrh	r2, [r7, #6]
 800cb84:	2401      	movs	r4, #1
 800cb86:	9400      	str	r4, [sp, #0]
 800cb88:	f000 fca6 	bl	800d4d8 <display_measuring_text>
		  led_measuring_results_reflection(result_status);
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f88a 	bl	800cca8 <led_measuring_results_reflection>
		  gl_loading_bar_stop_flag = 1;
 800cb94:	4b14      	ldr	r3, [pc, #80]	@ (800cbe8 <display_all_measuring_process_and_led+0x1e0>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	701a      	strb	r2, [r3, #0]
	  {
 800cb9a:	bf00      	nop
}
 800cb9c:	e019      	b.n	800cbd2 <display_all_measuring_process_and_led+0x1ca>
	  else if (gl_led_color_result_blink_counter > 3)
 800cb9e:	4b11      	ldr	r3, [pc, #68]	@ (800cbe4 <display_all_measuring_process_and_led+0x1dc>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d915      	bls.n	800cbd2 <display_all_measuring_process_and_led+0x1ca>
		  HAL_TIM_Base_Stop_IT(&htim2);
 800cba6:	4811      	ldr	r0, [pc, #68]	@ (800cbec <display_all_measuring_process_and_led+0x1e4>)
 800cba8:	f7fa fa2e 	bl	8007008 <HAL_TIM_Base_Stop_IT>
		  led_off();
 800cbac:	f000 f824 	bl	800cbf8 <led_off>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800cbb0:	2108      	movs	r1, #8
 800cbb2:	480e      	ldr	r0, [pc, #56]	@ (800cbec <display_all_measuring_process_and_led+0x1e4>)
 800cbb4:	f7fa fb60 	bl	8007278 <HAL_TIM_PWM_Stop>
		  TIM2->CCR3 = 0;
 800cbb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	63da      	str	r2, [r3, #60]	@ 0x3c
		  gl_led_color_result_blink_counter = 0;
 800cbc0:	4b08      	ldr	r3, [pc, #32]	@ (800cbe4 <display_all_measuring_process_and_led+0x1dc>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	701a      	strb	r2, [r3, #0]
		  gl_loading_bar_stop_flag = 0 ;
 800cbc6:	4b08      	ldr	r3, [pc, #32]	@ (800cbe8 <display_all_measuring_process_and_led+0x1e0>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	701a      	strb	r2, [r3, #0]
		  gl_led_increment = 0;
 800cbcc:	4b09      	ldr	r3, [pc, #36]	@ (800cbf4 <display_all_measuring_process_and_led+0x1ec>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
}
 800cbd2:	bf00      	nop
 800cbd4:	3714      	adds	r7, #20
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd90      	pop	{r4, r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000112 	.word	0x20000112
 800cbe0:	2000094e 	.word	0x2000094e
 800cbe4:	2000094f 	.word	0x2000094f
 800cbe8:	20001d7e 	.word	0x20001d7e
 800cbec:	2000086c 	.word	0x2000086c
 800cbf0:	20000118 	.word	0x20000118
 800cbf4:	20001d7d 	.word	0x20001d7d

0800cbf8 <led_off>:

void led_off()
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_ANOD_GPIO_Port, LED_ANOD_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	2104      	movs	r1, #4
 800cc00:	4827      	ldr	r0, [pc, #156]	@ (800cca0 <led_off+0xa8>)
 800cc02:	f7f5 fff5 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800cc06:	2201      	movs	r2, #1
 800cc08:	2120      	movs	r1, #32
 800cc0a:	4825      	ldr	r0, [pc, #148]	@ (800cca0 <led_off+0xa8>)
 800cc0c:	f7f5 fff0 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800cc10:	2201      	movs	r2, #1
 800cc12:	2110      	movs	r1, #16
 800cc14:	4823      	ldr	r0, [pc, #140]	@ (800cca4 <led_off+0xac>)
 800cc16:	f7f5 ffeb 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	2180      	movs	r1, #128	@ 0x80
 800cc1e:	4821      	ldr	r0, [pc, #132]	@ (800cca4 <led_off+0xac>)
 800cc20:	f7f5 ffe6 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_SET);
 800cc24:	2201      	movs	r2, #1
 800cc26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cc2a:	481e      	ldr	r0, [pc, #120]	@ (800cca4 <led_off+0xac>)
 800cc2c:	f7f5 ffe0 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800cc30:	2201      	movs	r2, #1
 800cc32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc36:	481a      	ldr	r0, [pc, #104]	@ (800cca0 <led_off+0xa8>)
 800cc38:	f7f5 ffda 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	2108      	movs	r1, #8
 800cc40:	4817      	ldr	r0, [pc, #92]	@ (800cca0 <led_off+0xa8>)
 800cc42:	f7f5 ffd5 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800cc46:	2201      	movs	r2, #1
 800cc48:	2101      	movs	r1, #1
 800cc4a:	4816      	ldr	r0, [pc, #88]	@ (800cca4 <led_off+0xac>)
 800cc4c:	f7f5 ffd0 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800cc50:	2201      	movs	r2, #1
 800cc52:	2120      	movs	r1, #32
 800cc54:	4813      	ldr	r0, [pc, #76]	@ (800cca4 <led_off+0xac>)
 800cc56:	f7f5 ffcb 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_SET);
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc60:	4810      	ldr	r0, [pc, #64]	@ (800cca4 <led_off+0xac>)
 800cc62:	f7f5 ffc5 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800cc66:	2201      	movs	r2, #1
 800cc68:	2102      	movs	r1, #2
 800cc6a:	480d      	ldr	r0, [pc, #52]	@ (800cca0 <led_off+0xa8>)
 800cc6c:	f7f5 ffc0 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800cc70:	2201      	movs	r2, #1
 800cc72:	2110      	movs	r1, #16
 800cc74:	480a      	ldr	r0, [pc, #40]	@ (800cca0 <led_off+0xa8>)
 800cc76:	f7f5 ffbb 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	2102      	movs	r1, #2
 800cc7e:	4809      	ldr	r0, [pc, #36]	@ (800cca4 <led_off+0xac>)
 800cc80:	f7f5 ffb6 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800cc84:	2201      	movs	r2, #1
 800cc86:	2140      	movs	r1, #64	@ 0x40
 800cc88:	4806      	ldr	r0, [pc, #24]	@ (800cca4 <led_off+0xac>)
 800cc8a:	f7f5 ffb1 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_SET);
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc94:	4803      	ldr	r0, [pc, #12]	@ (800cca4 <led_off+0xac>)
 800cc96:	f7f5 ffab 	bl	8002bf0 <HAL_GPIO_WritePin>
};
 800cc9a:	bf00      	nop
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	40020400 	.word	0x40020400
 800cca4:	40020800 	.word	0x40020800

0800cca8 <led_measuring_results_reflection>:
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
};

void led_measuring_results_reflection(uint8_t status) //conduct or acidity measuarement result
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	71fb      	strb	r3, [r7, #7]

	led_off();
 800ccb2:	f7ff ffa1 	bl	800cbf8 <led_off>



	if(status == MEAS_RESULTS_IS_GOOD)
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d11a      	bne.n	800ccf2 <led_measuring_results_reflection+0x4a>
	{
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	2102      	movs	r1, #2
 800ccc0:	4839      	ldr	r0, [pc, #228]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800ccc2:	f7f5 ff95 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	2110      	movs	r1, #16
 800ccca:	4837      	ldr	r0, [pc, #220]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cccc:	f7f5 ff90 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	2102      	movs	r1, #2
 800ccd4:	4835      	ldr	r0, [pc, #212]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800ccd6:	f7f5 ff8b 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2140      	movs	r1, #64	@ 0x40
 800ccde:	4833      	ldr	r0, [pc, #204]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cce0:	f7f5 ff86 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800cce4:	2200      	movs	r2, #0
 800cce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ccea:	4830      	ldr	r0, [pc, #192]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800ccec:	f7f5 ff80 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
	}

}
 800ccf0:	e056      	b.n	800cda0 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d135      	bne.n	800cd64 <led_measuring_results_reflection+0xbc>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2102      	movs	r1, #2
 800ccfc:	482a      	ldr	r0, [pc, #168]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800ccfe:	f7f5 ff77 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800cd02:	2200      	movs	r2, #0
 800cd04:	2110      	movs	r1, #16
 800cd06:	4828      	ldr	r0, [pc, #160]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cd08:	f7f5 ff72 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2102      	movs	r1, #2
 800cd10:	4826      	ldr	r0, [pc, #152]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd12:	f7f5 ff6d 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800cd16:	2200      	movs	r2, #0
 800cd18:	2140      	movs	r1, #64	@ 0x40
 800cd1a:	4824      	ldr	r0, [pc, #144]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd1c:	f7f5 ff68 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800cd20:	2200      	movs	r2, #0
 800cd22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd26:	4821      	ldr	r0, [pc, #132]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd28:	f7f5 ff62 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd32:	481d      	ldr	r0, [pc, #116]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cd34:	f7f5 ff5c 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cd38:	2200      	movs	r2, #0
 800cd3a:	2108      	movs	r1, #8
 800cd3c:	481a      	ldr	r0, [pc, #104]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cd3e:	f7f5 ff57 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800cd42:	2200      	movs	r2, #0
 800cd44:	2101      	movs	r1, #1
 800cd46:	4819      	ldr	r0, [pc, #100]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd48:	f7f5 ff52 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2120      	movs	r1, #32
 800cd50:	4816      	ldr	r0, [pc, #88]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd52:	f7f5 ff4d 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800cd56:	2200      	movs	r2, #0
 800cd58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd5c:	4813      	ldr	r0, [pc, #76]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd5e:	f7f5 ff47 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800cd62:	e01d      	b.n	800cda0 <led_measuring_results_reflection+0xf8>
	else if(status == MEAS_RESULTS_IS_BAD)
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d11a      	bne.n	800cda0 <led_measuring_results_reflection+0xf8>
		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd70:	480d      	ldr	r0, [pc, #52]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cd72:	f7f5 ff3d 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cd76:	2200      	movs	r2, #0
 800cd78:	2108      	movs	r1, #8
 800cd7a:	480b      	ldr	r0, [pc, #44]	@ (800cda8 <led_measuring_results_reflection+0x100>)
 800cd7c:	f7f5 ff38 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800cd80:	2200      	movs	r2, #0
 800cd82:	2101      	movs	r1, #1
 800cd84:	4809      	ldr	r0, [pc, #36]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd86:	f7f5 ff33 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	2120      	movs	r1, #32
 800cd8e:	4807      	ldr	r0, [pc, #28]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd90:	f7f5 ff2e 	bl	8002bf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800cd94:	2200      	movs	r2, #0
 800cd96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd9a:	4804      	ldr	r0, [pc, #16]	@ (800cdac <led_measuring_results_reflection+0x104>)
 800cd9c:	f7f5 ff28 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	40020400 	.word	0x40020400
 800cdac:	40020800 	.word	0x40020800

0800cdb0 <led_accumulation>:

void led_accumulation()
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0



	if(gl_int_5hz_tim2)
 800cdb4:	4bc0      	ldr	r3, [pc, #768]	@ (800d0b8 <led_accumulation+0x308>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 8212 	beq.w	800d1e2 <led_accumulation+0x432>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 800cdbe:	48bf      	ldr	r0, [pc, #764]	@ (800d0bc <led_accumulation+0x30c>)
 800cdc0:	f7fa f8c0 	bl	8006f44 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800cdc4:	2108      	movs	r1, #8
 800cdc6:	48bd      	ldr	r0, [pc, #756]	@ (800d0bc <led_accumulation+0x30c>)
 800cdc8:	f7fa f9a6 	bl	8007118 <HAL_TIM_PWM_Start>
		TIM2->CCR3 = 350;
 800cdcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cdd0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cdd4:	63da      	str	r2, [r3, #60]	@ 0x3c
		gl_int_5hz_tim2 = 0;
 800cdd6:	4bb8      	ldr	r3, [pc, #736]	@ (800d0b8 <led_accumulation+0x308>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	701a      	strb	r2, [r3, #0]

		if(gl_led_increment < 15 && gl_led_increment > 0)
 800cddc:	4bb8      	ldr	r3, [pc, #736]	@ (800d0c0 <led_accumulation+0x310>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b0e      	cmp	r3, #14
 800cde2:	d809      	bhi.n	800cdf8 <led_accumulation+0x48>
 800cde4:	4bb6      	ldr	r3, [pc, #728]	@ (800d0c0 <led_accumulation+0x310>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d005      	beq.n	800cdf8 <led_accumulation+0x48>
		{
			gl_led_increment++;
 800cdec:	4bb4      	ldr	r3, [pc, #720]	@ (800d0c0 <led_accumulation+0x310>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	4bb2      	ldr	r3, [pc, #712]	@ (800d0c0 <led_accumulation+0x310>)
 800cdf6:	701a      	strb	r2, [r3, #0]
		}

		switch(gl_led_increment)
 800cdf8:	4bb1      	ldr	r3, [pc, #708]	@ (800d0c0 <led_accumulation+0x310>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	2b0f      	cmp	r3, #15
 800cdfe:	f200 81f0 	bhi.w	800d1e2 <led_accumulation+0x432>
 800ce02:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <led_accumulation+0x58>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce49 	.word	0x0800ce49
 800ce0c:	0800d1e3 	.word	0x0800d1e3
 800ce10:	0800ce5b 	.word	0x0800ce5b
 800ce14:	0800ce7d 	.word	0x0800ce7d
 800ce18:	0800cebd 	.word	0x0800cebd
 800ce1c:	0800cefb 	.word	0x0800cefb
 800ce20:	0800cf59 	.word	0x0800cf59
 800ce24:	0800cfdb 	.word	0x0800cfdb
 800ce28:	0800d019 	.word	0x0800d019
 800ce2c:	0800d077 	.word	0x0800d077
 800ce30:	0800d0cd 	.word	0x0800d0cd
 800ce34:	0800d10b 	.word	0x0800d10b
 800ce38:	0800d12d 	.word	0x0800d12d
 800ce3c:	0800d16d 	.word	0x0800d16d
 800ce40:	0800d1ad 	.word	0x0800d1ad
 800ce44:	0800d1cf 	.word	0x0800d1cf
		{
		case 0:

			led_off();
 800ce48:	f7ff fed6 	bl	800cbf8 <led_off>
			gl_led_increment++;
 800ce4c:	4b9c      	ldr	r3, [pc, #624]	@ (800d0c0 <led_accumulation+0x310>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	4b9a      	ldr	r3, [pc, #616]	@ (800d0c0 <led_accumulation+0x310>)
 800ce56:	701a      	strb	r2, [r3, #0]
			break;
 800ce58:	e1c3      	b.n	800d1e2 <led_accumulation+0x432>
		case 2:


			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2104      	movs	r1, #4
 800ce5e:	4899      	ldr	r0, [pc, #612]	@ (800d0c4 <led_accumulation+0x314>)
 800ce60:	f7f5 fec6 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800ce64:	2200      	movs	r2, #0
 800ce66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ce6a:	4896      	ldr	r0, [pc, #600]	@ (800d0c4 <led_accumulation+0x314>)
 800ce6c:	f7f5 fec0 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800ce70:	2200      	movs	r2, #0
 800ce72:	2102      	movs	r1, #2
 800ce74:	4893      	ldr	r0, [pc, #588]	@ (800d0c4 <led_accumulation+0x314>)
 800ce76:	f7f5 febb 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800ce7a:	e1b2      	b.n	800d1e2 <led_accumulation+0x432>
		case 3:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	2104      	movs	r1, #4
 800ce80:	4890      	ldr	r0, [pc, #576]	@ (800d0c4 <led_accumulation+0x314>)
 800ce82:	f7f5 feb5 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800ce86:	2201      	movs	r2, #1
 800ce88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ce8c:	488d      	ldr	r0, [pc, #564]	@ (800d0c4 <led_accumulation+0x314>)
 800ce8e:	f7f5 feaf 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800ce92:	2201      	movs	r2, #1
 800ce94:	2102      	movs	r1, #2
 800ce96:	488b      	ldr	r0, [pc, #556]	@ (800d0c4 <led_accumulation+0x314>)
 800ce98:	f7f5 feaa 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	2120      	movs	r1, #32
 800cea0:	4888      	ldr	r0, [pc, #544]	@ (800d0c4 <led_accumulation+0x314>)
 800cea2:	f7f5 fea5 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cea6:	2200      	movs	r2, #0
 800cea8:	2108      	movs	r1, #8
 800ceaa:	4886      	ldr	r0, [pc, #536]	@ (800d0c4 <led_accumulation+0x314>)
 800ceac:	f7f5 fea0 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2110      	movs	r1, #16
 800ceb4:	4883      	ldr	r0, [pc, #524]	@ (800d0c4 <led_accumulation+0x314>)
 800ceb6:	f7f5 fe9b 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800ceba:	e192      	b.n	800d1e2 <led_accumulation+0x432>
		case 4:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800cebc:	2201      	movs	r2, #1
 800cebe:	2120      	movs	r1, #32
 800cec0:	4880      	ldr	r0, [pc, #512]	@ (800d0c4 <led_accumulation+0x314>)
 800cec2:	f7f5 fe95 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800cec6:	2201      	movs	r2, #1
 800cec8:	2108      	movs	r1, #8
 800ceca:	487e      	ldr	r0, [pc, #504]	@ (800d0c4 <led_accumulation+0x314>)
 800cecc:	f7f5 fe90 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800ced0:	2201      	movs	r2, #1
 800ced2:	2110      	movs	r1, #16
 800ced4:	487b      	ldr	r0, [pc, #492]	@ (800d0c4 <led_accumulation+0x314>)
 800ced6:	f7f5 fe8b 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800ceda:	2200      	movs	r2, #0
 800cedc:	2110      	movs	r1, #16
 800cede:	487a      	ldr	r0, [pc, #488]	@ (800d0c8 <led_accumulation+0x318>)
 800cee0:	f7f5 fe86 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800cee4:	2200      	movs	r2, #0
 800cee6:	2101      	movs	r1, #1
 800cee8:	4877      	ldr	r0, [pc, #476]	@ (800d0c8 <led_accumulation+0x318>)
 800ceea:	f7f5 fe81 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800ceee:	2200      	movs	r2, #0
 800cef0:	2102      	movs	r1, #2
 800cef2:	4875      	ldr	r0, [pc, #468]	@ (800d0c8 <led_accumulation+0x318>)
 800cef4:	f7f5 fe7c 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800cef8:	e173      	b.n	800d1e2 <led_accumulation+0x432>
		case 5:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800cefa:	2201      	movs	r2, #1
 800cefc:	2110      	movs	r1, #16
 800cefe:	4872      	ldr	r0, [pc, #456]	@ (800d0c8 <led_accumulation+0x318>)
 800cf00:	f7f5 fe76 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800cf04:	2201      	movs	r2, #1
 800cf06:	2101      	movs	r1, #1
 800cf08:	486f      	ldr	r0, [pc, #444]	@ (800d0c8 <led_accumulation+0x318>)
 800cf0a:	f7f5 fe71 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800cf0e:	2201      	movs	r2, #1
 800cf10:	2102      	movs	r1, #2
 800cf12:	486d      	ldr	r0, [pc, #436]	@ (800d0c8 <led_accumulation+0x318>)
 800cf14:	f7f5 fe6c 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2180      	movs	r1, #128	@ 0x80
 800cf1c:	486a      	ldr	r0, [pc, #424]	@ (800d0c8 <led_accumulation+0x318>)
 800cf1e:	f7f5 fe67 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800cf22:	2200      	movs	r2, #0
 800cf24:	2120      	movs	r1, #32
 800cf26:	4868      	ldr	r0, [pc, #416]	@ (800d0c8 <led_accumulation+0x318>)
 800cf28:	f7f5 fe62 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	2140      	movs	r1, #64	@ 0x40
 800cf30:	4865      	ldr	r0, [pc, #404]	@ (800d0c8 <led_accumulation+0x318>)
 800cf32:	f7f5 fe5d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800cf36:	2200      	movs	r2, #0
 800cf38:	2104      	movs	r1, #4
 800cf3a:	4862      	ldr	r0, [pc, #392]	@ (800d0c4 <led_accumulation+0x314>)
 800cf3c:	f7f5 fe58 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800cf40:	2200      	movs	r2, #0
 800cf42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf46:	485f      	ldr	r0, [pc, #380]	@ (800d0c4 <led_accumulation+0x314>)
 800cf48:	f7f5 fe52 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	2102      	movs	r1, #2
 800cf50:	485c      	ldr	r0, [pc, #368]	@ (800d0c4 <led_accumulation+0x314>)
 800cf52:	f7f5 fe4d 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800cf56:	e144      	b.n	800d1e2 <led_accumulation+0x432>
		case 6:
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_SET);
 800cf58:	2201      	movs	r2, #1
 800cf5a:	2180      	movs	r1, #128	@ 0x80
 800cf5c:	485a      	ldr	r0, [pc, #360]	@ (800d0c8 <led_accumulation+0x318>)
 800cf5e:	f7f5 fe47 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_SET);
 800cf62:	2201      	movs	r2, #1
 800cf64:	2120      	movs	r1, #32
 800cf66:	4858      	ldr	r0, [pc, #352]	@ (800d0c8 <led_accumulation+0x318>)
 800cf68:	f7f5 fe42 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_SET);
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	2140      	movs	r1, #64	@ 0x40
 800cf70:	4855      	ldr	r0, [pc, #340]	@ (800d0c8 <led_accumulation+0x318>)
 800cf72:	f7f5 fe3d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_4_GPIO_Port, LED_BLUE_4_Pin, GPIO_PIN_RESET);
 800cf76:	2200      	movs	r2, #0
 800cf78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cf7c:	4852      	ldr	r0, [pc, #328]	@ (800d0c8 <led_accumulation+0x318>)
 800cf7e:	f7f5 fe37 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, GPIO_PIN_RESET);
 800cf82:	2200      	movs	r2, #0
 800cf84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf88:	484f      	ldr	r0, [pc, #316]	@ (800d0c8 <led_accumulation+0x318>)
 800cf8a:	f7f5 fe31 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, GPIO_PIN_RESET);
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf94:	484c      	ldr	r0, [pc, #304]	@ (800d0c8 <led_accumulation+0x318>)
 800cf96:	f7f5 fe2b 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2120      	movs	r1, #32
 800cf9e:	4849      	ldr	r0, [pc, #292]	@ (800d0c4 <led_accumulation+0x314>)
 800cfa0:	f7f5 fe26 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2108      	movs	r1, #8
 800cfa8:	4846      	ldr	r0, [pc, #280]	@ (800d0c4 <led_accumulation+0x314>)
 800cfaa:	f7f5 fe21 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800cfae:	2200      	movs	r2, #0
 800cfb0:	2110      	movs	r1, #16
 800cfb2:	4844      	ldr	r0, [pc, #272]	@ (800d0c4 <led_accumulation+0x314>)
 800cfb4:	f7f5 fe1c 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800cfb8:	2201      	movs	r2, #1
 800cfba:	2104      	movs	r1, #4
 800cfbc:	4841      	ldr	r0, [pc, #260]	@ (800d0c4 <led_accumulation+0x314>)
 800cfbe:	f7f5 fe17 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cfc8:	483e      	ldr	r0, [pc, #248]	@ (800d0c4 <led_accumulation+0x314>)
 800cfca:	f7f5 fe11 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800cfce:	2201      	movs	r2, #1
 800cfd0:	2102      	movs	r1, #2
 800cfd2:	483c      	ldr	r0, [pc, #240]	@ (800d0c4 <led_accumulation+0x314>)
 800cfd4:	f7f5 fe0c 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800cfd8:	e103      	b.n	800d1e2 <led_accumulation+0x432>
		case 7:

			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800cfda:	2201      	movs	r2, #1
 800cfdc:	2120      	movs	r1, #32
 800cfde:	4839      	ldr	r0, [pc, #228]	@ (800d0c4 <led_accumulation+0x314>)
 800cfe0:	f7f5 fe06 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	2108      	movs	r1, #8
 800cfe8:	4836      	ldr	r0, [pc, #216]	@ (800d0c4 <led_accumulation+0x314>)
 800cfea:	f7f5 fe01 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800cfee:	2201      	movs	r2, #1
 800cff0:	2110      	movs	r1, #16
 800cff2:	4834      	ldr	r0, [pc, #208]	@ (800d0c4 <led_accumulation+0x314>)
 800cff4:	f7f5 fdfc 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800cff8:	2200      	movs	r2, #0
 800cffa:	2110      	movs	r1, #16
 800cffc:	4832      	ldr	r0, [pc, #200]	@ (800d0c8 <led_accumulation+0x318>)
 800cffe:	f7f5 fdf7 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800d002:	2200      	movs	r2, #0
 800d004:	2101      	movs	r1, #1
 800d006:	4830      	ldr	r0, [pc, #192]	@ (800d0c8 <led_accumulation+0x318>)
 800d008:	f7f5 fdf2 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800d00c:	2200      	movs	r2, #0
 800d00e:	2102      	movs	r1, #2
 800d010:	482d      	ldr	r0, [pc, #180]	@ (800d0c8 <led_accumulation+0x318>)
 800d012:	f7f5 fded 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d016:	e0e4      	b.n	800d1e2 <led_accumulation+0x432>
		case 8:
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_SET);
 800d018:	2201      	movs	r2, #1
 800d01a:	2110      	movs	r1, #16
 800d01c:	482a      	ldr	r0, [pc, #168]	@ (800d0c8 <led_accumulation+0x318>)
 800d01e:	f7f5 fde7 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 800d022:	2201      	movs	r2, #1
 800d024:	2101      	movs	r1, #1
 800d026:	4828      	ldr	r0, [pc, #160]	@ (800d0c8 <led_accumulation+0x318>)
 800d028:	f7f5 fde2 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800d02c:	2201      	movs	r2, #1
 800d02e:	2102      	movs	r1, #2
 800d030:	4825      	ldr	r0, [pc, #148]	@ (800d0c8 <led_accumulation+0x318>)
 800d032:	f7f5 fddd 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_3_GPIO_Port, LED_BLUE_3_Pin, GPIO_PIN_RESET);
 800d036:	2200      	movs	r2, #0
 800d038:	2180      	movs	r1, #128	@ 0x80
 800d03a:	4823      	ldr	r0, [pc, #140]	@ (800d0c8 <led_accumulation+0x318>)
 800d03c:	f7f5 fdd8 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, GPIO_PIN_RESET);
 800d040:	2200      	movs	r2, #0
 800d042:	2120      	movs	r1, #32
 800d044:	4820      	ldr	r0, [pc, #128]	@ (800d0c8 <led_accumulation+0x318>)
 800d046:	f7f5 fdd3 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, GPIO_PIN_RESET);
 800d04a:	2200      	movs	r2, #0
 800d04c:	2140      	movs	r1, #64	@ 0x40
 800d04e:	481e      	ldr	r0, [pc, #120]	@ (800d0c8 <led_accumulation+0x318>)
 800d050:	f7f5 fdce 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800d054:	2200      	movs	r2, #0
 800d056:	2104      	movs	r1, #4
 800d058:	481a      	ldr	r0, [pc, #104]	@ (800d0c4 <led_accumulation+0x314>)
 800d05a:	f7f5 fdc9 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800d05e:	2200      	movs	r2, #0
 800d060:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d064:	4817      	ldr	r0, [pc, #92]	@ (800d0c4 <led_accumulation+0x314>)
 800d066:	f7f5 fdc3 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800d06a:	2200      	movs	r2, #0
 800d06c:	2102      	movs	r1, #2
 800d06e:	4815      	ldr	r0, [pc, #84]	@ (800d0c4 <led_accumulation+0x314>)
 800d070:	f7f5 fdbe 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d074:	e0b5      	b.n	800d1e2 <led_accumulation+0x432>
		case 9:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800d076:	2201      	movs	r2, #1
 800d078:	2104      	movs	r1, #4
 800d07a:	4812      	ldr	r0, [pc, #72]	@ (800d0c4 <led_accumulation+0x314>)
 800d07c:	f7f5 fdb8 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800d080:	2201      	movs	r2, #1
 800d082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d086:	480f      	ldr	r0, [pc, #60]	@ (800d0c4 <led_accumulation+0x314>)
 800d088:	f7f5 fdb2 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800d08c:	2201      	movs	r2, #1
 800d08e:	2102      	movs	r1, #2
 800d090:	480c      	ldr	r0, [pc, #48]	@ (800d0c4 <led_accumulation+0x314>)
 800d092:	f7f5 fdad 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800d096:	2200      	movs	r2, #0
 800d098:	2120      	movs	r1, #32
 800d09a:	480a      	ldr	r0, [pc, #40]	@ (800d0c4 <led_accumulation+0x314>)
 800d09c:	f7f5 fda8 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2108      	movs	r1, #8
 800d0a4:	4807      	ldr	r0, [pc, #28]	@ (800d0c4 <led_accumulation+0x314>)
 800d0a6:	f7f5 fda3 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2110      	movs	r1, #16
 800d0ae:	4805      	ldr	r0, [pc, #20]	@ (800d0c4 <led_accumulation+0x314>)
 800d0b0:	f7f5 fd9e 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d0b4:	e095      	b.n	800d1e2 <led_accumulation+0x432>
 800d0b6:	bf00      	nop
 800d0b8:	2000094c 	.word	0x2000094c
 800d0bc:	2000086c 	.word	0x2000086c
 800d0c0:	20001d7d 	.word	0x20001d7d
 800d0c4:	40020400 	.word	0x40020400
 800d0c8:	40020800 	.word	0x40020800
		case 10:
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_SET);
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	2120      	movs	r1, #32
 800d0d0:	4845      	ldr	r0, [pc, #276]	@ (800d1e8 <led_accumulation+0x438>)
 800d0d2:	f7f5 fd8d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	2108      	movs	r1, #8
 800d0da:	4843      	ldr	r0, [pc, #268]	@ (800d1e8 <led_accumulation+0x438>)
 800d0dc:	f7f5 fd88 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	2110      	movs	r1, #16
 800d0e4:	4840      	ldr	r0, [pc, #256]	@ (800d1e8 <led_accumulation+0x438>)
 800d0e6:	f7f5 fd83 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_2_GPIO_Port, LED_BLUE_2_Pin, GPIO_PIN_RESET);
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2110      	movs	r1, #16
 800d0ee:	483f      	ldr	r0, [pc, #252]	@ (800d1ec <led_accumulation+0x43c>)
 800d0f0:	f7f5 fd7e 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	483c      	ldr	r0, [pc, #240]	@ (800d1ec <led_accumulation+0x43c>)
 800d0fa:	f7f5 fd79 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800d0fe:	2200      	movs	r2, #0
 800d100:	2102      	movs	r1, #2
 800d102:	483a      	ldr	r0, [pc, #232]	@ (800d1ec <led_accumulation+0x43c>)
 800d104:	f7f5 fd74 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d108:	e06b      	b.n	800d1e2 <led_accumulation+0x432>
		case 11:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800d10a:	2200      	movs	r2, #0
 800d10c:	2104      	movs	r1, #4
 800d10e:	4836      	ldr	r0, [pc, #216]	@ (800d1e8 <led_accumulation+0x438>)
 800d110:	f7f5 fd6e 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800d114:	2200      	movs	r2, #0
 800d116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d11a:	4833      	ldr	r0, [pc, #204]	@ (800d1e8 <led_accumulation+0x438>)
 800d11c:	f7f5 fd68 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800d120:	2200      	movs	r2, #0
 800d122:	2102      	movs	r1, #2
 800d124:	4830      	ldr	r0, [pc, #192]	@ (800d1e8 <led_accumulation+0x438>)
 800d126:	f7f5 fd63 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d12a:	e05a      	b.n	800d1e2 <led_accumulation+0x432>
		case 12:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800d12c:	2201      	movs	r2, #1
 800d12e:	2104      	movs	r1, #4
 800d130:	482d      	ldr	r0, [pc, #180]	@ (800d1e8 <led_accumulation+0x438>)
 800d132:	f7f5 fd5d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800d136:	2201      	movs	r2, #1
 800d138:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d13c:	482a      	ldr	r0, [pc, #168]	@ (800d1e8 <led_accumulation+0x438>)
 800d13e:	f7f5 fd57 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800d142:	2201      	movs	r2, #1
 800d144:	2102      	movs	r1, #2
 800d146:	4828      	ldr	r0, [pc, #160]	@ (800d1e8 <led_accumulation+0x438>)
 800d148:	f7f5 fd52 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800d14c:	2200      	movs	r2, #0
 800d14e:	2120      	movs	r1, #32
 800d150:	4825      	ldr	r0, [pc, #148]	@ (800d1e8 <led_accumulation+0x438>)
 800d152:	f7f5 fd4d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800d156:	2200      	movs	r2, #0
 800d158:	2108      	movs	r1, #8
 800d15a:	4823      	ldr	r0, [pc, #140]	@ (800d1e8 <led_accumulation+0x438>)
 800d15c:	f7f5 fd48 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800d160:	2200      	movs	r2, #0
 800d162:	2110      	movs	r1, #16
 800d164:	4820      	ldr	r0, [pc, #128]	@ (800d1e8 <led_accumulation+0x438>)
 800d166:	f7f5 fd43 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d16a:	e03a      	b.n	800d1e2 <led_accumulation+0x432>
		case 13:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_SET);
 800d16c:	2201      	movs	r2, #1
 800d16e:	2104      	movs	r1, #4
 800d170:	481d      	ldr	r0, [pc, #116]	@ (800d1e8 <led_accumulation+0x438>)
 800d172:	f7f5 fd3d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800d176:	2201      	movs	r2, #1
 800d178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d17c:	481a      	ldr	r0, [pc, #104]	@ (800d1e8 <led_accumulation+0x438>)
 800d17e:	f7f5 fd37 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800d182:	2201      	movs	r2, #1
 800d184:	2102      	movs	r1, #2
 800d186:	4818      	ldr	r0, [pc, #96]	@ (800d1e8 <led_accumulation+0x438>)
 800d188:	f7f5 fd32 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_BLUE_1_GPIO_Port, LED_BLUE_1_Pin, GPIO_PIN_RESET);
 800d18c:	2200      	movs	r2, #0
 800d18e:	2120      	movs	r1, #32
 800d190:	4815      	ldr	r0, [pc, #84]	@ (800d1e8 <led_accumulation+0x438>)
 800d192:	f7f5 fd2d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800d196:	2200      	movs	r2, #0
 800d198:	2108      	movs	r1, #8
 800d19a:	4813      	ldr	r0, [pc, #76]	@ (800d1e8 <led_accumulation+0x438>)
 800d19c:	f7f5 fd28 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2110      	movs	r1, #16
 800d1a4:	4810      	ldr	r0, [pc, #64]	@ (800d1e8 <led_accumulation+0x438>)
 800d1a6:	f7f5 fd23 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d1aa:	e01a      	b.n	800d1e2 <led_accumulation+0x432>
		case 14:
			HAL_GPIO_WritePin(LED_BLUE_0_GPIO_Port, LED_BLUE_0_Pin, GPIO_PIN_RESET);
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2104      	movs	r1, #4
 800d1b0:	480d      	ldr	r0, [pc, #52]	@ (800d1e8 <led_accumulation+0x438>)
 800d1b2:	f7f5 fd1d 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d1bc:	480a      	ldr	r0, [pc, #40]	@ (800d1e8 <led_accumulation+0x438>)
 800d1be:	f7f5 fd17 	bl	8002bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	4808      	ldr	r0, [pc, #32]	@ (800d1e8 <led_accumulation+0x438>)
 800d1c8:	f7f5 fd12 	bl	8002bf0 <HAL_GPIO_WritePin>
			break;
 800d1cc:	e009      	b.n	800d1e2 <led_accumulation+0x432>

		case 15:
			led_1hz_counter = 0;
 800d1ce:	4b08      	ldr	r3, [pc, #32]	@ (800d1f0 <led_accumulation+0x440>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	701a      	strb	r2, [r3, #0]
			gl_led_pwm_state = LED_PWM_CCR_CHANGEBALE;
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <led_accumulation+0x444>)
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	701a      	strb	r2, [r3, #0]
			//
			HAL_TIM_Base_Stop_IT(&htim2);
 800d1da:	4807      	ldr	r0, [pc, #28]	@ (800d1f8 <led_accumulation+0x448>)
 800d1dc:	f7f9 ff14 	bl	8007008 <HAL_TIM_Base_Stop_IT>

			break;
 800d1e0:	bf00      	nop
		}
	}
};
 800d1e2:	bf00      	nop
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	40020400 	.word	0x40020400
 800d1ec:	40020800 	.word	0x40020800
 800d1f0:	2000094e 	.word	0x2000094e
 800d1f4:	20000112 	.word	0x20000112
 800d1f8:	2000086c 	.word	0x2000086c

0800d1fc <conduct_acidity_loading_bar_calculation>:

int conduct_acidity_loading_bar_calculation(uint16_t reference_acidity_conductivity,  uint8_t temperature_correction_coef , uint16_t measured_acidity_conductivity )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b087      	sub	sp, #28
 800d200:	af00      	add	r7, sp, #0
 800d202:	4603      	mov	r3, r0
 800d204:	80fb      	strh	r3, [r7, #6]
 800d206:	460b      	mov	r3, r1
 800d208:	717b      	strb	r3, [r7, #5]
 800d20a:	4613      	mov	r3, r2
 800d20c:	807b      	strh	r3, [r7, #2]

	//Кол-во секций(уровней) заполенения бара загрузки = 13 . От 0 до 100 с щагом 10 и от 100 до 200 с шагом 50(100,150,200).

	uint32_t reference_acidity_conductivity_mul_100 = reference_acidity_conductivity * REF_TEMP_COEFF;  // Референсный
 800d20e:	88fb      	ldrh	r3, [r7, #6]
 800d210:	2264      	movs	r2, #100	@ 0x64
 800d212:	fb02 f303 	mul.w	r3, r2, r3
 800d216:	613b      	str	r3, [r7, #16]
	uint32_t measured_value_with_temp_coeff = measured_acidity_conductivity * temperature_correction_coef;
 800d218:	887b      	ldrh	r3, [r7, #2]
 800d21a:	797a      	ldrb	r2, [r7, #5]
 800d21c:	fb02 f303 	mul.w	r3, r2, r3
 800d220:	60fb      	str	r3, [r7, #12]
	uint16_t ref_value_10th_part = reference_acidity_conductivity_mul_100 /10;  // десятая часть
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	4a1d      	ldr	r2, [pc, #116]	@ (800d29c <conduct_acidity_loading_bar_calculation+0xa0>)
 800d226:	fba2 2303 	umull	r2, r3, r2, r3
 800d22a:	08db      	lsrs	r3, r3, #3
 800d22c:	817b      	strh	r3, [r7, #10]

	uint8_t bar_index_value = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	75fb      	strb	r3, [r7, #23]

	if (ref_value_10th_part > measured_value_with_temp_coeff)
 800d232:	897b      	ldrh	r3, [r7, #10]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	429a      	cmp	r2, r3
 800d238:	d202      	bcs.n	800d240 <conduct_acidity_loading_bar_calculation+0x44>
		{
			bar_index_value = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	75fb      	strb	r3, [r7, #23]
 800d23e:	e026      	b.n	800d28e <conduct_acidity_loading_bar_calculation+0x92>
		}
	else if (ref_value_10th_part <= measured_value_with_temp_coeff)
 800d240:	897b      	ldrh	r3, [r7, #10]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	429a      	cmp	r2, r3
 800d246:	d322      	bcc.n	800d28e <conduct_acidity_loading_bar_calculation+0x92>
	{
		if(measured_value_with_temp_coeff/ref_value_10th_part<=10)
 800d248:	897b      	ldrh	r3, [r7, #10]
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d250:	2b0a      	cmp	r3, #10
 800d252:	d805      	bhi.n	800d260 <conduct_acidity_loading_bar_calculation+0x64>
		{
			bar_index_value = measured_value_with_temp_coeff/ref_value_10th_part;
 800d254:	897b      	ldrh	r3, [r7, #10]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	fbb2 f3f3 	udiv	r3, r2, r3
 800d25c:	75fb      	strb	r3, [r7, #23]
 800d25e:	e016      	b.n	800d28e <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part >10 && measured_value_with_temp_coeff/ref_value_10th_part<=15)
 800d260:	897b      	ldrh	r3, [r7, #10]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	fbb2 f3f3 	udiv	r3, r2, r3
 800d268:	2b0a      	cmp	r3, #10
 800d26a:	d908      	bls.n	800d27e <conduct_acidity_loading_bar_calculation+0x82>
 800d26c:	897b      	ldrh	r3, [r7, #10]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	fbb2 f3f3 	udiv	r3, r2, r3
 800d274:	2b0f      	cmp	r3, #15
 800d276:	d802      	bhi.n	800d27e <conduct_acidity_loading_bar_calculation+0x82>
		{
			bar_index_value = 11;
 800d278:	230b      	movs	r3, #11
 800d27a:	75fb      	strb	r3, [r7, #23]
 800d27c:	e007      	b.n	800d28e <conduct_acidity_loading_bar_calculation+0x92>
		}
		else if(measured_value_with_temp_coeff/ref_value_10th_part > 15 )
 800d27e:	897b      	ldrh	r3, [r7, #10]
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	fbb2 f3f3 	udiv	r3, r2, r3
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d901      	bls.n	800d28e <conduct_acidity_loading_bar_calculation+0x92>
		{
			bar_index_value = 12;
 800d28a:	230c      	movs	r3, #12
 800d28c:	75fb      	strb	r3, [r7, #23]
		}
	}

	return bar_index_value;
 800d28e:	7dfb      	ldrb	r3, [r7, #23]


}
 800d290:	4618      	mov	r0, r3
 800d292:	371c      	adds	r7, #28
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	cccccccd 	.word	0xcccccccd

0800d2a0 <display_loading_status>:

int display_loading_status(uint8_t bar_index,uint8_t id )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af02      	add	r7, sp, #8
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	71fb      	strb	r3, [r7, #7]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	71bb      	strb	r3, [r7, #6]
	SPI_Flash_to_LCD(LOADING_BAR,16224 + 1800 * bar_index, 100, 9, 48, 55);
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800d2b6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ba:	f503 537d 	add.w	r3, r3, #16192	@ 0x3f40
 800d2be:	3320      	adds	r3, #32
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	2337      	movs	r3, #55	@ 0x37
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	2330      	movs	r3, #48	@ 0x30
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	2309      	movs	r3, #9
 800d2cc:	2264      	movs	r2, #100	@ 0x64
 800d2ce:	2008      	movs	r0, #8
 800d2d0:	f000 fa78 	bl	800d7c4 <SPI_Flash_to_LCD>
	for(int i = 54 ;i<76; i++)
 800d2d4:	2336      	movs	r3, #54	@ 0x36
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e00a      	b.n	800d2f0 <display_loading_status+0x50>
	{
		ST7735_DrawPixel(127, i, ST7735_RED);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	207f      	movs	r0, #127	@ 0x7f
 800d2e6:	f7fe fbb5 	bl	800ba54 <ST7735_DrawPixel>
	for(int i = 54 ;i<76; i++)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b4b      	cmp	r3, #75	@ 0x4b
 800d2f4:	ddf1      	ble.n	800d2da <display_loading_status+0x3a>
	}
	//uint16_t symbol_status_offset = 0;
	if(bar_index<=8)
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	2b08      	cmp	r3, #8
 800d2fa:	d80c      	bhi.n	800d316 <display_loading_status+0x76>
	{
		SPI_Flash_to_LCD(CHECK_MARK_M, 8, 44);
 800d2fc:	232c      	movs	r3, #44	@ 0x2c
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	2308      	movs	r3, #8
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	231e      	movs	r3, #30
 800d306:	2220      	movs	r2, #32
 800d308:	f649 315e 	movw	r1, #39774	@ 0x9b5e
 800d30c:	2008      	movs	r0, #8
 800d30e:	f000 fa59 	bl	800d7c4 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_GOOD;
 800d312:	2301      	movs	r3, #1
 800d314:	e01f      	b.n	800d356 <display_loading_status+0xb6>
	}
	else if(bar_index==9)
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	2b09      	cmp	r3, #9
 800d31a:	d10c      	bne.n	800d336 <display_loading_status+0x96>
	{
		SPI_Flash_to_LCD(EXCLAMATION_MARK_M, 8, 44);
 800d31c:	232c      	movs	r3, #44	@ 0x2c
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	2308      	movs	r3, #8
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	231e      	movs	r3, #30
 800d326:	2220      	movs	r2, #32
 800d328:	f24a 21c0 	movw	r1, #41664	@ 0xa2c0
 800d32c:	2008      	movs	r0, #8
 800d32e:	f000 fa49 	bl	800d7c4 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_MEDIUM;
 800d332:	2302      	movs	r3, #2
 800d334:	e00f      	b.n	800d356 <display_loading_status+0xb6>
	}
	else if(bar_index>9)
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	2b09      	cmp	r3, #9
 800d33a:	d90c      	bls.n	800d356 <display_loading_status+0xb6>
	{
		SPI_Flash_to_LCD(CROSS_MARK_M, 8, 44);
 800d33c:	232c      	movs	r3, #44	@ 0x2c
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	2308      	movs	r3, #8
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	231e      	movs	r3, #30
 800d346:	2220      	movs	r2, #32
 800d348:	f64a 2140 	movw	r1, #43584	@ 0xaa40
 800d34c:	2008      	movs	r0, #8
 800d34e:	f000 fa39 	bl	800d7c4 <SPI_Flash_to_LCD>
		return MEAS_RESULTS_IS_BAD;
 800d352:	2303      	movs	r3, #3
 800d354:	e7ff      	b.n	800d356 <display_loading_status+0xb6>
	}
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <display_measuring_product>:
void display_measuring_product(const uint8_t block, const uint16_t offset, uint8_t w, uint8_t h, uint8_t x, uint8_t y)
{
 800d35e:	b5b0      	push	{r4, r5, r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af02      	add	r7, sp, #8
 800d364:	4604      	mov	r4, r0
 800d366:	4608      	mov	r0, r1
 800d368:	4611      	mov	r1, r2
 800d36a:	461a      	mov	r2, r3
 800d36c:	4623      	mov	r3, r4
 800d36e:	71fb      	strb	r3, [r7, #7]
 800d370:	4603      	mov	r3, r0
 800d372:	80bb      	strh	r3, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	71bb      	strb	r3, [r7, #6]
 800d378:	4613      	mov	r3, r2
 800d37a:	70fb      	strb	r3, [r7, #3]
	SPI_Flash_to_LCD(block, offset, w, h, x, y);
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	b298      	uxth	r0, r3
 800d380:	88b9      	ldrh	r1, [r7, #4]
 800d382:	79bb      	ldrb	r3, [r7, #6]
 800d384:	b29c      	uxth	r4, r3
 800d386:	78fb      	ldrb	r3, [r7, #3]
 800d388:	b29d      	uxth	r5, r3
 800d38a:	7e3b      	ldrb	r3, [r7, #24]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	7f3a      	ldrb	r2, [r7, #28]
 800d390:	b292      	uxth	r2, r2
 800d392:	9201      	str	r2, [sp, #4]
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	462b      	mov	r3, r5
 800d398:	4622      	mov	r2, r4
 800d39a:	f000 fa13 	bl	800d7c4 <SPI_Flash_to_LCD>
	SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
 800d39e:	2321      	movs	r3, #33	@ 0x21
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	2393      	movs	r3, #147	@ 0x93
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	230e      	movs	r3, #14
 800d3a8:	2208      	movs	r2, #8
 800d3aa:	f24e 5192 	movw	r1, #58770	@ 0xe592
 800d3ae:	2008      	movs	r0, #8
 800d3b0:	f000 fa08 	bl	800d7c4 <SPI_Flash_to_LCD>
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d3bc <display_product_norm>:

void display_product_norm(uint8_t id, uint8_t language)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af04      	add	r7, sp, #16
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	460a      	mov	r2, r1
 800d3c6:	71fb      	strb	r3, [r7, #7]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	71bb      	strb	r3, [r7, #6]

		char char_buffer[5] = {};
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60bb      	str	r3, [r7, #8]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	733b      	strb	r3, [r7, #12]
		sprintf(char_buffer, "%d", product_array[id].conductivity );
 800d3d4:	79fa      	ldrb	r2, [r7, #7]
 800d3d6:	493c      	ldr	r1, [pc, #240]	@ (800d4c8 <display_product_norm+0x10c>)
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	3302      	adds	r3, #2
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f107 0308 	add.w	r3, r7, #8
 800d3ec:	4937      	ldr	r1, [pc, #220]	@ (800d4cc <display_product_norm+0x110>)
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f001 f894 	bl	800e51c <siprintf>

		SPI_Flash_to_LCD(9, 0 , 76, 42, 60, 30);
 800d3f4:	231e      	movs	r3, #30
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	233c      	movs	r3, #60	@ 0x3c
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	232a      	movs	r3, #42	@ 0x2a
 800d3fe:	224c      	movs	r2, #76	@ 0x4c
 800d400:	2100      	movs	r1, #0
 800d402:	2009      	movs	r0, #9
 800d404:	f000 f9de 	bl	800d7c4 <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L, 46, 46, 5, 20);
 800d408:	79fa      	ldrb	r2, [r7, #7]
 800d40a:	492f      	ldr	r1, [pc, #188]	@ (800d4c8 <display_product_norm+0x10c>)
 800d40c:	4613      	mov	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	4413      	add	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	440b      	add	r3, r1
 800d416:	330a      	adds	r3, #10
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	4618      	mov	r0, r3
 800d41c:	79fa      	ldrb	r2, [r7, #7]
 800d41e:	492a      	ldr	r1, [pc, #168]	@ (800d4c8 <display_product_norm+0x10c>)
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	440b      	add	r3, r1
 800d42a:	330c      	adds	r3, #12
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	4619      	mov	r1, r3
 800d430:	2314      	movs	r3, #20
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	2305      	movs	r3, #5
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	232e      	movs	r3, #46	@ 0x2e
 800d43a:	222e      	movs	r2, #46	@ 0x2e
 800d43c:	f000 f9c2 	bl	800d7c4 <SPI_Flash_to_LCD>


		ST7735_WriteString(76, 52, char_buffer, Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
 800d440:	4b23      	ldr	r3, [pc, #140]	@ (800d4d0 <display_product_norm+0x114>)
 800d442:	f107 0108 	add.w	r1, r7, #8
 800d446:	2200      	movs	r2, #0
 800d448:	9202      	str	r2, [sp, #8]
 800d44a:	f645 6215 	movw	r2, #24085	@ 0x5e15
 800d44e:	9201      	str	r2, [sp, #4]
 800d450:	685a      	ldr	r2, [r3, #4]
 800d452:	9200      	str	r2, [sp, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	460a      	mov	r2, r1
 800d458:	2134      	movs	r1, #52	@ 0x34
 800d45a:	204c      	movs	r0, #76	@ 0x4c
 800d45c:	f7fe fbb3 	bl	800bbc6 <ST7735_WriteString>
		ST7735_WriteString(76, 34, "NORM", Font_11x18, ST7735_NITRAT_NORM, ST7735_BLACK);
 800d460:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d0 <display_product_norm+0x114>)
 800d462:	2200      	movs	r2, #0
 800d464:	9202      	str	r2, [sp, #8]
 800d466:	f645 6215 	movw	r2, #24085	@ 0x5e15
 800d46a:	9201      	str	r2, [sp, #4]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	9200      	str	r2, [sp, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a18      	ldr	r2, [pc, #96]	@ (800d4d4 <display_product_norm+0x118>)
 800d474:	2122      	movs	r1, #34	@ 0x22
 800d476:	204c      	movs	r0, #76	@ 0x4c
 800d478:	f7fe fba5 	bl	800bbc6 <ST7735_WriteString>

		ST7735_WriteString(50, 3,  product_array[id].name , Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800d47c:	79fa      	ldrb	r2, [r7, #7]
 800d47e:	4912      	ldr	r1, [pc, #72]	@ (800d4c8 <display_product_norm+0x10c>)
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	440b      	add	r3, r1
 800d48a:	3310      	adds	r3, #16
 800d48c:	6819      	ldr	r1, [r3, #0]
 800d48e:	4b10      	ldr	r3, [pc, #64]	@ (800d4d0 <display_product_norm+0x114>)
 800d490:	2200      	movs	r2, #0
 800d492:	9202      	str	r2, [sp, #8]
 800d494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d498:	9201      	str	r2, [sp, #4]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	9200      	str	r2, [sp, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	460a      	mov	r2, r1
 800d4a2:	2103      	movs	r1, #3
 800d4a4:	2032      	movs	r0, #50	@ 0x32
 800d4a6:	f7fe fb8e 	bl	800bbc6 <ST7735_WriteString>

		SPI_Flash_to_LCD(ARROW_MAIN_LIGHT_RIGHT);
 800d4aa:	2321      	movs	r3, #33	@ 0x21
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	2393      	movs	r3, #147	@ 0x93
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	230e      	movs	r3, #14
 800d4b4:	2208      	movs	r2, #8
 800d4b6:	f24e 5192 	movw	r1, #58770	@ 0xe592
 800d4ba:	2008      	movs	r0, #8
 800d4bc:	f000 f982 	bl	800d7c4 <SPI_Flash_to_LCD>


	//adc_probe_polling();
}
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20000118 	.word	0x20000118
 800d4cc:	0800eebc 	.word	0x0800eebc
 800d4d0:	200000a0 	.word	0x200000a0
 800d4d4:	0800eec0 	.word	0x0800eec0

0800d4d8 <display_measuring_text>:

void display_measuring_text(char*name ,uint16_t reference_value, uint16_t measured_value, uint8_t status, uint8_t language)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	@ 0x28
 800d4dc:	af04      	add	r7, sp, #16
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	817b      	strh	r3, [r7, #10]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	813b      	strh	r3, [r7, #8]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	71fb      	strb	r3, [r7, #7]
	ST7735_WriteString(50, 3,  name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800d4f2:	4b40      	ldr	r3, [pc, #256]	@ (800d5f4 <display_measuring_text+0x11c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	9202      	str	r2, [sp, #8]
 800d4f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	9200      	str	r2, [sp, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	2103      	movs	r1, #3
 800d508:	2032      	movs	r0, #50	@ 0x32
 800d50a:	f7fe fb5c 	bl	800bbc6 <ST7735_WriteString>

	char char_buffer[5] = {};
 800d50e:	2300      	movs	r3, #0
 800d510:	613b      	str	r3, [r7, #16]
 800d512:	2300      	movs	r3, #0
 800d514:	753b      	strb	r3, [r7, #20]



	sprintf(char_buffer, "%d", reference_value );
 800d516:	897a      	ldrh	r2, [r7, #10]
 800d518:	f107 0310 	add.w	r3, r7, #16
 800d51c:	4936      	ldr	r1, [pc, #216]	@ (800d5f8 <display_measuring_text+0x120>)
 800d51e:	4618      	mov	r0, r3
 800d520:	f000 fffc 	bl	800e51c <siprintf>
	ST7735_WriteString(130, 67, char_buffer, Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800d524:	4b35      	ldr	r3, [pc, #212]	@ (800d5fc <display_measuring_text+0x124>)
 800d526:	f107 0110 	add.w	r1, r7, #16
 800d52a:	2200      	movs	r2, #0
 800d52c:	9202      	str	r2, [sp, #8]
 800d52e:	f249 426e 	movw	r2, #37998	@ 0x946e
 800d532:	9201      	str	r2, [sp, #4]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	9200      	str	r2, [sp, #0]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	460a      	mov	r2, r1
 800d53c:	2143      	movs	r1, #67	@ 0x43
 800d53e:	2082      	movs	r0, #130	@ 0x82
 800d540:	f7fe fb41 	bl	800bbc6 <ST7735_WriteString>

	sprintf(char_buffer, "%d", measured_value );
 800d544:	893a      	ldrh	r2, [r7, #8]
 800d546:	f107 0310 	add.w	r3, r7, #16
 800d54a:	492b      	ldr	r1, [pc, #172]	@ (800d5f8 <display_measuring_text+0x120>)
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 ffe5 	bl	800e51c <siprintf>

	if(status == MEAS_RESULTS_IS_GOOD)
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d110      	bne.n	800d57a <display_measuring_text+0xa2>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_GREEN, ST7735_BLACK);
 800d558:	4b29      	ldr	r3, [pc, #164]	@ (800d600 <display_measuring_text+0x128>)
 800d55a:	f107 0110 	add.w	r1, r7, #16
 800d55e:	2200      	movs	r2, #0
 800d560:	9202      	str	r2, [sp, #8]
 800d562:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 800d566:	9201      	str	r2, [sp, #4]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	9200      	str	r2, [sp, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	460a      	mov	r2, r1
 800d570:	211b      	movs	r1, #27
 800d572:	2032      	movs	r0, #50	@ 0x32
 800d574:	f7fe fb27 	bl	800bbc6 <ST7735_WriteString>
 800d578:	e026      	b.n	800d5c8 <display_measuring_text+0xf0>
	}
	else if(status == MEAS_RESULTS_IS_MEDIUM)
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d110      	bne.n	800d5a2 <display_measuring_text+0xca>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_YELLOW, ST7735_BLACK);
 800d580:	4b1f      	ldr	r3, [pc, #124]	@ (800d600 <display_measuring_text+0x128>)
 800d582:	f107 0110 	add.w	r1, r7, #16
 800d586:	2200      	movs	r2, #0
 800d588:	9202      	str	r2, [sp, #8]
 800d58a:	f64f 6220 	movw	r2, #65056	@ 0xfe20
 800d58e:	9201      	str	r2, [sp, #4]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	9200      	str	r2, [sp, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	460a      	mov	r2, r1
 800d598:	211b      	movs	r1, #27
 800d59a:	2032      	movs	r0, #50	@ 0x32
 800d59c:	f7fe fb13 	bl	800bbc6 <ST7735_WriteString>
 800d5a0:	e012      	b.n	800d5c8 <display_measuring_text+0xf0>
	}
	else if(status == MEAS_RESULTS_IS_BAD)
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d10f      	bne.n	800d5c8 <display_measuring_text+0xf0>
	{
		ST7735_WriteString(50, 27, char_buffer, Font_16x26, ST7735_NITRAT_RED, ST7735_BLACK);
 800d5a8:	4b15      	ldr	r3, [pc, #84]	@ (800d600 <display_measuring_text+0x128>)
 800d5aa:	f107 0110 	add.w	r1, r7, #16
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	9202      	str	r2, [sp, #8]
 800d5b2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800d5b6:	9201      	str	r2, [sp, #4]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	9200      	str	r2, [sp, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	460a      	mov	r2, r1
 800d5c0:	211b      	movs	r1, #27
 800d5c2:	2032      	movs	r0, #50	@ 0x32
 800d5c4:	f7fe faff 	bl	800bbc6 <ST7735_WriteString>
	}

	if(language == ENGLISH)
 800d5c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d10d      	bne.n	800d5ec <display_measuring_text+0x114>
	{
		ST7735_WriteString(50, 67, "ppm", Font_7x10, ST7735_FNT_LT_DEF, ST7735_BLACK);
 800d5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5fc <display_measuring_text+0x124>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	9202      	str	r2, [sp, #8]
 800d5d6:	f249 426e 	movw	r2, #37998	@ 0x946e
 800d5da:	9201      	str	r2, [sp, #4]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	9200      	str	r2, [sp, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a08      	ldr	r2, [pc, #32]	@ (800d604 <display_measuring_text+0x12c>)
 800d5e4:	2143      	movs	r1, #67	@ 0x43
 800d5e6:	2032      	movs	r0, #50	@ 0x32
 800d5e8:	f7fe faed 	bl	800bbc6 <ST7735_WriteString>
	}

}
 800d5ec:	bf00      	nop
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	200000a0 	.word	0x200000a0
 800d5f8:	0800eebc 	.word	0x0800eebc
 800d5fc:	20000098 	.word	0x20000098
 800d600:	200000a8 	.word	0x200000a8
 800d604:	0800eec8 	.word	0x0800eec8

0800d608 <ADC_Select_Channel>:

void ADC_Select_Channel(uint32_t ch) {
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef conf = {
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	605a      	str	r2, [r3, #4]
 800d61a:	609a      	str	r2, [r3, #8]
 800d61c:	60da      	str	r2, [r3, #12]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	60bb      	str	r3, [r7, #8]
 800d622:	2301      	movs	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	2304      	movs	r3, #4
 800d628:	613b      	str	r3, [r7, #16]
        .Channel = ch,
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_84CYCLES,
    };
    if (HAL_ADC_ConfigChannel(&hadc1, &conf) != HAL_OK) {
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	4619      	mov	r1, r3
 800d630:	4805      	ldr	r0, [pc, #20]	@ (800d648 <ADC_Select_Channel+0x40>)
 800d632:	f7f4 fb27 	bl	8001c84 <HAL_ADC_ConfigChannel>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <ADC_Select_Channel+0x38>
        Error_Handler();
 800d63c:	f7f3 fc9e 	bl	8000f7c <Error_Handler>
    }
}
 800d640:	bf00      	nop
 800d642:	3718      	adds	r7, #24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	20000650 	.word	0x20000650

0800d64c <adc_product_detect>:
uint8_t meas_counter = 0;
uint8_t probe_contact_group_counter = 1;


int adc_product_detect()
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 800d652:	2200      	movs	r2, #0
 800d654:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d658:	4812      	ldr	r0, [pc, #72]	@ (800d6a4 <adc_product_detect+0x58>)
 800d65a:	f7f5 fac9 	bl	8002bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, GPIO_PIN_RESET);
 800d65e:	2200      	movs	r2, #0
 800d660:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d664:	480f      	ldr	r0, [pc, #60]	@ (800d6a4 <adc_product_detect+0x58>)
 800d666:	f7f5 fac3 	bl	8002bf0 <HAL_GPIO_WritePin>

	ADC_Select_Channel(ADC_CHANNEL_1);
 800d66a:	2001      	movs	r0, #1
 800d66c:	f7ff ffcc 	bl	800d608 <ADC_Select_Channel>
	HAL_ADC_Start(&hadc1);
 800d670:	480d      	ldr	r0, [pc, #52]	@ (800d6a8 <adc_product_detect+0x5c>)
 800d672:	f7f4 f987 	bl	8001984 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800d676:	f04f 31ff 	mov.w	r1, #4294967295
 800d67a:	480b      	ldr	r0, [pc, #44]	@ (800d6a8 <adc_product_detect+0x5c>)
 800d67c:	f7f4 fa69 	bl	8001b52 <HAL_ADC_PollForConversion>
	uint16_t adc_probe_detect = HAL_ADC_GetValue(&hadc1);
 800d680:	4809      	ldr	r0, [pc, #36]	@ (800d6a8 <adc_product_detect+0x5c>)
 800d682:	f7f4 faf1 	bl	8001c68 <HAL_ADC_GetValue>
 800d686:	4603      	mov	r3, r0
 800d688:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800d68a:	4807      	ldr	r0, [pc, #28]	@ (800d6a8 <adc_product_detect+0x5c>)
 800d68c:	f7f4 fa2e 	bl	8001aec <HAL_ADC_Stop>
	if(adc_probe_detect>50)
 800d690:	88fb      	ldrh	r3, [r7, #6]
 800d692:	2b32      	cmp	r3, #50	@ 0x32
 800d694:	d901      	bls.n	800d69a <adc_product_detect+0x4e>
	{
		return 1;
 800d696:	2301      	movs	r3, #1
 800d698:	e000      	b.n	800d69c <adc_product_detect+0x50>
	}
	else
	{
		return 0;
 800d69a:	2300      	movs	r3, #0
	}

}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	40020400 	.word	0x40020400
 800d6a8:	20000650 	.word	0x20000650

0800d6ac <page_select>:

uint16_t current_page = SELECT_PRODUCT_LIST_PAGE;

// pga_ функция содержащая все действия на странице
void page_select()
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
	page_select_by_button();
 800d6b0:	f000 f80a 	bl	800d6c8 <page_select_by_button>
	page_action(current_page);
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <page_select+0x18>)
 800d6b6:	881b      	ldrh	r3, [r3, #0]
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 f84e 	bl	800d75c <page_action>
}
 800d6c0:	bf00      	nop
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20000114 	.word	0x20000114

0800d6c8 <page_select_by_button>:

int page_select_by_button()
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
	if(current_page == SELECT_PRODUCT_LIST_PAGE && but_state_right == BUT_LONG)
 800d6cc:	4b1f      	ldr	r3, [pc, #124]	@ (800d74c <page_select_by_button+0x84>)
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d109      	bne.n	800d6e8 <page_select_by_button+0x20>
 800d6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d750 <page_select_by_button+0x88>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d105      	bne.n	800d6e8 <page_select_by_button+0x20>
	{
		but_state_reset();
 800d6dc:	f7ff f94a 	bl	800c974 <but_state_reset>
		current_page = DISPLAY_PRODUCT_NORM_PAGE;
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d74c <page_select_by_button+0x84>)
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	801a      	strh	r2, [r3, #0]
 800d6e6:	e02e      	b.n	800d746 <page_select_by_button+0x7e>
		//return DISPLAY_PRODUCT_NORM_PAGE;
	}
	else if(current_page == DISPLAY_PRODUCT_NORM_PAGE && but_state_left == BUT_LONG)
 800d6e8:	4b18      	ldr	r3, [pc, #96]	@ (800d74c <page_select_by_button+0x84>)
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d109      	bne.n	800d704 <page_select_by_button+0x3c>
 800d6f0:	4b18      	ldr	r3, [pc, #96]	@ (800d754 <page_select_by_button+0x8c>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d105      	bne.n	800d704 <page_select_by_button+0x3c>
	{
		but_state_reset();
 800d6f8:	f7ff f93c 	bl	800c974 <but_state_reset>
		current_page = SELECT_PRODUCT_LIST_PAGE;
 800d6fc:	4b13      	ldr	r3, [pc, #76]	@ (800d74c <page_select_by_button+0x84>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	801a      	strh	r2, [r3, #0]
 800d702:	e020      	b.n	800d746 <page_select_by_button+0x7e>
		//return SELECT_PRODUCT_LIST_PAGE;
	}
	else if(current_page == DISPLAY_PRODUCT_NORM_PAGE && gl_product_detect)
 800d704:	4b11      	ldr	r3, [pc, #68]	@ (800d74c <page_select_by_button+0x84>)
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	2b03      	cmp	r3, #3
 800d70a:	d10c      	bne.n	800d726 <page_select_by_button+0x5e>
 800d70c:	4b12      	ldr	r3, [pc, #72]	@ (800d758 <page_select_by_button+0x90>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d008      	beq.n	800d726 <page_select_by_button+0x5e>
	{
		gl_product_detect = 0;
 800d714:	4b10      	ldr	r3, [pc, #64]	@ (800d758 <page_select_by_button+0x90>)
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]
		but_state_reset();
 800d71a:	f7ff f92b 	bl	800c974 <but_state_reset>
		current_page = MEASURING_PROCESS_PAGE;
 800d71e:	4b0b      	ldr	r3, [pc, #44]	@ (800d74c <page_select_by_button+0x84>)
 800d720:	2202      	movs	r2, #2
 800d722:	801a      	strh	r2, [r3, #0]
 800d724:	e00f      	b.n	800d746 <page_select_by_button+0x7e>

	}
	else if(current_page == MEASURING_PROCESS_PAGE && but_state_right == BUT_LONG)
 800d726:	4b09      	ldr	r3, [pc, #36]	@ (800d74c <page_select_by_button+0x84>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d10b      	bne.n	800d746 <page_select_by_button+0x7e>
 800d72e:	4b08      	ldr	r3, [pc, #32]	@ (800d750 <page_select_by_button+0x88>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d107      	bne.n	800d746 <page_select_by_button+0x7e>
	{
		but_state_reset();
 800d736:	f7ff f91d 	bl	800c974 <but_state_reset>
		current_page = SELECT_PRODUCT_LIST_PAGE;
 800d73a:	4b04      	ldr	r3, [pc, #16]	@ (800d74c <page_select_by_button+0x84>)
 800d73c:	2201      	movs	r2, #1
 800d73e:	801a      	strh	r2, [r3, #0]
		return current_page;
 800d740:	4b02      	ldr	r3, [pc, #8]	@ (800d74c <page_select_by_button+0x84>)
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	e7ff      	b.n	800d746 <page_select_by_button+0x7e>
	}

}
 800d746:	4618      	mov	r0, r3
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000114 	.word	0x20000114
 800d750:	20001d6d 	.word	0x20001d6d
 800d754:	20001d6c 	.word	0x20001d6c
 800d758:	20001d7f 	.word	0x20001d7f

0800d75c <page_action>:

void page_action(uint8_t page)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	71fb      	strb	r3, [r7, #7]
	switch(page)
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d011      	beq.n	800d790 <page_action+0x34>
 800d76c:	2b03      	cmp	r3, #3
 800d76e:	dc21      	bgt.n	800d7b4 <page_action+0x58>
 800d770:	2b01      	cmp	r3, #1
 800d772:	d002      	beq.n	800d77a <page_action+0x1e>
 800d774:	2b02      	cmp	r3, #2
 800d776:	d014      	beq.n	800d7a2 <page_action+0x46>
			prod_sel_flag.sub_norm = 0;
			prod_sel_flag.root = 0;
		break;
	}//default:

}
 800d778:	e01c      	b.n	800d7b4 <page_action+0x58>
			select_product_list_action();
 800d77a:	f000 f877 	bl	800d86c <select_product_list_action>
			prod_sel_flag.sub_norm = 0;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	@ (800d7bc <page_action+0x60>)
 800d780:	2200      	movs	r2, #0
 800d782:	705a      	strb	r2, [r3, #1]
			gl_led_pwm_state = LED_PWM_CCR_STABLE;
 800d784:	4b0e      	ldr	r3, [pc, #56]	@ (800d7c0 <page_action+0x64>)
 800d786:	2201      	movs	r2, #1
 800d788:	701a      	strb	r2, [r3, #0]
			led_off();
 800d78a:	f7ff fa35 	bl	800cbf8 <led_off>
		break;
 800d78e:	e011      	b.n	800d7b4 <page_action+0x58>
			display_norm_action();
 800d790:	f7ff f902 	bl	800c998 <display_norm_action>
			prod_sel_flag.root = 0;
 800d794:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <page_action+0x60>)
 800d796:	2200      	movs	r2, #0
 800d798:	701a      	strb	r2, [r3, #0]
			prod_sel_flag.sub_sub_meas_process = 0;
 800d79a:	4b08      	ldr	r3, [pc, #32]	@ (800d7bc <page_action+0x60>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	715a      	strb	r2, [r3, #5]
		break;
 800d7a0:	e008      	b.n	800d7b4 <page_action+0x58>
			measuring_process();
 800d7a2:	f7ff f919 	bl	800c9d8 <measuring_process>
			prod_sel_flag.sub_norm = 0;
 800d7a6:	4b05      	ldr	r3, [pc, #20]	@ (800d7bc <page_action+0x60>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	705a      	strb	r2, [r3, #1]
			prod_sel_flag.root = 0;
 800d7ac:	4b03      	ldr	r3, [pc, #12]	@ (800d7bc <page_action+0x60>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	701a      	strb	r2, [r3, #0]
		break;
 800d7b2:	bf00      	nop
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20001d84 	.word	0x20001d84
 800d7c0:	20000112 	.word	0x20000112

0800d7c4 <SPI_Flash_to_LCD>:

void SPI_Flash_to_LCD(uint16_t block, uint32_t offset, uint16_t w, uint16_t h, uint16_t x, uint16_t y)

{
 800d7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	b08b      	sub	sp, #44	@ 0x2c
 800d7ca:	af02      	add	r7, sp, #8
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	81fb      	strh	r3, [r7, #14]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	81bb      	strh	r3, [r7, #12]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	80fb      	strh	r3, [r7, #6]
 800d7de:	466b      	mov	r3, sp
 800d7e0:	461e      	mov	r6, r3
	uint32_t img_byte_amount = w*h*2;
 800d7e2:	89bb      	ldrh	r3, [r7, #12]
 800d7e4:	88fa      	ldrh	r2, [r7, #6]
 800d7e6:	fb02 f303 	mul.w	r3, r2, r3
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	61fb      	str	r3, [r7, #28]
	uint16_t img_buffer[img_byte_amount/2];
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	0859      	lsrs	r1, r3, #1
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	61bb      	str	r3, [r7, #24]
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4688      	mov	r8, r1
 800d7fc:	4699      	mov	r9, r3
 800d7fe:	f04f 0200 	mov.w	r2, #0
 800d802:	f04f 0300 	mov.w	r3, #0
 800d806:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800d80a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800d80e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800d812:	2300      	movs	r3, #0
 800d814:	460c      	mov	r4, r1
 800d816:	461d      	mov	r5, r3
 800d818:	f04f 0200 	mov.w	r2, #0
 800d81c:	f04f 0300 	mov.w	r3, #0
 800d820:	012b      	lsls	r3, r5, #4
 800d822:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800d826:	0122      	lsls	r2, r4, #4
 800d828:	004b      	lsls	r3, r1, #1
 800d82a:	3307      	adds	r3, #7
 800d82c:	08db      	lsrs	r3, r3, #3
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	ebad 0d03 	sub.w	sp, sp, r3
 800d834:	ab02      	add	r3, sp, #8
 800d836:	3301      	adds	r3, #1
 800d838:	085b      	lsrs	r3, r3, #1
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	617b      	str	r3, [r7, #20]
	W25qxx_ReadBlock(img_buffer, block, offset, img_byte_amount);
 800d83e:	89f9      	ldrh	r1, [r7, #14]
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	6978      	ldr	r0, [r7, #20]
 800d846:	f000 fe07 	bl	800e458 <W25qxx_ReadBlock>
	ST7735_DrawImage(x, y, w, h, img_buffer);
 800d84a:	88fc      	ldrh	r4, [r7, #6]
 800d84c:	89ba      	ldrh	r2, [r7, #12]
 800d84e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800d852:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4623      	mov	r3, r4
 800d85c:	f7fe fa81 	bl	800bd62 <ST7735_DrawImage>
 800d860:	46b5      	mov	sp, r6
}
 800d862:	bf00      	nop
 800d864:	3724      	adds	r7, #36	@ 0x24
 800d866:	46bd      	mov	sp, r7
 800d868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d86c <select_product_list_action>:

product_page_flags prod_sel_flag;


void select_product_list_action()
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
	if(touch_irq){
 800d870:	4b0a      	ldr	r3, [pc, #40]	@ (800d89c <select_product_list_action+0x30>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <select_product_list_action+0x10>

		touch_slider();
 800d878:	f000 f9ec 	bl	800dc54 <touch_slider>
	}

	 gl_id_to_display  = select_product_id(gl_id_to_display);
 800d87c:	4b08      	ldr	r3, [pc, #32]	@ (800d8a0 <select_product_list_action+0x34>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	4618      	mov	r0, r3
 800d882:	f000 f80f 	bl	800d8a4 <select_product_id>
 800d886:	4603      	mov	r3, r0
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b05      	ldr	r3, [pc, #20]	@ (800d8a0 <select_product_list_action+0x34>)
 800d88c:	701a      	strb	r2, [r3, #0]
	 display_selected_product(gl_id_to_display);
 800d88e:	4b04      	ldr	r3, [pc, #16]	@ (800d8a0 <select_product_list_action+0x34>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	4618      	mov	r0, r3
 800d894:	f000 f834 	bl	800d900 <display_selected_product>
}
 800d898:	bf00      	nop
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20000944 	.word	0x20000944
 800d8a0:	20000945 	.word	0x20000945

0800d8a4 <select_product_id>:

int select_product_id(uint8_t id)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	71fb      	strb	r3, [r7, #7]
	//Select product using buttons
	 if(but_state_right == BUT_SHORT)
 800d8ae:	4b12      	ldr	r3, [pc, #72]	@ (800d8f8 <select_product_id+0x54>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d10b      	bne.n	800d8ce <select_product_id+0x2a>
		  {
			  if(id<60){
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	2b3b      	cmp	r3, #59	@ 0x3b
 800d8ba:	d803      	bhi.n	800d8c4 <select_product_id+0x20>

				  id++;
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	71fb      	strb	r3, [r7, #7]
 800d8c2:	e001      	b.n	800d8c8 <select_product_id+0x24>
			  }
			  else
			  {
				  id = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	71fb      	strb	r3, [r7, #7]
			  }
			  but_state_reset();
 800d8c8:	f7ff f854 	bl	800c974 <but_state_reset>
 800d8cc:	e00e      	b.n	800d8ec <select_product_id+0x48>

		  }
		  else if(but_state_left==BUT_SHORT)
 800d8ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d8fc <select_product_id+0x58>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d10a      	bne.n	800d8ec <select_product_id+0x48>
		  {

			  if(id>0)
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <select_product_id+0x40>
			  {
				  id--;
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	71fb      	strb	r3, [r7, #7]
 800d8e2:	e001      	b.n	800d8e8 <select_product_id+0x44>
			  }
			  else
			  {
				  id = 60;
 800d8e4:	233c      	movs	r3, #60	@ 0x3c
 800d8e6:	71fb      	strb	r3, [r7, #7]
			  }
			  but_state_reset();
 800d8e8:	f7ff f844 	bl	800c974 <but_state_reset>
		  }
	 return id;
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20001d6d 	.word	0x20001d6d
 800d8fc:	20001d6c 	.word	0x20001d6c

0800d900 <display_selected_product>:

void display_selected_product(uint8_t id)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af04      	add	r7, sp, #16
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]

	if(prod_sel_flag.root == 0)
 800d90a:	4bb3      	ldr	r3, [pc, #716]	@ (800dbd8 <display_selected_product+0x2d8>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d105      	bne.n	800d91e <display_selected_product+0x1e>
	{
		prod_sel_flag.root = 1;
 800d912:	4bb1      	ldr	r3, [pc, #708]	@ (800dbd8 <display_selected_product+0x2d8>)
 800d914:	2201      	movs	r2, #1
 800d916:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 800d918:	2000      	movs	r0, #0
 800d91a:	f7fe fa11 	bl	800bd40 <ST7735_FillScreen>
	}
	ST7735_WriteString(50, 2,  product_array[id].name, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800d91e:	79fa      	ldrb	r2, [r7, #7]
 800d920:	49ae      	ldr	r1, [pc, #696]	@ (800dbdc <display_selected_product+0x2dc>)
 800d922:	4613      	mov	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	440b      	add	r3, r1
 800d92c:	3310      	adds	r3, #16
 800d92e:	6819      	ldr	r1, [r3, #0]
 800d930:	4bab      	ldr	r3, [pc, #684]	@ (800dbe0 <display_selected_product+0x2e0>)
 800d932:	2200      	movs	r2, #0
 800d934:	9202      	str	r2, [sp, #8]
 800d936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d93a:	9201      	str	r2, [sp, #4]
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	9200      	str	r2, [sp, #0]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	460a      	mov	r2, r1
 800d944:	2102      	movs	r1, #2
 800d946:	2032      	movs	r0, #50	@ 0x32
 800d948:	f7fe f93d 	bl	800bbc6 <ST7735_WriteString>
	if(id == 0)
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d15a      	bne.n	800da08 <display_selected_product+0x108>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800d952:	79fa      	ldrb	r2, [r7, #7]
 800d954:	49a1      	ldr	r1, [pc, #644]	@ (800dbdc <display_selected_product+0x2dc>)
 800d956:	4613      	mov	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	440b      	add	r3, r1
 800d960:	330a      	adds	r3, #10
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	4618      	mov	r0, r3
 800d966:	79fa      	ldrb	r2, [r7, #7]
 800d968:	499c      	ldr	r1, [pc, #624]	@ (800dbdc <display_selected_product+0x2dc>)
 800d96a:	4613      	mov	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	440b      	add	r3, r1
 800d974:	330c      	adds	r3, #12
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	4619      	mov	r1, r3
 800d97a:	2315      	movs	r3, #21
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	233a      	movs	r3, #58	@ 0x3a
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	232e      	movs	r3, #46	@ 0x2e
 800d984:	222e      	movs	r2, #46	@ 0x2e
 800d986:	f7ff ff1d 	bl	800d7c4 <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	1c5a      	adds	r2, r3, #1
 800d98e:	4993      	ldr	r1, [pc, #588]	@ (800dbdc <display_selected_product+0x2dc>)
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	3307      	adds	r3, #7
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	498d      	ldr	r1, [pc, #564]	@ (800dbdc <display_selected_product+0x2dc>)
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	440b      	add	r3, r1
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	2319      	movs	r3, #25
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	2376      	movs	r3, #118	@ 0x76
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	2324      	movs	r3, #36	@ 0x24
 800d9c0:	2224      	movs	r2, #36	@ 0x24
 800d9c2:	f7ff feff 	bl	800d7c4 <SPI_Flash_to_LCD>
		ST7735_FillRectangle(LEFT_PIC, ST7735_BLACK);
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	2319      	movs	r3, #25
 800d9cc:	2205      	movs	r2, #5
 800d9ce:	2124      	movs	r1, #36	@ 0x24
 800d9d0:	2024      	movs	r0, #36	@ 0x24
 800d9d2:	f7fe f943 	bl	800bc5c <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	332e      	adds	r3, #46	@ 0x2e
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	234b      	movs	r3, #75	@ 0x4b
 800d9e6:	2102      	movs	r1, #2
 800d9e8:	2008      	movs	r0, #8
 800d9ea:	f7fe f937 	bl	800bc5c <ST7735_FillRectangle>
		ST7735_FillRectangle(60,2, 46+8+id,75, ST7735_BG_DEF); // правый прямоугольник
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	3336      	adds	r3, #54	@ 0x36
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	f641 1325 	movw	r3, #6437	@ 0x1925
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	234b      	movs	r3, #75	@ 0x4b
 800d9fe:	2102      	movs	r1, #2
 800da00:	203c      	movs	r0, #60	@ 0x3c
 800da02:	f7fe f92b 	bl	800bc5c <ST7735_FillRectangle>
 800da06:	e0e0      	b.n	800dbca <display_selected_product+0x2ca>
	}
	else if(id>0 && id<60)
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 8082 	beq.w	800db14 <display_selected_product+0x214>
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	2b3b      	cmp	r3, #59	@ 0x3b
 800da14:	d87e      	bhi.n	800db14 <display_selected_product+0x214>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800da16:	79fa      	ldrb	r2, [r7, #7]
 800da18:	4970      	ldr	r1, [pc, #448]	@ (800dbdc <display_selected_product+0x2dc>)
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	440b      	add	r3, r1
 800da24:	330a      	adds	r3, #10
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	4618      	mov	r0, r3
 800da2a:	79fa      	ldrb	r2, [r7, #7]
 800da2c:	496b      	ldr	r1, [pc, #428]	@ (800dbdc <display_selected_product+0x2dc>)
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	440b      	add	r3, r1
 800da38:	330c      	adds	r3, #12
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	4619      	mov	r1, r3
 800da3e:	2315      	movs	r3, #21
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	233a      	movs	r3, #58	@ 0x3a
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	232e      	movs	r3, #46	@ 0x2e
 800da48:	222e      	movs	r2, #46	@ 0x2e
 800da4a:	f7ff febb 	bl	800d7c4 <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id+1].addr_block_S, product_array[id+1].addr_offset_S , RIGHT_PIC);
 800da4e:	79fb      	ldrb	r3, [r7, #7]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	4962      	ldr	r1, [pc, #392]	@ (800dbdc <display_selected_product+0x2dc>)
 800da54:	4613      	mov	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	440b      	add	r3, r1
 800da5e:	3307      	adds	r3, #7
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	4618      	mov	r0, r3
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	495c      	ldr	r1, [pc, #368]	@ (800dbdc <display_selected_product+0x2dc>)
 800da6a:	4613      	mov	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	440b      	add	r3, r1
 800da74:	3308      	adds	r3, #8
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	4619      	mov	r1, r3
 800da7a:	2319      	movs	r3, #25
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	2376      	movs	r3, #118	@ 0x76
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	2324      	movs	r3, #36	@ 0x24
 800da84:	2224      	movs	r2, #36	@ 0x24
 800da86:	f7ff fe9d 	bl	800d7c4 <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	1e5a      	subs	r2, r3, #1
 800da8e:	4953      	ldr	r1, [pc, #332]	@ (800dbdc <display_selected_product+0x2dc>)
 800da90:	4613      	mov	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	440b      	add	r3, r1
 800da9a:	3307      	adds	r3, #7
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	494d      	ldr	r1, [pc, #308]	@ (800dbdc <display_selected_product+0x2dc>)
 800daa6:	4613      	mov	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4413      	add	r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	440b      	add	r3, r1
 800dab0:	3308      	adds	r3, #8
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	4619      	mov	r1, r3
 800dab6:	2319      	movs	r3, #25
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	2305      	movs	r3, #5
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	2324      	movs	r3, #36	@ 0x24
 800dac0:	2224      	movs	r2, #36	@ 0x24
 800dac2:	f7ff fe7f 	bl	800d7c4 <SPI_Flash_to_LCD>

		ST7735_FillRectangle(60-id,2, 46+8+id,75, ST7735_BG_DEF);// правый прямоугольник
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800dace:	b298      	uxth	r0, r3
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3336      	adds	r3, #54	@ 0x36
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	f641 1325 	movw	r3, #6437	@ 0x1925
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	234b      	movs	r3, #75	@ 0x4b
 800dae0:	2102      	movs	r1, #2
 800dae2:	f7fe f8bb 	bl	800bc5c <ST7735_FillRectangle>
		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	332e      	adds	r3, #46	@ 0x2e
 800daec:	b29a      	uxth	r2, r3
 800daee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	234b      	movs	r3, #75	@ 0x4b
 800daf6:	2102      	movs	r1, #2
 800daf8:	2008      	movs	r0, #8
 800dafa:	f7fe f8af 	bl	800bc5c <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	b298      	uxth	r0, r3
 800db02:	f641 1325 	movw	r3, #6437	@ 0x1925
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	234b      	movs	r3, #75	@ 0x4b
 800db0a:	222e      	movs	r2, #46	@ 0x2e
 800db0c:	2102      	movs	r1, #2
 800db0e:	f7fe f8a5 	bl	800bc5c <ST7735_FillRectangle>
 800db12:	e05a      	b.n	800dbca <display_selected_product+0x2ca>
	}
	else if(id==60)
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	2b3c      	cmp	r3, #60	@ 0x3c
 800db18:	d157      	bne.n	800dbca <display_selected_product+0x2ca>
	{
		SPI_Flash_to_LCD(product_array[id].addr_block_L, product_array[id].addr_offset_L , MAIN_PIC);
 800db1a:	79fa      	ldrb	r2, [r7, #7]
 800db1c:	492f      	ldr	r1, [pc, #188]	@ (800dbdc <display_selected_product+0x2dc>)
 800db1e:	4613      	mov	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	330a      	adds	r3, #10
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	4618      	mov	r0, r3
 800db2e:	79fa      	ldrb	r2, [r7, #7]
 800db30:	492a      	ldr	r1, [pc, #168]	@ (800dbdc <display_selected_product+0x2dc>)
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	440b      	add	r3, r1
 800db3c:	330c      	adds	r3, #12
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	2315      	movs	r3, #21
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	233a      	movs	r3, #58	@ 0x3a
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	232e      	movs	r3, #46	@ 0x2e
 800db4c:	222e      	movs	r2, #46	@ 0x2e
 800db4e:	f7ff fe39 	bl	800d7c4 <SPI_Flash_to_LCD>
		SPI_Flash_to_LCD(product_array[id-1].addr_block_S, product_array[id-1].addr_offset_S , LEFT_PIC);
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	1e5a      	subs	r2, r3, #1
 800db56:	4921      	ldr	r1, [pc, #132]	@ (800dbdc <display_selected_product+0x2dc>)
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	440b      	add	r3, r1
 800db62:	3307      	adds	r3, #7
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	1e5a      	subs	r2, r3, #1
 800db6c:	491b      	ldr	r1, [pc, #108]	@ (800dbdc <display_selected_product+0x2dc>)
 800db6e:	4613      	mov	r3, r2
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4413      	add	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	440b      	add	r3, r1
 800db78:	3308      	adds	r3, #8
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	4619      	mov	r1, r3
 800db7e:	2319      	movs	r3, #25
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	2305      	movs	r3, #5
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	2324      	movs	r3, #36	@ 0x24
 800db88:	2224      	movs	r2, #36	@ 0x24
 800db8a:	f7ff fe1b 	bl	800d7c4 <SPI_Flash_to_LCD>
		ST7735_FillRectangle(RIGHT_PIC, ST7735_BLACK);
 800db8e:	2300      	movs	r3, #0
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	2319      	movs	r3, #25
 800db94:	2276      	movs	r2, #118	@ 0x76
 800db96:	2124      	movs	r1, #36	@ 0x24
 800db98:	2024      	movs	r0, #36	@ 0x24
 800db9a:	f7fe f85f 	bl	800bc5c <ST7735_FillRectangle>

		ST7735_FillRectangle(8, 2, 46+id, 75, ST7735_WHITE);// ползунок
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	332e      	adds	r3, #46	@ 0x2e
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	234b      	movs	r3, #75	@ 0x4b
 800dbae:	2102      	movs	r1, #2
 800dbb0:	2008      	movs	r0, #8
 800dbb2:	f7fe f853 	bl	800bc5c <ST7735_FillRectangle>
		ST7735_FillRectangle(id,2, 46,75, ST7735_BG_DEF);// левый прямоугольник
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
 800dbb8:	b298      	uxth	r0, r3
 800dbba:	f641 1325 	movw	r3, #6437	@ 0x1925
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	234b      	movs	r3, #75	@ 0x4b
 800dbc2:	222e      	movs	r2, #46	@ 0x2e
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	f7fe f849 	bl	800bc5c <ST7735_FillRectangle>
	}
	//HAL_TIM_Base_Start_IT(&htim2);

	//gl_selected_pause = 1;

	gl_selected_flag = 0;
 800dbca:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <display_selected_product+0x2e4>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	701a      	strb	r2, [r3, #0]
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20001d84 	.word	0x20001d84
 800dbdc:	20000118 	.word	0x20000118
 800dbe0:	200000a0 	.word	0x200000a0
 800dbe4:	20000116 	.word	0x20000116

0800dbe8 <MPR121_setregister>:
uint8_t left_treshold = 0;
uint8_t right_treshold = 0;
uint8_t touch_direction = 0; //1 -up ,2-down

void MPR121_setregister(uint16_t regaddress, uint8_t value)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af04      	add	r7, sp, #16
 800dbee:	4603      	mov	r3, r0
 800dbf0:	460a      	mov	r2, r1
 800dbf2:	80fb      	strh	r3, [r7, #6]
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800dbf8:	88fa      	ldrh	r2, [r7, #6]
 800dbfa:	2364      	movs	r3, #100	@ 0x64
 800dbfc:	9302      	str	r3, [sp, #8]
 800dbfe:	2301      	movs	r3, #1
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	1d7b      	adds	r3, r7, #5
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	2301      	movs	r3, #1
 800dc08:	21b4      	movs	r1, #180	@ 0xb4
 800dc0a:	4803      	ldr	r0, [pc, #12]	@ (800dc18 <MPR121_setregister+0x30>)
 800dc0c:	f7f5 f966 	bl	8002edc <HAL_I2C_Mem_Write>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	20000698 	.word	0x20000698

0800dc1c <MPR121_readregister>:
int MPR121_readregister(uint16_t regaddress, uint8_t value)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af04      	add	r7, sp, #16
 800dc22:	4603      	mov	r3, r0
 800dc24:	460a      	mov	r2, r1
 800dc26:	80fb      	strh	r3, [r7, #6]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Read(&hi2c1, 0x5A<<1, regaddress, 1,&value, 1, 100);
 800dc2c:	88fa      	ldrh	r2, [r7, #6]
 800dc2e:	2364      	movs	r3, #100	@ 0x64
 800dc30:	9302      	str	r3, [sp, #8]
 800dc32:	2301      	movs	r3, #1
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	1d7b      	adds	r3, r7, #5
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	21b4      	movs	r1, #180	@ 0xb4
 800dc3e:	4804      	ldr	r0, [pc, #16]	@ (800dc50 <MPR121_readregister+0x34>)
 800dc40:	f7f5 fa46 	bl	80030d0 <HAL_I2C_Mem_Read>
	 return value;
 800dc44:	797b      	ldrb	r3, [r7, #5]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	20000698 	.word	0x20000698

0800dc54 <touch_slider>:

void touch_slider()
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Start_IT(&htim2);
		  		uint8_t j= 0x04;
 800dc5a:	2304      	movs	r3, #4
 800dc5c:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60bb      	str	r3, [r7, #8]
 800dc62:	e014      	b.n	800dc8e <touch_slider+0x3a>
		  		{
		  			capreadbuffer[i] = MPR121_readregister(j,test1);
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	4a85      	ldr	r2, [pc, #532]	@ (800de80 <touch_slider+0x22c>)
 800dc6a:	7812      	ldrb	r2, [r2, #0]
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff ffd4 	bl	800dc1c <MPR121_readregister>
 800dc74:	4603      	mov	r3, r0
 800dc76:	b2d9      	uxtb	r1, r3
 800dc78:	4a82      	ldr	r2, [pc, #520]	@ (800de84 <touch_slider+0x230>)
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	460a      	mov	r2, r1
 800dc80:	701a      	strb	r2, [r3, #0]
		  			j+=2;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	3302      	adds	r3, #2
 800dc86:	73fb      	strb	r3, [r7, #15]
		  		for(int i = 0;i<5;i++)
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	60bb      	str	r3, [r7, #8]
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	dde7      	ble.n	800dc64 <touch_slider+0x10>
		  		}

		  		for(int i = 0;i<5;i++)
 800dc94:	2300      	movs	r3, #0
 800dc96:	607b      	str	r3, [r7, #4]
 800dc98:	e019      	b.n	800dcce <touch_slider+0x7a>
		  		{
		//  			sprintf(char_buffer, "%03d", capreadbuffer[i]);
		  //			ST7735_WriteString(32*i,0 , char_buffer, Font_7x10, ST7735_WHITE, ST7735_BG_DEF);

		  			if(capreadbuffer[i] <= touch_thrsh[i] && first_touch <= 0)
 800dc9a:	4a7a      	ldr	r2, [pc, #488]	@ (800de84 <touch_slider+0x230>)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4413      	add	r3, r2
 800dca0:	781a      	ldrb	r2, [r3, #0]
 800dca2:	4979      	ldr	r1, [pc, #484]	@ (800de88 <touch_slider+0x234>)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	440b      	add	r3, r1
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d80c      	bhi.n	800dcc8 <touch_slider+0x74>
 800dcae:	4b77      	ldr	r3, [pc, #476]	@ (800de8c <touch_slider+0x238>)
 800dcb0:	f993 3000 	ldrsb.w	r3, [r3]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dc07      	bgt.n	800dcc8 <touch_slider+0x74>
		  			{
		  				gl_touch_accel = 1;
 800dcb8:	4b75      	ldr	r3, [pc, #468]	@ (800de90 <touch_slider+0x23c>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	801a      	strh	r2, [r3, #0]
		  				first_touch = i;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	b25a      	sxtb	r2, r3
 800dcc2:	4b72      	ldr	r3, [pc, #456]	@ (800de8c <touch_slider+0x238>)
 800dcc4:	701a      	strb	r2, [r3, #0]
		  		//		sprintf(char_buffer, "%01d", first_touch);
		  		//		ST7735_WriteString(15,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);
		  //				HAL_TIM_Base_Start_IT(&htim5);
		  				break;
 800dcc6:	e005      	b.n	800dcd4 <touch_slider+0x80>
		  		for(int i = 0;i<5;i++)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3301      	adds	r3, #1
 800dccc:	607b      	str	r3, [r7, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	dde2      	ble.n	800dc9a <touch_slider+0x46>
		  			}

		  		}
		  		if(first_touch >= 0 && second_touch!=first_touch) //second_flag == 0)
 800dcd4:	4b6d      	ldr	r3, [pc, #436]	@ (800de8c <touch_slider+0x238>)
 800dcd6:	f993 3000 	ldrsb.w	r3, [r3]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f2c0 80c8 	blt.w	800de70 <touch_slider+0x21c>
 800dce0:	4b6c      	ldr	r3, [pc, #432]	@ (800de94 <touch_slider+0x240>)
 800dce2:	f993 2000 	ldrsb.w	r2, [r3]
 800dce6:	4b69      	ldr	r3, [pc, #420]	@ (800de8c <touch_slider+0x238>)
 800dce8:	f993 3000 	ldrsb.w	r3, [r3]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	f000 80bf 	beq.w	800de70 <touch_slider+0x21c>
		  		{
		  			if(second_touch>=0)
 800dcf2:	4b68      	ldr	r3, [pc, #416]	@ (800de94 <touch_slider+0x240>)
 800dcf4:	f993 3000 	ldrsb.w	r3, [r3]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	db66      	blt.n	800ddca <touch_slider+0x176>
		  			{
		  				//sprintf(char_buffer, "%01d", second_touch);
		  				//ST7735_WriteString(40,63 , char_buffer, Font_11x18, ST7735_WHITE, ST7735_BLACK);


		  				if((second_touch-first_touch == -1 || second_touch-first_touch == -2 )&& left_treshold!=1)//
 800dcfc:	4b65      	ldr	r3, [pc, #404]	@ (800de94 <touch_slider+0x240>)
 800dcfe:	f993 3000 	ldrsb.w	r3, [r3]
 800dd02:	461a      	mov	r2, r3
 800dd04:	4b61      	ldr	r3, [pc, #388]	@ (800de8c <touch_slider+0x238>)
 800dd06:	f993 3000 	ldrsb.w	r3, [r3]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d00a      	beq.n	800dd28 <touch_slider+0xd4>
 800dd12:	4b60      	ldr	r3, [pc, #384]	@ (800de94 <touch_slider+0x240>)
 800dd14:	f993 3000 	ldrsb.w	r3, [r3]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	4b5c      	ldr	r3, [pc, #368]	@ (800de8c <touch_slider+0x238>)
 800dd1c:	f993 3000 	ldrsb.w	r3, [r3]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	f113 0f02 	cmn.w	r3, #2
 800dd26:	d11b      	bne.n	800dd60 <touch_slider+0x10c>
 800dd28:	4b5b      	ldr	r3, [pc, #364]	@ (800de98 <touch_slider+0x244>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d017      	beq.n	800dd60 <touch_slider+0x10c>
		  				{
		  					gl_touch_change_id = 1;
 800dd30:	4b5a      	ldr	r3, [pc, #360]	@ (800de9c <touch_slider+0x248>)
 800dd32:	2201      	movs	r2, #1
 800dd34:	701a      	strb	r2, [r3, #0]

		  					//touch_accel_to_disp = gl_touch_accel_inc;
		  					//gl_touch_accel = 0;
		  					//gl_touch_accel_inc = 0;

		  					touch_direction = UP;
 800dd36:	4b5a      	ldr	r3, [pc, #360]	@ (800dea0 <touch_slider+0x24c>)
 800dd38:	2201      	movs	r2, #1
 800dd3a:	701a      	strb	r2, [r3, #0]

		  					if(gl_id_to_display<60)
 800dd3c:	4b59      	ldr	r3, [pc, #356]	@ (800dea4 <touch_slider+0x250>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	2b3b      	cmp	r3, #59	@ 0x3b
 800dd42:	d806      	bhi.n	800dd52 <touch_slider+0xfe>
		  						//	id_to_display+=3;
		  						//	id_to_displ_fast_scroll = 1 ;
		  					//	}
		  						//else
		  						//{
		  						gl_id_to_display++;
 800dd44:	4b57      	ldr	r3, [pc, #348]	@ (800dea4 <touch_slider+0x250>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	b2da      	uxtb	r2, r3
 800dd4c:	4b55      	ldr	r3, [pc, #340]	@ (800dea4 <touch_slider+0x250>)
 800dd4e:	701a      	strb	r2, [r3, #0]
 800dd50:	e002      	b.n	800dd58 <touch_slider+0x104>
		  						//}
		  					}
		  					else
		  					{
		  						gl_id_to_display = 0;
 800dd52:	4b54      	ldr	r3, [pc, #336]	@ (800dea4 <touch_slider+0x250>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800dd58:	4b53      	ldr	r3, [pc, #332]	@ (800dea8 <touch_slider+0x254>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
 800dd5e:	e034      	b.n	800ddca <touch_slider+0x176>
		  				//	HAL_TIM_Base_Stop_IT(&htim2);
		  				}
		  				else if((second_touch-first_touch == 1 || second_touch-first_touch == 2)&& right_treshold!=1)//
 800dd60:	4b4c      	ldr	r3, [pc, #304]	@ (800de94 <touch_slider+0x240>)
 800dd62:	f993 3000 	ldrsb.w	r3, [r3]
 800dd66:	461a      	mov	r2, r3
 800dd68:	4b48      	ldr	r3, [pc, #288]	@ (800de8c <touch_slider+0x238>)
 800dd6a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d009      	beq.n	800dd88 <touch_slider+0x134>
 800dd74:	4b47      	ldr	r3, [pc, #284]	@ (800de94 <touch_slider+0x240>)
 800dd76:	f993 3000 	ldrsb.w	r3, [r3]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4b43      	ldr	r3, [pc, #268]	@ (800de8c <touch_slider+0x238>)
 800dd7e:	f993 3000 	ldrsb.w	r3, [r3]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d120      	bne.n	800ddca <touch_slider+0x176>
 800dd88:	4b48      	ldr	r3, [pc, #288]	@ (800deac <touch_slider+0x258>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d01c      	beq.n	800ddca <touch_slider+0x176>
		  				{
		  					gl_touch_change_id = 1;
 800dd90:	4b42      	ldr	r3, [pc, #264]	@ (800de9c <touch_slider+0x248>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	701a      	strb	r2, [r3, #0]

		  						  					//touch_accel_to_disp = gl_touch_accel_inc;
		  						  							gl_touch_accel = 0;
 800dd96:	4b3e      	ldr	r3, [pc, #248]	@ (800de90 <touch_slider+0x23c>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	801a      	strh	r2, [r3, #0]
		  						  							gl_touch_accel_inc = 0;
 800dd9c:	4b44      	ldr	r3, [pc, #272]	@ (800deb0 <touch_slider+0x25c>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	801a      	strh	r2, [r3, #0]
		  					touch_direction = DOWN;
 800dda2:	4b3f      	ldr	r3, [pc, #252]	@ (800dea0 <touch_slider+0x24c>)
 800dda4:	2202      	movs	r2, #2
 800dda6:	701a      	strb	r2, [r3, #0]
		  					if(gl_id_to_display>0)
 800dda8:	4b3e      	ldr	r3, [pc, #248]	@ (800dea4 <touch_slider+0x250>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d006      	beq.n	800ddbe <touch_slider+0x16a>
	//	  							id_to_display-=3;
	//	  							//id_to_displ_fast_scroll = 2 ;
	//	  						}
	//	  						else
		  					//	{
		  						gl_id_to_display--;//id_changed_by_touch = 0;
 800ddb0:	4b3c      	ldr	r3, [pc, #240]	@ (800dea4 <touch_slider+0x250>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	4b3a      	ldr	r3, [pc, #232]	@ (800dea4 <touch_slider+0x250>)
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e002      	b.n	800ddc4 <touch_slider+0x170>


		  					}
		  					else
		  					{
		  						gl_id_to_display = 60;
 800ddbe:	4b39      	ldr	r3, [pc, #228]	@ (800dea4 <touch_slider+0x250>)
 800ddc0:	223c      	movs	r2, #60	@ 0x3c
 800ddc2:	701a      	strb	r2, [r3, #0]

		  					}
		  					touch_irq = 0;
 800ddc4:	4b38      	ldr	r3, [pc, #224]	@ (800dea8 <touch_slider+0x254>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
		  				//	HAL_TIM_Base_Stop_IT(&htim2);

		  				}

		  			}
		  			if(left_treshold==1)
 800ddca:	4b33      	ldr	r3, [pc, #204]	@ (800de98 <touch_slider+0x244>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d115      	bne.n	800ddfe <touch_slider+0x1aa>
		  			{
		  				if((first_touch == 1 ||  first_touch == 2) && second_touch == 0)
 800ddd2:	4b2e      	ldr	r3, [pc, #184]	@ (800de8c <touch_slider+0x238>)
 800ddd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d004      	beq.n	800dde6 <touch_slider+0x192>
 800dddc:	4b2b      	ldr	r3, [pc, #172]	@ (800de8c <touch_slider+0x238>)
 800ddde:	f993 3000 	ldrsb.w	r3, [r3]
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d108      	bne.n	800ddf8 <touch_slider+0x1a4>
 800dde6:	4b2b      	ldr	r3, [pc, #172]	@ (800de94 <touch_slider+0x240>)
 800dde8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d103      	bne.n	800ddf8 <touch_slider+0x1a4>
		  				{
		  					left_treshold = 2;
 800ddf0:	4b29      	ldr	r3, [pc, #164]	@ (800de98 <touch_slider+0x244>)
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	e002      	b.n	800ddfe <touch_slider+0x1aa>
		  				}
		  				else
		  				{
		  					left_treshold  = 0;
 800ddf8:	4b27      	ldr	r3, [pc, #156]	@ (800de98 <touch_slider+0x244>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 0 && second_touch == 1)
 800ddfe:	4b23      	ldr	r3, [pc, #140]	@ (800de8c <touch_slider+0x238>)
 800de00:	f993 3000 	ldrsb.w	r3, [r3]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d107      	bne.n	800de18 <touch_slider+0x1c4>
 800de08:	4b22      	ldr	r3, [pc, #136]	@ (800de94 <touch_slider+0x240>)
 800de0a:	f993 3000 	ldrsb.w	r3, [r3]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d102      	bne.n	800de18 <touch_slider+0x1c4>
		  			{
		  				left_treshold = 1;
 800de12:	4b21      	ldr	r3, [pc, #132]	@ (800de98 <touch_slider+0x244>)
 800de14:	2201      	movs	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
		  			}

		  			if(right_treshold==1)
 800de18:	4b24      	ldr	r3, [pc, #144]	@ (800deac <touch_slider+0x258>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d115      	bne.n	800de4c <touch_slider+0x1f8>
		  			{
		  				if((first_touch == 3 ||  first_touch == 2) && second_touch == 4)
 800de20:	4b1a      	ldr	r3, [pc, #104]	@ (800de8c <touch_slider+0x238>)
 800de22:	f993 3000 	ldrsb.w	r3, [r3]
 800de26:	2b03      	cmp	r3, #3
 800de28:	d004      	beq.n	800de34 <touch_slider+0x1e0>
 800de2a:	4b18      	ldr	r3, [pc, #96]	@ (800de8c <touch_slider+0x238>)
 800de2c:	f993 3000 	ldrsb.w	r3, [r3]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d108      	bne.n	800de46 <touch_slider+0x1f2>
 800de34:	4b17      	ldr	r3, [pc, #92]	@ (800de94 <touch_slider+0x240>)
 800de36:	f993 3000 	ldrsb.w	r3, [r3]
 800de3a:	2b04      	cmp	r3, #4
 800de3c:	d103      	bne.n	800de46 <touch_slider+0x1f2>
		  				{
		  					right_treshold = 2;
 800de3e:	4b1b      	ldr	r3, [pc, #108]	@ (800deac <touch_slider+0x258>)
 800de40:	2202      	movs	r2, #2
 800de42:	701a      	strb	r2, [r3, #0]
 800de44:	e002      	b.n	800de4c <touch_slider+0x1f8>
		  				}
		  				else
		  				{
		  					right_treshold  = 0;
 800de46:	4b19      	ldr	r3, [pc, #100]	@ (800deac <touch_slider+0x258>)
 800de48:	2200      	movs	r2, #0
 800de4a:	701a      	strb	r2, [r3, #0]
		  				}
		  			}
		  			if(first_touch == 4 && second_touch == 3)
 800de4c:	4b0f      	ldr	r3, [pc, #60]	@ (800de8c <touch_slider+0x238>)
 800de4e:	f993 3000 	ldrsb.w	r3, [r3]
 800de52:	2b04      	cmp	r3, #4
 800de54:	d107      	bne.n	800de66 <touch_slider+0x212>
 800de56:	4b0f      	ldr	r3, [pc, #60]	@ (800de94 <touch_slider+0x240>)
 800de58:	f993 3000 	ldrsb.w	r3, [r3]
 800de5c:	2b03      	cmp	r3, #3
 800de5e:	d102      	bne.n	800de66 <touch_slider+0x212>
		  			{
		  				right_treshold = 1;
 800de60:	4b12      	ldr	r3, [pc, #72]	@ (800deac <touch_slider+0x258>)
 800de62:	2201      	movs	r2, #1
 800de64:	701a      	strb	r2, [r3, #0]
		  			}
		  			second_touch = first_touch;
 800de66:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <touch_slider+0x238>)
 800de68:	f993 2000 	ldrsb.w	r2, [r3]
 800de6c:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <touch_slider+0x240>)
 800de6e:	701a      	strb	r2, [r3, #0]

		  		else if(touch_direction == NONE)
		  		{

		  		}
		  		first_touch = -100;
 800de70:	4b06      	ldr	r3, [pc, #24]	@ (800de8c <touch_slider+0x238>)
 800de72:	229c      	movs	r2, #156	@ 0x9c
 800de74:	701a      	strb	r2, [r3, #0]
}
 800de76:	bf00      	nop
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	20001d9a 	.word	0x20001d9a
 800de84:	20001d90 	.word	0x20001d90
 800de88:	200005dc 	.word	0x200005dc
 800de8c:	200005e1 	.word	0x200005e1
 800de90:	20000952 	.word	0x20000952
 800de94:	200005e2 	.word	0x200005e2
 800de98:	20001d9b 	.word	0x20001d9b
 800de9c:	20000950 	.word	0x20000950
 800dea0:	20001d9d 	.word	0x20001d9d
 800dea4:	20000945 	.word	0x20000945
 800dea8:	20000944 	.word	0x20000944
 800deac:	20001d9c 	.word	0x20001d9c
 800deb0:	20000954 	.word	0x20000954

0800deb4 <touch_init>:

void touch_init()
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	af00      	add	r7, sp, #0
	MPR121_setregister(MHD_R,0x01);
 800deb8:	2101      	movs	r1, #1
 800deba:	202b      	movs	r0, #43	@ 0x2b
 800debc:	f7ff fe94 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(NHD_R,0x01);
 800dec0:	2101      	movs	r1, #1
 800dec2:	202c      	movs	r0, #44	@ 0x2c
 800dec4:	f7ff fe90 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(NCL_R,0x00);
 800dec8:	2100      	movs	r1, #0
 800deca:	202d      	movs	r0, #45	@ 0x2d
 800decc:	f7ff fe8c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(FDL_R,0x00);
 800ded0:	2100      	movs	r1, #0
 800ded2:	202e      	movs	r0, #46	@ 0x2e
 800ded4:	f7ff fe88 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(MHD_F,0x01);
 800ded8:	2101      	movs	r1, #1
 800deda:	202f      	movs	r0, #47	@ 0x2f
 800dedc:	f7ff fe84 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(NHD_F,0x01);
 800dee0:	2101      	movs	r1, #1
 800dee2:	2030      	movs	r0, #48	@ 0x30
 800dee4:	f7ff fe80 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(NCL_F,0xFF);
 800dee8:	21ff      	movs	r1, #255	@ 0xff
 800deea:	2031      	movs	r0, #49	@ 0x31
 800deec:	f7ff fe7c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(FDL_F,0x02);
 800def0:	2102      	movs	r1, #2
 800def2:	2032      	movs	r0, #50	@ 0x32
 800def4:	f7ff fe78 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE0_T,TOU_THRESH);
 800def8:	2106      	movs	r1, #6
 800defa:	2041      	movs	r0, #65	@ 0x41
 800defc:	f7ff fe74 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE0_R,TOU_THRESH);
 800df00:	2106      	movs	r1, #6
 800df02:	2042      	movs	r0, #66	@ 0x42
 800df04:	f7ff fe70 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE1_T,TOU_THRESH);
 800df08:	2106      	movs	r1, #6
 800df0a:	2043      	movs	r0, #67	@ 0x43
 800df0c:	f7ff fe6c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE1_R,TOU_THRESH);
 800df10:	2106      	movs	r1, #6
 800df12:	2044      	movs	r0, #68	@ 0x44
 800df14:	f7ff fe68 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE2_T,TOU_THRESH);
 800df18:	2106      	movs	r1, #6
 800df1a:	2045      	movs	r0, #69	@ 0x45
 800df1c:	f7ff fe64 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE2_R,TOU_THRESH);
 800df20:	2106      	movs	r1, #6
 800df22:	2046      	movs	r0, #70	@ 0x46
 800df24:	f7ff fe60 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE3_T,TOU_THRESH);
 800df28:	2106      	movs	r1, #6
 800df2a:	2047      	movs	r0, #71	@ 0x47
 800df2c:	f7ff fe5c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE3_R,TOU_THRESH);
 800df30:	2106      	movs	r1, #6
 800df32:	2048      	movs	r0, #72	@ 0x48
 800df34:	f7ff fe58 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE4_T,TOU_THRESH);
 800df38:	2106      	movs	r1, #6
 800df3a:	2049      	movs	r0, #73	@ 0x49
 800df3c:	f7ff fe54 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE4_R,TOU_THRESH);
 800df40:	2106      	movs	r1, #6
 800df42:	204a      	movs	r0, #74	@ 0x4a
 800df44:	f7ff fe50 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE5_T,TOU_THRESH);
 800df48:	2106      	movs	r1, #6
 800df4a:	204b      	movs	r0, #75	@ 0x4b
 800df4c:	f7ff fe4c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE5_R,TOU_THRESH);
 800df50:	2106      	movs	r1, #6
 800df52:	204c      	movs	r0, #76	@ 0x4c
 800df54:	f7ff fe48 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE6_T,TOU_THRESH);
 800df58:	2106      	movs	r1, #6
 800df5a:	204d      	movs	r0, #77	@ 0x4d
 800df5c:	f7ff fe44 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE6_R,TOU_THRESH);
 800df60:	2106      	movs	r1, #6
 800df62:	204e      	movs	r0, #78	@ 0x4e
 800df64:	f7ff fe40 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE7_T,TOU_THRESH);
 800df68:	2106      	movs	r1, #6
 800df6a:	204f      	movs	r0, #79	@ 0x4f
 800df6c:	f7ff fe3c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE7_R,TOU_THRESH);
 800df70:	2106      	movs	r1, #6
 800df72:	2050      	movs	r0, #80	@ 0x50
 800df74:	f7ff fe38 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE8_T,TOU_THRESH);
 800df78:	2106      	movs	r1, #6
 800df7a:	2051      	movs	r0, #81	@ 0x51
 800df7c:	f7ff fe34 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE8_R,TOU_THRESH);
 800df80:	2106      	movs	r1, #6
 800df82:	2052      	movs	r0, #82	@ 0x52
 800df84:	f7ff fe30 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE9_T,TOU_THRESH);
 800df88:	2106      	movs	r1, #6
 800df8a:	2053      	movs	r0, #83	@ 0x53
 800df8c:	f7ff fe2c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE9_R,TOU_THRESH);
 800df90:	2106      	movs	r1, #6
 800df92:	2054      	movs	r0, #84	@ 0x54
 800df94:	f7ff fe28 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE10_T,TOU_THRESH);
 800df98:	2106      	movs	r1, #6
 800df9a:	2055      	movs	r0, #85	@ 0x55
 800df9c:	f7ff fe24 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE10_R,TOU_THRESH);
 800dfa0:	2106      	movs	r1, #6
 800dfa2:	2056      	movs	r0, #86	@ 0x56
 800dfa4:	f7ff fe20 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(ELE11_T,TOU_THRESH);
 800dfa8:	2106      	movs	r1, #6
 800dfaa:	2057      	movs	r0, #87	@ 0x57
 800dfac:	f7ff fe1c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE11_R,TOU_THRESH);
 800dfb0:	2106      	movs	r1, #6
 800dfb2:	2058      	movs	r0, #88	@ 0x58
 800dfb4:	f7ff fe18 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(AFE_CFG1,0x15);
 800dfb8:	2115      	movs	r1, #21
 800dfba:	205c      	movs	r0, #92	@ 0x5c
 800dfbc:	f7ff fe14 	bl	800dbe8 <MPR121_setregister>

	MPR121_setregister(FIL_CFG,0x04);
 800dfc0:	2104      	movs	r1, #4
 800dfc2:	205d      	movs	r0, #93	@ 0x5d
 800dfc4:	f7ff fe10 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800dfc8:	210c      	movs	r1, #12
 800dfca:	205e      	movs	r0, #94	@ 0x5e
 800dfcc:	f7ff fe0c 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ELE_CFG,0x0C);
 800dfd0:	210c      	movs	r1, #12
 800dfd2:	205e      	movs	r0, #94	@ 0x5e
 800dfd4:	f7ff fe08 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ATO_CFG0,0x0F);
 800dfd8:	210f      	movs	r1, #15
 800dfda:	207b      	movs	r0, #123	@ 0x7b
 800dfdc:	f7ff fe04 	bl	800dbe8 <MPR121_setregister>
	MPR121_setregister(ATO_CFGU,0xC8);
 800dfe0:	21c8      	movs	r1, #200	@ 0xc8
 800dfe2:	207d      	movs	r0, #125	@ 0x7d
 800dfe4:	f7ff fe00 	bl	800dbe8 <MPR121_setregister>
}
 800dfe8:	bf00      	nop
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af02      	add	r7, sp, #8
 800dff2:	4603      	mov	r3, r0
 800dff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800dff6:	f107 020f 	add.w	r2, r7, #15
 800dffa:	1df9      	adds	r1, r7, #7
 800dffc:	2364      	movs	r3, #100	@ 0x64
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	2301      	movs	r3, #1
 800e002:	4804      	ldr	r0, [pc, #16]	@ (800e014 <W25qxx_Spi+0x28>)
 800e004:	f7f8 fc7b 	bl	80068fe <HAL_SPI_TransmitReceive>
	return ret;
 800e008:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	2000070c 	.word	0x2000070c

0800e018 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	2300      	movs	r3, #0
 800e024:	60bb      	str	r3, [r7, #8]
 800e026:	2300      	movs	r3, #0
 800e028:	607b      	str	r3, [r7, #4]
 800e02a:	2300      	movs	r3, #0
 800e02c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e02e:	2200      	movs	r2, #0
 800e030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e034:	4813      	ldr	r0, [pc, #76]	@ (800e084 <W25qxx_ReadID+0x6c>)
 800e036:	f7f4 fddb 	bl	8002bf0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800e03a:	209f      	movs	r0, #159	@ 0x9f
 800e03c:	f7ff ffd6 	bl	800dfec <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e040:	20a5      	movs	r0, #165	@ 0xa5
 800e042:	f7ff ffd3 	bl	800dfec <W25qxx_Spi>
 800e046:	4603      	mov	r3, r0
 800e048:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e04a:	20a5      	movs	r0, #165	@ 0xa5
 800e04c:	f7ff ffce 	bl	800dfec <W25qxx_Spi>
 800e050:	4603      	mov	r3, r0
 800e052:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e054:	20a5      	movs	r0, #165	@ 0xa5
 800e056:	f7ff ffc9 	bl	800dfec <W25qxx_Spi>
 800e05a:	4603      	mov	r3, r0
 800e05c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e05e:	2201      	movs	r2, #1
 800e060:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e064:	4807      	ldr	r0, [pc, #28]	@ (800e084 <W25qxx_ReadID+0x6c>)
 800e066:	f7f4 fdc3 	bl	8002bf0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	041a      	lsls	r2, r3, #16
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	021b      	lsls	r3, r3, #8
 800e072:	4313      	orrs	r3, r2
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	4313      	orrs	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]
	return Temp;
 800e07a:	68fb      	ldr	r3, [r7, #12]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	40020800 	.word	0x40020800

0800e088 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800e088:	b590      	push	{r4, r7, lr}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e08e:	2200      	movs	r2, #0
 800e090:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e094:	4816      	ldr	r0, [pc, #88]	@ (800e0f0 <W25qxx_ReadUniqID+0x68>)
 800e096:	f7f4 fdab 	bl	8002bf0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800e09a:	204b      	movs	r0, #75	@ 0x4b
 800e09c:	f7ff ffa6 	bl	800dfec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	71fb      	strb	r3, [r7, #7]
 800e0a4:	e005      	b.n	800e0b2 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e0a6:	20a5      	movs	r0, #165	@ 0xa5
 800e0a8:	f7ff ffa0 	bl	800dfec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800e0ac:	79fb      	ldrb	r3, [r7, #7]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	71fb      	strb	r3, [r7, #7]
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	2b03      	cmp	r3, #3
 800e0b6:	d9f6      	bls.n	800e0a6 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	71bb      	strb	r3, [r7, #6]
 800e0bc:	e00b      	b.n	800e0d6 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e0be:	79bc      	ldrb	r4, [r7, #6]
 800e0c0:	20a5      	movs	r0, #165	@ 0xa5
 800e0c2:	f7ff ff93 	bl	800dfec <W25qxx_Spi>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f4 <W25qxx_ReadUniqID+0x6c>)
 800e0cc:	4423      	add	r3, r4
 800e0ce:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800e0d0:	79bb      	ldrb	r3, [r7, #6]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	71bb      	strb	r3, [r7, #6]
 800e0d6:	79bb      	ldrb	r3, [r7, #6]
 800e0d8:	2b07      	cmp	r3, #7
 800e0da:	d9f0      	bls.n	800e0be <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e0e2:	4803      	ldr	r0, [pc, #12]	@ (800e0f0 <W25qxx_ReadUniqID+0x68>)
 800e0e4:	f7f4 fd84 	bl	8002bf0 <HAL_GPIO_WritePin>
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd90      	pop	{r4, r7, pc}
 800e0f0:	40020800 	.word	0x40020800
 800e0f4:	20001da0 	.word	0x20001da0

0800e0f8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	4603      	mov	r3, r0
 800e100:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e106:	2200      	movs	r2, #0
 800e108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e10c:	481c      	ldr	r0, [pc, #112]	@ (800e180 <W25qxx_ReadStatusRegister+0x88>)
 800e10e:	f7f4 fd6f 	bl	8002bf0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d10c      	bne.n	800e132 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800e118:	2005      	movs	r0, #5
 800e11a:	f7ff ff67 	bl	800dfec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e11e:	20a5      	movs	r0, #165	@ 0xa5
 800e120:	f7ff ff64 	bl	800dfec <W25qxx_Spi>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800e128:	4a16      	ldr	r2, [pc, #88]	@ (800e184 <W25qxx_ReadStatusRegister+0x8c>)
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800e130:	e01b      	b.n	800e16a <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d10c      	bne.n	800e152 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800e138:	2035      	movs	r0, #53	@ 0x35
 800e13a:	f7ff ff57 	bl	800dfec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e13e:	20a5      	movs	r0, #165	@ 0xa5
 800e140:	f7ff ff54 	bl	800dfec <W25qxx_Spi>
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800e148:	4a0e      	ldr	r2, [pc, #56]	@ (800e184 <W25qxx_ReadStatusRegister+0x8c>)
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 800e150:	e00b      	b.n	800e16a <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800e152:	2015      	movs	r0, #21
 800e154:	f7ff ff4a 	bl	800dfec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800e158:	20a5      	movs	r0, #165	@ 0xa5
 800e15a:	f7ff ff47 	bl	800dfec <W25qxx_Spi>
 800e15e:	4603      	mov	r3, r0
 800e160:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800e162:	4a08      	ldr	r2, [pc, #32]	@ (800e184 <W25qxx_ReadStatusRegister+0x8c>)
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e16a:	2201      	movs	r2, #1
 800e16c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e170:	4803      	ldr	r0, [pc, #12]	@ (800e180 <W25qxx_ReadStatusRegister+0x88>)
 800e172:	f7f4 fd3d 	bl	8002bf0 <HAL_GPIO_WritePin>
	return status;
 800e176:	7bfb      	ldrb	r3, [r7, #15]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	40020800 	.word	0x40020800
 800e184:	20001da0 	.word	0x20001da0

0800e188 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800e18e:	4b65      	ldr	r3, [pc, #404]	@ (800e324 <W25qxx_Init+0x19c>)
 800e190:	2201      	movs	r2, #1
 800e192:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while (HAL_GetTick() < 100)
 800e196:	e002      	b.n	800e19e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800e198:	2001      	movs	r0, #1
 800e19a:	f7f3 fb8b 	bl	80018b4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800e19e:	f7f3 fb7d 	bl	800189c <HAL_GetTick>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b63      	cmp	r3, #99	@ 0x63
 800e1a6:	d9f7      	bls.n	800e198 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e1ae:	485e      	ldr	r0, [pc, #376]	@ (800e328 <W25qxx_Init+0x1a0>)
 800e1b0:	f7f4 fd1e 	bl	8002bf0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800e1b4:	2064      	movs	r0, #100	@ 0x64
 800e1b6:	f7f3 fb7d 	bl	80018b4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800e1ba:	f7ff ff2d 	bl	800e018 <W25qxx_ReadID>
 800e1be:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	3b11      	subs	r3, #17
 800e1c6:	2b0f      	cmp	r3, #15
 800e1c8:	d86b      	bhi.n	800e2a2 <W25qxx_Init+0x11a>
 800e1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d0 <W25qxx_Init+0x48>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e295 	.word	0x0800e295
 800e1d4:	0800e287 	.word	0x0800e287
 800e1d8:	0800e279 	.word	0x0800e279
 800e1dc:	0800e26b 	.word	0x0800e26b
 800e1e0:	0800e25d 	.word	0x0800e25d
 800e1e4:	0800e24f 	.word	0x0800e24f
 800e1e8:	0800e241 	.word	0x0800e241
 800e1ec:	0800e231 	.word	0x0800e231
 800e1f0:	0800e221 	.word	0x0800e221
 800e1f4:	0800e2a3 	.word	0x0800e2a3
 800e1f8:	0800e2a3 	.word	0x0800e2a3
 800e1fc:	0800e2a3 	.word	0x0800e2a3
 800e200:	0800e2a3 	.word	0x0800e2a3
 800e204:	0800e2a3 	.word	0x0800e2a3
 800e208:	0800e2a3 	.word	0x0800e2a3
 800e20c:	0800e211 	.word	0x0800e211
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800e210:	4b44      	ldr	r3, [pc, #272]	@ (800e324 <W25qxx_Init+0x19c>)
 800e212:	220a      	movs	r2, #10
 800e214:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800e216:	4b43      	ldr	r3, [pc, #268]	@ (800e324 <W25qxx_Init+0x19c>)
 800e218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e21c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800e21e:	e046      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800e220:	4b40      	ldr	r3, [pc, #256]	@ (800e324 <W25qxx_Init+0x19c>)
 800e222:	2209      	movs	r2, #9
 800e224:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800e226:	4b3f      	ldr	r3, [pc, #252]	@ (800e324 <W25qxx_Init+0x19c>)
 800e228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e22c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800e22e:	e03e      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800e230:	4b3c      	ldr	r3, [pc, #240]	@ (800e324 <W25qxx_Init+0x19c>)
 800e232:	2208      	movs	r2, #8
 800e234:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800e236:	4b3b      	ldr	r3, [pc, #236]	@ (800e324 <W25qxx_Init+0x19c>)
 800e238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e23c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800e23e:	e036      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800e240:	4b38      	ldr	r3, [pc, #224]	@ (800e324 <W25qxx_Init+0x19c>)
 800e242:	2207      	movs	r2, #7
 800e244:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800e246:	4b37      	ldr	r3, [pc, #220]	@ (800e324 <W25qxx_Init+0x19c>)
 800e248:	2280      	movs	r2, #128	@ 0x80
 800e24a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800e24c:	e02f      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800e24e:	4b35      	ldr	r3, [pc, #212]	@ (800e324 <W25qxx_Init+0x19c>)
 800e250:	2206      	movs	r2, #6
 800e252:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800e254:	4b33      	ldr	r3, [pc, #204]	@ (800e324 <W25qxx_Init+0x19c>)
 800e256:	2240      	movs	r2, #64	@ 0x40
 800e258:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800e25a:	e028      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800e25c:	4b31      	ldr	r3, [pc, #196]	@ (800e324 <W25qxx_Init+0x19c>)
 800e25e:	2205      	movs	r2, #5
 800e260:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800e262:	4b30      	ldr	r3, [pc, #192]	@ (800e324 <W25qxx_Init+0x19c>)
 800e264:	2220      	movs	r2, #32
 800e266:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800e268:	e021      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800e26a:	4b2e      	ldr	r3, [pc, #184]	@ (800e324 <W25qxx_Init+0x19c>)
 800e26c:	2204      	movs	r2, #4
 800e26e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800e270:	4b2c      	ldr	r3, [pc, #176]	@ (800e324 <W25qxx_Init+0x19c>)
 800e272:	2210      	movs	r2, #16
 800e274:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800e276:	e01a      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800e278:	4b2a      	ldr	r3, [pc, #168]	@ (800e324 <W25qxx_Init+0x19c>)
 800e27a:	2203      	movs	r2, #3
 800e27c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800e27e:	4b29      	ldr	r3, [pc, #164]	@ (800e324 <W25qxx_Init+0x19c>)
 800e280:	2208      	movs	r2, #8
 800e282:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800e284:	e013      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800e286:	4b27      	ldr	r3, [pc, #156]	@ (800e324 <W25qxx_Init+0x19c>)
 800e288:	2202      	movs	r2, #2
 800e28a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800e28c:	4b25      	ldr	r3, [pc, #148]	@ (800e324 <W25qxx_Init+0x19c>)
 800e28e:	2204      	movs	r2, #4
 800e290:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800e292:	e00c      	b.n	800e2ae <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800e294:	4b23      	ldr	r3, [pc, #140]	@ (800e324 <W25qxx_Init+0x19c>)
 800e296:	2201      	movs	r2, #1
 800e298:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800e29a:	4b22      	ldr	r3, [pc, #136]	@ (800e324 <W25qxx_Init+0x19c>)
 800e29c:	2202      	movs	r2, #2
 800e29e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800e2a0:	e005      	b.n	800e2ae <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800e2a2:	4b20      	ldr	r3, [pc, #128]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		return false;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e036      	b.n	800e31c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800e2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e2b4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800e2b6:	4b1b      	ldr	r3, [pc, #108]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e2bc:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800e2be:	4b19      	ldr	r3, [pc, #100]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	011b      	lsls	r3, r3, #4
 800e2c4:	4a17      	ldr	r2, [pc, #92]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2c6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800e2c8:	4b16      	ldr	r3, [pc, #88]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	4a15      	ldr	r2, [pc, #84]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2ce:	6912      	ldr	r2, [r2, #16]
 800e2d0:	fb02 f303 	mul.w	r3, r2, r3
 800e2d4:	4a13      	ldr	r2, [pc, #76]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2d6:	8952      	ldrh	r2, [r2, #10]
 800e2d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2dc:	4a11      	ldr	r2, [pc, #68]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2de:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800e2e0:	4b10      	ldr	r3, [pc, #64]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	011b      	lsls	r3, r3, #4
 800e2e6:	4a0f      	ldr	r2, [pc, #60]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2e8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2f0:	6912      	ldr	r2, [r2, #16]
 800e2f2:	fb02 f303 	mul.w	r3, r2, r3
 800e2f6:	0a9b      	lsrs	r3, r3, #10
 800e2f8:	4a0a      	ldr	r2, [pc, #40]	@ (800e324 <W25qxx_Init+0x19c>)
 800e2fa:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800e2fc:	f7ff fec4 	bl	800e088 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800e300:	2001      	movs	r0, #1
 800e302:	f7ff fef9 	bl	800e0f8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800e306:	2002      	movs	r0, #2
 800e308:	f7ff fef6 	bl	800e0f8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800e30c:	2003      	movs	r0, #3
 800e30e:	f7ff fef3 	bl	800e0f8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800e312:	4b04      	ldr	r3, [pc, #16]	@ (800e324 <W25qxx_Init+0x19c>)
 800e314:	2200      	movs	r2, #0
 800e316:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 800e31a:	2301      	movs	r3, #1
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20001da0 	.word	0x20001da0
 800e328:	40020800 	.word	0x40020800

0800e32c <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800e334:	4b07      	ldr	r3, [pc, #28]	@ (800e354 <W25qxx_BlockToPage+0x28>)
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	fb02 f303 	mul.w	r3, r2, r3
 800e33e:	4a05      	ldr	r2, [pc, #20]	@ (800e354 <W25qxx_BlockToPage+0x28>)
 800e340:	8952      	ldrh	r2, [r2, #10]
 800e342:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	20001da0 	.word	0x20001da0

0800e358 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800e366:	e002      	b.n	800e36e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800e368:	2001      	movs	r0, #1
 800e36a:	f7f3 faa3 	bl	80018b4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800e36e:	4b37      	ldr	r3, [pc, #220]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e370:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e374:	2b01      	cmp	r3, #1
 800e376:	d0f7      	beq.n	800e368 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800e378:	4b34      	ldr	r3, [pc, #208]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e37a:	2201      	movs	r2, #1
 800e37c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800e380:	4b32      	ldr	r3, [pc, #200]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e382:	895b      	ldrh	r3, [r3, #10]
 800e384:	461a      	mov	r2, r3
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	4293      	cmp	r3, r2
 800e38a:	d802      	bhi.n	800e392 <W25qxx_ReadPage+0x3a>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800e392:	4b2e      	ldr	r3, [pc, #184]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e394:	895b      	ldrh	r3, [r3, #10]
 800e396:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	4a2b      	ldr	r2, [pc, #172]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e3a0:	8952      	ldrh	r2, [r2, #10]
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d905      	bls.n	800e3b2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800e3a6:	4b29      	ldr	r3, [pc, #164]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e3a8:	895b      	ldrh	r3, [r3, #10]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800e3b2:	4b26      	ldr	r3, [pc, #152]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e3b4:	895b      	ldrh	r3, [r3, #10]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	fb02 f303 	mul.w	r3, r2, r3
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e3ca:	4821      	ldr	r0, [pc, #132]	@ (800e450 <W25qxx_ReadPage+0xf8>)
 800e3cc:	f7f4 fc10 	bl	8002bf0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800e3d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b08      	cmp	r3, #8
 800e3d6:	d909      	bls.n	800e3ec <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 800e3d8:	200c      	movs	r0, #12
 800e3da:	f7ff fe07 	bl	800dfec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	0e1b      	lsrs	r3, r3, #24
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff fe01 	bl	800dfec <W25qxx_Spi>
 800e3ea:	e002      	b.n	800e3f2 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800e3ec:	200b      	movs	r0, #11
 800e3ee:	f7ff fdfd 	bl	800dfec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	0c1b      	lsrs	r3, r3, #16
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff fdf7 	bl	800dfec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	0a1b      	lsrs	r3, r3, #8
 800e402:	b2db      	uxtb	r3, r3
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff fdf1 	bl	800dfec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fdec 	bl	800dfec <W25qxx_Spi>
	W25qxx_Spi(0);
 800e414:	2000      	movs	r0, #0
 800e416:	f7ff fde9 	bl	800dfec <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	2364      	movs	r3, #100	@ 0x64
 800e420:	68f9      	ldr	r1, [r7, #12]
 800e422:	480c      	ldr	r0, [pc, #48]	@ (800e454 <W25qxx_ReadPage+0xfc>)
 800e424:	f7f8 f95a 	bl	80066dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800e428:	2201      	movs	r2, #1
 800e42a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e42e:	4808      	ldr	r0, [pc, #32]	@ (800e450 <W25qxx_ReadPage+0xf8>)
 800e430:	f7f4 fbde 	bl	8002bf0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800e434:	2001      	movs	r0, #1
 800e436:	f7f3 fa3d 	bl	80018b4 <HAL_Delay>
	w25qxx.Lock = 0;
 800e43a:	4b04      	ldr	r3, [pc, #16]	@ (800e44c <W25qxx_ReadPage+0xf4>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800e442:	bf00      	nop
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20001da0 	.word	0x20001da0
 800e450:	40020800 	.word	0x40020800
 800e454:	2000070c 	.word	0x2000070c

0800e458 <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800e466:	4b2c      	ldr	r3, [pc, #176]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d802      	bhi.n	800e476 <W25qxx_ReadBlock+0x1e>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d102      	bne.n	800e47c <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800e476:	4b28      	ldr	r3, [pc, #160]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800e47c:	4b26      	ldr	r3, [pc, #152]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e47e:	699b      	ldr	r3, [r3, #24]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d243      	bcs.n	800e50e <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	441a      	add	r2, r3
 800e48c:	4b22      	ldr	r3, [pc, #136]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e48e:	699b      	ldr	r3, [r3, #24]
 800e490:	429a      	cmp	r2, r3
 800e492:	d905      	bls.n	800e4a0 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800e494:	4b20      	ldr	r3, [pc, #128]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e496:	699a      	ldr	r2, [r3, #24]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	61bb      	str	r3, [r7, #24]
 800e49e:	e001      	b.n	800e4a4 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800e4a4:	68b8      	ldr	r0, [r7, #8]
 800e4a6:	f7ff ff41 	bl	800e32c <W25qxx_BlockToPage>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4b8:	4413      	add	r3, r2
 800e4ba:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800e4bc:	4b16      	ldr	r3, [pc, #88]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e4be:	895b      	ldrh	r3, [r3, #10]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4c8:	fb01 f202 	mul.w	r2, r1, r2
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	617b      	str	r3, [r7, #20]
	do
	{

		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	69f9      	ldr	r1, [r7, #28]
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f7ff ff3e 	bl	800e358 <W25qxx_ReadPage>
		StartPage++;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e4e4:	895b      	ldrh	r3, [r3, #10]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	1a9a      	subs	r2, r3, r2
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800e4f2:	4b09      	ldr	r3, [pc, #36]	@ (800e518 <W25qxx_ReadBlock+0xc0>)
 800e4f4:	895b      	ldrh	r3, [r3, #10]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	1ad3      	subs	r3, r2, r3
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dce1      	bgt.n	800e4d0 <W25qxx_ReadBlock+0x78>
 800e50c:	e000      	b.n	800e510 <W25qxx_ReadBlock+0xb8>
		return;
 800e50e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800e510:	3720      	adds	r7, #32
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	20001da0 	.word	0x20001da0

0800e51c <siprintf>:
 800e51c:	b40e      	push	{r1, r2, r3}
 800e51e:	b500      	push	{lr}
 800e520:	b09c      	sub	sp, #112	@ 0x70
 800e522:	ab1d      	add	r3, sp, #116	@ 0x74
 800e524:	9002      	str	r0, [sp, #8]
 800e526:	9006      	str	r0, [sp, #24]
 800e528:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e52c:	4809      	ldr	r0, [pc, #36]	@ (800e554 <siprintf+0x38>)
 800e52e:	9107      	str	r1, [sp, #28]
 800e530:	9104      	str	r1, [sp, #16]
 800e532:	4909      	ldr	r1, [pc, #36]	@ (800e558 <siprintf+0x3c>)
 800e534:	f853 2b04 	ldr.w	r2, [r3], #4
 800e538:	9105      	str	r1, [sp, #20]
 800e53a:	6800      	ldr	r0, [r0, #0]
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	a902      	add	r1, sp, #8
 800e540:	f000 f994 	bl	800e86c <_svfiprintf_r>
 800e544:	9b02      	ldr	r3, [sp, #8]
 800e546:	2200      	movs	r2, #0
 800e548:	701a      	strb	r2, [r3, #0]
 800e54a:	b01c      	add	sp, #112	@ 0x70
 800e54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e550:	b003      	add	sp, #12
 800e552:	4770      	bx	lr
 800e554:	200005e4 	.word	0x200005e4
 800e558:	ffff0208 	.word	0xffff0208

0800e55c <memset>:
 800e55c:	4402      	add	r2, r0
 800e55e:	4603      	mov	r3, r0
 800e560:	4293      	cmp	r3, r2
 800e562:	d100      	bne.n	800e566 <memset+0xa>
 800e564:	4770      	bx	lr
 800e566:	f803 1b01 	strb.w	r1, [r3], #1
 800e56a:	e7f9      	b.n	800e560 <memset+0x4>

0800e56c <__errno>:
 800e56c:	4b01      	ldr	r3, [pc, #4]	@ (800e574 <__errno+0x8>)
 800e56e:	6818      	ldr	r0, [r3, #0]
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	200005e4 	.word	0x200005e4

0800e578 <__libc_init_array>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	4d0d      	ldr	r5, [pc, #52]	@ (800e5b0 <__libc_init_array+0x38>)
 800e57c:	4c0d      	ldr	r4, [pc, #52]	@ (800e5b4 <__libc_init_array+0x3c>)
 800e57e:	1b64      	subs	r4, r4, r5
 800e580:	10a4      	asrs	r4, r4, #2
 800e582:	2600      	movs	r6, #0
 800e584:	42a6      	cmp	r6, r4
 800e586:	d109      	bne.n	800e59c <__libc_init_array+0x24>
 800e588:	4d0b      	ldr	r5, [pc, #44]	@ (800e5b8 <__libc_init_array+0x40>)
 800e58a:	4c0c      	ldr	r4, [pc, #48]	@ (800e5bc <__libc_init_array+0x44>)
 800e58c:	f000 fc66 	bl	800ee5c <_init>
 800e590:	1b64      	subs	r4, r4, r5
 800e592:	10a4      	asrs	r4, r4, #2
 800e594:	2600      	movs	r6, #0
 800e596:	42a6      	cmp	r6, r4
 800e598:	d105      	bne.n	800e5a6 <__libc_init_array+0x2e>
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5a0:	4798      	blx	r3
 800e5a2:	3601      	adds	r6, #1
 800e5a4:	e7ee      	b.n	800e584 <__libc_init_array+0xc>
 800e5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5aa:	4798      	blx	r3
 800e5ac:	3601      	adds	r6, #1
 800e5ae:	e7f2      	b.n	800e596 <__libc_init_array+0x1e>
 800e5b0:	0801197c 	.word	0x0801197c
 800e5b4:	0801197c 	.word	0x0801197c
 800e5b8:	0801197c 	.word	0x0801197c
 800e5bc:	08011980 	.word	0x08011980

0800e5c0 <__retarget_lock_acquire_recursive>:
 800e5c0:	4770      	bx	lr

0800e5c2 <__retarget_lock_release_recursive>:
 800e5c2:	4770      	bx	lr

0800e5c4 <_free_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	2900      	cmp	r1, #0
 800e5ca:	d041      	beq.n	800e650 <_free_r+0x8c>
 800e5cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5d0:	1f0c      	subs	r4, r1, #4
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	bfb8      	it	lt
 800e5d6:	18e4      	addlt	r4, r4, r3
 800e5d8:	f000 f8e0 	bl	800e79c <__malloc_lock>
 800e5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e654 <_free_r+0x90>)
 800e5de:	6813      	ldr	r3, [r2, #0]
 800e5e0:	b933      	cbnz	r3, 800e5f0 <_free_r+0x2c>
 800e5e2:	6063      	str	r3, [r4, #4]
 800e5e4:	6014      	str	r4, [r2, #0]
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ec:	f000 b8dc 	b.w	800e7a8 <__malloc_unlock>
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	d908      	bls.n	800e606 <_free_r+0x42>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	1821      	adds	r1, r4, r0
 800e5f8:	428b      	cmp	r3, r1
 800e5fa:	bf01      	itttt	eq
 800e5fc:	6819      	ldreq	r1, [r3, #0]
 800e5fe:	685b      	ldreq	r3, [r3, #4]
 800e600:	1809      	addeq	r1, r1, r0
 800e602:	6021      	streq	r1, [r4, #0]
 800e604:	e7ed      	b.n	800e5e2 <_free_r+0x1e>
 800e606:	461a      	mov	r2, r3
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	b10b      	cbz	r3, 800e610 <_free_r+0x4c>
 800e60c:	42a3      	cmp	r3, r4
 800e60e:	d9fa      	bls.n	800e606 <_free_r+0x42>
 800e610:	6811      	ldr	r1, [r2, #0]
 800e612:	1850      	adds	r0, r2, r1
 800e614:	42a0      	cmp	r0, r4
 800e616:	d10b      	bne.n	800e630 <_free_r+0x6c>
 800e618:	6820      	ldr	r0, [r4, #0]
 800e61a:	4401      	add	r1, r0
 800e61c:	1850      	adds	r0, r2, r1
 800e61e:	4283      	cmp	r3, r0
 800e620:	6011      	str	r1, [r2, #0]
 800e622:	d1e0      	bne.n	800e5e6 <_free_r+0x22>
 800e624:	6818      	ldr	r0, [r3, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	6053      	str	r3, [r2, #4]
 800e62a:	4408      	add	r0, r1
 800e62c:	6010      	str	r0, [r2, #0]
 800e62e:	e7da      	b.n	800e5e6 <_free_r+0x22>
 800e630:	d902      	bls.n	800e638 <_free_r+0x74>
 800e632:	230c      	movs	r3, #12
 800e634:	602b      	str	r3, [r5, #0]
 800e636:	e7d6      	b.n	800e5e6 <_free_r+0x22>
 800e638:	6820      	ldr	r0, [r4, #0]
 800e63a:	1821      	adds	r1, r4, r0
 800e63c:	428b      	cmp	r3, r1
 800e63e:	bf04      	itt	eq
 800e640:	6819      	ldreq	r1, [r3, #0]
 800e642:	685b      	ldreq	r3, [r3, #4]
 800e644:	6063      	str	r3, [r4, #4]
 800e646:	bf04      	itt	eq
 800e648:	1809      	addeq	r1, r1, r0
 800e64a:	6021      	streq	r1, [r4, #0]
 800e64c:	6054      	str	r4, [r2, #4]
 800e64e:	e7ca      	b.n	800e5e6 <_free_r+0x22>
 800e650:	bd38      	pop	{r3, r4, r5, pc}
 800e652:	bf00      	nop
 800e654:	20001f0c 	.word	0x20001f0c

0800e658 <sbrk_aligned>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	4e0f      	ldr	r6, [pc, #60]	@ (800e698 <sbrk_aligned+0x40>)
 800e65c:	460c      	mov	r4, r1
 800e65e:	6831      	ldr	r1, [r6, #0]
 800e660:	4605      	mov	r5, r0
 800e662:	b911      	cbnz	r1, 800e66a <sbrk_aligned+0x12>
 800e664:	f000 fba6 	bl	800edb4 <_sbrk_r>
 800e668:	6030      	str	r0, [r6, #0]
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f000 fba1 	bl	800edb4 <_sbrk_r>
 800e672:	1c43      	adds	r3, r0, #1
 800e674:	d103      	bne.n	800e67e <sbrk_aligned+0x26>
 800e676:	f04f 34ff 	mov.w	r4, #4294967295
 800e67a:	4620      	mov	r0, r4
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	1cc4      	adds	r4, r0, #3
 800e680:	f024 0403 	bic.w	r4, r4, #3
 800e684:	42a0      	cmp	r0, r4
 800e686:	d0f8      	beq.n	800e67a <sbrk_aligned+0x22>
 800e688:	1a21      	subs	r1, r4, r0
 800e68a:	4628      	mov	r0, r5
 800e68c:	f000 fb92 	bl	800edb4 <_sbrk_r>
 800e690:	3001      	adds	r0, #1
 800e692:	d1f2      	bne.n	800e67a <sbrk_aligned+0x22>
 800e694:	e7ef      	b.n	800e676 <sbrk_aligned+0x1e>
 800e696:	bf00      	nop
 800e698:	20001f08 	.word	0x20001f08

0800e69c <_malloc_r>:
 800e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	1ccd      	adds	r5, r1, #3
 800e6a2:	f025 0503 	bic.w	r5, r5, #3
 800e6a6:	3508      	adds	r5, #8
 800e6a8:	2d0c      	cmp	r5, #12
 800e6aa:	bf38      	it	cc
 800e6ac:	250c      	movcc	r5, #12
 800e6ae:	2d00      	cmp	r5, #0
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	db01      	blt.n	800e6b8 <_malloc_r+0x1c>
 800e6b4:	42a9      	cmp	r1, r5
 800e6b6:	d904      	bls.n	800e6c2 <_malloc_r+0x26>
 800e6b8:	230c      	movs	r3, #12
 800e6ba:	6033      	str	r3, [r6, #0]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e798 <_malloc_r+0xfc>
 800e6c6:	f000 f869 	bl	800e79c <__malloc_lock>
 800e6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ce:	461c      	mov	r4, r3
 800e6d0:	bb44      	cbnz	r4, 800e724 <_malloc_r+0x88>
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff ffbf 	bl	800e658 <sbrk_aligned>
 800e6da:	1c43      	adds	r3, r0, #1
 800e6dc:	4604      	mov	r4, r0
 800e6de:	d158      	bne.n	800e792 <_malloc_r+0xf6>
 800e6e0:	f8d8 4000 	ldr.w	r4, [r8]
 800e6e4:	4627      	mov	r7, r4
 800e6e6:	2f00      	cmp	r7, #0
 800e6e8:	d143      	bne.n	800e772 <_malloc_r+0xd6>
 800e6ea:	2c00      	cmp	r4, #0
 800e6ec:	d04b      	beq.n	800e786 <_malloc_r+0xea>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	eb04 0903 	add.w	r9, r4, r3
 800e6f8:	f000 fb5c 	bl	800edb4 <_sbrk_r>
 800e6fc:	4581      	cmp	r9, r0
 800e6fe:	d142      	bne.n	800e786 <_malloc_r+0xea>
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	1a6d      	subs	r5, r5, r1
 800e704:	4629      	mov	r1, r5
 800e706:	4630      	mov	r0, r6
 800e708:	f7ff ffa6 	bl	800e658 <sbrk_aligned>
 800e70c:	3001      	adds	r0, #1
 800e70e:	d03a      	beq.n	800e786 <_malloc_r+0xea>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	442b      	add	r3, r5
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	f8d8 3000 	ldr.w	r3, [r8]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	bb62      	cbnz	r2, 800e778 <_malloc_r+0xdc>
 800e71e:	f8c8 7000 	str.w	r7, [r8]
 800e722:	e00f      	b.n	800e744 <_malloc_r+0xa8>
 800e724:	6822      	ldr	r2, [r4, #0]
 800e726:	1b52      	subs	r2, r2, r5
 800e728:	d420      	bmi.n	800e76c <_malloc_r+0xd0>
 800e72a:	2a0b      	cmp	r2, #11
 800e72c:	d917      	bls.n	800e75e <_malloc_r+0xc2>
 800e72e:	1961      	adds	r1, r4, r5
 800e730:	42a3      	cmp	r3, r4
 800e732:	6025      	str	r5, [r4, #0]
 800e734:	bf18      	it	ne
 800e736:	6059      	strne	r1, [r3, #4]
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	bf08      	it	eq
 800e73c:	f8c8 1000 	streq.w	r1, [r8]
 800e740:	5162      	str	r2, [r4, r5]
 800e742:	604b      	str	r3, [r1, #4]
 800e744:	4630      	mov	r0, r6
 800e746:	f000 f82f 	bl	800e7a8 <__malloc_unlock>
 800e74a:	f104 000b 	add.w	r0, r4, #11
 800e74e:	1d23      	adds	r3, r4, #4
 800e750:	f020 0007 	bic.w	r0, r0, #7
 800e754:	1ac2      	subs	r2, r0, r3
 800e756:	bf1c      	itt	ne
 800e758:	1a1b      	subne	r3, r3, r0
 800e75a:	50a3      	strne	r3, [r4, r2]
 800e75c:	e7af      	b.n	800e6be <_malloc_r+0x22>
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	42a3      	cmp	r3, r4
 800e762:	bf0c      	ite	eq
 800e764:	f8c8 2000 	streq.w	r2, [r8]
 800e768:	605a      	strne	r2, [r3, #4]
 800e76a:	e7eb      	b.n	800e744 <_malloc_r+0xa8>
 800e76c:	4623      	mov	r3, r4
 800e76e:	6864      	ldr	r4, [r4, #4]
 800e770:	e7ae      	b.n	800e6d0 <_malloc_r+0x34>
 800e772:	463c      	mov	r4, r7
 800e774:	687f      	ldr	r7, [r7, #4]
 800e776:	e7b6      	b.n	800e6e6 <_malloc_r+0x4a>
 800e778:	461a      	mov	r2, r3
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	d1fb      	bne.n	800e778 <_malloc_r+0xdc>
 800e780:	2300      	movs	r3, #0
 800e782:	6053      	str	r3, [r2, #4]
 800e784:	e7de      	b.n	800e744 <_malloc_r+0xa8>
 800e786:	230c      	movs	r3, #12
 800e788:	6033      	str	r3, [r6, #0]
 800e78a:	4630      	mov	r0, r6
 800e78c:	f000 f80c 	bl	800e7a8 <__malloc_unlock>
 800e790:	e794      	b.n	800e6bc <_malloc_r+0x20>
 800e792:	6005      	str	r5, [r0, #0]
 800e794:	e7d6      	b.n	800e744 <_malloc_r+0xa8>
 800e796:	bf00      	nop
 800e798:	20001f0c 	.word	0x20001f0c

0800e79c <__malloc_lock>:
 800e79c:	4801      	ldr	r0, [pc, #4]	@ (800e7a4 <__malloc_lock+0x8>)
 800e79e:	f7ff bf0f 	b.w	800e5c0 <__retarget_lock_acquire_recursive>
 800e7a2:	bf00      	nop
 800e7a4:	20001f04 	.word	0x20001f04

0800e7a8 <__malloc_unlock>:
 800e7a8:	4801      	ldr	r0, [pc, #4]	@ (800e7b0 <__malloc_unlock+0x8>)
 800e7aa:	f7ff bf0a 	b.w	800e5c2 <__retarget_lock_release_recursive>
 800e7ae:	bf00      	nop
 800e7b0:	20001f04 	.word	0x20001f04

0800e7b4 <__ssputs_r>:
 800e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	688e      	ldr	r6, [r1, #8]
 800e7ba:	461f      	mov	r7, r3
 800e7bc:	42be      	cmp	r6, r7
 800e7be:	680b      	ldr	r3, [r1, #0]
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4690      	mov	r8, r2
 800e7c6:	d82d      	bhi.n	800e824 <__ssputs_r+0x70>
 800e7c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7d0:	d026      	beq.n	800e820 <__ssputs_r+0x6c>
 800e7d2:	6965      	ldr	r5, [r4, #20]
 800e7d4:	6909      	ldr	r1, [r1, #16]
 800e7d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7da:	eba3 0901 	sub.w	r9, r3, r1
 800e7de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7e2:	1c7b      	adds	r3, r7, #1
 800e7e4:	444b      	add	r3, r9
 800e7e6:	106d      	asrs	r5, r5, #1
 800e7e8:	429d      	cmp	r5, r3
 800e7ea:	bf38      	it	cc
 800e7ec:	461d      	movcc	r5, r3
 800e7ee:	0553      	lsls	r3, r2, #21
 800e7f0:	d527      	bpl.n	800e842 <__ssputs_r+0x8e>
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	f7ff ff52 	bl	800e69c <_malloc_r>
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	b360      	cbz	r0, 800e856 <__ssputs_r+0xa2>
 800e7fc:	6921      	ldr	r1, [r4, #16]
 800e7fe:	464a      	mov	r2, r9
 800e800:	f000 fae8 	bl	800edd4 <memcpy>
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	6126      	str	r6, [r4, #16]
 800e812:	6165      	str	r5, [r4, #20]
 800e814:	444e      	add	r6, r9
 800e816:	eba5 0509 	sub.w	r5, r5, r9
 800e81a:	6026      	str	r6, [r4, #0]
 800e81c:	60a5      	str	r5, [r4, #8]
 800e81e:	463e      	mov	r6, r7
 800e820:	42be      	cmp	r6, r7
 800e822:	d900      	bls.n	800e826 <__ssputs_r+0x72>
 800e824:	463e      	mov	r6, r7
 800e826:	6820      	ldr	r0, [r4, #0]
 800e828:	4632      	mov	r2, r6
 800e82a:	4641      	mov	r1, r8
 800e82c:	f000 faa8 	bl	800ed80 <memmove>
 800e830:	68a3      	ldr	r3, [r4, #8]
 800e832:	1b9b      	subs	r3, r3, r6
 800e834:	60a3      	str	r3, [r4, #8]
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	4433      	add	r3, r6
 800e83a:	6023      	str	r3, [r4, #0]
 800e83c:	2000      	movs	r0, #0
 800e83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e842:	462a      	mov	r2, r5
 800e844:	f000 fad4 	bl	800edf0 <_realloc_r>
 800e848:	4606      	mov	r6, r0
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d1e0      	bne.n	800e810 <__ssputs_r+0x5c>
 800e84e:	6921      	ldr	r1, [r4, #16]
 800e850:	4650      	mov	r0, sl
 800e852:	f7ff feb7 	bl	800e5c4 <_free_r>
 800e856:	230c      	movs	r3, #12
 800e858:	f8ca 3000 	str.w	r3, [sl]
 800e85c:	89a3      	ldrh	r3, [r4, #12]
 800e85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e862:	81a3      	strh	r3, [r4, #12]
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	e7e9      	b.n	800e83e <__ssputs_r+0x8a>
	...

0800e86c <_svfiprintf_r>:
 800e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	4698      	mov	r8, r3
 800e872:	898b      	ldrh	r3, [r1, #12]
 800e874:	061b      	lsls	r3, r3, #24
 800e876:	b09d      	sub	sp, #116	@ 0x74
 800e878:	4607      	mov	r7, r0
 800e87a:	460d      	mov	r5, r1
 800e87c:	4614      	mov	r4, r2
 800e87e:	d510      	bpl.n	800e8a2 <_svfiprintf_r+0x36>
 800e880:	690b      	ldr	r3, [r1, #16]
 800e882:	b973      	cbnz	r3, 800e8a2 <_svfiprintf_r+0x36>
 800e884:	2140      	movs	r1, #64	@ 0x40
 800e886:	f7ff ff09 	bl	800e69c <_malloc_r>
 800e88a:	6028      	str	r0, [r5, #0]
 800e88c:	6128      	str	r0, [r5, #16]
 800e88e:	b930      	cbnz	r0, 800e89e <_svfiprintf_r+0x32>
 800e890:	230c      	movs	r3, #12
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	f04f 30ff 	mov.w	r0, #4294967295
 800e898:	b01d      	add	sp, #116	@ 0x74
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	2340      	movs	r3, #64	@ 0x40
 800e8a0:	616b      	str	r3, [r5, #20]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8a6:	2320      	movs	r3, #32
 800e8a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8b0:	2330      	movs	r3, #48	@ 0x30
 800e8b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea50 <_svfiprintf_r+0x1e4>
 800e8b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8ba:	f04f 0901 	mov.w	r9, #1
 800e8be:	4623      	mov	r3, r4
 800e8c0:	469a      	mov	sl, r3
 800e8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8c6:	b10a      	cbz	r2, 800e8cc <_svfiprintf_r+0x60>
 800e8c8:	2a25      	cmp	r2, #37	@ 0x25
 800e8ca:	d1f9      	bne.n	800e8c0 <_svfiprintf_r+0x54>
 800e8cc:	ebba 0b04 	subs.w	fp, sl, r4
 800e8d0:	d00b      	beq.n	800e8ea <_svfiprintf_r+0x7e>
 800e8d2:	465b      	mov	r3, fp
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	4638      	mov	r0, r7
 800e8da:	f7ff ff6b 	bl	800e7b4 <__ssputs_r>
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f000 80a7 	beq.w	800ea32 <_svfiprintf_r+0x1c6>
 800e8e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8e6:	445a      	add	r2, fp
 800e8e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 809f 	beq.w	800ea32 <_svfiprintf_r+0x1c6>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8fe:	f10a 0a01 	add.w	sl, sl, #1
 800e902:	9304      	str	r3, [sp, #16]
 800e904:	9307      	str	r3, [sp, #28]
 800e906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e90a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e90c:	4654      	mov	r4, sl
 800e90e:	2205      	movs	r2, #5
 800e910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e914:	484e      	ldr	r0, [pc, #312]	@ (800ea50 <_svfiprintf_r+0x1e4>)
 800e916:	f7f1 fc63 	bl	80001e0 <memchr>
 800e91a:	9a04      	ldr	r2, [sp, #16]
 800e91c:	b9d8      	cbnz	r0, 800e956 <_svfiprintf_r+0xea>
 800e91e:	06d0      	lsls	r0, r2, #27
 800e920:	bf44      	itt	mi
 800e922:	2320      	movmi	r3, #32
 800e924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e928:	0711      	lsls	r1, r2, #28
 800e92a:	bf44      	itt	mi
 800e92c:	232b      	movmi	r3, #43	@ 0x2b
 800e92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e932:	f89a 3000 	ldrb.w	r3, [sl]
 800e936:	2b2a      	cmp	r3, #42	@ 0x2a
 800e938:	d015      	beq.n	800e966 <_svfiprintf_r+0xfa>
 800e93a:	9a07      	ldr	r2, [sp, #28]
 800e93c:	4654      	mov	r4, sl
 800e93e:	2000      	movs	r0, #0
 800e940:	f04f 0c0a 	mov.w	ip, #10
 800e944:	4621      	mov	r1, r4
 800e946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e94a:	3b30      	subs	r3, #48	@ 0x30
 800e94c:	2b09      	cmp	r3, #9
 800e94e:	d94b      	bls.n	800e9e8 <_svfiprintf_r+0x17c>
 800e950:	b1b0      	cbz	r0, 800e980 <_svfiprintf_r+0x114>
 800e952:	9207      	str	r2, [sp, #28]
 800e954:	e014      	b.n	800e980 <_svfiprintf_r+0x114>
 800e956:	eba0 0308 	sub.w	r3, r0, r8
 800e95a:	fa09 f303 	lsl.w	r3, r9, r3
 800e95e:	4313      	orrs	r3, r2
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	46a2      	mov	sl, r4
 800e964:	e7d2      	b.n	800e90c <_svfiprintf_r+0xa0>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	1d19      	adds	r1, r3, #4
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	9103      	str	r1, [sp, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bfbb      	ittet	lt
 800e972:	425b      	neglt	r3, r3
 800e974:	f042 0202 	orrlt.w	r2, r2, #2
 800e978:	9307      	strge	r3, [sp, #28]
 800e97a:	9307      	strlt	r3, [sp, #28]
 800e97c:	bfb8      	it	lt
 800e97e:	9204      	strlt	r2, [sp, #16]
 800e980:	7823      	ldrb	r3, [r4, #0]
 800e982:	2b2e      	cmp	r3, #46	@ 0x2e
 800e984:	d10a      	bne.n	800e99c <_svfiprintf_r+0x130>
 800e986:	7863      	ldrb	r3, [r4, #1]
 800e988:	2b2a      	cmp	r3, #42	@ 0x2a
 800e98a:	d132      	bne.n	800e9f2 <_svfiprintf_r+0x186>
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	1d1a      	adds	r2, r3, #4
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	9203      	str	r2, [sp, #12]
 800e994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e998:	3402      	adds	r4, #2
 800e99a:	9305      	str	r3, [sp, #20]
 800e99c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea60 <_svfiprintf_r+0x1f4>
 800e9a0:	7821      	ldrb	r1, [r4, #0]
 800e9a2:	2203      	movs	r2, #3
 800e9a4:	4650      	mov	r0, sl
 800e9a6:	f7f1 fc1b 	bl	80001e0 <memchr>
 800e9aa:	b138      	cbz	r0, 800e9bc <_svfiprintf_r+0x150>
 800e9ac:	9b04      	ldr	r3, [sp, #16]
 800e9ae:	eba0 000a 	sub.w	r0, r0, sl
 800e9b2:	2240      	movs	r2, #64	@ 0x40
 800e9b4:	4082      	lsls	r2, r0
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	3401      	adds	r4, #1
 800e9ba:	9304      	str	r3, [sp, #16]
 800e9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9c0:	4824      	ldr	r0, [pc, #144]	@ (800ea54 <_svfiprintf_r+0x1e8>)
 800e9c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9c6:	2206      	movs	r2, #6
 800e9c8:	f7f1 fc0a 	bl	80001e0 <memchr>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d036      	beq.n	800ea3e <_svfiprintf_r+0x1d2>
 800e9d0:	4b21      	ldr	r3, [pc, #132]	@ (800ea58 <_svfiprintf_r+0x1ec>)
 800e9d2:	bb1b      	cbnz	r3, 800ea1c <_svfiprintf_r+0x1b0>
 800e9d4:	9b03      	ldr	r3, [sp, #12]
 800e9d6:	3307      	adds	r3, #7
 800e9d8:	f023 0307 	bic.w	r3, r3, #7
 800e9dc:	3308      	adds	r3, #8
 800e9de:	9303      	str	r3, [sp, #12]
 800e9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e2:	4433      	add	r3, r6
 800e9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9e6:	e76a      	b.n	800e8be <_svfiprintf_r+0x52>
 800e9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	e7a8      	b.n	800e944 <_svfiprintf_r+0xd8>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	3401      	adds	r4, #1
 800e9f6:	9305      	str	r3, [sp, #20]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	f04f 0c0a 	mov.w	ip, #10
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea04:	3a30      	subs	r2, #48	@ 0x30
 800ea06:	2a09      	cmp	r2, #9
 800ea08:	d903      	bls.n	800ea12 <_svfiprintf_r+0x1a6>
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0c6      	beq.n	800e99c <_svfiprintf_r+0x130>
 800ea0e:	9105      	str	r1, [sp, #20]
 800ea10:	e7c4      	b.n	800e99c <_svfiprintf_r+0x130>
 800ea12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea16:	4604      	mov	r4, r0
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e7f0      	b.n	800e9fe <_svfiprintf_r+0x192>
 800ea1c:	ab03      	add	r3, sp, #12
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	462a      	mov	r2, r5
 800ea22:	4b0e      	ldr	r3, [pc, #56]	@ (800ea5c <_svfiprintf_r+0x1f0>)
 800ea24:	a904      	add	r1, sp, #16
 800ea26:	4638      	mov	r0, r7
 800ea28:	f3af 8000 	nop.w
 800ea2c:	1c42      	adds	r2, r0, #1
 800ea2e:	4606      	mov	r6, r0
 800ea30:	d1d6      	bne.n	800e9e0 <_svfiprintf_r+0x174>
 800ea32:	89ab      	ldrh	r3, [r5, #12]
 800ea34:	065b      	lsls	r3, r3, #25
 800ea36:	f53f af2d 	bmi.w	800e894 <_svfiprintf_r+0x28>
 800ea3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea3c:	e72c      	b.n	800e898 <_svfiprintf_r+0x2c>
 800ea3e:	ab03      	add	r3, sp, #12
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	462a      	mov	r2, r5
 800ea44:	4b05      	ldr	r3, [pc, #20]	@ (800ea5c <_svfiprintf_r+0x1f0>)
 800ea46:	a904      	add	r1, sp, #16
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f000 f879 	bl	800eb40 <_printf_i>
 800ea4e:	e7ed      	b.n	800ea2c <_svfiprintf_r+0x1c0>
 800ea50:	0801193f 	.word	0x0801193f
 800ea54:	08011949 	.word	0x08011949
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	0800e7b5 	.word	0x0800e7b5
 800ea60:	08011945 	.word	0x08011945

0800ea64 <_printf_common>:
 800ea64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea68:	4616      	mov	r6, r2
 800ea6a:	4698      	mov	r8, r3
 800ea6c:	688a      	ldr	r2, [r1, #8]
 800ea6e:	690b      	ldr	r3, [r1, #16]
 800ea70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea74:	4293      	cmp	r3, r2
 800ea76:	bfb8      	it	lt
 800ea78:	4613      	movlt	r3, r2
 800ea7a:	6033      	str	r3, [r6, #0]
 800ea7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea80:	4607      	mov	r7, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	b10a      	cbz	r2, 800ea8a <_printf_common+0x26>
 800ea86:	3301      	adds	r3, #1
 800ea88:	6033      	str	r3, [r6, #0]
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	0699      	lsls	r1, r3, #26
 800ea8e:	bf42      	ittt	mi
 800ea90:	6833      	ldrmi	r3, [r6, #0]
 800ea92:	3302      	addmi	r3, #2
 800ea94:	6033      	strmi	r3, [r6, #0]
 800ea96:	6825      	ldr	r5, [r4, #0]
 800ea98:	f015 0506 	ands.w	r5, r5, #6
 800ea9c:	d106      	bne.n	800eaac <_printf_common+0x48>
 800ea9e:	f104 0a19 	add.w	sl, r4, #25
 800eaa2:	68e3      	ldr	r3, [r4, #12]
 800eaa4:	6832      	ldr	r2, [r6, #0]
 800eaa6:	1a9b      	subs	r3, r3, r2
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	dc26      	bgt.n	800eafa <_printf_common+0x96>
 800eaac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eab0:	6822      	ldr	r2, [r4, #0]
 800eab2:	3b00      	subs	r3, #0
 800eab4:	bf18      	it	ne
 800eab6:	2301      	movne	r3, #1
 800eab8:	0692      	lsls	r2, r2, #26
 800eaba:	d42b      	bmi.n	800eb14 <_printf_common+0xb0>
 800eabc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eac0:	4641      	mov	r1, r8
 800eac2:	4638      	mov	r0, r7
 800eac4:	47c8      	blx	r9
 800eac6:	3001      	adds	r0, #1
 800eac8:	d01e      	beq.n	800eb08 <_printf_common+0xa4>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	6922      	ldr	r2, [r4, #16]
 800eace:	f003 0306 	and.w	r3, r3, #6
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	bf02      	ittt	eq
 800ead6:	68e5      	ldreq	r5, [r4, #12]
 800ead8:	6833      	ldreq	r3, [r6, #0]
 800eada:	1aed      	subeq	r5, r5, r3
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	bf0c      	ite	eq
 800eae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eae4:	2500      	movne	r5, #0
 800eae6:	4293      	cmp	r3, r2
 800eae8:	bfc4      	itt	gt
 800eaea:	1a9b      	subgt	r3, r3, r2
 800eaec:	18ed      	addgt	r5, r5, r3
 800eaee:	2600      	movs	r6, #0
 800eaf0:	341a      	adds	r4, #26
 800eaf2:	42b5      	cmp	r5, r6
 800eaf4:	d11a      	bne.n	800eb2c <_printf_common+0xc8>
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	e008      	b.n	800eb0c <_printf_common+0xa8>
 800eafa:	2301      	movs	r3, #1
 800eafc:	4652      	mov	r2, sl
 800eafe:	4641      	mov	r1, r8
 800eb00:	4638      	mov	r0, r7
 800eb02:	47c8      	blx	r9
 800eb04:	3001      	adds	r0, #1
 800eb06:	d103      	bne.n	800eb10 <_printf_common+0xac>
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb10:	3501      	adds	r5, #1
 800eb12:	e7c6      	b.n	800eaa2 <_printf_common+0x3e>
 800eb14:	18e1      	adds	r1, r4, r3
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	2030      	movs	r0, #48	@ 0x30
 800eb1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb1e:	4422      	add	r2, r4
 800eb20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb28:	3302      	adds	r3, #2
 800eb2a:	e7c7      	b.n	800eabc <_printf_common+0x58>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	4622      	mov	r2, r4
 800eb30:	4641      	mov	r1, r8
 800eb32:	4638      	mov	r0, r7
 800eb34:	47c8      	blx	r9
 800eb36:	3001      	adds	r0, #1
 800eb38:	d0e6      	beq.n	800eb08 <_printf_common+0xa4>
 800eb3a:	3601      	adds	r6, #1
 800eb3c:	e7d9      	b.n	800eaf2 <_printf_common+0x8e>
	...

0800eb40 <_printf_i>:
 800eb40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb44:	7e0f      	ldrb	r7, [r1, #24]
 800eb46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb48:	2f78      	cmp	r7, #120	@ 0x78
 800eb4a:	4691      	mov	r9, r2
 800eb4c:	4680      	mov	r8, r0
 800eb4e:	460c      	mov	r4, r1
 800eb50:	469a      	mov	sl, r3
 800eb52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb56:	d807      	bhi.n	800eb68 <_printf_i+0x28>
 800eb58:	2f62      	cmp	r7, #98	@ 0x62
 800eb5a:	d80a      	bhi.n	800eb72 <_printf_i+0x32>
 800eb5c:	2f00      	cmp	r7, #0
 800eb5e:	f000 80d2 	beq.w	800ed06 <_printf_i+0x1c6>
 800eb62:	2f58      	cmp	r7, #88	@ 0x58
 800eb64:	f000 80b9 	beq.w	800ecda <_printf_i+0x19a>
 800eb68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb70:	e03a      	b.n	800ebe8 <_printf_i+0xa8>
 800eb72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb76:	2b15      	cmp	r3, #21
 800eb78:	d8f6      	bhi.n	800eb68 <_printf_i+0x28>
 800eb7a:	a101      	add	r1, pc, #4	@ (adr r1, 800eb80 <_printf_i+0x40>)
 800eb7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb80:	0800ebd9 	.word	0x0800ebd9
 800eb84:	0800ebed 	.word	0x0800ebed
 800eb88:	0800eb69 	.word	0x0800eb69
 800eb8c:	0800eb69 	.word	0x0800eb69
 800eb90:	0800eb69 	.word	0x0800eb69
 800eb94:	0800eb69 	.word	0x0800eb69
 800eb98:	0800ebed 	.word	0x0800ebed
 800eb9c:	0800eb69 	.word	0x0800eb69
 800eba0:	0800eb69 	.word	0x0800eb69
 800eba4:	0800eb69 	.word	0x0800eb69
 800eba8:	0800eb69 	.word	0x0800eb69
 800ebac:	0800eced 	.word	0x0800eced
 800ebb0:	0800ec17 	.word	0x0800ec17
 800ebb4:	0800eca7 	.word	0x0800eca7
 800ebb8:	0800eb69 	.word	0x0800eb69
 800ebbc:	0800eb69 	.word	0x0800eb69
 800ebc0:	0800ed0f 	.word	0x0800ed0f
 800ebc4:	0800eb69 	.word	0x0800eb69
 800ebc8:	0800ec17 	.word	0x0800ec17
 800ebcc:	0800eb69 	.word	0x0800eb69
 800ebd0:	0800eb69 	.word	0x0800eb69
 800ebd4:	0800ecaf 	.word	0x0800ecaf
 800ebd8:	6833      	ldr	r3, [r6, #0]
 800ebda:	1d1a      	adds	r2, r3, #4
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	6032      	str	r2, [r6, #0]
 800ebe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e09d      	b.n	800ed28 <_printf_i+0x1e8>
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	1d19      	adds	r1, r3, #4
 800ebf2:	6031      	str	r1, [r6, #0]
 800ebf4:	0606      	lsls	r6, r0, #24
 800ebf6:	d501      	bpl.n	800ebfc <_printf_i+0xbc>
 800ebf8:	681d      	ldr	r5, [r3, #0]
 800ebfa:	e003      	b.n	800ec04 <_printf_i+0xc4>
 800ebfc:	0645      	lsls	r5, r0, #25
 800ebfe:	d5fb      	bpl.n	800ebf8 <_printf_i+0xb8>
 800ec00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec04:	2d00      	cmp	r5, #0
 800ec06:	da03      	bge.n	800ec10 <_printf_i+0xd0>
 800ec08:	232d      	movs	r3, #45	@ 0x2d
 800ec0a:	426d      	negs	r5, r5
 800ec0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec10:	4859      	ldr	r0, [pc, #356]	@ (800ed78 <_printf_i+0x238>)
 800ec12:	230a      	movs	r3, #10
 800ec14:	e011      	b.n	800ec3a <_printf_i+0xfa>
 800ec16:	6821      	ldr	r1, [r4, #0]
 800ec18:	6833      	ldr	r3, [r6, #0]
 800ec1a:	0608      	lsls	r0, r1, #24
 800ec1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec20:	d402      	bmi.n	800ec28 <_printf_i+0xe8>
 800ec22:	0649      	lsls	r1, r1, #25
 800ec24:	bf48      	it	mi
 800ec26:	b2ad      	uxthmi	r5, r5
 800ec28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec2a:	4853      	ldr	r0, [pc, #332]	@ (800ed78 <_printf_i+0x238>)
 800ec2c:	6033      	str	r3, [r6, #0]
 800ec2e:	bf14      	ite	ne
 800ec30:	230a      	movne	r3, #10
 800ec32:	2308      	moveq	r3, #8
 800ec34:	2100      	movs	r1, #0
 800ec36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec3a:	6866      	ldr	r6, [r4, #4]
 800ec3c:	60a6      	str	r6, [r4, #8]
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	bfa2      	ittt	ge
 800ec42:	6821      	ldrge	r1, [r4, #0]
 800ec44:	f021 0104 	bicge.w	r1, r1, #4
 800ec48:	6021      	strge	r1, [r4, #0]
 800ec4a:	b90d      	cbnz	r5, 800ec50 <_printf_i+0x110>
 800ec4c:	2e00      	cmp	r6, #0
 800ec4e:	d04b      	beq.n	800ece8 <_printf_i+0x1a8>
 800ec50:	4616      	mov	r6, r2
 800ec52:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec56:	fb03 5711 	mls	r7, r3, r1, r5
 800ec5a:	5dc7      	ldrb	r7, [r0, r7]
 800ec5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec60:	462f      	mov	r7, r5
 800ec62:	42bb      	cmp	r3, r7
 800ec64:	460d      	mov	r5, r1
 800ec66:	d9f4      	bls.n	800ec52 <_printf_i+0x112>
 800ec68:	2b08      	cmp	r3, #8
 800ec6a:	d10b      	bne.n	800ec84 <_printf_i+0x144>
 800ec6c:	6823      	ldr	r3, [r4, #0]
 800ec6e:	07df      	lsls	r7, r3, #31
 800ec70:	d508      	bpl.n	800ec84 <_printf_i+0x144>
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	6861      	ldr	r1, [r4, #4]
 800ec76:	4299      	cmp	r1, r3
 800ec78:	bfde      	ittt	le
 800ec7a:	2330      	movle	r3, #48	@ 0x30
 800ec7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec84:	1b92      	subs	r2, r2, r6
 800ec86:	6122      	str	r2, [r4, #16]
 800ec88:	f8cd a000 	str.w	sl, [sp]
 800ec8c:	464b      	mov	r3, r9
 800ec8e:	aa03      	add	r2, sp, #12
 800ec90:	4621      	mov	r1, r4
 800ec92:	4640      	mov	r0, r8
 800ec94:	f7ff fee6 	bl	800ea64 <_printf_common>
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d14a      	bne.n	800ed32 <_printf_i+0x1f2>
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	b004      	add	sp, #16
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	f043 0320 	orr.w	r3, r3, #32
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	4833      	ldr	r0, [pc, #204]	@ (800ed7c <_printf_i+0x23c>)
 800ecb0:	2778      	movs	r7, #120	@ 0x78
 800ecb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	6831      	ldr	r1, [r6, #0]
 800ecba:	061f      	lsls	r7, r3, #24
 800ecbc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ecc0:	d402      	bmi.n	800ecc8 <_printf_i+0x188>
 800ecc2:	065f      	lsls	r7, r3, #25
 800ecc4:	bf48      	it	mi
 800ecc6:	b2ad      	uxthmi	r5, r5
 800ecc8:	6031      	str	r1, [r6, #0]
 800ecca:	07d9      	lsls	r1, r3, #31
 800eccc:	bf44      	itt	mi
 800ecce:	f043 0320 	orrmi.w	r3, r3, #32
 800ecd2:	6023      	strmi	r3, [r4, #0]
 800ecd4:	b11d      	cbz	r5, 800ecde <_printf_i+0x19e>
 800ecd6:	2310      	movs	r3, #16
 800ecd8:	e7ac      	b.n	800ec34 <_printf_i+0xf4>
 800ecda:	4827      	ldr	r0, [pc, #156]	@ (800ed78 <_printf_i+0x238>)
 800ecdc:	e7e9      	b.n	800ecb2 <_printf_i+0x172>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	f023 0320 	bic.w	r3, r3, #32
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	e7f6      	b.n	800ecd6 <_printf_i+0x196>
 800ece8:	4616      	mov	r6, r2
 800ecea:	e7bd      	b.n	800ec68 <_printf_i+0x128>
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	6825      	ldr	r5, [r4, #0]
 800ecf0:	6961      	ldr	r1, [r4, #20]
 800ecf2:	1d18      	adds	r0, r3, #4
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	062e      	lsls	r6, r5, #24
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	d501      	bpl.n	800ed00 <_printf_i+0x1c0>
 800ecfc:	6019      	str	r1, [r3, #0]
 800ecfe:	e002      	b.n	800ed06 <_printf_i+0x1c6>
 800ed00:	0668      	lsls	r0, r5, #25
 800ed02:	d5fb      	bpl.n	800ecfc <_printf_i+0x1bc>
 800ed04:	8019      	strh	r1, [r3, #0]
 800ed06:	2300      	movs	r3, #0
 800ed08:	6123      	str	r3, [r4, #16]
 800ed0a:	4616      	mov	r6, r2
 800ed0c:	e7bc      	b.n	800ec88 <_printf_i+0x148>
 800ed0e:	6833      	ldr	r3, [r6, #0]
 800ed10:	1d1a      	adds	r2, r3, #4
 800ed12:	6032      	str	r2, [r6, #0]
 800ed14:	681e      	ldr	r6, [r3, #0]
 800ed16:	6862      	ldr	r2, [r4, #4]
 800ed18:	2100      	movs	r1, #0
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	f7f1 fa60 	bl	80001e0 <memchr>
 800ed20:	b108      	cbz	r0, 800ed26 <_printf_i+0x1e6>
 800ed22:	1b80      	subs	r0, r0, r6
 800ed24:	6060      	str	r0, [r4, #4]
 800ed26:	6863      	ldr	r3, [r4, #4]
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed30:	e7aa      	b.n	800ec88 <_printf_i+0x148>
 800ed32:	6923      	ldr	r3, [r4, #16]
 800ed34:	4632      	mov	r2, r6
 800ed36:	4649      	mov	r1, r9
 800ed38:	4640      	mov	r0, r8
 800ed3a:	47d0      	blx	sl
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d0ad      	beq.n	800ec9c <_printf_i+0x15c>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	079b      	lsls	r3, r3, #30
 800ed44:	d413      	bmi.n	800ed6e <_printf_i+0x22e>
 800ed46:	68e0      	ldr	r0, [r4, #12]
 800ed48:	9b03      	ldr	r3, [sp, #12]
 800ed4a:	4298      	cmp	r0, r3
 800ed4c:	bfb8      	it	lt
 800ed4e:	4618      	movlt	r0, r3
 800ed50:	e7a6      	b.n	800eca0 <_printf_i+0x160>
 800ed52:	2301      	movs	r3, #1
 800ed54:	4632      	mov	r2, r6
 800ed56:	4649      	mov	r1, r9
 800ed58:	4640      	mov	r0, r8
 800ed5a:	47d0      	blx	sl
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d09d      	beq.n	800ec9c <_printf_i+0x15c>
 800ed60:	3501      	adds	r5, #1
 800ed62:	68e3      	ldr	r3, [r4, #12]
 800ed64:	9903      	ldr	r1, [sp, #12]
 800ed66:	1a5b      	subs	r3, r3, r1
 800ed68:	42ab      	cmp	r3, r5
 800ed6a:	dcf2      	bgt.n	800ed52 <_printf_i+0x212>
 800ed6c:	e7eb      	b.n	800ed46 <_printf_i+0x206>
 800ed6e:	2500      	movs	r5, #0
 800ed70:	f104 0619 	add.w	r6, r4, #25
 800ed74:	e7f5      	b.n	800ed62 <_printf_i+0x222>
 800ed76:	bf00      	nop
 800ed78:	08011950 	.word	0x08011950
 800ed7c:	08011961 	.word	0x08011961

0800ed80 <memmove>:
 800ed80:	4288      	cmp	r0, r1
 800ed82:	b510      	push	{r4, lr}
 800ed84:	eb01 0402 	add.w	r4, r1, r2
 800ed88:	d902      	bls.n	800ed90 <memmove+0x10>
 800ed8a:	4284      	cmp	r4, r0
 800ed8c:	4623      	mov	r3, r4
 800ed8e:	d807      	bhi.n	800eda0 <memmove+0x20>
 800ed90:	1e43      	subs	r3, r0, #1
 800ed92:	42a1      	cmp	r1, r4
 800ed94:	d008      	beq.n	800eda8 <memmove+0x28>
 800ed96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed9e:	e7f8      	b.n	800ed92 <memmove+0x12>
 800eda0:	4402      	add	r2, r0
 800eda2:	4601      	mov	r1, r0
 800eda4:	428a      	cmp	r2, r1
 800eda6:	d100      	bne.n	800edaa <memmove+0x2a>
 800eda8:	bd10      	pop	{r4, pc}
 800edaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edb2:	e7f7      	b.n	800eda4 <memmove+0x24>

0800edb4 <_sbrk_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4d06      	ldr	r5, [pc, #24]	@ (800edd0 <_sbrk_r+0x1c>)
 800edb8:	2300      	movs	r3, #0
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	602b      	str	r3, [r5, #0]
 800edc0:	f7f2 fc94 	bl	80016ec <_sbrk>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d102      	bne.n	800edce <_sbrk_r+0x1a>
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	b103      	cbz	r3, 800edce <_sbrk_r+0x1a>
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	20001f00 	.word	0x20001f00

0800edd4 <memcpy>:
 800edd4:	440a      	add	r2, r1
 800edd6:	4291      	cmp	r1, r2
 800edd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eddc:	d100      	bne.n	800ede0 <memcpy+0xc>
 800edde:	4770      	bx	lr
 800ede0:	b510      	push	{r4, lr}
 800ede2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ede6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edea:	4291      	cmp	r1, r2
 800edec:	d1f9      	bne.n	800ede2 <memcpy+0xe>
 800edee:	bd10      	pop	{r4, pc}

0800edf0 <_realloc_r>:
 800edf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf4:	4680      	mov	r8, r0
 800edf6:	4615      	mov	r5, r2
 800edf8:	460c      	mov	r4, r1
 800edfa:	b921      	cbnz	r1, 800ee06 <_realloc_r+0x16>
 800edfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	4611      	mov	r1, r2
 800ee02:	f7ff bc4b 	b.w	800e69c <_malloc_r>
 800ee06:	b92a      	cbnz	r2, 800ee14 <_realloc_r+0x24>
 800ee08:	f7ff fbdc 	bl	800e5c4 <_free_r>
 800ee0c:	2400      	movs	r4, #0
 800ee0e:	4620      	mov	r0, r4
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee14:	f000 f81a 	bl	800ee4c <_malloc_usable_size_r>
 800ee18:	4285      	cmp	r5, r0
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	d802      	bhi.n	800ee24 <_realloc_r+0x34>
 800ee1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee22:	d8f4      	bhi.n	800ee0e <_realloc_r+0x1e>
 800ee24:	4629      	mov	r1, r5
 800ee26:	4640      	mov	r0, r8
 800ee28:	f7ff fc38 	bl	800e69c <_malloc_r>
 800ee2c:	4607      	mov	r7, r0
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d0ec      	beq.n	800ee0c <_realloc_r+0x1c>
 800ee32:	42b5      	cmp	r5, r6
 800ee34:	462a      	mov	r2, r5
 800ee36:	4621      	mov	r1, r4
 800ee38:	bf28      	it	cs
 800ee3a:	4632      	movcs	r2, r6
 800ee3c:	f7ff ffca 	bl	800edd4 <memcpy>
 800ee40:	4621      	mov	r1, r4
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7ff fbbe 	bl	800e5c4 <_free_r>
 800ee48:	463c      	mov	r4, r7
 800ee4a:	e7e0      	b.n	800ee0e <_realloc_r+0x1e>

0800ee4c <_malloc_usable_size_r>:
 800ee4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee50:	1f18      	subs	r0, r3, #4
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	bfbc      	itt	lt
 800ee56:	580b      	ldrlt	r3, [r1, r0]
 800ee58:	18c0      	addlt	r0, r0, r3
 800ee5a:	4770      	bx	lr

0800ee5c <_init>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	bf00      	nop
 800ee60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee62:	bc08      	pop	{r3}
 800ee64:	469e      	mov	lr, r3
 800ee66:	4770      	bx	lr

0800ee68 <_fini>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr
